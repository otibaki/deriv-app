{"version":3,"file":"js/core.dtrader-header.4772d4680e095175f65c.js","mappings":"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","sources":["webpack:///./Assets/SvgComponents/header/deriv-logo-short.svg","webpack:///./App/Containers/Layout/header/deriv-short-logo.tsx","webpack:///./App/Components/Layout/Header/toggle-menu-drawer-accounts-os.jsx","webpack:///./App/Containers/Layout/header/dtrader-header.tsx","webpack:///./App/Containers/Layout/header/header-account-actions.tsx","webpack:///./App/Containers/Layout/header/traders-hub-home-button.tsx","webpack:///./App/Containers/SetAccountCurrencyModal/set-currency-modal.jsx","webpack:///./App/Containers/SetAccountCurrencyModal/index.js","webpack:///./App/Containers/new-version-notification.jsx","webpack:///../../hooks/src/useHasActiveRealAccount.ts","webpack:///../../hooks/src/useHasSetCurrency.ts"],"sourcesContent":["import React from \"react\";\nexport default ({\n  styles = {},\n  ...props\n}) => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" {...props}><path d=\"M0 9.33A9.33 9.33 0 019.33 0h5.34A9.33 9.33 0 0124 9.33v5.34A9.33 9.33 0 0114.67 24H9.33A9.33 9.33 0 010 14.67V9.33z\" fill=\"#FF444F\" /><path d=\"M15.06 4.97l-.78 4.4H11.6c-2.51 0-4.9 2.02-5.34 4.53l-.19 1.06c-.44 2.51 1.23 4.54 3.74 4.54h2.24a4.11 4.11 0 003.89-3.3L18 4.5l-2.94.47zm-1.91 10.81c-.1.57-.6 1.03-1.17 1.03h-1.36c-1.13 0-1.88-.92-1.69-2.05l.12-.66a2.55 2.55 0 012.4-2.04h2.36l-.66 3.72z\" fill=\"#fff\" /></svg>;","import React from 'react';\nimport { StaticUrl } from '@deriv/components';\nimport DerivBrandShortLogo from 'Assets/SvgComponents/header/deriv-logo-short.svg';\n\nconst DerivShortLogo = () => {\n    return (\n        <div className='header__menu-left-logo'>\n            <StaticUrl href='/'>\n                <DerivBrandShortLogo />\n            </StaticUrl>\n        </div>\n    );\n};\n\nexport default DerivShortLogo;\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport { Div100vhContainer, Icon, MobileDrawer } from '@deriv/components';\nimport {\n    useAccountTransferVisible,\n    useAuthorize,\n    useIsP2PEnabled,\n    useOauth2,\n    useOnrampVisible,\n    useP2PSettings,\n    usePaymentAgentTransferVisible,\n} from '@deriv/hooks';\nimport { getOSNameWithUAParser, routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\nimport { Analytics } from '@deriv-com/analytics';\n\nimport getRoutesConfig from 'App/Constants/routes-config';\n\nimport MenuLink from './menu-link';\n\nconst ToggleMenuDrawerAccountsOS = observer(() => {\n    const { ui, client, modules } = useStore();\n    const {\n        disableApp,\n        enableApp,\n        is_mobile,\n        is_mobile_language_menu_open,\n        setMobileLanguageMenuOpen,\n        setIsForcedToExitPnv,\n    } = ui;\n    const {\n        account_status,\n        has_wallet,\n        is_authorize,\n        is_logged_in,\n        is_virtual,\n        logout: logoutClient,\n        should_allow_authentication,\n        should_allow_poinc_authentication,\n        landing_company_shortcode: active_account_landing_company,\n        is_proof_of_ownership_enabled,\n        is_passkey_supported,\n    } = client;\n    const { cashier } = modules;\n    const { payment_agent } = cashier;\n    const { is_payment_agent_visible } = payment_agent;\n    const is_account_transfer_visible = useAccountTransferVisible();\n    const { isSuccess } = useAuthorize();\n    const is_onramp_visible = useOnrampVisible();\n    const { data: is_payment_agent_transfer_visible } = usePaymentAgentTransferVisible();\n    const { is_p2p_enabled } = useIsP2PEnabled();\n\n    const { pathname: route } = useLocation();\n\n    const is_trading_hub_category =\n        route === routes.traders_hub || route.startsWith(routes.cashier) || route.startsWith(routes.account);\n\n    const [is_open, setIsOpen] = React.useState(false);\n    const [transitionExit, setTransitionExit] = React.useState(false);\n    const [primary_routes_config, setPrimaryRoutesConfig] = React.useState([]);\n\n    const timeout = React.useRef();\n    const history = useHistory();\n    const {\n        subscribe,\n        rest: { isSubscribed },\n        p2p_settings,\n    } = useP2PSettings();\n\n    React.useEffect(() => {\n        if (isSuccess && !isSubscribed && is_authorize) {\n            subscribe();\n        }\n    }, [isSuccess, p2p_settings, subscribe, isSubscribed, is_authorize]);\n\n    React.useEffect(() => {\n        const processRoutes = () => {\n            const routes_config = getRoutesConfig();\n            setPrimaryRoutesConfig(getFilteredRoutesConfig(routes_config, [routes.account]));\n        };\n\n        if (account_status || should_allow_authentication) {\n            processRoutes();\n        }\n\n        return () => clearTimeout(timeout.current);\n    }, [\n        account_status,\n        should_allow_authentication,\n        has_wallet,\n        is_trading_hub_category,\n        is_mobile,\n        is_passkey_supported,\n        is_p2p_enabled,\n    ]);\n\n    const toggleDrawer = React.useCallback(() => {\n        if (is_mobile_language_menu_open) setMobileLanguageMenuOpen(false);\n        if (!is_open) setIsOpen(!is_open);\n        else {\n            setTransitionExit(true);\n            timeout.current = setTimeout(() => {\n                setIsOpen(false);\n                setTransitionExit(false);\n            }, 400);\n        }\n    }, [is_open, is_mobile_language_menu_open, setMobileLanguageMenuOpen]);\n\n    const handleLogout = React.useCallback(async () => {\n        toggleDrawer();\n        if (window.location.pathname.startsWith(routes.phone_verification)) {\n            setIsForcedToExitPnv(true);\n            // Add a small delay to ensure state is updated before navigation because adding await doesn't work here\n            await new Promise(resolve => setTimeout(resolve, 0));\n        }\n        history.push(routes.traders_hub);\n        await logoutClient();\n    }, [history, logoutClient, toggleDrawer]);\n\n    const { oAuthLogout } = useOauth2({ handleLogout });\n\n    const passkeysMenuOpenActionEventTrack = React.useCallback(() => {\n        Analytics.trackEvent('ce_passkey_account_settings_form', {\n            action: 'open',\n            form_name: 'ce_passkey_account_settings_form',\n            operating_system: getOSNameWithUAParser(),\n        });\n    }, []);\n\n    const getFilteredRoutesConfig = (all_routes_config, routes_to_filter) => {\n        const subroutes_config = all_routes_config.flatMap(i => i.routes || []);\n\n        return routes_to_filter\n            .map(path => all_routes_config.find(r => r.path === path) || subroutes_config.find(r => r.path === path))\n            .filter(route => route);\n    };\n\n    const getRoutesWithSubMenu = (route_config, idx) => {\n        const has_access = route_config.is_authenticated ? is_logged_in : true;\n        if (!has_access) return null;\n\n        if (!route_config.routes) {\n            return (\n                <MobileDrawer.Item key={idx}>\n                    <MenuLink\n                        link_to={route_config.path}\n                        icon={route_config.icon_component}\n                        text={route_config.getTitle()}\n                        onClickLink={toggleDrawer}\n                    />\n                </MobileDrawer.Item>\n            );\n        }\n\n        const has_subroutes = route_config.routes.some(route => route.subroutes);\n        const should_hide_passkeys_route = !is_mobile || !is_passkey_supported;\n\n        const disableRoute = route_path => {\n            if (/financial-assessment/.test(route_path)) {\n                return is_virtual;\n            } else if (/trading-assessment/.test(route_path)) {\n                return is_virtual || active_account_landing_company !== 'maltainvest';\n            } else if (/proof-of-address/.test(route_path) || /proof-of-identity/.test(route_path)) {\n                return !should_allow_authentication;\n            } else if (/proof-of-income/.test(route_path)) {\n                return !should_allow_poinc_authentication;\n            } else if (/proof-of-ownership/.test(route_path)) {\n                return is_virtual || !is_proof_of_ownership_enabled;\n            }\n            return false;\n        };\n\n        const hideRoute = route_path => {\n            if (/passkeys/.test(route_path)) {\n                return should_hide_passkeys_route;\n            } else if (/languages/.test(route_path)) {\n                return has_wallet;\n            }\n            return false;\n        };\n\n        return (\n            <React.Fragment key={idx}>\n                {!has_subroutes &&\n                    route_config.routes.map((route, index) => {\n                        if (\n                            !route.is_invisible &&\n                            (route.path !== routes.cashier_pa || is_payment_agent_visible) &&\n                            (route.path !== routes.cashier_pa_transfer || is_payment_agent_transfer_visible) &&\n                            (route.path !== routes.cashier_p2p || is_p2p_enabled) &&\n                            (route.path !== routes.cashier_onramp || is_onramp_visible) &&\n                            (route.path !== routes.cashier_acc_transfer || is_account_transfer_visible)\n                        ) {\n                            return (\n                                <MobileDrawer.Item key={index}>\n                                    <MenuLink\n                                        link_to={route.path}\n                                        icon={route.icon_component}\n                                        text={route.getTitle()}\n                                        onClickLink={toggleDrawer}\n                                    />\n                                </MobileDrawer.Item>\n                            );\n                        }\n                        return undefined;\n                    })}\n                {has_subroutes &&\n                    route_config.routes.map((route, index) => {\n                        return route.subroutes ? (\n                            <MobileDrawer.SubMenuSection\n                                key={index}\n                                section_icon={route.icon}\n                                section_title={route.getTitle()}\n                            >\n                                {route.subroutes.map((subroute, subindex) => (\n                                    <MenuLink\n                                        key={subindex}\n                                        is_disabled={disableRoute(subroute.path) || subroute.is_disabled}\n                                        link_to={subroute.path}\n                                        text={subroute.getTitle()}\n                                        onClickLink={() => {\n                                            toggleDrawer();\n                                            if (subroute.path === routes.passkeys) {\n                                                passkeysMenuOpenActionEventTrack();\n                                            }\n                                        }}\n                                        is_hidden={hideRoute(subroute.path)}\n                                    />\n                                ))}\n                            </MobileDrawer.SubMenuSection>\n                        ) : (\n                            <MobileDrawer.Item key={index}>\n                                <MenuLink\n                                    link_to={route.path}\n                                    icon={route.icon_component}\n                                    text={route.getTitle()}\n                                    onClickLink={toggleDrawer}\n                                />\n                            </MobileDrawer.Item>\n                        );\n                    })}\n            </React.Fragment>\n        );\n    };\n    return (\n        <React.Fragment>\n            <a id='dt_mobile_drawer_toggle' onClick={toggleDrawer} className='header__mobile-drawer-toggle'>\n                <Icon icon='IcHamburger' width='16px' height='16px' className='header__mobile-drawer-icon' />\n            </a>\n            <MobileDrawer\n                alignment='left'\n                icon_class='header__menu-toggle'\n                is_open={is_open}\n                transitionExit={transitionExit}\n                toggle={toggleDrawer}\n                id='dt_mobile_drawer'\n                enableApp={enableApp}\n                disableApp={disableApp}\n                title={<div>{localize('Account settings')}</div>}\n                height='100vh'\n                width='295px'\n                className='pre-appstore'\n            >\n                <Div100vhContainer height_offset='40px'>\n                    <div className='header__menu-mobile-body-wrapper'>\n                        <React.Fragment>\n                            <MobileDrawer.Body className='tradershub-os-header'>\n                                <div className='header__menu-mobile-platform-switcher' id='mobile_platform_switcher' />\n                                {primary_routes_config.map((route_config, idx) =>\n                                    getRoutesWithSubMenu(route_config, idx)\n                                )}\n                                {is_logged_in && (\n                                    <MobileDrawer.Item onClick={oAuthLogout} className='dc-mobile-drawer__item'>\n                                        <MenuLink icon='IcLogout' text={localize('Log out')} />\n                                    </MobileDrawer.Item>\n                                )}\n                            </MobileDrawer.Body>\n                        </React.Fragment>\n                    </div>\n                </Div100vhContainer>\n            </MobileDrawer>\n        </React.Fragment>\n    );\n});\n\nToggleMenuDrawerAccountsOS.displayName = 'ToggleMenuDrawerAccountsOS';\n\nexport default ToggleMenuDrawerAccountsOS;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport { getDecimalPlaces, platforms, routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { useDevice } from '@deriv-com/ui';\n\nimport { MenuLinks, PlatformSwitcher } from 'App/Components/Layout/Header';\nimport { AccountsInfoLoader } from 'App/Components/Layout/Header/Components/Preloader';\nimport ToggleMenuDrawer from 'App/Components/Layout/Header/toggle-menu-drawer.jsx';\nimport ToggleMenuDrawerAccountsOS from 'App/Components/Layout/Header/toggle-menu-drawer-accounts-os.jsx';\nimport platform_config from 'App/Constants/platform-config';\nimport NewVersionNotification from 'App/Containers/new-version-notification.jsx';\nimport RealAccountSignup from 'App/Containers/RealAccountSignup';\nimport SetAccountCurrencyModal from 'App/Containers/SetAccountCurrencyModal';\n\nimport DerivShortLogo from './deriv-short-logo';\nimport HeaderAccountActions from './header-account-actions';\nimport TradersHubHomeButton from './traders-hub-home-button';\n\nconst DTraderHeader = observer(() => {\n    const { client, common, ui, notifications, traders_hub } = useStore();\n    const {\n        currency,\n        has_any_real_account,\n        is_bot_allowed,\n        is_dxtrade_allowed,\n        is_logged_in,\n        is_logging_in,\n        is_mt5_allowed,\n        is_virtual,\n        is_switching,\n    } = client;\n    const { app_routing_history, platform, current_language, is_from_tradershub_os } = common;\n    const { header_extension, is_app_disabled, is_route_modal_on, toggleReadyToDepositModal, is_real_acc_signup_on } =\n        ui;\n    const { addNotificationMessage, client_notifications, removeNotificationMessage } = notifications;\n    const { setTogglePlatformType } = traders_hub;\n\n    const history = useHistory();\n    const { isDesktop, isMobile } = useDevice();\n\n    const addUpdateNotification = () => addNotificationMessage(client_notifications?.new_version_available);\n    const removeUpdateNotification = React.useCallback(\n        () => removeNotificationMessage({ key: 'new_version_available' }),\n        [removeNotificationMessage]\n    );\n\n    React.useEffect(() => {\n        document.addEventListener('IgnorePWAUpdate', removeUpdateNotification);\n        return () => document.removeEventListener('IgnorePWAUpdate', removeUpdateNotification);\n    }, [removeUpdateNotification]);\n\n    const handleClickCashier = () => {\n        if (!has_any_real_account && is_virtual) {\n            toggleReadyToDepositModal();\n        } else {\n            history.push(routes.cashier_deposit);\n        }\n    };\n\n    const filterPlatformsForClients = payload =>\n        payload.filter(config => {\n            if (config.link_to === routes.mt5) {\n                return !is_logged_in || is_mt5_allowed;\n            }\n            if (config.link_to === routes.dxtrade) {\n                return is_dxtrade_allowed;\n            }\n            if (config.link_to === routes.bot || config.href === routes.smarttrader) {\n                return is_bot_allowed;\n            }\n            return true;\n        });\n\n    return (\n        <header\n            className={classNames('header', {\n                'header--is-disabled': is_app_disabled || is_route_modal_on,\n                'header--is-hidden': platforms[platform] && !is_from_tradershub_os,\n                'header--tradershub_os_mobile': is_logged_in && is_from_tradershub_os && !isDesktop,\n                'header--tradershub_os_desktop': is_logged_in && is_from_tradershub_os && isDesktop,\n            })}\n        >\n            <div className='header__menu-items'>\n                <div className='header__menu-left'>\n                    {!isDesktop ? (\n                        <React.Fragment>\n                            {is_from_tradershub_os ? (\n                                <ToggleMenuDrawerAccountsOS\n                                    platform_config={filterPlatformsForClients(platform_config)}\n                                />\n                            ) : (\n                                <>\n                                    <ToggleMenuDrawer platform_config={filterPlatformsForClients(platform_config)} />\n                                    {header_extension && is_logged_in && (\n                                        <div className='header__menu-left-extensions'>{header_extension}</div>\n                                    )}\n                                </>\n                            )}\n                        </React.Fragment>\n                    ) : (\n                        <React.Fragment>\n                            <DerivShortLogo />\n                            <div className='header__divider' />\n                            <TradersHubHomeButton />\n                            <PlatformSwitcher\n                                app_routing_history={app_routing_history}\n                                platform_config={filterPlatformsForClients(platform_config)}\n                                setTogglePlatformType={setTogglePlatformType}\n                                current_language={current_language}\n                            />\n                        </React.Fragment>\n                    )}\n                    <MenuLinks />\n                </div>\n\n                <div\n                    className={classNames('header__menu-right', {\n                        'header__menu-right--hidden': !isDesktop && is_logging_in,\n                    })}\n                >\n                    {isDesktop && (\n                        <div className='header__menu--dtrader--separator--account'>\n                            <div className='header__menu--dtrader--separator' />\n                        </div>\n                    )}\n                    {(is_logging_in || is_switching) && (\n                        <div\n                            id='dt_core_header_acc-info-preloader'\n                            className={classNames('acc-info__preloader__dtrader', {\n                                'acc-info__preloader__dtrader--no-currency': !currency,\n                                'acc-info__preloader__dtrader--is-crypto': getDecimalPlaces(currency) > 2,\n                            })}\n                        >\n                            <AccountsInfoLoader is_logged_in={is_logged_in} is_mobile={!isDesktop} speed={3} />\n                        </div>\n                    )}\n                    {!is_from_tradershub_os && <HeaderAccountActions onClickDeposit={handleClickCashier} />}\n                </div>\n            </div>\n            {is_real_acc_signup_on && <RealAccountSignup />}\n            <SetAccountCurrencyModal />\n            <NewVersionNotification onUpdate={addUpdateNotification} />\n        </header>\n    );\n});\n\nexport default DTraderHeader;\n","import React from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport { AccountActions } from 'App/Components/Layout/Header';\n\ntype THeaderAccountActions = {\n    onClickDeposit: () => void;\n};\n\nconst HeaderAccountActions = observer(({ onClickDeposit }: THeaderAccountActions) => {\n    const { client, ui, notifications } = useStore();\n    const { account_type, balance, currency, is_eu, is_logged_in, is_virtual } = client;\n    const {\n        account_switcher_disabled_message,\n        disableApp,\n        enableApp,\n        is_account_switcher_disabled,\n        is_accounts_switcher_on,\n        openRealAccountSignup,\n        toggleAccountsDialog,\n    } = ui;\n    const { is_notifications_visible, notifications: notifications_array, toggleNotificationsModal } = notifications;\n    const filtered_notifications = notifications_array.filter(item => !item.only_toast_message);\n    return (\n        <div id='dt_core_header_acc-info-container' className='acc-info__container'>\n            <AccountActions\n                acc_switcher_disabled_message={account_switcher_disabled_message}\n                account_type={account_type}\n                balance={balance}\n                currency={currency}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                is_acc_switcher_on={is_accounts_switcher_on}\n                is_acc_switcher_disabled={is_account_switcher_disabled}\n                is_eu={is_eu}\n                is_notifications_visible={is_notifications_visible}\n                is_logged_in={is_logged_in}\n                is_virtual={is_virtual}\n                onClickDeposit={onClickDeposit}\n                notifications_count={filtered_notifications.length}\n                toggleAccountsDialog={toggleAccountsDialog}\n                toggleNotifications={toggleNotificationsModal}\n                openRealAccountSignup={openRealAccountSignup}\n            />\n        </div>\n    );\n});\n\nexport default HeaderAccountActions;\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport classNames from 'classnames';\nimport { Icon, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\n\nconst TradersHubHomeButton = observer(() => {\n    const { ui } = useStore();\n    const { is_dark_mode_on } = ui;\n    const history = useHistory();\n    const location = useLocation();\n    const { pathname } = location;\n\n    const TradersHubIcon = is_dark_mode_on ? 'IcAppstoreHomeDark' : 'IcAppstoreTradersHubHomeUpdated';\n\n    return (\n        <div\n            data-testid='dt_traders_hub_home_button'\n            className={classNames('traders-hub-header__tradershub', {\n                'traders-hub-header__tradershub--active':\n                    pathname === routes.traders_hub || pathname === routes.traders_hub_v2,\n            })}\n            onClick={() => history.push(routes.traders_hub)}\n        >\n            <div className='traders-hub-header__tradershub--home-logo'>\n                <Icon icon={TradersHubIcon} size={is_dark_mode_on ? 15 : 17} />\n            </div>\n            <Text className='traders-hub-header__tradershub--text'>\n                <Localize i18n_default_text=\"Trader's Hub\" />\n            </Text>\n        </div>\n    );\n});\n\nexport default TradersHubHomeButton;\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { useHasSetCurrency } from '@deriv/hooks';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport 'Sass/set-currency-modal.scss';\n\nconst SetAccountCurrencyModal = observer(() => {\n    const { client, ui } = useStore();\n    const { is_virtual } = client;\n    const {\n        is_set_currency_modal_visible: is_visible,\n        openRealAccountSignup: setCurrency,\n        toggleSetCurrencyModal: toggleModal,\n    } = ui;\n    const has_set_currency = useHasSetCurrency();\n\n    return (\n        <Modal\n            id='dt_set_account_currency_modal'\n            has_close_icon={false}\n            is_open={is_visible}\n            small\n            toggleModal={toggleModal}\n            title={\n                !has_set_currency\n                    ? localize('No currency assigned to your account')\n                    : localize('You have an account that needs action')\n            }\n        >\n            <Modal.Body>\n                {localize('Please set a currency for your existing real account before creating another account.')}\n            </Modal.Body>\n            <Modal.Footer>\n                {!is_virtual ? (\n                    <>\n                        <Button has_effect text={localize('Cancel')} onClick={toggleModal} secondary />\n                        <Button\n                            has_effect\n                            text={localize('Set currency')}\n                            onClick={() => {\n                                toggleModal();\n                                // timeout is to ensure no jumpy animation when modals are overlapping enter/exit transitions\n                                setTimeout(() => {\n                                    setCurrency('set_currency');\n                                }, 250);\n                            }}\n                            primary\n                        />\n                    </>\n                ) : (\n                    <Button has_effect text={localize('OK')} onClick={toggleModal} primary />\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n});\n\nexport default SetAccountCurrencyModal;\n","import SetAccountCurrencyModal from './set-currency-modal.jsx';\n\nexport default SetAccountCurrencyModal;\n","import React from 'react';\n\n/**\n * Listens on emitted events to show notification on available updates.\n *  - IgnorePWAUpdate event will prevent notification\n *  - ListenPWAUpdate event is usefull to re-assign notify on update behavior\n * @param onUpdate\n * @return {null}\n * @constructor\n */\nconst NewVersionNotification = ({ onUpdate }) => {\n    React.useEffect(() => {\n        const removeUpdateListener = () => {\n            document.removeEventListener('UpdateAvailable', onUpdate);\n        };\n\n        const addUpdateListener = () => {\n            document.addEventListener('UpdateAvailable', onUpdate);\n        };\n\n        document.addEventListener('UpdateAvailable', onUpdate);\n        document.addEventListener('IgnorePWAUpdate', removeUpdateListener);\n        document.addEventListener('ListenPWAUpdate', addUpdateListener);\n\n        return () => {\n            document.removeEventListener('IgnorePWAUpdate', removeUpdateListener);\n            document.removeEventListener('ListenPWAUpdate', addUpdateListener);\n            document.removeEventListener('UpdateAvailable', onUpdate);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return null;\n};\n\nexport default NewVersionNotification;\n","import { useStore } from '@deriv/stores';\n\nconst useHasActiveRealAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n\n    const has_active_real_account = active_accounts.some(account => account.is_virtual === 0);\n\n    return has_active_real_account;\n};\n\nexport default useHasActiveRealAccount;\n","import { useStore } from '@deriv/stores';\nimport useHasActiveRealAccount from './useHasActiveRealAccount';\n\nconst useHasSetCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n    const has_active_real_account = useHasActiveRealAccount();\n\n    const has_real_account = account_list\n        .filter(account => !account.is_virtual)\n        .some(account => account.title !== 'Real' && account.title !== 'Investment');\n\n    const has_set_currency = has_real_account || !has_active_real_account;\n\n    return has_set_currency;\n};\n\nexport default useHasSetCurrency;\n"],"names":["_ref","styles","props","_objectWithoutProperties","_excluded","_jsxs","_objectSpread","xmlns","width","height","fill","children","_jsx","d","DerivShortLogo","className","StaticUrl","href","DerivBrandShortLogo","ToggleMenuDrawerAccountsOS","observer","ui","client","modules","useStore","disableApp","enableApp","is_mobile","is_mobile_language_menu_open","setMobileLanguageMenuOpen","setIsForcedToExitPnv","account_status","has_wallet","is_authorize","is_logged_in","is_virtual","logout","logoutClient","should_allow_authentication","should_allow_poinc_authentication","landing_company_shortcode","active_account_landing_company","is_proof_of_ownership_enabled","is_passkey_supported","cashier","payment_agent","is_payment_agent_visible","is_account_transfer_visible","useAccountTransferVisible","isSuccess","useAuthorize","is_onramp_visible","useOnrampVisible","data","is_payment_agent_transfer_visible","usePaymentAgentTransferVisible","is_p2p_enabled","useIsP2PEnabled","pathname","route","useLocation","is_trading_hub_category","routes","traders_hub","startsWith","account","is_open","setIsOpen","React","transitionExit","setTransitionExit","primary_routes_config","setPrimaryRoutesConfig","timeout","history","useHistory","subscribe","rest","isSubscribed","p2p_settings","useP2PSettings","processRoutes","routes_config","getRoutesConfig","getFilteredRoutesConfig","clearTimeout","current","toggleDrawer","setTimeout","handleLogout","async","window","location","phone_verification","Promise","resolve","push","oAuthLogout","useOauth2","passkeysMenuOpenActionEventTrack","Analytics","trackEvent","action","form_name","operating_system","getOSNameWithUAParser","all_routes_config","routes_to_filter","subroutes_config","flatMap","i","map","path","find","r","filter","id","onClick","Icon","icon","MobileDrawer","alignment","icon_class","toggle","title","localize","Div100vhContainer","height_offset","Body","route_config","idx","getRoutesWithSubMenu","is_authenticated","Item","MenuLink","link_to","icon_component","text","getTitle","onClickLink","has_subroutes","some","subroutes","should_hide_passkeys_route","hideRoute","route_path","test","index","is_invisible","cashier_pa","cashier_pa_transfer","cashier_p2p","cashier_onramp","cashier_acc_transfer","SubMenuSection","section_icon","section_title","subroute","subindex","is_disabled","passkeys","is_hidden","displayName","common","notifications","currency","has_any_real_account","is_bot_allowed","is_dxtrade_allowed","is_logging_in","is_mt5_allowed","is_switching","app_routing_history","platform","current_language","is_from_tradershub_os","header_extension","is_app_disabled","is_route_modal_on","toggleReadyToDepositModal","is_real_acc_signup_on","addNotificationMessage","client_notifications","removeNotificationMessage","setTogglePlatformType","isDesktop","isMobile","useDevice","removeUpdateNotification","key","document","addEventListener","removeEventListener","filterPlatformsForClients","payload","config","mt5","dxtrade","bot","smarttrader","classNames","platforms","TradersHubHomeButton","PlatformSwitcher","platform_config","_Fragment","ToggleMenuDrawer","MenuLinks","getDecimalPlaces","AccountsInfoLoader","speed","HeaderAccountActions","onClickDeposit","handleClickCashier","cashier_deposit","RealAccountSignup","SetAccountCurrencyModal","NewVersionNotification","onUpdate","addUpdateNotification","new_version_available","account_type","balance","is_eu","account_switcher_disabled_message","is_account_switcher_disabled","is_accounts_switcher_on","openRealAccountSignup","toggleAccountsDialog","is_notifications_visible","notifications_array","toggleNotificationsModal","filtered_notifications","item","only_toast_message","AccountActions","acc_switcher_disabled_message","is_acc_switcher_on","is_acc_switcher_disabled","notifications_count","length","toggleNotifications","is_dark_mode_on","TradersHubIcon","traders_hub_v2","size","Text","Localize","i18n_default_text","is_set_currency_modal_visible","is_visible","setCurrency","toggleSetCurrencyModal","toggleModal","has_set_currency","useHasSetCurrency","Modal","has_close_icon","small","Footer","Button","has_effect","primary","secondary","removeUpdateListener","addUpdateListener","useHasActiveRealAccount","active_accounts","account_list","has_active_real_account"],"sourceRoot":""}