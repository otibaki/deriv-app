{"version":3,"file":"js/core.reset-email-modal.f2493acee4d59e274bf6.js","mappings":"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","sources":["webpack:///../../account/src/Components/sent-email-modal/sent-email-modal.tsx","webpack:///../../account/src/Components/sent-email-modal/index.ts","webpack:///./App/Containers/ConfirmEmailModal/confirm-email-modal.tsx","webpack:///./App/Containers/ResetEmailModal/index.ts","webpack:///./App/Containers/ResetEmailModal/reset-email-modal.tsx"],"sourcesContent":["import { ReactElement } from 'react';\nimport { Localize, useTranslations, localize } from '@deriv-com/translations';\nimport { Div100vhContainer, Icon, MobileDialog, Modal, SendEmailTemplate, Text, Popover } from '@deriv/components';\nimport { getPlatformSettings, CFD_PLATFORMS } from '@deriv/shared';\nimport { useDevice } from '@deriv-com/ui';\nimport { Chat } from '@deriv/utils';\n\ntype TSentEmailModal = {\n    identifier_title: string;\n    is_modal_when_mobile?: boolean;\n    is_open: boolean;\n    has_live_chat?: boolean;\n    onClickSendEmail: (prop?: string) => void;\n    onClose: () => void;\n};\n\ntype TNoEmailContentItem = {\n    key: string;\n    icon: string;\n    content: string | ReactElement;\n};\n\nconst getNoEmailContentStrings = (): TNoEmailContentItem[] => {\n    return [\n        {\n            key: 'email_spam',\n            icon: 'IcEmailSpam',\n            content: localize('The email is in your spam folder (Sometimes things get lost there).'),\n        },\n        {\n            key: 'wrong_email',\n            icon: 'IcEmail',\n            content: localize(\n                'You accidentally gave us another email address (Usually a work or a personal one instead of the one you meant).'\n            ),\n        },\n        {\n            key: 'wrong_typo',\n            icon: 'IcEmailTypo',\n            content: localize('The email address you entered had a mistake or typo (happens to the best of us).'),\n        },\n        {\n            key: 'email_firewall',\n            icon: 'IcEmailFirewall',\n            content: localize(\n                'We canâ€™t deliver the email to this address (Usually because of firewalls or filtering).'\n            ),\n        },\n    ];\n};\n\nconst SentEmailModal = ({\n    identifier_title,\n    is_modal_when_mobile = false,\n    is_open,\n    has_live_chat = false,\n    onClickSendEmail,\n    onClose,\n}: TSentEmailModal) => {\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    const getSubtitle = () => {\n        let subtitle: string | ReactElement = '';\n        switch (identifier_title) {\n            case CFD_PLATFORMS.DXTRADE:\n                subtitle = (\n                    <Localize\n                        i18n_default_text='Please click on the link in the email to change your <0>{{platform_name_dxtrade}}</0> password.'\n                        components={[<span className='send-email-template__subtitle-platform' key={0} />]}\n                        values={{ platform_name_dxtrade: getPlatformSettings('dxtrade').name }}\n                    />\n                );\n                break;\n            case CFD_PLATFORMS.MT5:\n                subtitle = localize('Please click on the link in the email to change your Deriv MT5 password.');\n                break;\n            case 'Google':\n            case 'Facebook':\n                subtitle = localize(\n                    'Check your {{ identifier_title }} account email and click the link in the email to proceed.',\n                    { identifier_title }\n                );\n                break;\n            case 'Change_Email':\n                subtitle = localize('Check your email and click the link in the email to proceed.');\n                break;\n            default:\n                subtitle = localize('Please click on the link in the email to reset your password.');\n                break;\n        }\n        return subtitle;\n    };\n\n    const onLiveChatClick = () => {\n        onClose();\n        Chat.open();\n    };\n\n    const live_chat = has_live_chat ? (\n        <Localize\n            i18n_default_text=\"Still didn't get the email? Please contact us via <0>live chat.</0>\"\n            components={[\n                <span className='send-email-template__footer-live-chat' key={0} onClick={onLiveChatClick}>\n                    <Popover\n                        className='send-email-template__footer-live-chat__link'\n                        classNameBubble='help-centre__tooltip'\n                        alignment='top'\n                        message={localize('Live chat')}\n                        zIndex='9999'\n                    />\n                </span>,\n            ]}\n        />\n    ) : null;\n\n    const sent_email_template: ReactElement = (\n        <SendEmailTemplate\n            className='sent-email'\n            subtitle={getSubtitle()}\n            title={localize('Weâ€™ve sent you an email')}\n            lbl_no_receive={localize(\"Didn't receive the email?\")}\n            txt_resend={localize('Resend email')}\n            txt_resend_in={localize('Resend email in')}\n            onClickSendEmail={onClickSendEmail}\n            live_chat={live_chat}\n        >\n            {getNoEmailContentStrings().map(item => (\n                <div className='sent-email__content' key={item.key}>\n                    <Icon icon={item.icon} size={32} />\n                    <Text size='xxs' as='p'>\n                        {item.content}\n                    </Text>\n                </div>\n            ))}\n        </SendEmailTemplate>\n    );\n\n    if (!isDesktop && !is_modal_when_mobile) {\n        return (\n            <MobileDialog\n                portal_element_id='modal_root'\n                title={localize('Weâ€™ve sent you an email')}\n                wrapper_classname='mt5-email-sent'\n                visible={is_open}\n                onClose={onClose}\n                has_content_scroll\n            >\n                {sent_email_template}\n            </MobileDialog>\n        );\n    }\n\n    return (\n        <Modal\n            className={'sent-email__modal'}\n            is_open={is_open}\n            has_close_icon\n            should_header_stick_body\n            title=''\n            toggleModal={onClose}\n            width='440px'\n        >\n            <Div100vhContainer\n                className='account__scrollbars_container-wrapper'\n                is_disabled={isDesktop}\n                height_offset='80px'\n            >\n                <Modal.Body>\n                    <div\n                        onClick={onClose}\n                        className='send-email-template__close'\n                        data-testid='dt_send_email_template_close'\n                    >\n                        <Icon icon='IcCross' />\n                    </div>\n                    {sent_email_template}\n                </Modal.Body>\n            </Div100vhContainer>\n        </Modal>\n    );\n};\n\nexport default SentEmailModal;\n","import SentEmailModal from './sent-email-modal';\n\nexport default SentEmailModal;\n","import React from 'react';\nimport { Button, Modal, Text } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport SentEmailModal from '@deriv/account/src/Components/sent-email-modal';\nimport { observer, useStore } from '@deriv/stores';\nimport { WS, removeActionParam } from '@deriv/shared';\nimport { TSocketError, TSocketRequest, TSocketResponse } from '@deriv/api/types';\n\ntype TConfirmEmailModal = {\n    changed_email: string;\n    is_open: boolean;\n    onClose: () => void;\n    prev_email: string;\n    setErrorMessage: React.Dispatch<React.SetStateAction<string>>;\n    setEmailValue: React.Dispatch<React.SetStateAction<string>>;\n};\n\nexport const ConfirmEmailModal = observer(\n    ({ changed_email, is_open, onClose, prev_email, setErrorMessage, setEmailValue }: TConfirmEmailModal) => {\n        const [email_request, setEmailRequest] = React.useState<null | TSocketRequest<'change_email'>>(null);\n        const [is_send_email_modal_open, setIsSendEmailModalOpen] = React.useState(false);\n        const [is_modal_open, setIsModalOpen] = React.useState(is_open);\n\n        const { client } = useStore();\n        const { verification_code, setVerificationCode } = client;\n\n        const handleSubmit = () => {\n            const api_request: TSocketRequest<'change_email'> = {\n                change_email: 'verify',\n                new_email: changed_email,\n                verification_code: verification_code.request_email,\n            };\n\n            setEmailRequest(prev => ({ ...prev, ...api_request }));\n\n            WS.changeEmail(api_request).then(\n                (response: TSocketResponse<'change_email'> & TSocketError<'change_email'>) => {\n                    setIsModalOpen(false);\n                    if (response.error) {\n                        onClose();\n                        setEmailValue(changed_email);\n                        setErrorMessage(response.error.message);\n                    } else {\n                        setIsSendEmailModalOpen(true);\n                    }\n                    removeActionParam('request_email');\n                    setVerificationCode('', 'request_email');\n                }\n            );\n        };\n\n        const resendEmail = () => {\n            WS.changeEmail(email_request);\n        };\n\n        if (is_send_email_modal_open) {\n            return (\n                <SentEmailModal\n                    is_open={is_send_email_modal_open}\n                    onClose={() => setIsSendEmailModalOpen(false)}\n                    identifier_title={'Change_Email'}\n                    onClickSendEmail={resendEmail}\n                    has_live_chat\n                    is_modal_when_mobile\n                />\n            );\n        }\n        return (\n            <Modal\n                is_open={is_modal_open}\n                should_header_stick_body\n                title={<Localize i18n_default_text='Are you sure?' />}\n                toggleModal={onClose}\n                width='440px'\n                has_close_icon={false}\n            >\n                <React.Fragment>\n                    <div className='email-confirmation'>\n                        <Text as='p' color='prominent' size='xs' align='left'>\n                            <Localize\n                                i18n_default_text='Are you sure you want to update email <0>{{prev_email}}</0> to <1>{{changed_email}}</1>?'\n                                values={{ prev_email, changed_email }}\n                                components={[\n                                    <strong key={0} />,\n                                    <strong key={1} className='email-confirmation__currentEmail' />,\n                                ]}\n                            />\n                        </Text>\n                    </div>\n                    <Modal.Footer>\n                        <Button onClick={onClose} has_effect text={localize('Cancel')} secondary large />\n                        <Button\n                            className='email-change_button'\n                            has_effect\n                            onClick={() => {\n                                handleSubmit();\n                            }}\n                            primary\n                            large\n                        >\n                            <Localize i18n_default_text='Confirm' />\n                        </Button>\n                    </Modal.Footer>\n                </React.Fragment>\n            </Modal>\n        );\n    }\n);\n","import ResetEmailModal from './reset-email-modal';\n\nexport default ResetEmailModal;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Formik, Form, FormikErrors } from 'formik';\nimport { Button, Dialog, Text, Input } from '@deriv/components';\nimport { validEmail, getErrorMessages } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { ConfirmEmailModal } from '../ConfirmEmailModal/confirm-email-modal';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TResetEmailInitValues = {\n    email: string;\n};\n\nconst ResetEmailModal = observer(() => {\n    const { ui, client } = useStore();\n    const { disableApp, enableApp, is_loading, is_reset_email_modal_visible: is_visible, toggleResetEmailModal } = ui;\n    const { email } = client;\n    const [is_confirm_email_modal_open, setIsConfirmResetEmailModal] = React.useState(false);\n    const [email_error_msg, setEmailErrorMsg] = React.useState('');\n    const [email_value, setEmailValue] = React.useState('');\n\n    const handleSubmit = (values: TResetEmailInitValues) => {\n        setEmailValue(values.email);\n        setIsConfirmResetEmailModal(true);\n    };\n\n    const validateReset = (values: TResetEmailInitValues) => {\n        const errors: FormikErrors<TResetEmailInitValues> = {};\n\n        if (!values.email) {\n            errors.email = localize('The email input should not be empty.');\n        } else if (!validEmail(values.email)) {\n            errors.email = getErrorMessages().email();\n        }\n\n        return errors;\n    };\n\n    const reset_initial_values: TResetEmailInitValues = { email: email_value };\n\n    if (is_confirm_email_modal_open) {\n        return (\n            <ConfirmEmailModal\n                changed_email={email_value}\n                is_open={is_confirm_email_modal_open}\n                onClose={() => setIsConfirmResetEmailModal(false)}\n                prev_email={email}\n                setErrorMessage={setEmailErrorMsg}\n                setEmailValue={setEmailValue}\n            />\n        );\n    }\n\n    return (\n        <Formik\n            initialValues={reset_initial_values}\n            initialStatus={{ reset_complete: false, error_msg: '' }}\n            validate={validateReset}\n            onSubmit={handleSubmit}\n        >\n            {({ errors, values, touched, isSubmitting, handleBlur, handleChange, setFieldTouched, status }) => (\n                <Dialog\n                    is_visible={is_visible}\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    is_loading={is_loading}\n                    dismissable={status.error_msg || email_error_msg}\n                    onConfirm={() => toggleResetEmailModal(false)}\n                    is_closed_on_cancel={false}\n                >\n                    <div className='reset-email'>\n                        <Form>\n                            <React.Fragment>\n                                {status.reset_complete ? (\n                                    <div className='reset-email__email-selection'>\n                                        <Text as='p' weight='bold' className='reset-email__heading'>\n                                            <Localize i18n_default_text='Your password has been changed' />\n                                        </Text>\n                                        <Text align='center' as='p' size='xxs' className='reset-email__subtext'>\n                                            <Localize i18n_default_text='We will now redirect you to the login page.' />\n                                        </Text>\n                                    </div>\n                                ) : (\n                                    <div className='reset-email__email-selection'>\n                                        <Text as='p' align='left' weight='bold' className='reset-email__heading'>\n                                            <Localize i18n_default_text='Enter a new email address' />\n                                        </Text>\n                                        <Text\n                                            as='p'\n                                            color='prominent'\n                                            size='xs'\n                                            align='left'\n                                            className='reset-email__descripton'\n                                        >\n                                            <Localize i18n_default_text=\"You'll log in to your Deriv account with this email address.\" />\n                                        </Text>\n                                        <fieldset className='reset-email__fieldset'>\n                                            <Input\n                                                data-lpignore='true'\n                                                type='text'\n                                                name='email'\n                                                id={'email'}\n                                                placeholder={localize('Email address')}\n                                                value={values.email}\n                                                required\n                                                error={(touched.email && errors.email) || email_error_msg}\n                                                onBlur={handleBlur}\n                                                onChange={e => {\n                                                    setEmailErrorMsg('');\n                                                    setFieldTouched('email', true);\n                                                    handleChange(e);\n                                                }}\n                                            />\n                                        </fieldset>\n                                        <Button\n                                            className={classNames('reset-email__btn', {\n                                                'reset-email__btn--disabled':\n                                                    !values.email || errors.email || isSubmitting,\n                                            })}\n                                            type='submit'\n                                            is_disabled={\n                                                !values.email || !!errors.email || isSubmitting || !!email_error_msg\n                                            }\n                                            primary\n                                            large\n                                        >\n                                            <Localize i18n_default_text='Confirm' />\n                                        </Button>\n                                    </div>\n                                )}\n                            </React.Fragment>\n                        </Form>\n                    </div>\n                </Dialog>\n            )}\n        </Formik>\n    );\n});\n\nexport default ResetEmailModal;\n"],"names":["_ref","identifier_title","is_modal_when_mobile","is_open","has_live_chat","onClickSendEmail","onClose","isDesktop","useDevice","localize","useTranslations","live_chat","_jsx","Localize","i18n_default_text","components","className","onClick","onLiveChatClick","Chat","open","children","Popover","classNameBubble","alignment","message","zIndex","sent_email_template","SendEmailTemplate","subtitle","getSubtitle","CFD_PLATFORMS","DXTRADE","values","platform_name_dxtrade","getPlatformSettings","name","MT5","title","lbl_no_receive","txt_resend","txt_resend_in","key","icon","content","map","item","_jsxs","Icon","size","Text","as","Modal","has_close_icon","should_header_stick_body","toggleModal","width","Div100vhContainer","is_disabled","height_offset","Body","MobileDialog","portal_element_id","wrapper_classname","visible","has_content_scroll","ConfirmEmailModal","observer","changed_email","prev_email","setErrorMessage","setEmailValue","email_request","setEmailRequest","React","is_send_email_modal_open","setIsSendEmailModalOpen","is_modal_open","setIsModalOpen","client","useStore","verification_code","setVerificationCode","resendEmail","WS","changeEmail","SentEmailModal","color","align","Footer","Button","has_effect","text","secondary","large","handleSubmit","api_request","change_email","new_email","request_email","prev","_objectSpread","then","response","error","removeActionParam","primary","ui","disableApp","enableApp","is_loading","is_reset_email_modal_visible","is_visible","toggleResetEmailModal","email","is_confirm_email_modal_open","setIsConfirmResetEmailModal","email_error_msg","setEmailErrorMsg","email_value","reset_initial_values","Formik","initialValues","initialStatus","reset_complete","error_msg","validate","errors","validEmail","getErrorMessages","onSubmit","touched","isSubmitting","handleBlur","handleChange","setFieldTouched","status","Dialog","dismissable","onConfirm","is_closed_on_cancel","Form","weight","Input","type","id","placeholder","value","required","onBlur","onChange","e","classNames"],"sourceRoot":""}