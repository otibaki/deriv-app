{"version":3,"file":"js/core.4061.1d55ecada6b35b97f2a0.js","mappings":"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","sources":["webpack:///./App/Components/Layout/Header/Components/Preloader/accounts-info.jsx","webpack:///./App/Components/Layout/Header/Components/Preloader/accounts-item.jsx","webpack:///./App/Components/Layout/Header/Components/Preloader/platform-switcher.jsx","webpack:///./App/Components/Layout/Header/account-info-wrapper.tsx","webpack:///./App/Components/Layout/Header/menu-links.jsx","webpack:///./App/Components/Layout/Header/account-actions.jsx","webpack:///./App/Components/Layout/Header/login-button.jsx","webpack:///./App/Components/Layout/Header/menu-link.tsx","webpack:///./App/Components/Layout/Header/platform-dropdown.jsx","webpack:///./App/Components/Layout/Header/platform-switcher.jsx","webpack:///./App/Components/Layout/Header/signup-button.jsx","webpack:///./App/Components/Layout/Header/Components/ToggleMenu/menu-title.tsx","webpack:///./App/Components/Layout/Header/Components/ToggleMenu/mobile-language-menu.tsx","webpack:///./App/Components/Layout/Header/toggle-menu-drawer.jsx","webpack:///./App/Components/Elements/Notifications/empty-notification.tsx","webpack:///./App/Containers/NotificationsDialog/notifications-clear-all-footer.tsx","webpack:///./App/Containers/NotificationsDialog/notifications-list.tsx","webpack:///./App/Containers/NotificationsDialog/notification-list-wrapper.tsx","webpack:///./App/Containers/NotificationsDialog/index.ts","webpack:///./App/Containers/NotificationsDialog/notifications-dialog.tsx","webpack:///./App/Components/Layout/Header/toggle-notifications.jsx","webpack:///./App/Components/Layout/Header/wallets/wallet-badge.tsx","webpack:///./App/Containers/AccountSwitcherWallet/account-switcher-wallet-item.tsx","webpack:///./App/Containers/AccountSwitcherWallet/account-switcher-wallet-list.tsx","webpack:///./App/Containers/AccountSwitcherWallet/account-switcher-wallet.tsx","webpack:///./App/Containers/AccountSwitcherWallet/account-switcher-wallet-mobile.tsx","webpack:///./App/Components/Layout/Header/wallets/account-info-wallets.tsx","webpack:///./App/Components/Layout/Header/wallets/account-actions-wallets.tsx","webpack:///./App/Constants/platform-config.ts","webpack:///../../hooks/src/useAccountTransferVisible.ts","webpack:///../../hooks/src/useAuthorize.ts","webpack:///../../hooks/src/useHasMaltaInvestAccount.ts","webpack:///../../hooks/src/useHasSvgAccount.ts","webpack:///../../hooks/src/useIsP2PEnabled.ts","webpack:///../../hooks/src/useIsRealAccountNeededForCashier.ts","webpack:///../../hooks/src/useOnrampVisible.ts","webpack:///../../hooks/src/useP2PNotificationCount.ts","webpack:///../../hooks/src/useP2PSettings.ts","webpack:///../../hooks/src/usePaymentAgentTransferVisible.ts","webpack:///../../hooks/src/useStoreLinkedWalletsAccounts.ts","webpack:///../../hooks/src/useStoreWalletAccountsList.ts"],"sourcesContent":["import ContentLoader from 'react-content-loader';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AccountsInfoLoader = ({ is_mobile, is_logged_in, speed }) => (\n    <ContentLoader\n        height={is_mobile ? 42 : 46}\n        width={is_mobile ? 216 : 350}\n        speed={speed}\n        backgroundColor={'var(--general-section-1)'}\n        foregroundColor={'var(--general-hover)'}\n    >\n        {is_logged_in ? <LoggedInPreloader is_mobile={is_mobile} /> : <LoggedOutPreloader is_mobile={is_mobile} />}\n    </ContentLoader>\n);\n\nconst LoggedOutPreloader = ({ is_mobile }) => (\n    <React.Fragment>\n        <rect x={is_mobile ? 42 : 166} y='8' rx='4' ry='4' width='66' height='32' />\n        <rect x={is_mobile ? 120 : 250} y='8' rx='4' ry='4' width='80' height='32' />\n    </React.Fragment>\n);\n\nconst LoggedInPreloader = ({ is_mobile }) => (\n    <>\n        {is_mobile ? (\n            <React.Fragment>\n                <circle cx='97' cy='22' r='13' />\n                <circle cx='59' cy='22' r='13' />\n                <rect x='128' y='19' rx='4' ry='4' width='76' height='7' />\n            </React.Fragment>\n        ) : (\n            <React.Fragment>\n                <circle cx='14' cy='22' r='12' />\n                <circle cx='58' cy='22' r='12' />\n                <rect x='150' y='20' rx='4' ry='4' width='76' height='7' />\n                <circle cx='118' cy='24' r='13' />\n                <rect x='87' y='8' rx='4' ry='4' width='1' height='30' />\n                <rect x='250' y='8' rx='4' ry='4' width='82' height='32' />\n            </React.Fragment>\n        )}\n    </>\n);\n\nAccountsInfoLoader.propTypes = {\n    speed: PropTypes.number,\n    is_mobile: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n};\n\nexport { AccountsInfoLoader };\n","import ContentLoader from 'react-content-loader';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AccountsItemLoader = ({ speed }) => (\n    <ContentLoader\n        height={24}\n        width={246}\n        speed={speed}\n        backgroundColor={'var(--general-section-1)'}\n        foregroundColor={'var(--general-hover)'}\n    >\n        <circle cx='18' cy='13' r='10' />\n        <rect x='36' y='3' rx='4' ry='4' width='108' height='20' />\n        <rect x='175' y='3' rx='4' ry='4' width='70' height='20' />\n    </ContentLoader>\n);\n\nAccountsItemLoader.propTypes = {\n    speed: PropTypes.number,\n};\n\nexport { AccountsItemLoader };\n","import ContentLoader from 'react-content-loader';\nimport React from 'react';\n\nconst PlatformSwitcherLoader = ({ is_mobile, speed }) => {\n    const container_margin = 16;\n    const element_spacing = is_mobile ? 16 : 8;\n    const logo_size = is_mobile ? 40 : 32;\n    const name_height = 16;\n    const name_width = 90;\n    const name_x = container_margin + logo_size + element_spacing;\n    const name_y = is_mobile ? 12 : 8;\n    const container_width = container_margin * 2 + logo_size + element_spacing + name_width;\n    return (\n        <ContentLoader\n            height={logo_size}\n            width={container_width}\n            speed={speed}\n            backgroundColor={'var(--general-section-1)'}\n            foregroundColor={'var(--general-hover)'}\n        >\n            <rect x={container_margin} y='0' rx='4' ry='4' width={logo_size} height={logo_size} />\n            <rect x={name_x} y={name_y} rx='4' ry='4' width={name_width} height={name_height} />\n        </ContentLoader>\n    );\n};\n\nexport { PlatformSwitcherLoader };\n","import React from 'react';\nimport { Popover } from '@deriv/components';\nimport { isBot } from '@deriv/shared';\n\ntype TAccountInfoWrapper = {\n    is_disabled?: boolean;\n    is_mobile?: boolean;\n    is_dtrader_v2?: boolean;\n    disabled_message?: string;\n};\n\nconst AccountInfoWrapper = ({\n    is_disabled,\n    is_mobile,\n    is_dtrader_v2,\n    disabled_message,\n    children,\n}: React.PropsWithChildren<TAccountInfoWrapper>) =>\n    is_disabled && disabled_message ? (\n        <Popover\n            alignment={(isBot() || is_dtrader_v2) && is_mobile ? 'bottom' : 'left'}\n            message={disabled_message}\n            zIndex='99999'\n        >\n            {children}\n        </Popover>\n    ) : (\n        <React.Fragment>{children}</React.Fragment>\n    );\n\nexport default AccountInfoWrapper;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Text, Icon, Counter } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { BinaryLink } from '../../Routes';\nimport { observer, useStore } from '@deriv/stores';\nimport { routes, startPerformanceEventTimer } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { useP2PNotificationCount, useIsRealAccountNeededForCashier } from '@deriv/hooks';\nimport { useHistory } from 'react-router';\nimport './menu-links.scss';\n\nconst MenuItems = ({ id, text, icon, link_to, handleClickCashier }) => {\n    return (\n        <BinaryLink\n            id={id}\n            key={icon}\n            to={link_to}\n            className='header__menu-link'\n            active_class='header__menu-link--active'\n            onClick={handleClickCashier}\n        >\n            <Text size='m' line_height='xs' title={text} className='header__menu-link-text'>\n                {icon}\n                {text}\n            </Text>\n        </BinaryLink>\n    );\n};\n\nconst ReportTab = () => (\n    <MenuItems\n        id={'dt_reports_tab'}\n        icon={<Icon icon='IcReports' className='header__icon' />}\n        text={localize('Reports')}\n        link_to={routes.reports}\n    />\n);\n\nconst CashierTab = observer(() => {\n    const { client, ui } = useStore();\n    const { has_any_real_account, is_virtual } = client;\n    const { toggleReadyToDepositModal, toggleNeedRealAccountForCashierModal } = ui;\n    const p2p_notification_count = useP2PNotificationCount();\n    const real_account_needed_for_cashier = useIsRealAccountNeededForCashier();\n\n    const history = useHistory();\n\n    const toggle_modal_routes =\n        window.location.pathname === routes.traders_hub || window.location.pathname === routes.bot;\n\n    const toggleModal = () => {\n        if (toggle_modal_routes && !has_any_real_account) {\n            toggleReadyToDepositModal();\n        } else if (window.location.pathname === routes.traders_hub) {\n            toggleNeedRealAccountForCashierModal();\n        }\n    };\n\n    const handleClickCashier = () => {\n        if ((!has_any_real_account && is_virtual) || real_account_needed_for_cashier) {\n            toggleModal();\n        } else {\n            startPerformanceEventTimer('load_cashier_time');\n            history.push(routes.cashier_deposit);\n        }\n    };\n\n    const cashier_redirect =\n        (toggle_modal_routes && !has_any_real_account && is_virtual) || real_account_needed_for_cashier;\n\n    return (\n        <MenuItems\n            id={'dt_cashier_tab'}\n            icon={\n                <>\n                    <Icon icon='IcCashier' className='header__icon' />\n                    {p2p_notification_count > 0 && (\n                        <Counter className='cashier__counter' count={p2p_notification_count} />\n                    )}\n                </>\n            }\n            text={localize('Cashier')}\n            link_to={!cashier_redirect ? routes.cashier : null}\n            handleClickCashier={handleClickCashier}\n        />\n    );\n});\n\nconst MenuLinks = observer(({ is_traders_hub_routes = false }) => {\n    const { isDesktop } = useDevice();\n    const { i18n } = useTranslation();\n    const { client } = useStore();\n    const { has_wallet, is_logged_in } = client;\n\n    if (!is_logged_in) return <></>;\n\n    return (\n        <div key={`menu-links__${i18n.language}`} className='header__menu-links'>\n            {!is_traders_hub_routes && <ReportTab />}\n            {isDesktop && !has_wallet && <CashierTab />}\n        </div>\n    );\n});\n\nexport { MenuLinks };\n","import * as PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Icon, Popover } from '@deriv/components';\nimport { routes, formatMoney, moduleLoader, isTabletOs } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { LoginButton } from './login-button.jsx';\nimport { SignupButton } from './signup-button.jsx';\nimport ToggleNotifications from './toggle-notifications.jsx';\nimport { BinaryLink } from '../../Routes';\nimport 'Sass/app/_common/components/account-switcher.scss';\nimport { useDevice } from '@deriv-com/ui';\n\nconst AccountInfo = React.lazy(() =>\n    moduleLoader(() =>\n        import(\n            /* webpackChunkName: \"account-info\", webpackPreload: true */ 'App/Components/Layout/Header/account-info.jsx'\n        )\n    )\n);\n\nconst AccountActions = React.memo(\n    ({\n        acc_switcher_disabled_message,\n        account_type,\n        balance,\n        currency,\n        disableApp,\n        enableApp,\n        is_acc_switcher_on,\n        is_acc_switcher_disabled,\n        is_eu,\n        is_logged_in,\n        is_notifications_visible,\n        is_virtual,\n        notifications_count,\n        onClickDeposit,\n        openRealAccountSignup,\n        toggleAccountsDialog,\n        toggleNotifications,\n    }) => {\n        const { isDesktop } = useDevice();\n        const accountSettings = (\n            <BinaryLink className='account-settings-toggle' to={routes.personal_details}>\n                <Icon icon='IcUserOutline' />\n            </BinaryLink>\n        );\n\n        if (is_logged_in) {\n            if (isDesktop) {\n                return (\n                    <React.Fragment>\n                        <ToggleNotifications\n                            count={notifications_count}\n                            is_visible={is_notifications_visible}\n                            toggleDialog={toggleNotifications}\n                            tooltip_message={<Localize i18n_default_text='View notifications' />}\n                            should_disable_pointer_events\n                            showPopover={!isTabletOs}\n                        />\n                        {isTabletOs ? (\n                            accountSettings\n                        ) : (\n                            <Popover\n                                classNameBubble='account-settings-toggle__tooltip'\n                                alignment='bottom'\n                                message={<Localize i18n_default_text='Manage account settings' />}\n                                should_disable_pointer_events\n                                zIndex={9999}\n                            >\n                                {accountSettings}\n                            </Popover>\n                        )}\n                        <React.Suspense fallback={<div />}>\n                            <AccountInfo\n                                acc_switcher_disabled_message={acc_switcher_disabled_message}\n                                account_type={account_type}\n                                balance={\n                                    typeof balance === 'undefined' ? balance : formatMoney(currency, balance, true)\n                                }\n                                is_disabled={is_acc_switcher_disabled}\n                                is_eu={is_eu}\n                                is_virtual={is_virtual}\n                                currency={currency}\n                                is_dialog_on={is_acc_switcher_on}\n                                toggleDialog={toggleAccountsDialog}\n                            />\n                        </React.Suspense>\n                        {!is_virtual && !currency && (\n                            <div className='set-currency'>\n                                <Button\n                                    onClick={() => openRealAccountSignup('set_currency')}\n                                    has_effect\n                                    type='button'\n                                    text={localize('Set currency')}\n                                    primary\n                                />\n                            </div>\n                        )}\n                        {currency && (\n                            <Button\n                                className='acc-info__button'\n                                has_effect\n                                text={localize('Deposit')}\n                                onClick={onClickDeposit}\n                                primary\n                            />\n                        )}\n                    </React.Fragment>\n                );\n            }\n\n            return (\n                <React.Fragment>\n                    <ToggleNotifications\n                        count={notifications_count}\n                        is_visible={is_notifications_visible}\n                        toggleDialog={toggleNotifications}\n                    />\n                    <React.Suspense fallback={<div />}>\n                        <AccountInfo\n                            acc_switcher_disabled_message={acc_switcher_disabled_message}\n                            account_type={account_type}\n                            balance={typeof balance === 'undefined' ? balance : formatMoney(currency, balance, true)}\n                            is_disabled={is_acc_switcher_disabled}\n                            disableApp={disableApp}\n                            enableApp={enableApp}\n                            is_eu={is_eu}\n                            is_virtual={is_virtual}\n                            is_mobile\n                            currency={currency}\n                            is_dialog_on={is_acc_switcher_on}\n                            toggleDialog={toggleAccountsDialog}\n                        />\n                    </React.Suspense>\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <LoginButton className='acc-info__button' />\n                <SignupButton className='acc-info__button' />\n            </React.Fragment>\n        );\n    }\n);\n\nAccountActions.displayName = 'AccountActions';\n\nAccountActions.propTypes = {\n    acc_switcher_disabled_message: PropTypes.string,\n    account_type: PropTypes.string,\n    balance: PropTypes.any,\n    currency: PropTypes.any,\n    is_acc_switcher_disabled: PropTypes.any,\n    is_eu: PropTypes.bool,\n    disableApp: PropTypes.any,\n    enableApp: PropTypes.any,\n    is_acc_switcher_on: PropTypes.any,\n    is_logged_in: PropTypes.any,\n    is_notifications_visible: PropTypes.any,\n    is_virtual: PropTypes.any,\n    notifications_count: PropTypes.any,\n    onClickDeposit: PropTypes.func,\n    openRealAccountSignup: PropTypes.func,\n    toggleAccountsDialog: PropTypes.any,\n    toggleNotifications: PropTypes.any,\n};\n\nexport { AccountActions };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@deriv/components';\nimport { useOauth2 } from '@deriv/hooks';\nimport { redirectToLogin } from '@deriv/shared';\nimport { getLanguage, localize } from '@deriv/translations';\nimport { requestOidcAuthentication } from '@deriv-com/auth-client';\n\nconst LoginButton = ({ className }) => {\n    const { isOAuth2Enabled } = useOauth2({});\n    return (\n        <Button\n            id='dt_login_button'\n            className={className}\n            has_effect\n            text={localize('Log in')}\n            onClick={async () => {\n                if (isOAuth2Enabled) {\n                    await requestOidcAuthentication({\n                        redirectCallbackUri: `${window.location.origin}/callback`,\n                    });\n                }\n                window.LiveChatWidget?.call('hide');\n                redirectToLogin(false, getLanguage());\n            }}\n            tertiary\n        />\n    );\n};\n\nLoginButton.propTypes = {\n    className: PropTypes.string,\n};\n\nexport { LoginButton };\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Icon, Text } from '@deriv/components';\nimport { useIsRealAccountNeededForCashier } from '@deriv/hooks';\nimport { routes, getStaticUrl } from '@deriv/shared';\nimport { isExternalLink } from '@deriv/utils';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\nimport { BinaryLink } from 'App/Components/Routes';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TMenuLink = {\n    data_testid: string;\n    icon: string;\n    is_active: boolean;\n    is_disabled: boolean;\n    is_hidden: boolean;\n    link_to: string;\n    onClickLink: () => void;\n    suffix_icon: string;\n    text: React.ReactNode;\n};\n\nconst MenuLink = observer(\n    ({\n        data_testid,\n        icon = '',\n        is_active,\n        is_disabled,\n        is_hidden,\n        link_to = '',\n        onClickLink,\n        suffix_icon = '',\n        text,\n    }: Partial<TMenuLink>) => {\n        const { ui, client } = useStore();\n        const { isDesktop } = useDevice();\n        const { has_any_real_account, is_virtual } = client;\n        const { setMobileLanguageMenuOpen, toggleReadyToDepositModal, toggleNeedRealAccountForCashierModal } = ui;\n        const real_account_needed_for_cashier = useIsRealAccountNeededForCashier();\n        const is_trade_text = text === localize('Trade');\n        const deriv_static_url = getStaticUrl(link_to);\n        const traders_hub_path = window.location.pathname === routes.traders_hub;\n        const is_languages_link_on_responsive = !isDesktop && link_to === routes.languages;\n        const is_external_link = deriv_static_url && isExternalLink(link_to);\n        const is_cashier_link = [\n            routes.cashier_deposit,\n            routes.cashier_withdrawal,\n            routes.cashier_acc_transfer,\n        ].includes(link_to);\n\n        if (is_hidden) return null;\n\n        if (is_languages_link_on_responsive) {\n            return (\n                <div\n                    className={classNames('header__menu-mobile-link', {\n                        'header__menu-mobile-link--disabled': is_disabled,\n                    })}\n                    onClick={() => setMobileLanguageMenuOpen(true)}\n                    data-testid={data_testid}\n                >\n                    <Icon className='header__menu-mobile-link-icon' icon={icon} />\n                    <span className='header__menu-mobile-link-text'>{text}</span>\n                    {suffix_icon && <Icon className='header__menu-mobile-link-suffix-icon' icon={suffix_icon} />}\n                </div>\n            );\n        }\n        if (real_account_needed_for_cashier && is_cashier_link && traders_hub_path) {\n            const handleClickCashier = () => {\n                onClickLink?.();\n                toggleNeedRealAccountForCashierModal();\n            };\n            return (\n                <div\n                    className={classNames('header__menu-mobile-link', {\n                        'header__menu-mobile-link--disabled': is_disabled,\n                    })}\n                    onClick={handleClickCashier}\n                    data-testid={data_testid}\n                >\n                    <Icon className='header__menu-mobile-link-icon' icon={icon} />\n                    <span className='header__menu-mobile-link-text'>{text}</span>\n                    {suffix_icon && <Icon className='header__menu-mobile-link-suffix-icon' icon={suffix_icon} />}\n                </div>\n            );\n        }\n\n        if (is_cashier_link && is_virtual && !has_any_real_account) {\n            const handleClickCashier = () => {\n                if (traders_hub_path) {\n                    toggleReadyToDepositModal();\n                }\n                onClickLink?.();\n            };\n            return (\n                <div\n                    className={classNames('header__menu-mobile-link', {\n                        'header__menu-mobile-link--disabled': is_disabled,\n                    })}\n                    onClick={handleClickCashier}\n                    data-testid={data_testid}\n                >\n                    <Icon className='header__menu-mobile-link-icon' icon={icon} />\n                    <span className='header__menu-mobile-link-text'>{text}</span>\n                    {suffix_icon && <Icon className='header__menu-mobile-link-suffix-icon' icon={suffix_icon} />}\n                </div>\n            );\n        }\n\n        if (!link_to) {\n            return (\n                <div\n                    className={classNames('header__menu-mobile-link', {\n                        'header__menu-mobile-link--disabled': is_disabled,\n                    })}\n                    data-testid={data_testid}\n                >\n                    <Icon className='header__menu-mobile-link-icon' icon={icon} />\n                    <span className='header__menu-mobile-link-text'>{text}</span>\n                    {suffix_icon && <Icon className='header__menu-mobile-link-suffix-icon' icon={suffix_icon} />}\n                </div>\n            );\n        } else if (is_external_link) {\n            return (\n                <a\n                    className={classNames('header__menu-mobile-link', {\n                        'header__menu-mobile-link--disabled': is_disabled,\n                        'header__menu-mobile-link--active': is_active,\n                    })}\n                    href={link_to}\n                    data-testid={data_testid}\n                >\n                    <Icon className='header__menu-mobile-link-icon' icon={icon} />\n                    <Text\n                        className={is_trade_text ? '' : 'header__menu-mobile-link-text'}\n                        as='h3'\n                        size='xs'\n                        weight={window.location.pathname === routes.trade && is_trade_text ? 'bold' : undefined}\n                    >\n                        {text}\n                    </Text>\n                    {suffix_icon && <Icon className='header__menu-mobile-link-suffix-icon' icon={suffix_icon} />}\n                </a>\n            );\n        }\n\n        return (\n            <BinaryLink\n                to={link_to}\n                className={classNames('header__menu-mobile-link', {\n                    'header__menu-mobile-link--disabled': is_disabled,\n                    'header__menu-mobile-link--active': is_active,\n                })}\n                onClick={onClickLink}\n                data-testid={data_testid}\n            >\n                <Icon className='header__menu-mobile-link-icon' icon={icon} />\n                <Text\n                    className={is_trade_text ? '' : 'header__menu-mobile-link-text'}\n                    as='h3'\n                    size='xs'\n                    weight={window.location.pathname === routes.trade && is_trade_text ? 'bold' : undefined}\n                >\n                    {text}\n                </Text>\n                {suffix_icon && <Icon className='header__menu-mobile-link-suffix-icon' icon={suffix_icon} />}\n            </BinaryLink>\n        );\n    }\n);\n\nexport default MenuLink;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Div100vhContainer, Icon, useOnClickOutside, Text } from '@deriv/components';\nimport { routes, getActivePlatform } from '@deriv/shared';\nimport { BinaryLink } from 'App/Components/Routes';\nimport 'Sass/app/_common/components/platform-dropdown.scss';\nimport { Localize } from '@deriv/translations';\nimport { useHistory } from 'react-router';\nimport { useDevice } from '@deriv-com/ui';\n\nconst PlatformBox = ({ platform: { icon, description } }) => (\n    <React.Fragment>\n        <div className='platform-dropdown__list-platform-background' />\n\n        <div className='platform-switcher__dropdown' data-testid='dt_platform_box_icon'>\n            <Icon icon={icon} height={42} width={150} description={icon} />\n            <p className='platform-dropdown__list-platform-description'>{description()}</p>\n        </div>\n    </React.Fragment>\n);\n\nconst PlatformDropdownContent = ({ platform, app_routing_history }) => {\n    return (\n        (platform.link_to && (\n            <BinaryLink\n                data-testid='dt_platform_dropdown'\n                to={platform.link_to}\n                // This is here because in routes-config it needs to have children, but not in menu\n                exact={platform.link_to === routes.trade}\n                className='platform-dropdown__list-platform'\n                isActive={() => getActivePlatform(app_routing_history) === platform.name}\n                onClick={e => window.location.pathname.startsWith(platform.link_to) && e.preventDefault()}\n            >\n                <PlatformBox platform={platform} />\n            </BinaryLink>\n        )) || (\n            <a\n                data-testid='dt_platform_dropdown_link'\n                href={platform.href}\n                className={`platform-dropdown__list-platform ${\n                    getActivePlatform(app_routing_history) === platform.name ? 'active' : ''\n                }`}\n            >\n                <PlatformBox platform={platform} />\n            </a>\n        )\n    );\n};\n\nconst PlatformDropdown = ({ app_routing_history, closeDrawer, platform_config, setTogglePlatformType }) => {\n    const history = useHistory();\n    const { isDesktop } = useDevice();\n\n    const TradersHubRedirect = () => {\n        return (\n            <div className='platform-dropdown__cta'>\n                <BinaryLink\n                    onClick={() => {\n                        if (!isDesktop) {\n                            history.push(routes.traders_hub);\n                            setTogglePlatformType('cfd');\n                        }\n                        history.push(routes.traders_hub);\n                    }}\n                >\n                    <Text size='xs' weight='bold' align='center' className='platform-dropdown__cta--link'>\n                        <Localize i18n_default_text=\"Looking for CFDs? Go to Trader's Hub\" />\n                    </Text>\n                </BinaryLink>\n            </div>\n        );\n    };\n\n    React.useEffect(() => {\n        window.addEventListener('popstate', closeDrawer);\n        return () => {\n            window.removeEventListener('popstate', closeDrawer);\n        };\n    }, [closeDrawer]);\n\n    const ref = React.useRef();\n\n    const handleClickOutside = event => {\n        if (!event.target.closest('.platform-dropdown__list') && !event.target.closest('.platform-switcher')) {\n            closeDrawer();\n        }\n    };\n\n    useOnClickOutside(ref, handleClickOutside, () => isDesktop);\n\n    const platform_dropdown = (\n        <div className='platform-dropdown'>\n            <Div100vhContainer className='platform-dropdown__list' height_offset='15rem' is_disabled={isDesktop}>\n                {platform_config.map(platform => {\n                    return (\n                        <div key={platform.name} onClick={closeDrawer} ref={ref}>\n                            <PlatformDropdownContent platform={platform} app_routing_history={app_routing_history} />\n                        </div>\n                    );\n                })}\n                <TradersHubRedirect />\n            </Div100vhContainer>\n        </div>\n    );\n\n    if (isDesktop) {\n        return ReactDOM.createPortal(platform_dropdown, document.getElementById('deriv_app'));\n    }\n\n    return ReactDOM.createPortal(platform_dropdown, document.getElementById('mobile_platform_switcher'));\n};\n\nexport { PlatformDropdown, PlatformBox };\n","import 'Sass/app/_common/components/platform-switcher.scss';\n\nimport { useDevice } from '@deriv-com/ui';\nimport { Icon } from '@deriv/components';\nimport { getPlatformInformation } from '@deriv/shared';\nimport { CSSTransition } from 'react-transition-group';\nimport { PlatformDropdown } from './platform-dropdown.jsx';\nimport { PlatformSwitcherLoader } from './Components/Preloader/platform-switcher.jsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\nimport { withRouter } from 'react-router-dom';\n\nconst PlatformSwitcher = ({\n    toggleDrawer,\n    app_routing_history,\n    platform_config = [],\n    current_language,\n    is_landing_company_loaded,\n    is_logged_in,\n    is_logging_in,\n    setTogglePlatformType,\n}) => {\n    const [is_open, setIsOpen] = React.useState(false);\n\n    const is_close_drawer_fired_ref = React.useRef(false);\n\n    const { isDesktop } = useDevice();\n\n    React.useEffect(() => {\n        if (is_close_drawer_fired_ref.current) {\n            if (typeof toggleDrawer === 'function') {\n                toggleDrawer();\n            }\n        }\n        is_close_drawer_fired_ref.current = false;\n    });\n\n    const closeDrawer = () => {\n        setIsOpen(false);\n        is_close_drawer_fired_ref.current = true;\n    };\n\n    return (is_logged_in || is_logging_in ? !is_landing_company_loaded : app_routing_history.length === 0) ? (\n        <div\n            data-testid='dt_platform_switcher_preloader'\n            className={classNames('platform-switcher__preloader', {\n                'platform-switcher__preloader--is-mobile': !isDesktop,\n            })}\n        >\n            <PlatformSwitcherLoader is_mobile={!isDesktop} speed={3} />\n        </div>\n    ) : (\n        <React.Fragment>\n            <div\n                data-testid='dt_platform_switcher'\n                className={classNames(\n                    'platform-switcher',\n                    { 'platform-switcher--active': is_open },\n                    { 'platform-switcher--is-mobile': !isDesktop }\n                )}\n                onClick={() => setIsOpen(!is_open)}\n            >\n                <Icon\n                    className='platform-switcher__icon'\n                    icon={getPlatformInformation(app_routing_history).icon}\n                    description={getPlatformInformation(app_routing_history).header}\n                    width={120}\n                    height={25}\n                />\n\n                <Icon className='platform-switcher__arrow' icon='IcChevronDownBold' />\n            </div>\n            <CSSTransition\n                mountOnEnter\n                appear\n                in={is_open}\n                classNames={{\n                    enterDone: 'platform-dropdown--enter-done',\n                }}\n                timeout={isDesktop && is_open ? 0 : 250}\n                unmountOnExit\n            >\n                <PlatformDropdown\n                    platform_config={platform_config}\n                    closeDrawer={closeDrawer}\n                    current_language={current_language}\n                    app_routing_history={app_routing_history}\n                    setTogglePlatformType={setTogglePlatformType}\n                />\n            </CSSTransition>\n        </React.Fragment>\n    );\n};\n\nPlatformSwitcher.propTypes = {\n    platform_config: PropTypes.array,\n    toggleDrawer: PropTypes.func,\n    current_language: PropTypes.string,\n    app_routing_history: PropTypes.array,\n    is_landing_company_loaded: PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n    is_logging_in: PropTypes.bool,\n    setTogglePlatformType: PropTypes.func,\n};\n\nexport default withRouter(PlatformSwitcher);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@deriv/components';\nimport { redirectToSignUp } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\nconst SignupButton = ({ className }) => (\n    <Button\n        id='dt_signup_button'\n        className={className}\n        has_effect\n        text={localize('Sign up')}\n        onClick={redirectToSignUp}\n        primary\n    />\n);\n\nSignupButton.propTypes = {\n    className: PropTypes.string,\n};\n\nexport { SignupButton };\n","import React from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport { Icon, Text } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { TranslationFlag } from '@deriv/shared';\n\nconst MenuTitle = observer(() => {\n    const { common, ui } = useStore();\n    const { current_language } = common;\n    const { is_mobile_language_menu_open, setMobileLanguageMenuOpen } = ui;\n\n    return (\n        <React.Fragment>\n            <div>{localize('Menu')}</div>\n            <div\n                className='settings-language__language-button_wrapper'\n                onClick={() => {\n                    if (!is_mobile_language_menu_open) {\n                        setMobileLanguageMenuOpen(true);\n                    }\n                }}\n            >\n                {!is_mobile_language_menu_open && (\n                    <React.Fragment>\n                        {TranslationFlag[current_language] ? (\n                            TranslationFlag[current_language](22, 16)\n                        ) : (\n                            //TODOs: remove this when Korean flag is added to quill-icons\n                            <Icon icon={`IcFlag${current_language}`} data_testid='dt_icon' size={18} />\n                        )}\n                        <Text weight='bold' size='xxs' className='ic-settings-language__text'>\n                            <Localize i18n_default_text={current_language} />\n                        </Text>\n                    </React.Fragment>\n                )}\n            </div>\n        </React.Fragment>\n    );\n});\n\nexport default MenuTitle;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { MobileDrawer } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { getAllowedLanguages } from '@deriv-com/translations';\nimport { localize } from '@deriv/translations'; // [TODO:] Remove this once deriv-app is configured to use the new translation lib\nimport { LanguageLink } from 'App/Components/Routes';\nimport { UNSUPPORTED_LANGUAGES } from '@deriv/shared';\n\ntype TMobileLanguageMenu = {\n    expandSubMenu: (prop: boolean) => void;\n    toggleDrawer: () => void;\n};\n\nconst MobileLanguageMenu = observer(({ expandSubMenu, toggleDrawer }: TMobileLanguageMenu) => {\n    const { common, ui } = useStore();\n    const { is_language_changing } = common;\n    const { is_mobile_language_menu_open, setMobileLanguageMenuOpen } = ui;\n\n    const allowed_languages = Object.keys(getAllowedLanguages(UNSUPPORTED_LANGUAGES));\n\n    return (\n        <MobileDrawer.SubMenu\n            is_expanded={is_mobile_language_menu_open}\n            has_subheader\n            submenu_title={localize('Select language')}\n            onToggle={is_expanded => {\n                expandSubMenu(is_expanded);\n                setMobileLanguageMenuOpen(false);\n            }}\n            submenu_toggle_class='dc-mobile-drawer__submenu-toggle--hidden'\n        >\n            <div\n                className={classNames('settings-language__language-container', {\n                    'settings-language__language-container--disabled': is_language_changing,\n                })}\n            >\n                {allowed_languages.map(lang => (\n                    <LanguageLink\n                        key={lang}\n                        is_clickable\n                        lang={lang}\n                        toggleModal={() => {\n                            toggleDrawer();\n                            setMobileLanguageMenuOpen(false);\n                        }}\n                    />\n                ))}\n            </div>\n        </MobileDrawer.SubMenu>\n    );\n});\n\nexport default MobileLanguageMenu;\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { useRemoteConfig } from '@deriv/api';\nimport { Analytics } from '@deriv-com/analytics';\nimport { Div100vhContainer, Icon, MobileDrawer, ToggleSwitch } from '@deriv/components';\nimport {\n    useAccountTransferVisible,\n    useAuthorize,\n    useIsP2PEnabled,\n    useOnrampVisible,\n    usePaymentAgentTransferVisible,\n    useP2PSettings,\n    useOauth2,\n} from '@deriv/hooks';\nimport { getOSNameWithUAParser, getStaticUrl, routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\nimport NetworkStatus from 'App/Components/Layout/Footer';\nimport ServerTime from 'App/Containers/server-time.jsx';\nimport getRoutesConfig from 'App/Constants/routes-config';\nimport LiveChat from 'App/Components/Elements/LiveChat';\nimport WhatsApp from 'App/Components/Elements/WhatsApp';\nimport { MenuTitle, MobileLanguageMenu } from './Components/ToggleMenu';\nimport MenuLink from './menu-link';\nimport PlatformSwitcher from './platform-switcher';\n\nconst ToggleMenuDrawer = observer(({ platform_config }) => {\n    const { common, ui, client, traders_hub, modules } = useStore();\n    const { app_routing_history, current_language } = common;\n    const {\n        disableApp,\n        enableApp,\n        is_mobile,\n        is_mobile_language_menu_open,\n        is_dark_mode_on: is_dark_mode,\n        setDarkMode: toggleTheme,\n        setMobileLanguageMenuOpen,\n        setIsForcedToExitPnv,\n    } = ui;\n    const {\n        account_status,\n        has_wallet,\n        is_authorize,\n        is_logged_in,\n        is_logging_in,\n        is_virtual,\n        logout: logoutClient,\n        should_allow_authentication,\n        should_allow_poinc_authentication,\n        landing_company_shortcode: active_account_landing_company,\n        is_landing_company_loaded,\n        is_proof_of_ownership_enabled,\n        is_eu,\n        is_passkey_supported,\n    } = client;\n    const { cashier } = modules;\n    const { payment_agent } = cashier;\n    const { is_payment_agent_visible } = payment_agent;\n    const { show_eu_related_content, setTogglePlatformType } = traders_hub;\n    const is_account_transfer_visible = useAccountTransferVisible();\n    const { isSuccess } = useAuthorize();\n    const is_onramp_visible = useOnrampVisible();\n    const { data: is_payment_agent_transfer_visible } = usePaymentAgentTransferVisible();\n    const { is_p2p_enabled } = useIsP2PEnabled();\n\n    const { pathname: route } = useLocation();\n\n    const is_trading_hub_category =\n        route === routes.traders_hub || route.startsWith(routes.cashier) || route.startsWith(routes.account);\n\n    const should_show_regulatory_information = is_eu && show_eu_related_content && !is_virtual;\n    const is_traders_hub_route = route === routes.traders_hub;\n\n    const is_wallet_route = route.startsWith(routes.wallets) || route.startsWith(routes.wallets_compare_accounts);\n\n    const { data } = useRemoteConfig(true);\n    const { cs_chat_livechat, cs_chat_whatsapp } = data;\n\n    const [is_open, setIsOpen] = React.useState(false);\n    const [transitionExit, setTransitionExit] = React.useState(false);\n    const [primary_routes_config, setPrimaryRoutesConfig] = React.useState([]);\n    const [is_submenu_expanded, expandSubMenu] = React.useState(false);\n\n    const timeout = React.useRef();\n    const history = useHistory();\n    const {\n        subscribe,\n        rest: { isSubscribed },\n        p2p_settings,\n    } = useP2PSettings();\n\n    const TradersHubIcon = is_dark_mode ? 'IcAppstoreHomeDark' : 'IcAppstoreTradersHubHomeUpdated';\n\n    React.useEffect(() => {\n        if (isSuccess && !isSubscribed && is_authorize) {\n            subscribe();\n        }\n    }, [isSuccess, p2p_settings, subscribe, isSubscribed, is_authorize]);\n\n    React.useEffect(() => {\n        const processRoutes = () => {\n            const routes_config = getRoutesConfig();\n            let primary_routes = [];\n\n            if (is_trading_hub_category) {\n                primary_routes = has_wallet ? [routes.reports, routes.account] : [routes.account, routes.cashier];\n            } else {\n                primary_routes = has_wallet\n                    ? [routes.reports, routes.account]\n                    : [routes.reports, routes.account, routes.cashier];\n            }\n            setPrimaryRoutesConfig(getFilteredRoutesConfig(routes_config, primary_routes));\n        };\n\n        if (account_status || should_allow_authentication) {\n            processRoutes();\n        }\n\n        return () => clearTimeout(timeout.current);\n    }, [\n        account_status,\n        should_allow_authentication,\n        has_wallet,\n        is_trading_hub_category,\n        is_mobile,\n        is_passkey_supported,\n        is_p2p_enabled,\n    ]);\n\n    const toggleDrawer = React.useCallback(() => {\n        if (is_mobile_language_menu_open) setMobileLanguageMenuOpen(false);\n        if (!is_open) setIsOpen(!is_open);\n        else {\n            setTransitionExit(true);\n            timeout.current = setTimeout(() => {\n                setIsOpen(false);\n                setTransitionExit(false);\n            }, 400);\n        }\n        expandSubMenu(false);\n    }, [expandSubMenu, is_open, is_mobile_language_menu_open, setMobileLanguageMenuOpen]);\n\n    const handleLogout = React.useCallback(async () => {\n        toggleDrawer();\n        if (window.location.pathname.startsWith(routes.phone_verification)) {\n            setIsForcedToExitPnv(true);\n            // Add a small delay to ensure state is updated before navigation because adding await doesn't work here\n            await new Promise(resolve => setTimeout(resolve, 0));\n        }\n        history.push(routes.traders_hub);\n        await logoutClient();\n    }, [history, logoutClient, toggleDrawer]);\n\n    const { oAuthLogout } = useOauth2({ handleLogout });\n\n    const passkeysMenuOpenActionEventTrack = React.useCallback(() => {\n        Analytics.trackEvent('ce_passkey_account_settings_form', {\n            action: 'open',\n            form_name: 'ce_passkey_account_settings_form',\n            operating_system: getOSNameWithUAParser(),\n        });\n    }, []);\n\n    const getFilteredRoutesConfig = (all_routes_config, routes_to_filter) => {\n        const subroutes_config = all_routes_config.flatMap(i => i.routes || []);\n\n        return routes_to_filter\n            .map(path => all_routes_config.find(r => r.path === path) || subroutes_config.find(r => r.path === path))\n            .filter(route => route);\n    };\n\n    const getRoutesWithSubMenu = (route_config, idx) => {\n        const has_access = route_config.is_authenticated ? is_logged_in : true;\n        if (!has_access) return null;\n\n        if (!route_config.routes) {\n            return (\n                <MobileDrawer.Item key={idx}>\n                    <MenuLink\n                        link_to={route_config.path}\n                        icon={route_config.icon_component}\n                        text={route_config.getTitle()}\n                        onClickLink={toggleDrawer}\n                    />\n                </MobileDrawer.Item>\n            );\n        }\n\n        const has_subroutes = route_config.routes.some(route => route.subroutes);\n        const should_hide_passkeys_route = !is_mobile || !is_passkey_supported;\n\n        const disableRoute = route_path => {\n            if (/financial-assessment/.test(route_path)) {\n                return is_virtual;\n            } else if (/trading-assessment/.test(route_path)) {\n                return is_virtual || active_account_landing_company !== 'maltainvest';\n            } else if (/proof-of-address/.test(route_path) || /proof-of-identity/.test(route_path)) {\n                return !should_allow_authentication;\n            } else if (/proof-of-income/.test(route_path)) {\n                return !should_allow_poinc_authentication;\n            } else if (/proof-of-ownership/.test(route_path)) {\n                return is_virtual || !is_proof_of_ownership_enabled;\n            }\n            return false;\n        };\n\n        const hideRoute = route_path => {\n            if (/passkeys/.test(route_path)) {\n                return should_hide_passkeys_route;\n            } else if (/languages/.test(route_path)) {\n                return has_wallet;\n            }\n            return false;\n        };\n\n        return (\n            <MobileDrawer.SubMenu\n                key={idx}\n                has_subheader\n                submenu_icon={route_config.icon_component}\n                submenu_title={route_config.getTitle()}\n                submenu_suffix_icon='IcChevronRight'\n                onToggle={expandSubMenu}\n                route_config_path={route_config.path}\n            >\n                {!has_subroutes &&\n                    route_config.routes.map((route, index) => {\n                        if (\n                            !route.is_invisible &&\n                            (route.path !== routes.cashier_pa || is_payment_agent_visible) &&\n                            (route.path !== routes.cashier_pa_transfer || is_payment_agent_transfer_visible) &&\n                            (route.path !== routes.cashier_p2p || is_p2p_enabled) &&\n                            (route.path !== routes.cashier_onramp || is_onramp_visible) &&\n                            (route.path !== routes.cashier_acc_transfer || is_account_transfer_visible)\n                        ) {\n                            return (\n                                <MobileDrawer.Item key={index}>\n                                    <MenuLink\n                                        link_to={route.path}\n                                        icon={route.icon_component}\n                                        text={route.getTitle()}\n                                        onClickLink={toggleDrawer}\n                                    />\n                                </MobileDrawer.Item>\n                            );\n                        }\n                        return undefined;\n                    })}\n                {has_subroutes &&\n                    route_config.routes.map((route, index) => {\n                        return route.subroutes ? (\n                            <MobileDrawer.SubMenuSection\n                                key={index}\n                                section_icon={route.icon}\n                                section_title={route.getTitle()}\n                            >\n                                {route.subroutes.map((subroute, subindex) => (\n                                    <MenuLink\n                                        key={subindex}\n                                        is_disabled={disableRoute(subroute.path) || subroute.is_disabled}\n                                        link_to={subroute.path}\n                                        text={subroute.getTitle()}\n                                        onClickLink={() => {\n                                            toggleDrawer();\n                                            if (subroute.path === routes.passkeys) {\n                                                passkeysMenuOpenActionEventTrack();\n                                            }\n                                        }}\n                                        is_hidden={hideRoute(subroute.path)}\n                                    />\n                                ))}\n                            </MobileDrawer.SubMenuSection>\n                        ) : (\n                            <MobileDrawer.Item key={index}>\n                                <MenuLink\n                                    link_to={route.path}\n                                    icon={route.icon_component}\n                                    text={route.getTitle()}\n                                    onClickLink={toggleDrawer}\n                                />\n                            </MobileDrawer.Item>\n                        );\n                    })}\n            </MobileDrawer.SubMenu>\n        );\n    };\n\n    const HelpCentreRoute = has_border_bottom => {\n        return (\n            <MobileDrawer.Item className={classNames({ 'header__menu-mobile-theme': has_border_bottom })}>\n                <MenuLink\n                    link_to={getStaticUrl('/help-centre')}\n                    icon='IcHelpCentre'\n                    text={localize('Help centre')}\n                    onClickLink={toggleDrawer}\n                />\n            </MobileDrawer.Item>\n        );\n    };\n\n    return (\n        <React.Fragment>\n            <a id='dt_mobile_drawer_toggle' onClick={toggleDrawer} className='header__mobile-drawer-toggle'>\n                <Icon icon='IcHamburger' width='16px' height='16px' className='header__mobile-drawer-icon' />\n            </a>\n            <MobileDrawer\n                alignment='left'\n                icon_class='header__menu-toggle'\n                is_open={is_open}\n                transitionExit={transitionExit}\n                toggle={toggleDrawer}\n                id='dt_mobile_drawer'\n                enableApp={enableApp}\n                disableApp={disableApp}\n                title={<MenuTitle />}\n                height='100vh'\n                width='295px'\n                className='pre-appstore'\n            >\n                <Div100vhContainer height_offset='40px'>\n                    <div className='header__menu-mobile-body-wrapper'>\n                        <React.Fragment>\n                            {!(is_traders_hub_route || is_wallet_route) && (\n                                <MobileDrawer.SubHeader\n                                    className={classNames({\n                                        'dc-mobile-drawer__subheader--hidden': is_submenu_expanded,\n                                    })}\n                                >\n                                    <PlatformSwitcher\n                                        app_routing_history={app_routing_history}\n                                        is_mobile\n                                        is_landing_company_loaded={is_landing_company_loaded}\n                                        is_logged_in={is_logged_in}\n                                        is_logging_in={is_logging_in}\n                                        platform_config={platform_config}\n                                        toggleDrawer={toggleDrawer}\n                                        current_language={current_language}\n                                        setTogglePlatformType={setTogglePlatformType}\n                                    />\n                                </MobileDrawer.SubHeader>\n                            )}\n\n                            <MobileDrawer.Body className={is_traders_hub_route || is_wallet_route ? 'no-padding' : ''}>\n                                <div className='header__menu-mobile-platform-switcher' id='mobile_platform_switcher' />\n                                <MobileDrawer.Item>\n                                    <MenuLink\n                                        link_to={getStaticUrl('/')}\n                                        icon='IcDerivShortLogo'\n                                        text='Deriv.com'\n                                        onClickLink={toggleDrawer}\n                                    />\n                                </MobileDrawer.Item>\n                                <MobileDrawer.Item>\n                                    <MenuLink\n                                        link_to={routes.traders_hub}\n                                        icon={TradersHubIcon}\n                                        text={localize(\"Trader's Hub\")}\n                                        onClickLink={toggleDrawer}\n                                        is_active={route === routes.traders_hub}\n                                    />\n                                </MobileDrawer.Item>\n                                {route !== routes.traders_hub && (\n                                    <MobileDrawer.Item>\n                                        <MenuLink\n                                            link_to={routes.trade}\n                                            icon='IcTrade'\n                                            text={localize('Trade')}\n                                            onClickLink={toggleDrawer}\n                                            is_active={route === routes.trade}\n                                        />\n                                    </MobileDrawer.Item>\n                                )}\n                                {primary_routes_config.map((route_config, idx) =>\n                                    getRoutesWithSubMenu(route_config, idx)\n                                )}\n                                {!has_wallet && (\n                                    <MobileDrawer.Item\n                                        className='header__menu-mobile-theme'\n                                        onClick={e => {\n                                            e.preventDefault();\n                                            toggleTheme(!is_dark_mode);\n                                        }}\n                                    >\n                                        <div className={classNames('header__menu-mobile-link')}>\n                                            <Icon className='header__menu-mobile-link-icon' icon={'IcTheme'} />\n                                            <span className='header__menu-mobile-link-text'>\n                                                {localize('Dark theme')}\n                                            </span>\n                                            <ToggleSwitch\n                                                id='dt_mobile_drawer_theme_toggler'\n                                                handleToggle={() => toggleTheme(!is_dark_mode)}\n                                                is_enabled={is_dark_mode}\n                                            />\n                                        </div>\n                                    </MobileDrawer.Item>\n                                )}\n                                {HelpCentreRoute()}\n                                {is_logged_in ? (\n                                    <React.Fragment>\n                                        <MobileDrawer.Item>\n                                            <MenuLink\n                                                link_to={routes.account_limits}\n                                                icon='IcAccountLimits'\n                                                text={localize('Account Limits')}\n                                                onClickLink={toggleDrawer}\n                                            />\n                                        </MobileDrawer.Item>\n                                        <MobileDrawer.Item\n                                            className={\n                                                should_show_regulatory_information\n                                                    ? ''\n                                                    : 'header__menu-mobile-theme--trader-hub'\n                                            }\n                                        >\n                                            <MenuLink\n                                                link_to={getStaticUrl('/responsible')}\n                                                icon='IcVerification'\n                                                text={localize('Responsible trading')}\n                                                onClickLink={toggleDrawer}\n                                            />\n                                        </MobileDrawer.Item>\n                                        {should_show_regulatory_information && (\n                                            <MobileDrawer.Item className='header__menu-mobile-theme--trader-hub'>\n                                                <MenuLink\n                                                    link_to={getStaticUrl('/regulatory')}\n                                                    icon='IcRegulatoryInformation'\n                                                    text={localize('Regulatory information')}\n                                                    onClickLink={toggleDrawer}\n                                                />\n                                            </MobileDrawer.Item>\n                                        )}\n                                    </React.Fragment>\n                                ) : (\n                                    <MobileDrawer.Item className='header__menu-mobile-theme--trader-hub'>\n                                        <MenuLink\n                                            link_to={getStaticUrl('/responsible')}\n                                            icon='IcVerification'\n                                            text={localize('Responsible trading')}\n                                            onClickLink={toggleDrawer}\n                                        />\n                                    </MobileDrawer.Item>\n                                )}\n                                {cs_chat_whatsapp && (\n                                    <MobileDrawer.Item className='header__menu-mobile-whatsapp'>\n                                        <WhatsApp onClick={toggleDrawer} />\n                                    </MobileDrawer.Item>\n                                )}\n                                {cs_chat_livechat && (\n                                    <MobileDrawer.Item className='header__menu-mobile-livechat'>\n                                        <LiveChat />\n                                    </MobileDrawer.Item>\n                                )}\n                                {is_logged_in && (\n                                    <MobileDrawer.Item onClick={oAuthLogout} className='dc-mobile-drawer__item'>\n                                        <MenuLink icon='IcLogout' text={localize('Log out')} />\n                                    </MobileDrawer.Item>\n                                )}\n                            </MobileDrawer.Body>\n                            <MobileDrawer.Footer className={is_logged_in ? 'dc-mobile-drawer__footer--servertime' : ''}>\n                                <ServerTime is_mobile />\n                                <NetworkStatus is_mobile />\n                            </MobileDrawer.Footer>\n                            {is_mobile_language_menu_open && (\n                                <MobileLanguageMenu expandSubMenu={expandSubMenu} toggleDrawer={toggleDrawer} />\n                            )}\n                        </React.Fragment>\n                    </div>\n                </Div100vhContainer>\n            </MobileDrawer>\n        </React.Fragment>\n    );\n});\n\nToggleMenuDrawer.displayName = 'ToggleMenuDrawer';\n\nexport default ToggleMenuDrawer;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\nconst EmptyNotification = () => (\n    <div className='notifications-empty__container'>\n        <div className='notifications-empty'>\n            <Icon\n                data_testid='dt_ic_box_icon'\n                icon='IcBox'\n                className='notifications-empty__icon'\n                size={64}\n                color='secondary'\n            />\n            <div className='notifications-empty__content'>\n                <Text\n                    as='h4'\n                    size='xs'\n                    weight='bold'\n                    align='center'\n                    color='less-prominent'\n                    className='notifications-empty__header'\n                >\n                    <Localize i18n_default_text='No notifications' />\n                </Text>\n                <Text size='xxs' color='less-prominent' align='center'>\n                    <Localize i18n_default_text='You have yet to receive any notifications' />\n                </Text>\n            </div>\n        </div>\n    </div>\n);\n\nexport default EmptyNotification;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Button, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TNotificationsClearAllFooter = {\n    clearNotifications: () => void;\n};\n\nconst NotificationsClearAllFooter = observer(({ clearNotifications }: TNotificationsClearAllFooter) => {\n    const { notifications, ui } = useStore();\n    const { is_notifications_empty } = notifications;\n    const { is_mobile } = ui;\n\n    return (\n        <React.Fragment>\n            <div className='notifications-dialog__separator' />\n            <div\n                data-testid='dt_clear_all_footer_button'\n                className={classNames('notifications-dialog__footer', {\n                    'notifications-dialog__content--empty': is_notifications_empty,\n                    'notifications-dialog__content--sticky': is_mobile,\n                })}\n            >\n                <Button\n                    className={classNames('dc-btn--secondary', 'notifications-dialog__clear')}\n                    disabled={is_notifications_empty}\n                    onClick={clearNotifications}\n                >\n                    <Text size='xxs' color='prominent' weight='bold'>\n                        <Localize i18n_default_text='Clear All' />\n                    </Text>\n                </Button>\n            </div>\n        </React.Fragment>\n    );\n});\n\nexport default NotificationsClearAllFooter;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Button, Icon, Text } from '@deriv/components';\nimport { isEmptyObject, toTitleCase, TRoute } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Analytics } from '@deriv-com/analytics';\nimport { BinaryLink } from 'App/Components/Routes';\nimport { useHistory } from 'react-router-dom';\nimport EmptyNotification from 'App/Components/Elements/Notifications/empty-notification';\n\ntype TActionProps = ReturnType<typeof useStore>['notifications']['notifications'][0]['action'];\ntype TNotificationMessage = ReturnType<typeof useStore>['notifications']['notifications'][0];\n\nconst NotificationsList = observer(() => {\n    const { notifications } = useStore();\n    const { notifications: notifications_array, toggleNotificationsModal } = notifications;\n    const history = useHistory();\n\n    const getNotificationItemIcon = (item: TNotificationMessage) => {\n        const { type } = item;\n        if (['contract_sold', 'info', 'news', 'promotions'].includes(type)) {\n            return 'IcAlertInfo';\n        } else if (type === 'p2p_completed_order') {\n            return 'IcAlertAnnounce';\n        }\n        return `IcAlert${toTitleCase(type)}`;\n    };\n\n    const getButtonSettings = (item: TNotificationMessage): TActionProps | undefined => {\n        const object_key = ['action', 'secondary_btn', 'cta_btn', 'primary_btn'].find(\n            obj_key => !isEmptyObject(item[obj_key as keyof TNotificationMessage])\n        );\n        switch (object_key) {\n            case 'primary_btn':\n                return item.primary_btn;\n            case 'cta_btn':\n                return item.cta_btn;\n            case 'secondary_btn':\n                return item.secondary_btn;\n            case 'action':\n                return item.action;\n            default:\n                return undefined;\n        }\n    };\n\n    const onActionTrackEvent = (key: string) => {\n        Analytics.trackEvent('ce_notification_form', {\n            action: 'click_cta',\n            form_name: 'ce_notification_form',\n            notification_key: key,\n        });\n    };\n    const filtered_notifications = notifications_array.filter(item => !item.only_toast_message);\n    return (\n        <React.Fragment>\n            {filtered_notifications.length > 0 ? (\n                filtered_notifications.map(item => (\n                    <div className='notifications-item' key={item.key}>\n                        <Text as='h2' className='notifications-item__title' weight='bold' size='xs' color='prominent'>\n                            {item.type && (\n                                <Icon\n                                    icon={getNotificationItemIcon(item)}\n                                    className={classNames('notifications-item__title-icon', {\n                                        [`notifications-item__title-icon--${item.type}`]: item.type,\n                                    })}\n                                />\n                            )}\n                            {item.header}\n                        </Text>\n                        <div className='notifications-item__message'>{item.message}</div>\n                        <div className='notifications-item__action'>\n                            {!!getButtonSettings(item) && (\n                                <React.Fragment>\n                                    {getButtonSettings(item)?.route && !getButtonSettings(item)?.onClick ? (\n                                        <BinaryLink\n                                            onClick={() => {\n                                                const buttonSettings = getButtonSettings(item);\n                                                if (buttonSettings?.onClick) {\n                                                    buttonSettings.onClick();\n                                                }\n                                                toggleNotificationsModal();\n                                                onActionTrackEvent(item.key);\n                                            }}\n                                            active_class='notifications-item'\n                                            className={classNames(\n                                                'dc-btn',\n                                                'dc-btn--secondary',\n                                                'notifications-item__cta-button'\n                                            )}\n                                            to={getButtonSettings(item)?.route}\n                                        >\n                                            <Text weight='bold' size='xxs'>\n                                                {getButtonSettings(item)?.text}\n                                            </Text>\n                                        </BinaryLink>\n                                    ) : (\n                                        <Button\n                                            className={classNames(\n                                                'dc-btn--secondary',\n                                                'notifications-item__cta-button'\n                                            )}\n                                            onClick={() => {\n                                                getButtonSettings(item)?.onClick();\n                                                onActionTrackEvent(item.key);\n                                                if (getButtonSettings(item)?.route) {\n                                                    history.push(getButtonSettings(item)?.route as string);\n                                                }\n                                            }}\n                                        >\n                                            <Text weight='bold' size='xxs'>\n                                                {getButtonSettings(item)?.text}\n                                            </Text>\n                                        </Button>\n                                    )}\n                                </React.Fragment>\n                            )}\n                        </div>\n                    </div>\n                ))\n            ) : (\n                <EmptyNotification />\n            )}\n        </React.Fragment>\n    );\n});\n\nexport default NotificationsList;\n","import classNames from 'classnames';\nimport React, { LegacyRef } from 'react';\nimport { Text, ThemedScrollbars } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport EmptyNotification from 'App/Components/Elements/Notifications/empty-notification';\nimport NotificationsClearAllFooter from './notifications-clear-all-footer';\nimport NotificationsList from './notifications-list';\n\ntype TNotificationListWrapper = { clearNotifications: () => void; is_outside?: boolean };\n\nconst NotificationListWrapperForwardRef = React.forwardRef(\n    ({ clearNotifications, is_outside }: TNotificationListWrapper, ref: LegacyRef<HTMLDivElement> | undefined) => {\n        const { notifications, ui } = useStore();\n        const { is_notifications_empty } = notifications;\n        const { is_mobile } = ui;\n\n        return (\n            <div\n                data-testid='dt_notifications_list_wrapper'\n                className={classNames('notifications-dialog', {\n                    'notifications-dialog--shifted': is_outside,\n                })}\n                ref={ref}\n            >\n                <div className='notifications-dialog__header'>\n                    <Text\n                        as='h2'\n                        className='notifications-dialog__header-text'\n                        weight='bold'\n                        color='prominent'\n                        styles={{\n                            lineHeight: '1.6rem',\n                        }}\n                    >\n                        <Localize i18n_default_text='Notifications' />\n                    </Text>\n                </div>\n                <div\n                    className={classNames('notifications-dialog__content', {\n                        'notifications-dialog__content--empty': is_notifications_empty,\n                    })}\n                >\n                    <ThemedScrollbars is_bypassed={is_mobile || is_notifications_empty}>\n                        {is_notifications_empty ? <EmptyNotification /> : <NotificationsList />}\n                    </ThemedScrollbars>\n                </div>\n                <NotificationsClearAllFooter clearNotifications={clearNotifications} />\n            </div>\n        );\n    }\n);\nNotificationListWrapperForwardRef.displayName = 'NotificationListWrapper';\n\nconst NotificationListWrapper = observer(NotificationListWrapperForwardRef);\n\nexport default NotificationListWrapper;\n","import NotificationsDialog from './notifications-dialog';\n\nexport default NotificationsDialog;\n","import React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { MobileDialog, useOnClickOutside } from '@deriv/components';\nimport { Analytics } from '@deriv-com/analytics';\nimport { LocalStore } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport NotificationListWrapper from './notification-list-wrapper';\n\nconst NotificationsDialog = observer(() => {\n    const { client, notifications } = useStore();\n    const { loginid } = client;\n    const {\n        is_notifications_visible,\n        notifications: notifications_array,\n        removeNotifications,\n        removeNotificationMessage,\n        removeNotificationMessageByKey,\n        toggleNotificationsModal,\n    } = notifications;\n\n    const wrapper_ref = React.useRef<HTMLDivElement>(null);\n    const [is_outside, setIsOutside] = React.useState(false);\n    const { isMobile } = useDevice();\n\n    const handleClickOutside = (event: MouseEvent) => {\n        const notifications_toggle_btn = !(event?.target as Element)?.classList.contains(\n            'notifications-toggle__icon-wrapper'\n        );\n        if (\n            !wrapper_ref?.current?.contains(event.target as Node) &&\n            is_notifications_visible &&\n            notifications_toggle_btn\n        ) {\n            toggleNotificationsModal();\n        }\n    };\n\n    const clearNotifications = () => {\n        const p2p_settings = LocalStore.getObject('p2p_settings');\n        if (loginid && p2p_settings[loginid]) {\n            p2p_settings[loginid].is_notifications_visible = false;\n        }\n        LocalStore.setObject('p2p_settings', p2p_settings);\n\n        Analytics.trackEvent('ce_notification_form', {\n            action: 'clear_all',\n            form_name: 'ce_notification_form',\n            notification_num: notifications_array.length,\n        });\n\n        notifications_array.forEach(({ key, should_show_again }) => {\n            removeNotificationMessageByKey({ key });\n            removeNotificationMessage({\n                key,\n                should_show_again,\n            });\n            removeNotifications(true);\n        });\n    };\n\n    useOnClickOutside(wrapper_ref, handleClickOutside);\n\n    React.useEffect(() => {\n        const should_check_position = !isMobile && is_notifications_visible && wrapper_ref.current;\n\n        if (should_check_position) {\n            const { right } = wrapper_ref.current.getBoundingClientRect();\n            setIsOutside(right > window.innerWidth);\n        }\n    }, [isMobile, is_notifications_visible]);\n\n    if (isMobile) {\n        return (\n            <MobileDialog\n                portal_element_id='modal_root'\n                title={<Localize i18n_default_text='Notifications' />}\n                wrapper_classname='notifications-mobile-dialog'\n                visible={is_notifications_visible}\n                onClose={toggleNotificationsModal}\n            >\n                <NotificationListWrapper clearNotifications={clearNotifications} ref={wrapper_ref} />\n            </MobileDialog>\n        );\n    }\n\n    return (\n        <CSSTransition\n            in={is_notifications_visible}\n            classNames={{\n                enter: 'notifications-dialog--enter',\n                enterDone: 'notifications-dialog--enter-done',\n                exit: 'notifications-dialog--exit',\n            }}\n            timeout={150}\n            onExited={() => setIsOutside(false)}\n            unmountOnExit\n        >\n            <NotificationListWrapper\n                clearNotifications={clearNotifications}\n                is_outside={is_outside}\n                ref={wrapper_ref}\n            />\n        </CSSTransition>\n    );\n});\n\nexport default NotificationsDialog;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Counter, Icon, Popover } from '@deriv/components';\nimport NotificationsDialog from 'App/Containers/NotificationsDialog';\nimport 'Sass/app/modules/notifications-dialog.scss';\nimport { useDevice } from '@deriv-com/ui';\n\nconst ToggleNotificationsDrawer = ({\n    count,\n    is_visible,\n    toggleDialog,\n    tooltip_message,\n    should_disable_pointer_events = false,\n    showPopover = true,\n}) => {\n    const { isMobile } = useDevice();\n    const notifications_toggler_el = (\n        <div\n            className={classNames('notifications-toggle__icon-wrapper', {\n                'notifications-toggle__icon-wrapper--active': is_visible,\n            })}\n            onClick={toggleDialog}\n        >\n            <Icon className='notifications-toggle__icon' icon='IcBell' />\n            {!!count && <Counter count={count} className='notifications-toggle__step' />}\n        </div>\n    );\n\n    if (isMobile) {\n        return (\n            <div\n                className={classNames('notifications-toggle', {\n                    'notifications-toggle--active': is_visible,\n                })}\n            >\n                {notifications_toggler_el}\n                <NotificationsDialog is_visible={is_visible} toggleDialog={toggleDialog} />\n            </div>\n        );\n    }\n\n    return (\n        <div\n            className={classNames('notifications-toggle', {\n                'notifications-toggle--active': is_visible,\n            })}\n        >\n            {showPopover ? (\n                <Popover\n                    classNameBubble='notifications-toggle__tooltip'\n                    alignment='bottom'\n                    message={tooltip_message}\n                    should_disable_pointer_events={should_disable_pointer_events}\n                    zIndex='9999'\n                >\n                    {notifications_toggler_el}\n                </Popover>\n            ) : (\n                notifications_toggler_el\n            )}\n            <NotificationsDialog is_visible={is_visible} toggleDialog={toggleDialog} />\n        </div>\n    );\n};\n\nexport default ToggleNotificationsDrawer;\n","import React from 'react';\nimport { Badge } from '@deriv/components';\nimport { localize } from '@deriv/translations';\n\ntype TWalletBadge = {\n    is_demo: boolean;\n    label?: string;\n};\n\nconst WalletBadge = ({ is_demo, label }: TWalletBadge) => {\n    return is_demo ? (\n        <Badge type='contained' background_color='blue' label={localize('Demo')} custom_color='colored-background' />\n    ) : (\n        <Badge type='bordered' label={label?.toUpperCase() ?? ''} />\n    );\n};\n\nexport default WalletBadge;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { AppLinkedWithWalletIcon, Text } from '@deriv/components';\nimport { formatMoney, getCurrencyDisplayCode } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { useStoreWalletAccountsList } from '@deriv/hooks';\nimport { Localize } from '@deriv/translations';\nimport WalletBadge from 'App/Components/Layout/Header/wallets/wallet-badge';\nimport './account-switcher-wallet-item.scss';\n\ntype TAccountSwitcherWalletItemProps = {\n    account: Exclude<ReturnType<typeof useStoreWalletAccountsList>['data'], undefined>[number];\n    closeAccountsDialog: () => void;\n    show_badge?: boolean;\n};\n\nexport const AccountSwitcherWalletItem = observer(\n    ({ closeAccountsDialog, account, show_badge = false }: TAccountSwitcherWalletItemProps) => {\n        const {\n            currency,\n            dtrade_loginid,\n            dtrade_balance,\n            gradients,\n            icons,\n            is_virtual,\n            loginid,\n            landing_company_name,\n            icon_type,\n        } = account;\n\n        const {\n            ui: { is_dark_mode_on },\n            client: { switchAccount, loginid: active_loginid, is_eu },\n        } = useStore();\n\n        const theme = is_dark_mode_on ? 'dark' : 'light';\n        const app_icon = is_dark_mode_on ? 'IcWalletOptionsDark' : 'IcWalletOptionsLight';\n        const is_dtrade_active = dtrade_loginid === active_loginid;\n\n        const onAccountSwitch = async () => {\n            closeAccountsDialog();\n            if (is_dtrade_active) return;\n            await switchAccount(dtrade_loginid);\n            localStorage.setItem('active_wallet_loginid', loginid);\n        };\n\n        return (\n            <div\n                className={classNames('acc-switcher-wallet-item__container', {\n                    'acc-switcher-wallet-item__container--active': is_dtrade_active,\n                })}\n                data-testid='account-switcher-wallet-item'\n                onClick={onAccountSwitch}\n                // SonarLint offers to add handler for onKeyDown event if we have onClick event handler\n                role='button'\n                onKeyDown={event => {\n                    if (event.key === 'Enter') {\n                        onAccountSwitch();\n                    }\n                }}\n            >\n                <div>\n                    <AppLinkedWithWalletIcon\n                        app_icon={app_icon}\n                        gradient_class={gradients?.card[theme] ?? ''}\n                        type={icon_type}\n                        wallet_icon={icons?.[theme] ?? ''}\n                        hide_watermark\n                    />\n                </div>\n                <div className='acc-switcher-wallet-item__content'>\n                    <Text size='xxxs'>\n                        {is_eu ? (\n                            <Localize i18n_default_text='Multipliers' />\n                        ) : (\n                            <Localize i18n_default_text='Options' />\n                        )}\n                    </Text>\n                    <Text size='xxxs'>\n                        {is_virtual ? (\n                            <Localize i18n_default_text='Demo Wallet' />\n                        ) : (\n                            <Localize\n                                i18n_default_text='{{currency}} Wallet'\n                                values={{ currency: getCurrencyDisplayCode(currency) }}\n                            />\n                        )}\n                    </Text>\n                    <Text size='xs' weight='bold'>\n                        {`${formatMoney(currency || '', dtrade_balance || 0, true)} ${getCurrencyDisplayCode(\n                            currency\n                        )}`}\n                    </Text>\n                </div>\n                {show_badge && <WalletBadge is_demo={Boolean(is_virtual)} label={landing_company_name} />}\n            </div>\n        );\n    }\n);\n","import React from 'react';\nimport { AccountSwitcherWalletItem } from './account-switcher-wallet-item';\nimport { TStores } from '@deriv/stores/types';\nimport './account-switcher-wallet-list.scss';\n\ntype TAccountSwitcherWalletListProps = {\n    wallets: TStores['client']['wallet_list'];\n    closeAccountsDialog: () => void;\n};\n\nexport const AccountSwitcherWalletList = ({ wallets, closeAccountsDialog }: TAccountSwitcherWalletListProps) => (\n    <div className='account-switcher-wallet-list'>\n        {wallets?.map(account => {\n            if (account.is_dtrader_account_disabled) return null;\n            return (\n                <AccountSwitcherWalletItem\n                    key={account.dtrade_loginid}\n                    account={account}\n                    closeAccountsDialog={closeAccountsDialog}\n                    show_badge={account?.is_virtual}\n                />\n            );\n        })}\n    </div>\n);\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { Icon, Text, ThemedScrollbars, useOnClickOutside } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { observer } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { useStoreWalletAccountsList } from '@deriv/hooks';\nimport { AccountSwitcherWalletList } from './account-switcher-wallet-list';\nimport './account-switcher-wallet.scss';\n\ntype TAccountSwitcherWalletProps = {\n    is_visible: boolean;\n    toggle: (value?: boolean) => void;\n};\n\nexport const AccountSwitcherWallet = observer(({ is_visible, toggle }: TAccountSwitcherWalletProps) => {\n    const { data: wallet_list } = useStoreWalletAccountsList();\n    const dtrade_account_wallets = wallet_list?.filter(wallet => wallet.dtrade_loginid);\n\n    const history = useHistory();\n\n    const wrapper_ref = React.useRef<HTMLDivElement>(null);\n\n    const validateClickOutside = (event: MouseEvent) => {\n        const checkAllParentNodes = (node: HTMLElement): boolean => {\n            if (node?.classList?.contains('acc-info__wallets')) return true;\n            const parent = node?.parentNode as HTMLElement;\n            if (parent) return checkAllParentNodes(parent);\n            return false;\n        };\n\n        return is_visible && !checkAllParentNodes(event.target as HTMLElement);\n    };\n\n    const closeAccountsDialog = React.useCallback(() => {\n        toggle(false);\n    }, [toggle]);\n\n    useOnClickOutside(wrapper_ref, closeAccountsDialog, validateClickOutside);\n\n    const handleTradersHubRedirect = async () => {\n        closeAccountsDialog();\n        history.push(routes.traders_hub);\n    };\n\n    return (\n        <div className='account-switcher-wallet' ref={wrapper_ref}>\n            <div className='account-switcher-wallet__header'>\n                <Text as='h4' weight='bold' size='xs'>\n                    <Localize i18n_default_text='Options accounts' />\n                </Text>\n            </div>\n            <ThemedScrollbars height={450}>\n                <AccountSwitcherWalletList wallets={dtrade_account_wallets} closeAccountsDialog={closeAccountsDialog} />\n            </ThemedScrollbars>\n            <button\n                className='account-switcher-wallet__looking-for-cfds'\n                onClick={handleTradersHubRedirect}\n                type='button'\n            >\n                <Text size='xs' line_height='xl'>\n                    <Localize i18n_default_text='Looking for CFDs? Go to Trader’s Hub' />\n                </Text>\n                <Icon\n                    data_testid='dt_go_to_arrow'\n                    icon='IcChevronDownBold'\n                    className='account-switcher-wallet__arrow'\n                />\n            </button>\n        </div>\n    );\n});\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Icon, MobileDialog, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { AccountSwitcherWalletList } from './account-switcher-wallet-list';\nimport { useIsRtl, useStoreWalletAccountsList } from '@deriv/hooks';\nimport { observer } from '@deriv/stores';\nimport './account-switcher-wallet-mobile.scss';\n\ntype TAccountSwitcherWalletMobile = {\n    loginid: string;\n    is_visible: boolean;\n    toggle: (value: boolean) => void;\n};\n\nexport const AccountSwitcherWalletMobile = observer(({ is_visible, toggle, loginid }: TAccountSwitcherWalletMobile) => {\n    const history = useHistory();\n    const isRtl = useIsRtl();\n    const { data: wallet_list } = useStoreWalletAccountsList();\n\n    const dtrade_account_wallets = wallet_list?.filter(wallet => wallet.dtrade_loginid);\n\n    const closeAccountsDialog = React.useCallback(() => {\n        toggle(false);\n    }, [toggle]);\n\n    const handleTradersHubRedirect = () => {\n        closeAccountsDialog();\n        history.push(routes.traders_hub);\n    };\n\n    const handleManageFundsRedirect = () => {\n        closeAccountsDialog();\n        history.push(routes.wallets_transfer, { toAccountLoginId: loginid });\n    };\n\n    const footer = (\n        <React.Fragment>\n            <hr className='account-switcher-wallet-mobile__divider' />\n            <button className='account-switcher-wallet-mobile__footer' onClick={handleTradersHubRedirect} type='button'>\n                <Text weight='normal' size='xs'>\n                    <Localize i18n_default_text='Looking for CFDs? Go to Trader’s Hub' />\n                </Text>\n                <Icon icon={isRtl ? 'IcChevronLeftBold' : 'IcChevronRightBold'} />\n            </button>\n        </React.Fragment>\n    );\n\n    return (\n        <MobileDialog\n            portal_element_id='deriv_app'\n            footer={footer}\n            visible={is_visible}\n            onClose={closeAccountsDialog}\n            has_close_icon\n            has_full_height\n            title={<Localize i18n_default_text='Options accounts' />}\n        >\n            <div className='account-switcher-wallet-mobile'>\n                <AccountSwitcherWalletList wallets={dtrade_account_wallets} closeAccountsDialog={closeAccountsDialog} />\n                <Button\n                    className='account-switcher-wallet-mobile__button'\n                    has_effect\n                    primary\n                    large\n                    onClick={handleManageFundsRedirect}\n                >\n                    <Localize i18n_default_text='Manage funds' />\n                </Button>\n            </div>\n        </MobileDialog>\n    );\n});\n","import React from 'react';\nimport classNames from 'classnames';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon, WalletIcon, Text, AppLinkedWithWalletIcon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { formatMoney, getCurrencyDisplayCode } from '@deriv/shared';\nimport { useStore, observer } from '@deriv/stores';\nimport { useStoreWalletAccountsList, useStoreLinkedWalletsAccounts } from '@deriv/hooks';\nimport { TStores } from '@deriv/stores/types';\nimport { AccountSwitcherWallet, AccountSwitcherWalletMobile } from 'App/Containers/AccountSwitcherWallet';\nimport { AccountsInfoLoader } from '../Components/Preloader';\nimport AccountInfoWrapper from '../account-info-wrapper';\nimport WalletBadge from './wallet-badge';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TAccountInfoWallets = {\n    toggleDialog: () => void;\n    is_dialog_on: boolean;\n};\n\ntype TDropdownArrow = {\n    is_disabled?: boolean;\n};\n\ntype TBalanceLabel = {\n    balance: TStores['client']['accounts'][string]['balance'];\n    currency: TStores['client']['accounts'][string]['currency'];\n    is_virtual: boolean;\n    display_code: string;\n};\n\ntype TInfoIcons = {\n    gradients: Exclude<ReturnType<typeof useStoreWalletAccountsList>['data'], undefined>[number]['gradients'];\n    icons: Exclude<ReturnType<typeof useStoreWalletAccountsList>['data'], undefined>[number]['icons'];\n    icon_type: Exclude<ReturnType<typeof useStoreWalletAccountsList>['data'], undefined>[number]['icon_type'];\n};\n\nconst DropdownArrow = ({ is_disabled = false }: TDropdownArrow) =>\n    is_disabled ? (\n        <Icon data_testid='dt_lock_icon' icon='IcLock' />\n    ) : (\n        <Icon data_testid='dt_select_arrow' icon='IcChevronDownBold' className='acc-info__select-arrow' />\n    );\n\nconst BalanceLabel = ({ balance, currency, is_virtual, display_code }: Partial<TBalanceLabel>) =>\n    typeof balance !== 'undefined' || !currency ? (\n        <div className='acc-info__wallets-account-type-and-balance'>\n            <Text\n                as='p'\n                data-testid='dt_balance'\n                className={classNames('acc-info__balance acc-info__wallets-balance', {\n                    'acc-info__balance--no-currency': !currency && !is_virtual,\n                })}\n            >\n                {!currency ? (\n                    <Localize i18n_default_text='No currency assigned' />\n                ) : (\n                    `${formatMoney(currency, balance ?? 0, true)} ${display_code}`\n                )}\n            </Text>\n        </div>\n    ) : null;\n\nconst MobileInfoIcon = observer(({ gradients, icons, icon_type }: TInfoIcons) => {\n    const {\n        ui: { is_dark_mode_on },\n    } = useStore();\n\n    const theme = is_dark_mode_on ? 'dark' : 'light';\n    const app_icon = is_dark_mode_on ? 'IcWalletOptionsDark' : 'IcWalletOptionsLight';\n\n    return (\n        <div className='acc-info__wallets-container'>\n            <AppLinkedWithWalletIcon\n                app_icon={app_icon}\n                gradient_class={gradients?.card[theme] ?? ''}\n                size='small'\n                type={icon_type}\n                wallet_icon={icons?.[theme] ?? ''}\n                hide_watermark\n            />\n        </div>\n    );\n});\n\nconst DesktopInfoIcons = observer(({ gradients, icons, icon_type }: TInfoIcons) => {\n    const { ui } = useStore();\n    const { is_dark_mode_on } = ui;\n    const theme = is_dark_mode_on ? 'dark' : 'light';\n\n    return (\n        <div className='acc-info__wallets-container'>\n            <Icon\n                icon={is_dark_mode_on ? 'IcWalletOptionsDark' : 'IcWalletOptionsLight'}\n                size={24}\n                data_testid='dt_ic_wallet_options'\n            />\n            <WalletIcon\n                icon={icons?.[theme] ?? ''}\n                type={icon_type}\n                gradient_class={gradients?.card[theme]}\n                size={'small'}\n                has_bg\n                hide_watermark\n            />\n        </div>\n    );\n});\n\nconst AccountInfoWallets = observer(({ is_dialog_on, toggleDialog }: TAccountInfoWallets) => {\n    const { client, ui } = useStore();\n    const { switchAccount, is_logged_in, loginid, accounts } = client;\n    const { account_switcher_disabled_message } = ui;\n    const { data: wallet_list } = useStoreWalletAccountsList();\n    const linked_wallets_accounts = useStoreLinkedWalletsAccounts();\n    const { isDesktop } = useDevice();\n\n    const active_account = accounts?.[loginid ?? ''];\n    const wallet_loginid = localStorage.getItem('active_wallet_loginid');\n    const active_wallet =\n        wallet_list?.find(wallet => wallet.loginid === wallet_loginid) ??\n        wallet_list?.find(wallet => wallet.loginid === loginid);\n\n    let linked_dtrade_trading_account_loginid = loginid;\n\n    if (active_wallet) {\n        // get 'dtrade' loginid account linked to the current wallet\n        linked_dtrade_trading_account_loginid =\n            active_wallet.dtrade_loginid || linked_wallets_accounts.dtrade?.[0]?.loginid;\n\n        // switch to dtrade account\n        if (linked_dtrade_trading_account_loginid && linked_dtrade_trading_account_loginid !== loginid) {\n            switchAccount(linked_dtrade_trading_account_loginid);\n        }\n    }\n\n    const linked_wallet = wallet_list?.find(wallet => wallet.dtrade_loginid === linked_dtrade_trading_account_loginid);\n\n    if (!linked_wallet) return <AccountsInfoLoader is_logged_in={is_logged_in} is_mobile={!isDesktop} speed={3} />;\n\n    const show_badge = linked_wallet.is_virtual;\n\n    return (\n        <div className='acc-info__wrapper'>\n            <div className='acc-info__separator' />\n            <AccountInfoWrapper\n                is_mobile={!isDesktop}\n                is_disabled={Boolean(active_account?.is_disabled)}\n                disabled_message={account_switcher_disabled_message}\n            >\n                <div\n                    data-testid='dt_acc_info'\n                    id='dt_core_account-info_acc-info'\n                    className={classNames('acc-info acc-info__wallets', {\n                        'acc-info--show': is_dialog_on,\n                        'acc-info--is-disabled': active_account?.is_disabled,\n                    })}\n                    onClick={active_account?.is_disabled ? undefined : () => toggleDialog()}\n                    // SonarLint offers to add handler for onKeyDown event if we have onClick event handler\n                    onKeyDown={active_account?.is_disabled ? undefined : () => toggleDialog()}\n                >\n                    {isDesktop ? (\n                        <DesktopInfoIcons\n                            gradients={linked_wallet.gradients}\n                            icons={linked_wallet.icons}\n                            icon_type={linked_wallet.icon_type}\n                        />\n                    ) : (\n                        <MobileInfoIcon\n                            gradients={linked_wallet.gradients}\n                            icons={linked_wallet.icons}\n                            icon_type={linked_wallet.icon_type}\n                        />\n                    )}\n                    <BalanceLabel\n                        balance={active_account?.balance}\n                        currency={active_account?.currency}\n                        is_virtual={Boolean(active_account?.is_virtual)}\n                        display_code={getCurrencyDisplayCode(active_account?.currency)}\n                    />\n                    {show_badge && (\n                        <WalletBadge\n                            is_demo={Boolean(linked_wallet?.is_virtual)}\n                            label={linked_wallet?.landing_company_name}\n                        />\n                    )}\n                    <DropdownArrow is_disabled={Boolean(active_account?.is_disabled)} />\n                </div>\n            </AccountInfoWrapper>\n            {isDesktop ? (\n                <CSSTransition\n                    in={is_dialog_on}\n                    timeout={200}\n                    classNames={{\n                        enter: 'acc-switcher__wrapper--enter',\n                        enterDone: 'acc-switcher__wrapper--enter-done',\n                        exit: 'acc-switcher__wrapper--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <div className='acc-switcher__wrapper acc-switcher__wrapper--wallets'>\n                        <AccountSwitcherWallet is_visible={is_dialog_on} toggle={toggleDialog} />\n                    </div>\n                </CSSTransition>\n            ) : (\n                <AccountSwitcherWalletMobile is_visible={is_dialog_on} toggle={toggleDialog} loginid={loginid} />\n            )}\n        </div>\n    );\n});\n\nexport default AccountInfoWallets;\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { routes, isTabletOs } from '@deriv/shared';\nimport { Button, Icon, Popover } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { localize, Localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { LoginButton } from '../login-button.jsx';\nimport { SignupButton } from '../signup-button.jsx';\nimport { BinaryLink } from '../../../Routes/index.js';\nimport ToggleNotifications from '../toggle-notifications.jsx';\nimport AccountInfoWallets from './account-info-wallets';\nimport 'Sass/app/_common/components/account-switcher.scss';\n\nconst AccountActionsWallets = observer(() => {\n    const { client, ui, notifications } = useStore();\n    const { is_logged_in, accounts, loginid } = client;\n    const { openRealAccountSignup, toggleAccountsDialog, is_accounts_switcher_on } = ui;\n    const { isDesktop } = useDevice();\n    const { is_notifications_visible, notifications: notificationsArray, toggleNotificationsModal } = notifications;\n\n    const notifications_count = notificationsArray?.length;\n\n    const active_account = accounts?.[loginid ?? ''];\n    const is_virtual = active_account?.is_virtual;\n    const currency = active_account?.currency;\n\n    const history = useHistory();\n\n    const handleManageFundsRedirect = () => {\n        history.push(routes.wallets_transfer, { toAccountLoginId: loginid });\n    };\n\n    const accountSettings = (\n        <BinaryLink className='account-settings-toggle' to={routes.personal_details}>\n            <Icon icon='IcUserOutline' />\n        </BinaryLink>\n    );\n\n    if (!is_logged_in) {\n        return (\n            <React.Fragment>\n                <LoginButton className='acc-info__button' />\n                <SignupButton className='acc-info__button' />\n            </React.Fragment>\n        );\n    }\n\n    if (!isDesktop) {\n        return (\n            <React.Fragment>\n                <AccountInfoWallets is_dialog_on={is_accounts_switcher_on} toggleDialog={toggleAccountsDialog} />\n                <div className='acc-info__wallets-notification-icon'>\n                    <ToggleNotifications\n                        count={notifications_count}\n                        is_visible={is_notifications_visible}\n                        toggleDialog={toggleNotificationsModal}\n                        tooltip_message={undefined}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <ToggleNotifications\n                count={notifications_count}\n                is_visible={is_notifications_visible}\n                toggleDialog={toggleNotificationsModal}\n                tooltip_message={<Localize i18n_default_text='View notifications' />}\n                should_disable_pointer_events\n                showPopover={!isTabletOs}\n            />\n            {isTabletOs ? (\n                accountSettings\n            ) : (\n                <Popover\n                    classNameBubble='account-settings-toggle__tooltip'\n                    alignment='bottom'\n                    message={<Localize i18n_default_text='Manage account settings' />}\n                    should_disable_pointer_events\n                    zIndex='9999'\n                >\n                    {accountSettings}\n                </Popover>\n            )}\n            <AccountInfoWallets is_dialog_on={is_accounts_switcher_on} toggleDialog={toggleAccountsDialog} />\n            {!is_virtual && !currency && (\n                <div className='set-currency'>\n                    <Button\n                        onClick={() => openRealAccountSignup('set_currency')}\n                        has_effect\n                        type='button'\n                        text={localize('Set currency')}\n                        primary\n                    />\n                </div>\n            )}\n            {currency && (\n                <Button\n                    className='acc-info__button'\n                    has_effect\n                    text={localize('Manage funds')}\n                    onClick={handleManageFundsRedirect}\n                    primary\n                />\n            )}\n        </React.Fragment>\n    );\n});\n\nexport { AccountActionsWallets };\n","import { getPlatformSettings, routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\ntype TPlatformConfig = {\n    description: () => string;\n    href?: string;\n    icon: string;\n    link_to?: string;\n    name: string;\n    title: () => string;\n};\n\nconst platform_config: TPlatformConfig[] = [\n    {\n        icon: getPlatformSettings('trader').icon,\n        title: () => getPlatformSettings('trader').name,\n        name: getPlatformSettings('trader').name,\n        description: () => localize('A whole new trading experience on a powerful yet easy to use platform.'),\n        link_to: routes.trade,\n    },\n    {\n        icon: getPlatformSettings('dbot').icon,\n        title: () => getPlatformSettings('dbot').name,\n        name: getPlatformSettings('dbot').name,\n        description: () => localize('Automated trading at your fingertips. No coding needed.'),\n        href: routes.bot,\n    },\n    {\n        icon: getPlatformSettings('smarttrader').icon,\n        title: () => getPlatformSettings('smarttrader').name,\n        name: getPlatformSettings('smarttrader').name,\n        description: () => localize('Trade the world’s markets with our popular user-friendly platform.'),\n        href: routes.smarttrader,\n    },\n];\n\nexport default platform_config;\n","import { useStore } from '@deriv/stores';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\n\nconst useAccountTransferVisible = () => {\n    const { client } = useStore();\n    const { landing_company_shortcode, residence } = client;\n    const has_malta_invest_account = useHasMaltaInvestAccount();\n    const is_account_transfer_visible =\n        residence !== 'im' && (landing_company_shortcode !== 'malta' || has_malta_invest_account);\n\n    return is_account_transfer_visible;\n};\n\nexport default useAccountTransferVisible;\n","import { useMemo } from 'react';\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\n/** A custom hook that authorize the user with the given token. If no token is given, it will use the current token. */\nconst useAuthorize = (token?: string) => {\n    const { client } = useStore();\n    const { accounts, loginid = '' } = client;\n    const current_token = accounts[loginid || '']?.token;\n\n    const { data, ...rest } = useFetch('authorize', {\n        payload: { authorize: token ?? current_token },\n        options: { enabled: Boolean(token ?? current_token) },\n    });\n\n    // Add additional information to the authorize response.\n    const modified_authorize = useMemo(() => ({ ...data?.authorize }), [data?.authorize]);\n\n    return {\n        /** The authorize response. */\n        data: modified_authorize,\n        ...rest,\n    };\n};\n\nexport default useAuthorize;\n","import { useStore } from '@deriv/stores';\n\nconst useHasMaltaInvestAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n    const has_malta_invest_account = active_accounts.some(\n        account => account.landing_company_shortcode === 'maltainvest'\n    );\n\n    return has_malta_invest_account;\n};\n\nexport default useHasMaltaInvestAccount;\n","import { useStore } from '@deriv/stores';\n\nconst useHasSvgAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n    const has_svg_account = active_accounts.some(account => account.landing_company_shortcode === 'svg');\n\n    return has_svg_account;\n};\n\nexport default useHasSvgAccount;\n","import React from 'react';\nimport Cookies from 'js-cookie';\nimport { deriv_urls } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport useP2PSettings from './useP2PSettings';\n\nconst useIsP2PEnabled = () => {\n    const {\n        p2p_settings,\n        rest: { isLoading, isSubscribed },\n    } = useP2PSettings();\n    const { client, traders_hub } = useStore();\n    // Todo: to replace it with useAuthorize hook\n    const { currency, email, is_virtual, loginid, setIsP2PEnabled } = client;\n    const { is_low_risk_cr_eu_real } = traders_hub;\n\n    const is_p2p_supported_currency = Boolean(\n        p2p_settings?.supported_currencies?.includes(currency.toLocaleLowerCase())\n    );\n    const is_p2p_enabled = is_p2p_supported_currency && !is_virtual && !is_low_risk_cr_eu_real;\n\n    // Todo: should replace with the next line instead once BE is fixed.\n    // const is_p2p_enabled = data?.disabled === 0;\n\n    React.useEffect(() => {\n        setIsP2PEnabled(is_p2p_enabled);\n\n        if (email && loginid) {\n            const domain = /deriv\\.(com|me|be)/.test(window.location.hostname)\n                ? deriv_urls.DERIV_HOST_NAME\n                : window.location.hostname;\n\n            Cookies.set('is_p2p_disabled', (!is_p2p_enabled).toString(), { domain, secure: true, sameSite: 'none' });\n        }\n    }, [email, is_p2p_enabled, loginid, setIsP2PEnabled]);\n\n    return {\n        is_p2p_enabled,\n        is_p2p_enabled_loading: isLoading,\n        is_p2p_enabled_success: isSubscribed,\n    };\n};\n\nexport default useIsP2PEnabled;\n","import { useStore } from '@deriv/stores';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\nimport useHasSvgAccount from './useHasSvgAccount';\n\nconst useIsRealAccountNeededForCashier = () => {\n    const { traders_hub } = useStore();\n    const { is_eu_user, is_real } = traders_hub;\n\n    const has_svg_account = useHasSvgAccount();\n    const has_maltainvest_account = useHasMaltaInvestAccount();\n\n    const no_real_mf_account = has_svg_account && !has_maltainvest_account && is_eu_user;\n\n    const no_real_cr_account = !has_svg_account && has_maltainvest_account && !is_eu_user;\n\n    const is_real_account_needed = no_real_mf_account || no_real_cr_account;\n\n    const is_real_account_needed_for_cashier = is_real_account_needed && is_real;\n\n    return is_real_account_needed_for_cashier;\n};\n\nexport default useIsRealAccountNeededForCashier;\n","import { useStore } from '@deriv/stores';\n\nconst useOnrampVisible = () => {\n    const { client } = useStore();\n    const { website_status, currency, is_virtual } = client;\n\n    const is_onramp_visible =\n        !is_virtual &&\n        !!website_status?.currencies_config?.[currency] &&\n        //@ts-expect-error need to update `@deriv/api-types` library to the latest version\n        website_status?.currencies_config?.[currency].platform.ramp.length > 0;\n\n    return is_onramp_visible;\n};\n\nexport default useOnrampVisible;\n","import { useEffect, useState } from 'react';\nimport { useStore } from '@deriv/stores';\n\ntype TNotification = {\n    order_id: string;\n    is_seen: boolean;\n    is_active: boolean;\n};\n\ntype TClientData = {\n    is_cached: boolean;\n    notifications: TNotification[];\n};\n\ntype TP2PSettings = Record<string, TClientData>;\n\nconst useP2PNotificationCount = () => {\n    const [p2p_settings, setP2PSettings] = useState<TP2PSettings>(\n        JSON.parse(localStorage.getItem('p2p_settings') || '{}')\n    );\n    const { client } = useStore();\n    const { loginid } = client;\n    const notifications = loginid ? p2p_settings[loginid]?.notifications : null;\n\n    useEffect(() => {\n        const onStorageChanged = () => {\n            const data = localStorage.getItem('p2p_settings');\n\n            if (data) {\n                setP2PSettings(JSON.parse(data));\n            }\n        };\n\n        window.addEventListener('storage', onStorageChanged);\n\n        return () => {\n            window.removeEventListener('storage', onStorageChanged);\n        };\n    }, []);\n\n    const p2p_notification_count = notifications?.filter(notification => !notification.is_seen).length || 0;\n\n    return p2p_notification_count;\n};\n\nexport default useP2PNotificationCount;\n","import { useContext } from 'react';\nimport { P2PSettingsContext } from '@deriv/stores';\n\n/**\n * A custom hook to get the p2p_settings information from `p2p_settings` endpoint\n */\nconst useP2PSettings = () => {\n    const context = useContext(P2PSettingsContext);\n\n    if (!context) {\n        throw new Error('useP2PSettingsContext must be used within a P2PSettingsProvider');\n    }\n\n    return context;\n};\n\nexport default useP2PSettings;\n","import { useFetch } from '@deriv/api';\nimport { WS } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport { useEffect, useState } from 'react';\n\nconst usePaymentAgentTransferVisible = () => {\n    const { client } = useStore();\n    const { is_authorize, is_logged_in } = client;\n    const [is_websocket_authorized, setIsWebSocketAuthorized] = useState(false);\n\n    useEffect(() => {\n        const checkAuthorize = async () => {\n            try {\n                const check_websocket_authorized = await WS.wait('authorize');\n                if (check_websocket_authorized) setIsWebSocketAuthorized(is_authorize && is_logged_in);\n            } catch (error) {\n                console.error('Error while authorizing:', error); // eslint-disable-line\n            }\n        };\n\n        checkAuthorize();\n    }, [is_authorize, is_logged_in]);\n\n    const { data, ...rest } = useFetch('get_settings', { options: { enabled: Boolean(is_websocket_authorized) } });\n    const is_payment_agent_transfer_visible = Boolean(data?.get_settings?.is_authenticated_payment_agent);\n\n    return {\n        data: is_payment_agent_transfer_visible,\n        ...rest,\n    };\n};\n\nexport default usePaymentAgentTransferVisible;\n","import { useMemo } from 'react';\nimport useStoreWalletAccountsList from './useStoreWalletAccountsList';\n\ntype TLinkedAccount = {\n    loginid?: string;\n    platform?: Exclude<'ctrader' | 'derivez' | 'dtrade' | 'dxtrade' | 'mt5', 'dwallet'>;\n};\n\ntype TReturnObjectType = {\n    [key in Exclude<TLinkedAccount['platform'], undefined>]: TLinkedAccount[];\n};\n\n/** A custom hook to get the list of linked accounts of all wallets */\nconst useStoreLinkedWalletsAccounts = () => {\n    const { data: wallets_list } = useStoreWalletAccountsList();\n\n    // define object with accounts\n    const linked_trading_accounts = useMemo(() => {\n        const linked_accounts: TReturnObjectType = {\n            ctrader: [],\n            derivez: [],\n            dtrade: [],\n            dxtrade: [],\n            mt5: [],\n        };\n\n        wallets_list?.forEach(account => {\n            const linked = account.linked_to as TLinkedAccount[];\n\n            linked?.forEach(linked_to_account => {\n                if (linked_to_account?.platform && linked_to_account?.loginid)\n                    linked_accounts[linked_to_account.platform].push(linked_to_account);\n            });\n        });\n\n        return linked_accounts;\n    }, [wallets_list]);\n\n    /** List of wallets for current user. */\n    return linked_trading_accounts;\n};\n\nexport default useStoreLinkedWalletsAccounts;\n","import { useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\n\nconst currency_to_icon_mapper: Record<string, Record<'light' | 'dark', string>> = {\n    Demo: {\n        dark: 'IcWalletDerivDemoDark',\n        light: 'IcWalletDerivDemoLight',\n    },\n    USD: {\n        dark: 'IcWalletCurrencyUsd',\n        light: 'IcWalletCurrencyUsd',\n    },\n    EUR: {\n        dark: 'IcWalletCurrencyEur',\n        light: 'IcWalletCurrencyEur',\n    },\n    AUD: {\n        dark: 'IcWalletCurrencyAud',\n        light: 'IcWalletCurrencyAud',\n    },\n    GBP: {\n        dark: 'IcWalletCurrencyGbp',\n        light: 'IcWalletCurrencyGbp',\n    },\n    BTC: {\n        dark: 'IcWalletBitcoinDark',\n        light: 'IcWalletBitcoinLight',\n    },\n    ETH: {\n        dark: 'IcWalletEthereumDark',\n        light: 'IcWalletEthereumLight',\n    },\n    USDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    eUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    tUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    UST: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    LTC: {\n        dark: 'IcWalletLiteCoinDark',\n        light: 'IcWalletLiteCoinLight',\n    },\n    USDC: {\n        dark: 'IcWalletUsdCoinDark',\n        light: 'IcWalletUsdCoinLight',\n    },\n    XRP: {\n        dark: 'IcWalletXrpDark',\n        light: 'IcWalletXrpLight',\n    },\n};\n\n/** A custom hook to get the list of wallets for the current user. */\nconst useStoreWalletAccountsList = () => {\n    const { client } = useStore();\n    const { accounts, is_crypto } = client;\n\n    // Add additional information to each wallet.\n    const wallets = useMemo(() => {\n        return Object.keys(accounts)\n            ?.filter(id => accounts?.[id].account_category === 'wallet')\n            ?.map(id => {\n                const wallet = accounts?.[id];\n\n                const loginid = id;\n                const currency = wallet.currency;\n                const is_disabled = Boolean(wallet.is_disabled);\n                const is_virtual = Boolean(wallet.is_virtual);\n\n                const fiat_or_crypto = is_crypto(currency) ? 'crypto' : 'fiat';\n                const icon_type = is_virtual ? 'demo' : fiat_or_crypto;\n                const landing_company_name = wallet.landing_company_name?.replace('maltainvest', 'malta');\n                const is_malta_wallet = landing_company_name === 'malta';\n                const dtrade_loginid = wallet?.linked_to?.find(account => account?.platform === 'dtrade')?.loginid;\n                const dtrade_balance = accounts?.[dtrade_loginid ?? '']?.balance;\n                const is_dtrader_account_disabled = Boolean(accounts?.[dtrade_loginid ?? '']?.is_disabled);\n\n                const wallet_currency_type = is_virtual ? 'Demo' : currency || '';\n                const icons = currency_to_icon_mapper[wallet_currency_type];\n\n                const gradients = {\n                    /** The gradient class name for the wallet header background. */\n                    header: {\n                        dark: `wallet-header__${wallet_currency_type.toLowerCase()}-bg--dark`,\n                        light: `wallet-header__${wallet_currency_type.toLowerCase()}-bg`,\n                    },\n                    /** The gradient class name for the wallet card background. */\n                    card: {\n                        dark: `wallet-card__${wallet_currency_type.toLowerCase()}-bg--dark`,\n                        light: `wallet-card__${wallet_currency_type.toLowerCase()}-bg`,\n                    },\n                };\n\n                return {\n                    ...wallet,\n                    dtrade_loginid,\n                    dtrade_balance,\n                    icons,\n                    icon_type,\n                    is_disabled,\n                    is_virtual,\n                    is_malta_wallet,\n                    landing_company_name,\n                    loginid,\n                    gradients,\n                    is_dtrader_account_disabled,\n                } as const;\n            });\n    }, [accounts, is_crypto]);\n\n    // Sort wallet accounts alphabetically by fiat, crypto, then virtual.\n    const sorted_wallets = useMemo(() => {\n        if (!wallets) return;\n\n        return [...wallets].sort((a, b) => {\n            if (a.is_virtual !== b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if (is_crypto(a.currency) !== is_crypto(b.currency)) {\n                return is_crypto(a.currency) ? 1 : -1;\n            }\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        });\n    }, [is_crypto, wallets]);\n\n    return {\n        /** List of wallets for current user. */\n        data: sorted_wallets,\n        /** Indicating whether the user has a wallet */\n        has_wallet: sorted_wallets && sorted_wallets.length > 0,\n    };\n};\n\nexport default useStoreWalletAccountsList;\n"],"names":["AccountsInfoLoader","_ref","is_mobile","is_logged_in","speed","_jsx","ContentLoader","height","width","backgroundColor","foregroundColor","children","LoggedInPreloader","LoggedOutPreloader","_ref2","_jsxs","React","x","y","rx","ry","_ref3","_Fragment","cx","cy","r","propTypes","PropTypes","PlatformSwitcherLoader","element_spacing","logo_size","name_x","name_y","container_width","container_margin","is_disabled","is_dtrader_v2","disabled_message","Popover","alignment","isBot","message","zIndex","MenuItems","id","text","icon","link_to","handleClickCashier","BinaryLink","to","className","active_class","onClick","Text","size","line_height","title","ReportTab","Icon","localize","routes","reports","CashierTab","observer","client","ui","useStore","has_any_real_account","is_virtual","toggleReadyToDepositModal","toggleNeedRealAccountForCashierModal","p2p_notification_count","useP2PNotificationCount","real_account_needed_for_cashier","useIsRealAccountNeededForCashier","history","useHistory","toggle_modal_routes","window","location","pathname","traders_hub","bot","cashier_redirect","Counter","count","cashier","startPerformanceEventTimer","push","cashier_deposit","MenuLinks","is_traders_hub_routes","isDesktop","useDevice","i18n","useTranslation","has_wallet","language","AccountInfo","moduleLoader","AccountActions","acc_switcher_disabled_message","account_type","balance","currency","disableApp","enableApp","is_acc_switcher_on","is_acc_switcher_disabled","is_eu","is_notifications_visible","notifications_count","onClickDeposit","openRealAccountSignup","toggleAccountsDialog","toggleNotifications","accountSettings","personal_details","ToggleNotifications","is_visible","toggleDialog","tooltip_message","Localize","i18n_default_text","should_disable_pointer_events","showPopover","isTabletOs","classNameBubble","fallback","formatMoney","is_dialog_on","Button","has_effect","type","primary","LoginButton","SignupButton","displayName","isOAuth2Enabled","useOauth2","async","_window$LiveChatWidge","requestOidcAuthentication","redirectCallbackUri","origin","LiveChatWidget","call","redirectToLogin","getLanguage","tertiary","data_testid","is_active","is_hidden","onClickLink","suffix_icon","setMobileLanguageMenuOpen","is_trade_text","deriv_static_url","getStaticUrl","traders_hub_path","is_languages_link_on_responsive","languages","is_external_link","isExternalLink","is_cashier_link","cashier_withdrawal","cashier_acc_transfer","includes","classNames","href","as","weight","trade","undefined","PlatformBox","platform","description","PlatformDropdownContent","app_routing_history","exact","isActive","getActivePlatform","name","e","startsWith","preventDefault","PlatformDropdown","closeDrawer","platform_config","setTogglePlatformType","TradersHubRedirect","align","addEventListener","removeEventListener","ref","useOnClickOutside","event","target","closest","platform_dropdown","Div100vhContainer","height_offset","map","ReactDOM","document","getElementById","PlatformSwitcher","toggleDrawer","current_language","is_landing_company_loaded","is_logging_in","is_open","setIsOpen","is_close_drawer_fired_ref","current","length","getPlatformInformation","header","CSSTransition","mountOnEnter","appear","in","enterDone","timeout","unmountOnExit","withRouter","redirectToSignUp","common","is_mobile_language_menu_open","TranslationFlag","expandSubMenu","is_language_changing","allowed_languages","Object","keys","getAllowedLanguages","UNSUPPORTED_LANGUAGES","MobileDrawer","SubMenu","is_expanded","has_subheader","submenu_title","onToggle","submenu_toggle_class","lang","LanguageLink","is_clickable","toggleModal","ToggleMenuDrawer","modules","is_dark_mode_on","is_dark_mode","setDarkMode","toggleTheme","setIsForcedToExitPnv","account_status","is_authorize","logout","logoutClient","should_allow_authentication","should_allow_poinc_authentication","landing_company_shortcode","active_account_landing_company","is_proof_of_ownership_enabled","is_passkey_supported","payment_agent","is_payment_agent_visible","show_eu_related_content","is_account_transfer_visible","useAccountTransferVisible","isSuccess","useAuthorize","is_onramp_visible","useOnrampVisible","data","is_payment_agent_transfer_visible","usePaymentAgentTransferVisible","is_p2p_enabled","useIsP2PEnabled","route","useLocation","is_trading_hub_category","account","should_show_regulatory_information","is_traders_hub_route","is_wallet_route","wallets","wallets_compare_accounts","useRemoteConfig","cs_chat_livechat","cs_chat_whatsapp","transitionExit","setTransitionExit","primary_routes_config","setPrimaryRoutesConfig","is_submenu_expanded","subscribe","rest","isSubscribed","p2p_settings","useP2PSettings","TradersHubIcon","processRoutes","routes_config","getRoutesConfig","primary_routes","getFilteredRoutesConfig","clearTimeout","setTimeout","handleLogout","phone_verification","Promise","resolve","oAuthLogout","passkeysMenuOpenActionEventTrack","Analytics","trackEvent","action","form_name","operating_system","getOSNameWithUAParser","all_routes_config","routes_to_filter","subroutes_config","flatMap","i","path","find","filter","icon_class","toggle","MenuTitle","SubHeader","Body","Item","MenuLink","route_config","idx","getRoutesWithSubMenu","is_authenticated","icon_component","getTitle","has_subroutes","some","subroutes","should_hide_passkeys_route","hideRoute","route_path","test","submenu_icon","submenu_suffix_icon","route_config_path","index","is_invisible","cashier_pa","cashier_pa_transfer","cashier_p2p","cashier_onramp","SubMenuSection","section_icon","section_title","subroute","subindex","passkeys","ToggleSwitch","handleToggle","is_enabled","has_border_bottom","account_limits","WhatsApp","LiveChat","Footer","ServerTime","NetworkStatus","MobileLanguageMenu","EmptyNotification","color","clearNotifications","notifications","is_notifications_empty","disabled","notifications_array","toggleNotificationsModal","getNotificationItemIcon","item","toTitleCase","getButtonSettings","obj_key","isEmptyObject","primary_btn","cta_btn","secondary_btn","onActionTrackEvent","key","notification_key","filtered_notifications","only_toast_message","_getButtonSettings","_getButtonSettings2","_getButtonSettings3","_getButtonSettings4","_getButtonSettings8","_getButtonSettings5","_getButtonSettings6","_getButtonSettings7","buttonSettings","NotificationListWrapperForwardRef","is_outside","styles","lineHeight","ThemedScrollbars","is_bypassed","NotificationsList","NotificationsClearAllFooter","loginid","removeNotifications","removeNotificationMessage","removeNotificationMessageByKey","wrapper_ref","setIsOutside","isMobile","LocalStore","getObject","setObject","notification_num","forEach","should_show_again","_event$target","_wrapper_ref$current","notifications_toggle_btn","classList","contains","right","getBoundingClientRect","innerWidth","MobileDialog","portal_element_id","wrapper_classname","visible","onClose","NotificationListWrapper","enter","exit","onExited","notifications_toggler_el","NotificationsDialog","_label$toUpperCase","is_demo","label","Badge","background_color","custom_color","toUpperCase","AccountSwitcherWalletItem","_gradients$card$theme","_icons$theme","closeAccountsDialog","show_badge","dtrade_loginid","dtrade_balance","gradients","icons","landing_company_name","icon_type","switchAccount","active_loginid","theme","app_icon","is_dtrade_active","onAccountSwitch","localStorage","setItem","role","onKeyDown","AppLinkedWithWalletIcon","gradient_class","card","wallet_icon","hide_watermark","values","getCurrencyDisplayCode","WalletBadge","Boolean","AccountSwitcherWalletList","is_dtrader_account_disabled","AccountSwitcherWallet","wallet_list","useStoreWalletAccountsList","dtrade_account_wallets","wallet","checkAllParentNodes","node","_node$classList","parent","parentNode","AccountSwitcherWalletMobile","isRtl","useIsRtl","footer","handleTradersHubRedirect","has_close_icon","has_full_height","large","handleManageFundsRedirect","wallets_transfer","toAccountLoginId","DropdownArrow","BalanceLabel","display_code","MobileInfoIcon","DesktopInfoIcons","_ref4","_icons$theme2","WalletIcon","has_bg","_ref5","_wallet_list$find","accounts","account_switcher_disabled_message","linked_wallets_accounts","useStoreLinkedWalletsAccounts","active_account","wallet_loginid","getItem","active_wallet","linked_dtrade_trading_account_loginid","_linked_wallets_accou","dtrade","linked_wallet","AccountInfoWrapper","AccountActionsWallets","is_accounts_switcher_on","notificationsArray","AccountInfoWallets","getPlatformSettings","smarttrader","residence","has_malta_invest_account","useHasMaltaInvestAccount","token","_accounts","current_token","_useFetch","useFetch","payload","authorize","options","enabled","_objectWithoutProperties","_excluded","modified_authorize","useMemo","_objectSpread","active_accounts","useHasSvgAccount","_p2p_settings$support","isLoading","email","setIsP2PEnabled","is_low_risk_cr_eu_real","supported_currencies","toLocaleLowerCase","domain","hostname","deriv_urls","DERIV_HOST_NAME","Cookies","toString","secure","sameSite","is_p2p_enabled_loading","is_p2p_enabled_success","is_eu_user","is_real","has_svg_account","has_maltainvest_account","_website_status$curre","_website_status$curre2","website_status","currencies_config","ramp","_p2p_settings$loginid","setP2PSettings","useState","JSON","parse","useEffect","onStorageChanged","notification","is_seen","context","useContext","P2PSettingsContext","Error","_data$get_settings","is_websocket_authorized","setIsWebSocketAuthorized","WS","wait","error","console","checkAuthorize","get_settings","is_authenticated_payment_agent","wallets_list","linked_accounts","ctrader","derivez","dxtrade","mt5","linked","linked_to","linked_to_account","currency_to_icon_mapper","Demo","dark","light","USD","EUR","AUD","GBP","BTC","ETH","USDT","eUSDT","tUSDT","UST","LTC","USDC","XRP","is_crypto","_Object$keys","account_category","_wallet$landing_compa","_wallet$linked_to","_accounts2","fiat_or_crypto","replace","is_malta_wallet","wallet_currency_type","toLowerCase","sorted_wallets","sort","a","b","localeCompare"],"sourceRoot":""}