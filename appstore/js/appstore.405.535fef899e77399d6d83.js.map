{"version":3,"file":"appstore/js/appstore.405.535fef899e77399d6d83.js","mappings":";4NAmDA,QAvC6B,SAAHA,GAAmE,IAAAC,EAAAC,EAA7DC,EAAQH,EAARG,SAAUC,EAAOJ,EAAPI,QAASC,EAAQL,EAARK,SACvCC,GAAgCC,EAAAA,EAAAA,KAAhCD,4BACR,OACIE,IAAAA,cAAA,OAAKC,UAAU,2BACXD,IAAAA,cAAA,OAAKC,UAAU,iCACXD,IAAAA,cAACE,EAAAA,KAAI,CAACC,KAAK,iBAEfH,IAAAA,cAACI,EAAAA,KAAI,CAACC,KAAK,QACNR,EACGG,IAAAA,cAACM,EAAAA,SAAQ,CACLC,kBAAkB,sIAClBC,OAAQ,CACJb,SAAAA,EACAC,QAAAA,EACAa,QAASX,aAA2B,EAA3BA,EAA6BY,KACtCC,qBAAuE,QAAnDlB,EAAEK,aAA2B,EAA3BA,EAA6Ba,4BAAoB,IAAAlB,EAAAA,EAAI,IAE/EmB,WAAY,CACRZ,IAAAA,cAAA,QACIa,IAAK,EACLC,wBAAyB,CAAEC,OAAmD,QAA7CrB,EAAEI,aAA2B,EAA3BA,EAA6BkB,sBAAc,IAAAtB,EAAAA,EAAI,SAK9FM,IAAAA,cAACM,EAAAA,SAAQ,CACLC,kBAAkB,0EAClBC,OAAQ,CACJb,SAAAA,EACAC,QAAAA,EACAa,QAASX,aAA2B,EAA3BA,EAA6BY,SAOlE,ECFA,SAjC6BO,EAAAA,EAAAA,WACzB,SAAAzB,GAAsG,IAE5E0B,EAFvBC,EAAU3B,EAAV2B,WAAYC,EAAU5B,EAAV4B,WAAYC,EAA+B7B,EAA/B6B,gCAAiCC,EAAO9B,EAAP8B,QAChDxB,GAAgCC,EAAAA,EAAAA,KAAhCD,4BAkBR,OACIE,IAAAA,cAAA,OAAKC,UAAWkB,GACZnB,IAAAA,cAACuB,EAAAA,SAAQ,CACLC,MAAOJ,EACPK,SAAUH,EACVI,MArBR1B,IAAAA,cAACI,EAAAA,KAAI,CAACuB,GAAG,IAAItB,KAAK,MAAMuB,YAAY,KAChC5B,IAAAA,cAACM,EAAAA,SAAQ,CACLC,kBAAkB,kEAClBC,OAAQ,CAAEC,QAASX,aAA2B,EAA3BA,EAA6BY,MAChDE,WAAY,CACRZ,IAAAA,cAAC6B,EAAAA,UAAS,CACNhB,IAAK,EACLZ,UAAU,0BACV6B,KAAyD,QAArDZ,EAAEa,EAAAA,mBAAmBV,UAAgC,IAAAH,OAAA,EAAnDA,EAAqDc,QAC3DC,aAAW,QAanBC,iBAAkBd,IAIlC,oCCJJ,SAxB4BH,EAAAA,EAAAA,WACxB,SAAAzB,GAAmF,IAAhFG,EAAQH,EAARG,SAAUwC,EAAO3C,EAAP2C,QAASb,EAAO9B,EAAP8B,QAASrB,EAAST,EAATS,UAAWJ,EAAQL,EAARK,SACtCuC,GAA2DC,EAAAA,EAAAA,KAAnDhB,EAA+Be,EAA/Bf,gCAAiCiB,EAAaF,EAAbE,cACzC,OACItC,IAAAA,cAAA,OAAKC,UAAWsC,IAAW,yBAA0BtC,IACjDD,IAAAA,cAACwC,EAAoB,CACjBnB,gCAAiCA,EACjC1B,UAAU8C,EAAAA,EAAAA,qBAAoB9C,GAC9BC,QAAS0C,EACTzC,SAAUA,IAEbA,GACGG,IAAAA,cAAC0C,EAAoB,CACjBtB,WAAYe,EACZb,QAASA,EACTH,WAAW,+BACXE,gCAAiCA,IAKrD,8oCCkHJ,QAhH0B,SAAH7B,GAOQ,IAN3BmD,EAAQnD,EAARmD,SACAhD,EAAQH,EAARG,SACAiD,EAAgBpD,EAAhBoD,iBACAC,EAAQrD,EAARqD,SACAC,EAAatD,EAAbsD,cACAjD,EAAQL,EAARK,SAEQkD,GAAiBV,EAAAA,EAAAA,KAAjBU,aAC4FC,EAAAC,EAAtEjD,IAAAA,WAAiBH,GAAYkD,EAAaG,WAAaC,EAAAA,GAASC,OAAM,GAA7FjB,EAAOa,EAAA,GAAEK,EAAUL,EAAA,GAE1B,OACIhD,IAAAA,cAACsD,EAAAA,GAAM,CACHC,cAAe,CACXZ,SAAAA,GAEJa,oBAAkB,EAClBC,SAAUb,EACVC,SAAUA,IAET,SAAAa,GAAA,IACGC,EAAMD,EAANC,OACAC,EAAYF,EAAZE,aACAC,EAAUH,EAAVG,WACAC,EAAYJ,EAAZI,aACAC,EAAYL,EAAZK,aACAC,EAAeN,EAAfM,gBACAC,EAAOP,EAAPO,QACAzD,EAAMkD,EAANlD,OACA0D,EAAYR,EAAZQ,aAAY,OAEZlE,IAAAA,cAACA,IAAAA,SAAc,KACXA,IAAAA,cAAA,QAAMC,UAAU,2BACZD,IAAAA,cAAA,OACIC,UAAU,2EACV,cAAY,0BAEZD,IAAAA,cAAA,OAAKC,UAAU,+CACXD,IAAAA,cAAA,OAAKC,UAAU,4CACXD,IAAAA,cAACE,EAAAA,KAAI,CAACC,KAAK,gBAAgBE,KAAM,OAGrCL,IAAAA,cAACI,EAAAA,KAAI,CACDC,KAAK,KACL8D,MAAM,OACNlE,UAAU,mDAEVD,IAAAA,cAACM,EAAAA,SAAQ,CACLC,kBAAkB,mDAClBC,OAAQ,CAAEb,UAAUyE,EAAAA,EAAAA,qBAAoBzE,OAGhDK,IAAAA,cAAA,OAAKC,UAAU,yCACXD,IAAAA,cAACqE,EAAAA,cAAa,CACVC,MAAO9D,EAAOmC,SACd4B,aAAcN,EAAQtB,WAAYgB,EAAOhB,UACzC6B,0BAA0BC,EAAAA,EAAAA,oBAAmBC,oBAE5C,SAAAC,GAAA,IAAGC,EAAWD,EAAXC,YAAW,OACX5E,IAAAA,cAAC6E,EAAAA,cAAa,CACVC,aAAa,eACbpD,OAAOqD,EAAAA,EAAAA,UAAS,wBAAyB,CACrCpF,UAAU8C,EAAAA,EAAAA,qBAAoB9C,KAElCqF,MACKf,EAAQtB,UAAYgB,EAAOhB,WACA,IAA3BnC,EAAOmC,SAASsC,OAAenC,EAAgB,IAEpDpC,KAAK,WACLc,MAAOhB,EAAOmC,SACduC,OAAQrB,EACRpC,SAAU,SAAC0D,IAnFzB,SAC9BA,EACArB,EACAI,EACAF,GAEAF,EAAaqB,GACbjB,IAAekB,MAAK,WAChBpB,EAAgB,YAAY,EAChC,GACJ,CA0EoDqB,CACIF,EACArB,EACAI,EACAF,EAER,EACAsB,YAAW,MAAAC,OAAQ5F,EAAQ,aAC3B6F,OACMZ,GAA0C,IAA3BpE,EAAOmC,SAASsC,UACjCF,EAAAA,EAAAA,UAAS,yDAEf,KAIbhC,EAAaG,WAAaC,EAAAA,GAASC,MAChCpD,IAAAA,cAACyF,EAAAA,QAAmB,CAChB9F,SAAUA,EACVwC,QAASA,EACTb,QAAS,WAAF,OAAQ+B,GAAW,SAAAqC,GAAI,OAAKA,CAAI,GAAC,EACxC7F,SAAUA,KAItBG,IAAAA,cAAA,OAAKC,UAAU,qCACXD,IAAAA,cAAC2F,EAAAA,iBAAgB,CACbC,aAAcpF,EAAOmC,WAAaR,GAAW0D,OAAOC,KAAKnC,GAAQsB,OAAS,EAC1Ec,WAAYnC,EACZlC,OAAOqD,EAAAA,EAAAA,UAAS,kBAChBiB,QAASjC,OAKZ,GAIjC,iUCrJAkC,EAAA,kBAAAd,CAAA,MAAAe,EAAAf,EAAA,GAAAgB,EAAAN,OAAAO,UAAAC,EAAAF,EAAAG,eAAAC,EAAAV,OAAAW,gBAAA,SAAAN,EAAAf,EAAAgB,GAAAD,EAAAf,GAAAgB,EAAA3E,KAAA,EAAAiF,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAf,EAAAf,EAAAgB,GAAA,OAAAN,OAAAW,eAAAN,EAAAf,EAAA,CAAA3D,MAAA2E,EAAAe,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAAlB,EAAAf,EAAA,KAAA8B,EAAA,aAAAf,GAAAe,EAAA,SAAAf,EAAAf,EAAAgB,GAAA,OAAAD,EAAAf,GAAAgB,CAAA,WAAAkB,EAAAnB,EAAAf,EAAAgB,EAAAE,GAAA,IAAAI,EAAAtB,GAAAA,EAAAiB,qBAAAkB,EAAAnC,EAAAmC,EAAAX,EAAAd,OAAA0B,OAAAd,EAAAL,WAAAS,EAAA,IAAAW,EAAAnB,GAAA,WAAAE,EAAAI,EAAA,WAAAnF,MAAAiG,EAAAvB,EAAAC,EAAAU,KAAAF,CAAA,UAAAe,EAAAxB,EAAAf,EAAAgB,GAAA,WAAAwB,KAAA,SAAAC,IAAA1B,EAAA2B,KAAA1C,EAAAgB,GAAA,OAAAD,GAAA,OAAAyB,KAAA,QAAAC,IAAA1B,EAAA,EAAAf,EAAAkC,KAAAA,EAAA,IAAAS,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAZ,IAAA,UAAAa,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAApB,EAAAoB,EAAA1B,GAAA,8BAAA2B,EAAAzC,OAAA0C,eAAAC,EAAAF,GAAAA,EAAAA,EAAA9H,EAAA,MAAAgI,GAAAA,IAAArC,GAAAE,EAAAwB,KAAAW,EAAA7B,KAAA0B,EAAAG,GAAA,IAAAC,EAAAL,EAAAhC,UAAAkB,EAAAlB,UAAAP,OAAA0B,OAAAc,GAAA,SAAAK,EAAAxC,GAAA,0BAAAyC,SAAA,SAAAxD,GAAA8B,EAAAf,EAAAf,GAAA,SAAAe,GAAA,YAAA0C,QAAAzD,EAAAe,EAAA,gBAAA2C,EAAA3C,EAAAf,GAAA,SAAA2D,EAAA3C,EAAAI,EAAAE,EAAAE,GAAA,IAAAE,EAAAa,EAAAxB,EAAAC,GAAAD,EAAAK,GAAA,aAAAM,EAAAc,KAAA,KAAAZ,EAAAF,EAAAe,IAAAE,EAAAf,EAAAvF,MAAA,OAAAsG,GAAA,UAAAiB,EAAAjB,IAAAzB,EAAAwB,KAAAC,EAAA,WAAA3C,EAAA6D,QAAAlB,EAAAmB,SAAA7D,MAAA,SAAAc,GAAA4C,EAAA,OAAA5C,EAAAO,EAAAE,EAAA,aAAAT,GAAA4C,EAAA,QAAA5C,EAAAO,EAAAE,EAAA,IAAAxB,EAAA6D,QAAAlB,GAAA1C,MAAA,SAAAc,GAAAa,EAAAvF,MAAA0E,EAAAO,EAAAM,EAAA,aAAAb,GAAA,OAAA4C,EAAA,QAAA5C,EAAAO,EAAAE,EAAA,IAAAA,EAAAE,EAAAe,IAAA,KAAAzB,EAAAI,EAAA,gBAAA/E,MAAA,SAAA0E,EAAAG,GAAA,SAAA6C,IAAA,WAAA/D,GAAA,SAAAA,EAAAgB,GAAA2C,EAAA5C,EAAAG,EAAAlB,EAAAgB,EAAA,WAAAA,EAAAA,EAAAA,EAAAf,KAAA8D,EAAAA,GAAAA,GAAA,aAAAzB,EAAAtC,EAAAgB,EAAAE,GAAA,IAAAE,EAAAuB,EAAA,gBAAArB,EAAAE,GAAA,GAAAJ,IAAAyB,EAAA,MAAAmB,MAAA,mCAAA5C,IAAA0B,EAAA,cAAAxB,EAAA,MAAAE,EAAA,OAAAnF,MAAA0E,EAAAkD,MAAA,OAAA/C,EAAAgD,OAAA5C,EAAAJ,EAAAuB,IAAAjB,IAAA,KAAAE,EAAAR,EAAAiD,SAAA,GAAAzC,EAAA,KAAAE,EAAAwC,EAAA1C,EAAAR,GAAA,GAAAU,EAAA,IAAAA,IAAAmB,EAAA,gBAAAnB,CAAA,cAAAV,EAAAgD,OAAAhD,EAAAmD,KAAAnD,EAAAoD,MAAApD,EAAAuB,SAAA,aAAAvB,EAAAgD,OAAA,IAAA9C,IAAAuB,EAAA,MAAAvB,EAAA0B,EAAA5B,EAAAuB,IAAAvB,EAAAqD,kBAAArD,EAAAuB,IAAA,gBAAAvB,EAAAgD,QAAAhD,EAAAsD,OAAA,SAAAtD,EAAAuB,KAAArB,EAAAyB,EAAA,IAAAK,EAAAX,EAAAvC,EAAAgB,EAAAE,GAAA,cAAAgC,EAAAV,KAAA,IAAApB,EAAAF,EAAA+C,KAAAnB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAA1G,MAAA6G,EAAAT,IAAAwB,KAAA/C,EAAA+C,KAAA,WAAAf,EAAAV,OAAApB,EAAA0B,EAAA5B,EAAAgD,OAAA,QAAAhD,EAAAuB,IAAAS,EAAAT,IAAA,YAAA2B,EAAApE,EAAAgB,GAAA,IAAAE,EAAAF,EAAAkD,OAAA9C,EAAApB,EAAAyB,SAAAP,GAAA,GAAAE,IAAAL,EAAA,OAAAC,EAAAmD,SAAA,eAAAjD,GAAAlB,EAAAyB,SAAA,SAAAT,EAAAkD,OAAA,SAAAlD,EAAAyB,IAAA1B,EAAAqD,EAAApE,EAAAgB,GAAA,UAAAA,EAAAkD,SAAA,WAAAhD,IAAAF,EAAAkD,OAAA,QAAAlD,EAAAyB,IAAA,IAAAgC,UAAA,oCAAAvD,EAAA,aAAA6B,EAAA,IAAAzB,EAAAiB,EAAAnB,EAAApB,EAAAyB,SAAAT,EAAAyB,KAAA,aAAAnB,EAAAkB,KAAA,OAAAxB,EAAAkD,OAAA,QAAAlD,EAAAyB,IAAAnB,EAAAmB,IAAAzB,EAAAmD,SAAA,KAAApB,EAAA,IAAAvB,EAAAF,EAAAmB,IAAA,OAAAjB,EAAAA,EAAAyC,MAAAjD,EAAAhB,EAAA0E,YAAAlD,EAAAnF,MAAA2E,EAAA2D,KAAA3E,EAAA4E,QAAA,WAAA5D,EAAAkD,SAAAlD,EAAAkD,OAAA,OAAAlD,EAAAyB,IAAA1B,GAAAC,EAAAmD,SAAA,KAAApB,GAAAvB,GAAAR,EAAAkD,OAAA,QAAAlD,EAAAyB,IAAA,IAAAgC,UAAA,oCAAAzD,EAAAmD,SAAA,KAAApB,EAAA,UAAA8B,EAAA9D,GAAA,IAAAf,EAAA,CAAA8E,OAAA/D,EAAA,SAAAA,IAAAf,EAAA+E,SAAAhE,EAAA,SAAAA,IAAAf,EAAAgF,WAAAjE,EAAA,GAAAf,EAAAiF,SAAAlE,EAAA,SAAAmE,WAAAC,KAAAnF,EAAA,UAAAoF,EAAArE,GAAA,IAAAf,EAAAe,EAAAsE,YAAA,GAAArF,EAAAwC,KAAA,gBAAAxC,EAAAyC,IAAA1B,EAAAsE,WAAArF,CAAA,UAAAqC,EAAAtB,GAAA,KAAAmE,WAAA,EAAAJ,OAAA,SAAA/D,EAAAyC,QAAAqB,EAAA,WAAAS,OAAA,YAAAjK,EAAA2E,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAgB,EAAAhB,EAAAwB,GAAA,GAAAR,EAAA,OAAAA,EAAA0B,KAAA1C,GAAA,sBAAAA,EAAA2E,KAAA,OAAA3E,EAAA,IAAAuF,MAAAvF,EAAAF,QAAA,KAAAsB,GAAA,EAAAE,EAAA,SAAAqD,IAAA,OAAAvD,EAAApB,EAAAF,QAAA,GAAAoB,EAAAwB,KAAA1C,EAAAoB,GAAA,OAAAuD,EAAAtI,MAAA2D,EAAAoB,GAAAuD,EAAAV,MAAA,EAAAU,EAAA,OAAAA,EAAAtI,MAAA0E,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,SAAArD,EAAAqD,KAAArD,CAAA,YAAAmD,UAAAb,EAAA5D,GAAA,2BAAAgD,EAAA/B,UAAAgC,EAAA7B,EAAAkC,EAAA,eAAAjH,MAAA4G,EAAAjB,cAAA,IAAAZ,EAAA6B,EAAA,eAAA5G,MAAA2G,EAAAhB,cAAA,IAAAgB,EAAAwC,YAAA1D,EAAAmB,EAAArB,EAAA,qBAAA5B,EAAAyF,oBAAA,SAAA1E,GAAA,IAAAf,EAAA,mBAAAe,GAAAA,EAAA2E,YAAA,QAAA1F,IAAAA,IAAAgD,GAAA,uBAAAhD,EAAAwF,aAAAxF,EAAAzE,MAAA,EAAAyE,EAAA2F,KAAA,SAAA5E,GAAA,OAAAL,OAAAkF,eAAAlF,OAAAkF,eAAA7E,EAAAkC,IAAAlC,EAAA8E,UAAA5C,EAAAnB,EAAAf,EAAAa,EAAA,sBAAAb,EAAAE,UAAAP,OAAA0B,OAAAkB,GAAAvC,CAAA,EAAAf,EAAA8F,MAAA,SAAA/E,GAAA,OAAA+C,QAAA/C,EAAA,EAAAwC,EAAAG,EAAAzC,WAAAa,EAAA4B,EAAAzC,UAAAS,GAAA,0BAAA1B,EAAA0D,cAAAA,EAAA1D,EAAA+F,MAAA,SAAAhF,EAAAC,EAAAE,EAAAE,EAAAE,QAAA,IAAAA,IAAAA,EAAA0E,SAAA,IAAAxE,EAAA,IAAAkC,EAAAxB,EAAAnB,EAAAC,EAAAE,EAAAE,GAAAE,GAAA,OAAAtB,EAAAyF,oBAAAzE,GAAAQ,EAAAA,EAAAmD,OAAA1E,MAAA,SAAAc,GAAA,OAAAA,EAAAkD,KAAAlD,EAAA1E,MAAAmF,EAAAmD,MAAA,KAAApB,EAAAD,GAAAxB,EAAAwB,EAAA1B,EAAA,aAAAE,EAAAwB,EAAA9B,GAAA,0BAAAM,EAAAwB,EAAA,qDAAAtD,EAAAW,KAAA,SAAAI,GAAA,IAAAf,EAAAU,OAAAK,GAAAC,EAAA,WAAAE,KAAAlB,EAAAgB,EAAAmE,KAAAjE,GAAA,OAAAF,EAAAiF,UAAA,SAAAtB,IAAA,KAAA3D,EAAAlB,QAAA,KAAAiB,EAAAC,EAAAkF,MAAA,GAAAnF,KAAAf,EAAA,OAAA2E,EAAAtI,MAAA0E,EAAA4D,EAAAV,MAAA,EAAAU,CAAA,QAAAA,EAAAV,MAAA,EAAAU,CAAA,GAAA3E,EAAA3E,OAAAA,EAAAgH,EAAApB,UAAA,CAAAyE,YAAArD,EAAAiD,MAAA,SAAAtF,GAAA,QAAAO,KAAA,OAAAoE,KAAA,OAAAN,KAAA,KAAAC,MAAAvD,EAAA,KAAAkD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAAzB,IAAA1B,EAAA,KAAAmE,WAAA1B,QAAA4B,IAAApF,EAAA,QAAAgB,KAAA,WAAAA,EAAAmF,OAAA,IAAAjF,EAAAwB,KAAA,KAAA1B,KAAAuE,OAAAvE,EAAAoF,MAAA,WAAApF,GAAAD,EAAA,EAAAsF,KAAA,gBAAApC,MAAA,MAAAlD,EAAA,KAAAmE,WAAA,GAAAG,WAAA,aAAAtE,EAAAyB,KAAA,MAAAzB,EAAA0B,IAAA,YAAA6D,IAAA,EAAA/B,kBAAA,SAAAvE,GAAA,QAAAiE,KAAA,MAAAjE,EAAA,IAAAgB,EAAA,cAAAuF,EAAArF,EAAAE,GAAA,OAAAI,EAAAgB,KAAA,QAAAhB,EAAAiB,IAAAzC,EAAAgB,EAAA2D,KAAAzD,EAAAE,IAAAJ,EAAAkD,OAAA,OAAAlD,EAAAyB,IAAA1B,KAAAK,CAAA,SAAAA,EAAA,KAAA8D,WAAApF,OAAA,EAAAsB,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAA4D,WAAA9D,GAAAI,EAAAF,EAAA+D,WAAA,YAAA/D,EAAAwD,OAAA,OAAAyB,EAAA,UAAAjF,EAAAwD,QAAA,KAAAvE,KAAA,KAAAmB,EAAAR,EAAAwB,KAAApB,EAAA,YAAAM,EAAAV,EAAAwB,KAAApB,EAAA,iBAAAI,GAAAE,EAAA,SAAArB,KAAAe,EAAAyD,SAAA,OAAAwB,EAAAjF,EAAAyD,UAAA,WAAAxE,KAAAe,EAAA0D,WAAA,OAAAuB,EAAAjF,EAAA0D,WAAA,SAAAtD,GAAA,QAAAnB,KAAAe,EAAAyD,SAAA,OAAAwB,EAAAjF,EAAAyD,UAAA,YAAAnD,EAAA,MAAAoC,MAAA,kDAAAzD,KAAAe,EAAA0D,WAAA,OAAAuB,EAAAjF,EAAA0D,WAAA,KAAAR,OAAA,SAAAzD,EAAAf,GAAA,QAAAgB,EAAA,KAAAkE,WAAApF,OAAA,EAAAkB,GAAA,IAAAA,EAAA,KAAAI,EAAA,KAAA8D,WAAAlE,GAAA,GAAAI,EAAA0D,QAAA,KAAAvE,MAAAW,EAAAwB,KAAAtB,EAAA,oBAAAb,KAAAa,EAAA4D,WAAA,KAAA1D,EAAAF,EAAA,OAAAE,IAAA,UAAAP,GAAA,aAAAA,IAAAO,EAAAwD,QAAA9E,GAAAA,GAAAsB,EAAA0D,aAAA1D,EAAA,UAAAE,EAAAF,EAAAA,EAAA+D,WAAA,UAAA7D,EAAAgB,KAAAzB,EAAAS,EAAAiB,IAAAzC,EAAAsB,GAAA,KAAA4C,OAAA,YAAAS,KAAArD,EAAA0D,WAAAjC,GAAA,KAAAyD,SAAAhF,EAAA,EAAAgF,SAAA,SAAAzF,EAAAf,GAAA,aAAAe,EAAAyB,KAAA,MAAAzB,EAAA0B,IAAA,gBAAA1B,EAAAyB,MAAA,aAAAzB,EAAAyB,KAAA,KAAAmC,KAAA5D,EAAA0B,IAAA,WAAA1B,EAAAyB,MAAA,KAAA8D,KAAA,KAAA7D,IAAA1B,EAAA0B,IAAA,KAAAyB,OAAA,cAAAS,KAAA,kBAAA5D,EAAAyB,MAAAxC,IAAA,KAAA2E,KAAA3E,GAAA+C,CAAA,EAAA0D,OAAA,SAAA1F,GAAA,QAAAf,EAAA,KAAAkF,WAAApF,OAAA,EAAAE,GAAA,IAAAA,EAAA,KAAAgB,EAAA,KAAAkE,WAAAlF,GAAA,GAAAgB,EAAAgE,aAAAjE,EAAA,YAAAyF,SAAAxF,EAAAqE,WAAArE,EAAAiE,UAAAG,EAAApE,GAAA+B,CAAA,kBAAAhC,GAAA,QAAAf,EAAA,KAAAkF,WAAApF,OAAA,EAAAE,GAAA,IAAAA,EAAA,KAAAgB,EAAA,KAAAkE,WAAAlF,GAAA,GAAAgB,EAAA8D,SAAA/D,EAAA,KAAAG,EAAAF,EAAAqE,WAAA,aAAAnE,EAAAsB,KAAA,KAAApB,EAAAF,EAAAuB,IAAA2C,EAAApE,EAAA,QAAAI,CAAA,QAAA4C,MAAA,0BAAA0C,cAAA,SAAA1G,EAAAgB,EAAAE,GAAA,YAAAiD,SAAA,CAAA1C,SAAApG,EAAA2E,GAAA0E,WAAA1D,EAAA4D,QAAA1D,GAAA,cAAAgD,SAAA,KAAAzB,IAAA1B,GAAAgC,CAAA,GAAA/C,CAAA,UAAA2G,EAAAzF,EAAAH,EAAAf,EAAAgB,EAAAI,EAAAI,EAAAE,GAAA,QAAAJ,EAAAJ,EAAAM,GAAAE,GAAAE,EAAAN,EAAAjF,KAAA,OAAA6E,GAAA,YAAAlB,EAAAkB,EAAA,CAAAI,EAAA2C,KAAAlD,EAAAa,GAAAoE,QAAAnC,QAAAjC,GAAA3B,KAAAe,EAAAI,EAAA,CAkEA,QA1CuC,WACnC,IAAAwF,GAIIC,EAAAA,EAAAA,KAHAC,EAAMF,EAANE,OACWC,EAAGH,EAAdI,QAAWD,IACIE,EAAqBL,EAApCM,YAAeD,sBAEXE,EAAiFL,EAAjFK,eAAgBC,EAAiEN,EAAjEM,oCAAqCC,EAA4BP,EAA5BO,wBAE7DxM,IAAAA,WAAgB,WACY,SAAAyM,IAjChC,IAAApG,EAmCS,OAnCTA,EAiCgCJ,IAAA6E,MAAxB,SAAA4B,IAAA,OAAAzG,IAAAoB,MAAA,SAAAsF,GAAA,cAAAA,EAAAjH,KAAAiH,EAAA7C,MAAA,cAAA6C,EAAA7C,KAAA,EACU0C,IAAyB,wBAAAG,EAAAnB,OAAA,GAAAkB,EAAA,IADXD,EAjChC,eAAAvG,EAAA,KAAAf,EAAAyH,UAAA,WAAAzB,SAAA,SAAAhF,EAAAI,GAAA,IAAAI,EAAAN,EAAAwG,MAAA3G,EAAAf,GAAA,SAAA2H,EAAAzG,GAAAyF,EAAAnF,EAAAR,EAAAI,EAAAuG,EAAAC,EAAA,OAAA1G,EAAA,UAAA0G,EAAA1G,GAAAyF,EAAAnF,EAAAR,EAAAI,EAAAuG,EAAAC,EAAA,QAAA1G,EAAA,CAAAyG,OAAA,OAmCSL,EAAAI,MAAA,KAAAD,UAAA,EAHiB,WACMH,EAAAI,MAAC,KAADD,UAAA,CAGxBI,EACJ,GAAG,CAACR,IAEJ,IApCoBS,EAoCZ5L,EAA6C6K,EAA7C7K,gCAAiCzB,EAAYsM,EAAZtM,QACnCsN,EAAkBZ,EAAea,QACnC,SAAAC,GAAO,OACHA,EAAQC,wBAA0BhM,GAClC+L,EAAQxN,UAAYA,GACpBwN,EAAQrK,eAAiBqJ,CAAqB,IAEhDkB,EAAmBf,EAAoCY,QACzD,SAAAC,GAAO,OACHA,EAAQG,YAAclM,GACtB+L,EAAQxN,UAAYA,GACgB,SAApCwN,EAAQI,uBAAkC,IAG5CC,EAAkCP,GAAmBrH,OAAOC,KAAKoH,GAAiBjI,OAAS,EAE3FyI,EAAmBD,EAAkCP,EAAgB,GAAK,KAGhF,MAAO,CACHO,gCAAAA,EACAC,iBAAAA,EACAC,wBAL4BD,SAAAA,EAAkBT,OApDnC,kBADKA,EAqDsDS,aAAgB,EAAhBA,EAAkBT,QAnDjFW,EAAAA,mBAAmBC,OACR,yBAAXZ,EACAW,EAAAA,mBAAmBE,QACR,uBAAXb,EACAW,EAAAA,mBAAmBG,wBADvB,EAgD+F,KAMlGjO,4BALiC2N,EAAwD,KAAtBH,EAAiB,GAO5F","sources":["webpack://@deriv/appstore/../cfd/src/Containers/cfd-password-modal-info.tsx","webpack://@deriv/appstore/../cfd/src/Containers/jurisdiction-checkbox.tsx","webpack://@deriv/appstore/../cfd/src/Containers/cfd-password-modal-tnc.tsx","webpack://@deriv/appstore/../cfd/src/Containers/mt5-create-password/mt5-create-password.tsx","webpack://@deriv/appstore/../hooks/src/useIsSelectedMT5AccountCreated.ts"],"sourcesContent":["import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { useIsSelectedMT5AccountCreated } from '@deriv/hooks';\n\ntype CfdPasswordModalInfoProps = {\n    jurisdiction_selected_shortcode: string;\n    platform: string;\n    product: string;\n    need_tnc: boolean;\n};\n\nconst CfdPasswordModalInfo = ({ platform, product, need_tnc }: CfdPasswordModalInfoProps) => {\n    const { available_account_to_create } = useIsSelectedMT5AccountCreated();\n    return (\n        <div className='cfd-password-modal-info'>\n            <div className='cfd-password-modal-info__icon'>\n                <Icon icon='IcInfoLight' />\n            </div>\n            <Text size='xxxs'>\n                {need_tnc ? (\n                    <Localize\n                        i18n_default_text='You are adding your {{platform}} {{product}} account under {{company}}, regulated by the {{regulatory_authority}} (license no.<0/>)'\n                        values={{\n                            platform,\n                            product,\n                            company: available_account_to_create?.name,\n                            regulatory_authority: available_account_to_create?.regulatory_authority ?? '',\n                        }}\n                        components={[\n                            <span\n                                key={0}\n                                dangerouslySetInnerHTML={{ __html: available_account_to_create?.licence_number ?? '' }}\n                            />,\n                        ]}\n                    />\n                ) : (\n                    <Localize\n                        i18n_default_text='You are adding your {{platform}} {{product}} account under {{company}}.'\n                        values={{\n                            platform,\n                            product,\n                            company: available_account_to_create?.name,\n                        }}\n                    />\n                )}\n            </Text>\n        </div>\n    );\n};\n\nexport default CfdPasswordModalInfo;\n","import React from 'react';\nimport { Checkbox, StaticUrl, Text } from '@deriv/components';\nimport { DBVI_COMPANY_NAMES } from '@deriv/shared';\nimport { observer } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { useIsSelectedMT5AccountCreated } from '@deriv/hooks';\n\ntype TJurisdictionCheckBoxProps = {\n    class_name: string;\n    is_checked: boolean;\n    jurisdiction_selected_shortcode: string;\n    onCheck: () => void;\n};\n\nconst JurisdictionCheckBox = observer(\n    ({ class_name, is_checked, jurisdiction_selected_shortcode, onCheck }: TJurisdictionCheckBoxProps) => {\n        const { available_account_to_create } = useIsSelectedMT5AccountCreated();\n        const getCheckboxLabel = () => (\n            <Text as='p' size='xxs' line_height='m'>\n                <Localize\n                    i18n_default_text=\"I confirm and accept {{company}} 's <0>terms and conditions</0>\"\n                    values={{ company: available_account_to_create?.name }}\n                    components={[\n                        <StaticUrl\n                            key={0}\n                            className='link link--no-underline'\n                            href={DBVI_COMPANY_NAMES[jurisdiction_selected_shortcode]?.tnc_url}\n                            is_document\n                        />,\n                    ]}\n                />\n            </Text>\n        );\n\n        return (\n            <div className={class_name}>\n                <Checkbox\n                    value={is_checked}\n                    onChange={onCheck}\n                    label={getCheckboxLabel()}\n                    defaultChecked={!!is_checked}\n                />\n            </div>\n        );\n    }\n);\n\nexport default JurisdictionCheckBox;\n","import React from 'react';\nimport { getCFDPlatformLabel, CFD_PRODUCTS_TITLE, CFD_PLATFORMS } from '@deriv/shared';\nimport { observer } from '@deriv/stores';\nimport CfdPasswordModalInfo from './cfd-password-modal-info';\nimport JurisdictionCheckBox from './jurisdiction-checkbox';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport classNames from 'classnames';\n\ntype CfdPasswordModalTncProps = {\n    platform: typeof CFD_PLATFORMS[keyof typeof CFD_PLATFORMS];\n    checked: boolean;\n    need_tnc: boolean;\n    onCheck: () => void;\n    className?: string;\n};\n\nconst CfdPasswordModalTnc = observer(\n    ({ platform, checked, onCheck, className, need_tnc }: CfdPasswordModalTncProps) => {\n        const { jurisdiction_selected_shortcode, account_title } = useCfdStore();\n        return (\n            <div className={classNames('cfd-password-modal-tnc', className)}>\n                <CfdPasswordModalInfo\n                    jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                    platform={getCFDPlatformLabel(platform)}\n                    product={account_title}\n                    need_tnc={need_tnc}\n                />\n                {need_tnc && (\n                    <JurisdictionCheckBox\n                        is_checked={checked}\n                        onCheck={onCheck}\n                        class_name='cfd-password-modal__checkbox'\n                        jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                    />\n                )}\n            </div>\n        );\n    }\n);\n\nexport default CfdPasswordModalTnc;\n","import React from 'react';\nimport { Formik, FormikErrors, FormikHelpers } from 'formik';\nimport { FormSubmitButton, PasswordInput, PasswordMeter, Text, Icon } from '@deriv/components';\nimport { getCFDPlatformLabel, getCFDPlatformNames, getErrorMessages } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { useCfdStore } from '../../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { CATEGORY, CFD_PLATFORMS } from '../../Helpers/cfd-config';\nimport './mt5-create-password.scss';\nimport '../../sass/cfd.scss';\nimport CfdPasswordModalTnc from '../cfd-password-modal-tnc';\n// This component is for first MT5 password modal\n\nexport type TCFDPasswordFormValues = { password: string };\n\ntype TCFDPasswordFormReusedProps = {\n    platform: typeof CFD_PLATFORMS[keyof typeof CFD_PLATFORMS];\n    error_message: string;\n    validatePassword?: (values: TCFDPasswordFormValues) => FormikErrors<TCFDPasswordFormValues>;\n};\n\ntype TOnSubmitPassword = (values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) => void;\ntype TCFDCreatePasswordProps = TCFDPasswordFormReusedProps & {\n    password: string;\n    onSubmit: TOnSubmitPassword;\n    need_tnc: boolean;\n};\n\nconst handlePasswordInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    handleChange: (el: React.ChangeEvent<HTMLInputElement>) => void,\n    validateForm: (values?: TCFDPasswordFormValues) => Promise<FormikErrors<TCFDPasswordFormValues>>,\n    setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void\n) => {\n    handleChange(e);\n    validateForm().then(() => {\n        setFieldTouched('password', true);\n    });\n};\n\nconst MT5CreatePassword = ({\n    password,\n    platform,\n    validatePassword,\n    onSubmit,\n    error_message,\n    need_tnc,\n}: TCFDCreatePasswordProps) => {\n    const { account_type } = useCfdStore();\n    const [checked, setChecked] = React.useState(!(need_tnc && account_type.category === CATEGORY.REAL));\n\n    return (\n        <Formik\n            initialValues={{\n                password,\n            }}\n            enableReinitialize\n            validate={validatePassword}\n            onSubmit={onSubmit}\n        >\n            {({\n                errors,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                setFieldTouched,\n                touched,\n                values,\n                validateForm,\n            }) => (\n                <React.Fragment>\n                    <form className='mt5-password-modal-form'>\n                        <div\n                            className='mt5-password-modal__content dc-modal__container_mt5-password-modal__body'\n                            data-testid='dt_mt5_create_password'\n                        >\n                            <div className='mt5-password-modal__create-password-content'>\n                                <div className='mt5-password-modal__create-password-icon'>\n                                    <Icon icon='IcMt5Password' size={100} />\n                                </div>\n\n                                <Text\n                                    size='xs'\n                                    align='left'\n                                    className='mt5-password-modal__create-password-description'\n                                >\n                                    <Localize\n                                        i18n_default_text='Create a password for your {{platform}} account:'\n                                        values={{ platform: getCFDPlatformNames(platform) }}\n                                    />\n                                </Text>\n                                <div className='mt5-password-modal__mt5-input-element'>\n                                    <PasswordMeter\n                                        input={values.password}\n                                        has_error={!!(touched.password && errors.password)}\n                                        custom_feedback_messages={getErrorMessages().password_warnings}\n                                    >\n                                        {({ has_warning }: { has_warning: boolean }) => (\n                                            <PasswordInput\n                                                autoComplete='new-password'\n                                                label={localize('{{platform}} password', {\n                                                    platform: getCFDPlatformLabel(platform),\n                                                })}\n                                                error={\n                                                    (touched.password && errors.password) ||\n                                                    (values.password.length === 0 ? error_message : '')\n                                                }\n                                                name='password'\n                                                value={values.password}\n                                                onBlur={handleBlur}\n                                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                                    handlePasswordInputChange(\n                                                        e,\n                                                        handleChange,\n                                                        validateForm,\n                                                        setFieldTouched\n                                                    );\n                                                }}\n                                                data_testId={`dt_${platform}_password`}\n                                                hint={\n                                                    (!has_warning || values.password.length === 0) &&\n                                                    localize('This password works for all your Deriv MT5 accounts.')\n                                                }\n                                            />\n                                        )}\n                                    </PasswordMeter>\n                                </div>\n                                {account_type.category === CATEGORY.REAL && (\n                                    <CfdPasswordModalTnc\n                                        platform={platform}\n                                        checked={checked}\n                                        onCheck={() => setChecked(prev => !prev)}\n                                        need_tnc={need_tnc}\n                                    />\n                                )}\n                            </div>\n                            <div className='mt5-password-modal__submit-button'>\n                                <FormSubmitButton\n                                    is_disabled={!values.password || !checked || Object.keys(errors).length > 0}\n                                    is_loading={isSubmitting}\n                                    label={localize('Create account')}\n                                    onClick={handleSubmit}\n                                />\n                            </div>\n                        </div>\n                    </form>\n                </React.Fragment>\n            )}\n        </Formik>\n    );\n};\nexport default MT5CreatePassword;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { MT5_ACCOUNT_STATUS } from '@deriv/shared';\n\nconst getStatusBadge = (status: string) => {\n    if (status === 'proof_failed') {\n        return MT5_ACCOUNT_STATUS.FAILED;\n    } else if (status === 'verification_pending') {\n        return MT5_ACCOUNT_STATUS.PENDING;\n    } else if (status === 'needs_verification') {\n        return MT5_ACCOUNT_STATUS.NEEDS_VERIFICATION;\n    }\n};\n\n/**\n * Custom React hook to check if the selected MT5 account has been created.\n *\n * @returns {Object} An object containing the following properties:\n *\n * - `is_selected_MT5_account_created` (boolean): Indicates whether the selected MT5 account has been created.\n * - `existing_account` (Object | null): If the selected account is created, contains the MT5 account details; otherwise `null`.\n * - `existing_account_status` (string | null): Status of the created account (e.g., 'failed', 'pending', 'needs_verification'), or `null` if no account is created.\n * - `available_account_to_create` (Object | null): The account available to create for the selected product. Will be `null` if an account is already created.\n */\n\nconst useIsSelectedMT5AccountCreated = () => {\n    const {\n        client,\n        modules: { cfd },\n        traders_hub: { selected_account_type },\n    } = useStore();\n    const { mt5_login_list, trading_platform_available_accounts, updateMT5AccountDetails } = client;\n\n    React.useEffect(() => {\n        async function fetchData() {\n            await updateMT5AccountDetails();\n        }\n        fetchData();\n    }, [updateMT5AccountDetails]);\n\n    const { jurisdiction_selected_shortcode, product } = cfd;\n    const created_account = mt5_login_list.filter(\n        account =>\n            account.landing_company_short === jurisdiction_selected_shortcode &&\n            account.product === product &&\n            account.account_type === selected_account_type\n    );\n    const selected_account = trading_platform_available_accounts.filter(\n        account =>\n            account.shortcode === jurisdiction_selected_shortcode &&\n            account.product === product &&\n            account.is_default_jurisdiction === 'true'\n    );\n\n    const is_selected_MT5_account_created = created_account && Object.keys(created_account).length > 0;\n\n    const existing_account = is_selected_MT5_account_created ? created_account[0] : null;\n    const existing_account_status = existing_account?.status ? getStatusBadge(existing_account?.status) : null;\n    const available_account_to_create = !is_selected_MT5_account_created ? selected_account[0] : null;\n    return {\n        is_selected_MT5_account_created,\n        existing_account,\n        existing_account_status,\n        available_account_to_create,\n    };\n};\n\nexport default useIsSelectedMT5AccountCreated;\n"],"names":["_ref","_available_account_to","_available_account_to2","platform","product","need_tnc","available_account_to_create","useIsSelectedMT5AccountCreated","React","className","Icon","icon","Text","size","Localize","i18n_default_text","values","company","name","regulatory_authority","components","key","dangerouslySetInnerHTML","__html","licence_number","observer","_DBVI_COMPANY_NAMES$j","class_name","is_checked","jurisdiction_selected_shortcode","onCheck","Checkbox","value","onChange","label","as","line_height","StaticUrl","href","DBVI_COMPANY_NAMES","tnc_url","is_document","defaultChecked","checked","_useCfdStore","useCfdStore","account_title","classNames","CfdPasswordModalInfo","getCFDPlatformLabel","JurisdictionCheckBox","password","validatePassword","onSubmit","error_message","account_type","_React$useState2","_slicedToArray","category","CATEGORY","REAL","setChecked","Formik","initialValues","enableReinitialize","validate","_ref2","errors","isSubmitting","handleBlur","handleChange","handleSubmit","setFieldTouched","touched","validateForm","align","getCFDPlatformNames","PasswordMeter","input","has_error","custom_feedback_messages","getErrorMessages","password_warnings","_ref3","has_warning","PasswordInput","autoComplete","localize","error","length","onBlur","e","then","handlePasswordInputChange","data_testId","concat","hint","CfdPasswordModalTnc","prev","FormSubmitButton","is_disabled","Object","keys","is_loading","onClick","_regeneratorRuntime","t","r","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_useStore","useStore","client","cfd","modules","selected_account_type","traders_hub","mt5_login_list","trading_platform_available_accounts","updateMT5AccountDetails","_fetchData","_callee","_context","arguments","apply","_next","_throw","fetchData","status","created_account","filter","account","landing_company_short","selected_account","shortcode","is_default_jurisdiction","is_selected_MT5_account_created","existing_account","existing_account_status","MT5_ACCOUNT_STATUS","FAILED","PENDING","NEEDS_VERIFICATION"],"sourceRoot":""}