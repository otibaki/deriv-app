{"version":3,"file":"js/core.traders-hub-header-wallets.59e9f15c7bdc668b63ca.js","mappings":"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","sources":["webpack:///./Assets/SvgComponents/header/deriv-logo-short.svg","webpack:///../../account/src/Configs/get-status-badge-config.tsx","webpack:///./App/Containers/CurrencySelectionModal/currency/index.tsx","webpack:///./App/Containers/CurrencySelectionModal/curreny-selection-modal.tsx","webpack:///./App/Containers/CurrencySelectionModal/index.ts","webpack:///./App/Containers/Layout/header/default-mobile-links.tsx","webpack:///./App/Containers/Layout/header/show-notifications.tsx","webpack:///./App/Containers/Layout/header/traders-hub-header-wallets.tsx","webpack:///./App/Containers/Layout/header/traders-hub-home-button.tsx","webpack:///./App/Containers/Layout/header/traders-hub-onboarding.tsx","webpack:///./App/Containers/SetAccountCurrencyModal/set-currency-modal.jsx","webpack:///./App/Containers/SetAccountCurrencyModal/index.js","webpack:///../../hooks/src/useGetMFAccountStatus.ts","webpack:///../../hooks/src/useHasActiveRealAccount.ts","webpack:///../../hooks/src/useHasSetCurrency.ts","webpack:///../../hooks/src/useMFAccountStatus.ts"],"sourcesContent":["import React from \"react\";\nexport default ({\n  styles = {},\n  ...props\n}) => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" {...props}><path d=\"M0 9.33A9.33 9.33 0 019.33 0h5.34A9.33 9.33 0 0124 9.33v5.34A9.33 9.33 0 0114.67 24H9.33A9.33 9.33 0 010 14.67V9.33z\" fill=\"#FF444F\" /><path d=\"M15.06 4.97l-.78 4.4H11.6c-2.51 0-4.9 2.02-5.34 4.53l-.19 1.06c-.44 2.51 1.23 4.54 3.74 4.54h2.24a4.11 4.11 0 003.89-3.3L18 4.5l-2.94.47zm-1.91 10.81c-.1.57-.6 1.03-1.17 1.03h-1.36c-1.13 0-1.88-.92-1.69-2.05l.12-.66a2.55 2.55 0 012.4-2.04h2.36l-.66 3.72z\" fill=\"#fff\" /></svg>;","import React from 'react';\nimport { ACCOUNT_BADGE_STATUS, TAccountBadgeStatus } from '@deriv/shared';\nimport { Localize } from '@deriv-com/translations';\n\nconst getStatusBadgeConfig = (account_status: TAccountBadgeStatus) => {\n    switch (account_status) {\n        case ACCOUNT_BADGE_STATUS.PENDING:\n            return {\n                text: <Localize i18n_default_text='In review' />,\n                icon: 'IcMt5Pending',\n            };\n        case ACCOUNT_BADGE_STATUS.FAILED:\n            return {\n                text: <Localize i18n_default_text='Failed' />,\n                icon: 'IcMt5Failed',\n                icon_size: '18',\n            };\n        case ACCOUNT_BADGE_STATUS.NEEDS_VERIFICATION: {\n            return {\n                text: <Localize i18n_default_text='Needs Verification' />,\n                icon: 'IcMt5Verification',\n                icon_size: '18',\n            };\n        }\n        default:\n            return {\n                text: '',\n                icon: '',\n            };\n    }\n};\n\nexport default getStatusBadgeConfig;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { capitalizeFirstLetter } from '@deriv/shared';\nimport { IconProps } from '../types';\n\n// TODO: This probably can be moved somewhere else.\nexport type Currency =\n    | 'AUD'\n    | 'BCH'\n    | 'BTC'\n    | 'BUSD'\n    | 'DAI'\n    | 'ETH'\n    | 'EURCHECK'\n    | 'EUR'\n    | 'EURS'\n    | 'EUSDT'\n    | 'GBP'\n    | 'IDK'\n    | 'LTC'\n    | 'PAX'\n    | 'TUSD'\n    | 'TUSDT'\n    | 'UNKNOWN'\n    | 'USD'\n    | 'USDC'\n    | 'USDK'\n    | 'UST'\n    | 'VIRTUAL';\n\nconst CurrencyIcon = ({ icon, ...props }: IconProps<Currency>) => {\n    return <Icon icon={`IcCurrency${capitalizeFirstLetter(icon.toLowerCase())}`} {...props} />;\n};\n\nexport default CurrencyIcon;\n","import React from 'react';\nimport getStatusBadgeConfig from '@deriv/account/src/Configs/get-status-badge-config';\nimport { Button, Icon, Modal, Money, StatusBadge, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { getCurrencyName, startPerformanceEventTimer } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport CurrencyIcon from './currency';\nimport { AccountListDetail } from './types';\nimport classNames from 'classnames';\nimport { useHasSetCurrency, useMFAccountStatus } from '@deriv/hooks';\n\ntype CurrencySelectionModalProps = {\n    is_visible: boolean;\n};\n\nconst CurrencySelectionModal = observer(({ is_visible }: CurrencySelectionModalProps) => {\n    const { client, traders_hub, ui } = useStore();\n    const {\n        account_list,\n        accounts,\n        switchAccount,\n        has_any_real_account,\n        account_status,\n        loginid: current_loginid,\n    } = client;\n    const { closeModal, selected_region } = traders_hub;\n    const { openRealAccountSignup, toggleSetCurrencyModal } = ui;\n\n    const mf_account_status = useMFAccountStatus();\n\n    const { text: badge_text, icon: badge_icon } = getStatusBadgeConfig(mf_account_status);\n\n    const hasSetCurrency = useHasSetCurrency();\n    let timeout: ReturnType<typeof setTimeout>;\n\n    return (\n        <Modal is_open={is_visible} toggleModal={closeModal} width='422px' height='422px'>\n            <div className='currency-selection-modal__header'>\n                <Text line-height='m' weight='bold'>\n                    {localize('Select account')}\n                </Text>\n                <Icon className='close-icon' icon='IcCross' onClick={() => closeModal()} />\n            </div>\n            <div className='currency-selection-modal__body'>\n                {(account_list as AccountListDetail[])\n                    .filter(\n                        acc =>\n                            !!acc.is_disabled === false &&\n                            ((!acc.is_virtual && selected_region === 'Non-EU' && acc.loginid.startsWith('CR')) ||\n                                (selected_region === 'EU' && acc.loginid.startsWith('MF')))\n                    )\n                    .map(({ icon, loginid }) => {\n                        const { balance, currency } = accounts[loginid];\n                        const is_selected = current_loginid === loginid;\n                        return (\n                            <div\n                                key={loginid}\n                                className={classNames('currency-item-card', {\n                                    'currency-item-card--active': is_selected,\n                                })}\n                                onClick={async () => {\n                                    if (loginid !== current_loginid) {\n                                        startPerformanceEventTimer('switch_currency_accounts_time');\n                                        await switchAccount(loginid);\n                                    }\n                                    closeModal();\n                                }}\n                            >\n                                <CurrencyIcon\n                                    className='currency-item-card__icons'\n                                    icon={currency ? icon : 'UNKNOWN'}\n                                    size={32}\n                                />\n                                <div className='currency-item-card__details'>\n                                    <Text size='xs'>{getCurrencyName(currency)}</Text>\n                                    <Text color={is_selected ? 'prominent' : 'less-prominent'} size='xxs'>\n                                        {loginid}\n                                    </Text>\n                                </div>\n                                <div className='currency-item-card__balance'>\n                                    {mf_account_status ? (\n                                        <StatusBadge\n                                            account_status={mf_account_status}\n                                            icon={badge_icon}\n                                            text={badge_text}\n                                        />\n                                    ) : (\n                                        <Text size='xs' color='prominent'>\n                                            <Money amount={balance} currency={currency} show_currency />\n                                        </Text>\n                                    )}\n                                </div>\n                            </div>\n                        );\n                    })}\n            </div>\n            <div className='currency-selection-modal__bottom-controls'>\n                <Button\n                    className='block-button'\n                    onClick={() => {\n                        clearTimeout(timeout);\n                        timeout = setTimeout(() => {\n                            if (has_any_real_account && !hasSetCurrency) {\n                                toggleSetCurrencyModal();\n                            } else openRealAccountSignup('manage');\n                        }, 500);\n                        closeModal();\n                    }}\n                    secondary\n                    large\n                >\n                    {localize('Add or manage account')}\n                </Button>\n            </div>\n        </Modal>\n    );\n});\n\nexport default CurrencySelectionModal;\n","import CurrencySelectionModal from './curreny-selection-modal';\nimport './currency-selection-modal.scss';\n\nexport default CurrencySelectionModal;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Icon } from '@deriv/components';\nimport { useIsRealAccountNeededForCashier } from '@deriv/hooks';\nimport { routes } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { BinaryLink } from 'App/Components/Routes';\nimport ShowNotifications from './show-notifications';\nimport TradersHubOnboarding from './traders-hub-onboarding';\n\nconst DefaultMobileLinks = React.memo(() => {\n    const { client, ui } = useStore();\n    const { has_any_real_account, has_wallet, is_virtual } = client;\n    const { toggleNeedRealAccountForCashierModal, toggleReadyToDepositModal } = ui;\n\n    const history = useHistory();\n\n    const real_account_needed_for_cashier = useIsRealAccountNeededForCashier();\n\n    const toggleModal = () => {\n        if (!has_any_real_account) {\n            toggleReadyToDepositModal();\n        } else if (history.location.pathname === routes.traders_hub) {\n            toggleNeedRealAccountForCashierModal();\n        }\n    };\n\n    const handleClickCashier = () => {\n        if ((!has_any_real_account && is_virtual) || real_account_needed_for_cashier) {\n            toggleModal();\n        } else {\n            history.push(routes.cashier_deposit);\n        }\n    };\n\n    return (\n        <React.Fragment>\n            {has_wallet && (\n                <div className='traders-hub-header__menu-right--items--onboarding'>\n                    <TradersHubOnboarding />\n                </div>\n            )}\n            <div className='traders-hub-header__menu-right--items--notifications'>\n                <ShowNotifications />\n            </div>\n            <BinaryLink className='traders-hub-header__setting' to={routes.personal_details}>\n                <Icon icon='IcUserOutline' size={20} />\n            </BinaryLink>\n            {!has_wallet && (\n                <div className='traders-hub-header__cashier-button'>\n                    <Button primary small onClick={handleClickCashier}>\n                        <Localize i18n_default_text='Cashier' />\n                    </Button>\n                </div>\n            )}\n        </React.Fragment>\n    );\n});\n\nDefaultMobileLinks.displayName = 'DefaultMobileLinks';\n\nexport default DefaultMobileLinks;\n","import React from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { ToggleNotifications } from 'App/Components/Layout/Header';\nimport { isTabletOs } from '@deriv/shared';\n\nconst ShowNotifications = observer(() => {\n    const { notifications: notifications_store } = useStore();\n    const { is_notifications_visible, notifications, toggleNotificationsModal } = notifications_store;\n\n    return (\n        <div data-testid='dt_traders_hub_show_notifications' className='traders-hub-header__notification'>\n            <ToggleNotifications\n                count={notifications.length}\n                is_visible={is_notifications_visible}\n                toggleDialog={toggleNotificationsModal}\n                tooltip_message={<Localize i18n_default_text='View notifications' />}\n                showPopover={!isTabletOs}\n            />\n        </div>\n    );\n});\n\nexport default ShowNotifications;\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { Icon, Popover, StaticUrl } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { routes, platforms } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { MenuLinks } from 'App/Components/Layout/Header';\nimport platform_config from 'App/Constants/platform-config';\nimport ToggleMenuDrawer from 'App/Components/Layout/Header/toggle-menu-drawer.jsx';\nimport { BinaryLink } from 'App/Components/Routes';\nimport DerivBrandShortLogo from 'Assets/SvgComponents/header/deriv-logo-short.svg';\nimport RealAccountSignup from 'App/Containers/RealAccountSignup';\nimport SetAccountCurrencyModal from 'App/Containers/SetAccountCurrencyModal';\nimport CurrencySelectionModal from '../../CurrencySelectionModal';\nimport DefaultMobileLinks from './default-mobile-links';\nimport ShowNotifications from './show-notifications';\nimport TradersHubOnboarding from './traders-hub-onboarding';\nimport TradersHubHomeButton from './traders-hub-home-button';\n\ntype TPlatformConfig = typeof platform_config;\ntype TPlatforms = typeof platforms;\n\nconst TradersHubHeaderWallets = observer(() => {\n    const { client, common, traders_hub, ui } = useStore();\n    const { is_logged_in, is_mt5_allowed } = client;\n    const { platform } = common;\n    const { modal_data } = traders_hub;\n    const { header_extension, is_app_disabled, is_route_modal_on } = ui;\n    const { isDesktop } = useDevice();\n\n    const accountSettings = (\n        <BinaryLink className='traders-hub-header__setting' to={routes.personal_details}>\n            <Icon icon='IcUserOutline' size={20} />\n        </BinaryLink>\n    );\n\n    const filterPlatformsForClients = (payload: TPlatformConfig) =>\n        payload.filter(config => {\n            if (config.link_to === routes.mt5) {\n                return !is_logged_in || is_mt5_allowed;\n            }\n            return true;\n        });\n\n    return (\n        <header\n            className={classNames('traders-hub-header', {\n                'traders-hub-header--is-disabled': is_app_disabled || is_route_modal_on,\n                'traders-hub-header--is-hidden': platforms[platform as keyof TPlatforms],\n            })}\n        >\n            <div className='traders-hub-header__menu-left'>\n                {isDesktop ? (\n                    <React.Fragment>\n                        <div className='traders-hub-header-wallets__logo'>\n                            <StaticUrl href='/'>\n                                <DerivBrandShortLogo />\n                            </StaticUrl>\n                        </div>\n                        <div className='traders-hub-header__divider' />\n                        <TradersHubHomeButton />\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment>\n                        <ToggleMenuDrawer {...{ platform_config: filterPlatformsForClients(platform_config) }} />\n                        {header_extension && is_logged_in && <div>{header_extension}</div>}\n                        <div className={'traders-hub-header__logo-wrapper'}>\n                            <div className='traders-hub-header-wallets__logo'>\n                                <StaticUrl href='/'>\n                                    <DerivBrandShortLogo />\n                                </StaticUrl>\n                            </div>\n                        </div>\n                    </React.Fragment>\n                )}\n                <MenuLinks {...{ is_traders_hub_routes: true }} />\n            </div>\n            {isDesktop ? (\n                <React.Fragment>\n                    <div className='traders-hub-header__menu-right'>\n                        <div className='traders-hub-header__divider' />\n                        <div className='traders-hub-header__menu-right--items'>\n                            <div className='traders-hub-header__menu-right--items--onboarding'>\n                                <TradersHubOnboarding />\n                            </div>\n                            <div className='traders-hub-header__menu-right--items--notifications'>\n                                <ShowNotifications />\n                            </div>\n                            <Popover\n                                classNameBubble='account-settings-toggle__tooltip'\n                                alignment='bottom'\n                                message={<Localize i18n_default_text='Manage account settings' />}\n                                should_disable_pointer_events\n                                zIndex='9999'\n                            >\n                                {accountSettings}\n                            </Popover>\n                        </div>\n                    </div>\n                    <RealAccountSignup />\n                </React.Fragment>\n            ) : (\n                <React.Fragment>\n                    <div className='traders-hub-header__mobile-parent'>\n                        <div className='traders-hub-header__menu-middle'>\n                            <DefaultMobileLinks />\n                        </div>\n                    </div>\n                    <RealAccountSignup />\n                </React.Fragment>\n            )}\n            <SetAccountCurrencyModal />\n            <CurrencySelectionModal is_visible={modal_data.active_modal === 'currency_selection'} />\n        </header>\n    );\n});\n\nexport default TradersHubHeaderWallets;\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport classNames from 'classnames';\nimport { Icon, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\n\nconst TradersHubHomeButton = observer(() => {\n    const { ui } = useStore();\n    const { is_dark_mode_on } = ui;\n    const history = useHistory();\n    const location = useLocation();\n    const { pathname } = location;\n\n    const TradersHubIcon = is_dark_mode_on ? 'IcAppstoreHomeDark' : 'IcAppstoreTradersHubHomeUpdated';\n\n    return (\n        <div\n            data-testid='dt_traders_hub_home_button'\n            className={classNames('traders-hub-header__tradershub', {\n                'traders-hub-header__tradershub--active':\n                    pathname === routes.traders_hub || pathname === routes.traders_hub_v2,\n            })}\n            onClick={() => history.push(routes.traders_hub)}\n        >\n            <div className='traders-hub-header__tradershub--home-logo'>\n                <Icon icon={TradersHubIcon} size={is_dark_mode_on ? 15 : 17} />\n            </div>\n            <Text className='traders-hub-header__tradershub--text'>\n                <Localize i18n_default_text=\"Trader's Hub\" />\n            </Text>\n        </div>\n    );\n});\n\nexport default TradersHubHomeButton;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Icon, Popover } from '@deriv/components';\nimport { routes, isTabletOs } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\n\nconst TradersHubOnboarding = observer(() => {\n    const history = useHistory();\n    const { ui } = useStore();\n    const { is_dark_mode_on, is_mobile, setIsWalletsOnboardingTourGuideVisible } = ui;\n\n    const onClickHandler = () => {\n        setIsWalletsOnboardingTourGuideVisible(true);\n        if (history.location.pathname !== routes.traders_hub) {\n            history.push(routes.traders_hub);\n        }\n    };\n\n    const onboardingIcon = (\n        <Icon\n            data_testid='dt_traders_hub_onboarding_icon'\n            icon={is_dark_mode_on ? 'IcAppstoreTradingHubOnboardingDark' : 'IcAppstoreTradingHubOnboarding'}\n            size={20}\n            onClick={onClickHandler}\n        />\n    );\n\n    return (\n        <div data-testid='dt_traders_hub_onboarding'>\n            <div className='traders-hub-header__tradershub--onboarding--logo'>\n                {isTabletOs ? (\n                    onboardingIcon\n                ) : (\n                    <Popover\n                        classNameBubble='account-settings-toggle__tooltip'\n                        alignment='bottom'\n                        message={!is_mobile && <Localize i18n_default_text='View tutorial' />}\n                        should_disable_pointer_events\n                        zIndex='9999'\n                    >\n                        {onboardingIcon}\n                    </Popover>\n                )}\n            </div>\n        </div>\n    );\n});\n\nexport default TradersHubOnboarding;\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { useHasSetCurrency } from '@deriv/hooks';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport 'Sass/set-currency-modal.scss';\n\nconst SetAccountCurrencyModal = observer(() => {\n    const { client, ui } = useStore();\n    const { is_virtual } = client;\n    const {\n        is_set_currency_modal_visible: is_visible,\n        openRealAccountSignup: setCurrency,\n        toggleSetCurrencyModal: toggleModal,\n    } = ui;\n    const has_set_currency = useHasSetCurrency();\n\n    return (\n        <Modal\n            id='dt_set_account_currency_modal'\n            has_close_icon={false}\n            is_open={is_visible}\n            small\n            toggleModal={toggleModal}\n            title={\n                !has_set_currency\n                    ? localize('No currency assigned to your account')\n                    : localize('You have an account that needs action')\n            }\n        >\n            <Modal.Body>\n                {localize('Please set a currency for your existing real account before creating another account.')}\n            </Modal.Body>\n            <Modal.Footer>\n                {!is_virtual ? (\n                    <>\n                        <Button has_effect text={localize('Cancel')} onClick={toggleModal} secondary />\n                        <Button\n                            has_effect\n                            text={localize('Set currency')}\n                            onClick={() => {\n                                toggleModal();\n                                // timeout is to ensure no jumpy animation when modals are overlapping enter/exit transitions\n                                setTimeout(() => {\n                                    setCurrency('set_currency');\n                                }, 250);\n                            }}\n                            primary\n                        />\n                    </>\n                ) : (\n                    <Button has_effect text={localize('OK')} onClick={toggleModal} primary />\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n});\n\nexport default SetAccountCurrencyModal;\n","import SetAccountCurrencyModal from './set-currency-modal.jsx';\n\nexport default SetAccountCurrencyModal;\n","import { useEffect } from 'react';\nimport { useStore } from '@deriv/stores';\nimport { ACCOUNT_BADGE_STATUS } from '@deriv/shared';\n\nconst useGetMFAccountStatus = () => {\n    const { client } = useStore();\n    const { account_status, updateAccountStatus } = client || {};\n\n    useEffect(() => {\n        async function fetchData() {\n            await updateAccountStatus();\n        }\n        fetchData();\n    }, []);\n    const authentication = account_status?.authentication;\n    const poi_status = authentication?.identity?.status;\n    const onfido_status = authentication?.identity?.services?.onfido?.status;\n    const manual_status = authentication?.identity?.services?.manual?.status;\n    const poa_status = authentication?.document?.status;\n\n    const STATUS = {\n        NONE: 'none',\n        VERIFIED: 'verified',\n        PENDING: 'pending',\n        REJECTED: 'rejected',\n        EXPIRED: 'expired',\n        SUSPECTED: 'suspected',\n    } as const;\n    const failed_cases = [STATUS.REJECTED, STATUS.EXPIRED, STATUS.SUSPECTED];\n\n    //@ts-expect-error we can ignore this error since we are checking the status and returning true or false\n    const need_poa_resubmission = poa_status && failed_cases.includes(poa_status);\n    const poa_pending = poa_status === STATUS.PENDING;\n    const poa_not_submitted = poa_status === STATUS.NONE;\n\n    const poi_verified_by_onfido_or_manual = [onfido_status, manual_status].includes(STATUS.VERIFIED);\n    const poi_pending_by_onfido_or_manual =\n        [onfido_status, manual_status].includes(STATUS.PENDING) && !poi_verified_by_onfido_or_manual;\n\n    const poi_not_submitted_by_onfido_or_manual = [onfido_status, manual_status].every(\n        status => status === STATUS.NONE\n    );\n    const need_poi_submission = !poi_pending_by_onfido_or_manual && !poi_verified_by_onfido_or_manual;\n\n    const need_poi_resubmission = !poi_not_submitted_by_onfido_or_manual && need_poi_submission;\n    const is_verified = poi_status === STATUS.VERIFIED && poa_status === STATUS.VERIFIED;\n\n    const getMFAccountStatus = () => {\n        if (poa_status && onfido_status && manual_status) {\n            if (need_poi_resubmission || need_poa_resubmission) {\n                return ACCOUNT_BADGE_STATUS.FAILED;\n            } else if (poi_not_submitted_by_onfido_or_manual || poa_not_submitted) {\n                return ACCOUNT_BADGE_STATUS.NEEDS_VERIFICATION;\n            } else if (poi_pending_by_onfido_or_manual || poa_pending) {\n                return ACCOUNT_BADGE_STATUS.PENDING;\n            }\n            return null;\n        }\n        return null;\n    };\n    const getVerificationStatus = () => (!is_verified ? { poi_status, poa_status, valid_tin: 1, required_tin: 1 } : {});\n\n    return {\n        mf_account_status: getMFAccountStatus(),\n        kyc_status: getVerificationStatus(),\n    };\n};\n\nexport default useGetMFAccountStatus;\n","import { useStore } from '@deriv/stores';\n\nconst useHasActiveRealAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n\n    const has_active_real_account = active_accounts.some(account => account.is_virtual === 0);\n\n    return has_active_real_account;\n};\n\nexport default useHasActiveRealAccount;\n","import { useStore } from '@deriv/stores';\nimport useHasActiveRealAccount from './useHasActiveRealAccount';\n\nconst useHasSetCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n    const has_active_real_account = useHasActiveRealAccount();\n\n    const has_real_account = account_list\n        .filter(account => !account.is_virtual)\n        .some(account => account.title !== 'Real' && account.title !== 'Investment');\n\n    const has_set_currency = has_real_account || !has_active_real_account;\n\n    return has_set_currency;\n};\n\nexport default useHasSetCurrency;\n","import { ACCOUNT_BADGE_STATUS } from '@deriv/shared';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\nimport useGetMFAccountStatus from './useGetMFAccountStatus';\nimport { useStore } from '@deriv/stores';\n\nconst useMFAccountStatus = () => {\n    const {\n        client: { is_eu },\n    } = useStore();\n    const has_malta_invest_account = useHasMaltaInvestAccount();\n    const { mf_account_status } = useGetMFAccountStatus();\n\n    const should_show_status_for_multipliers_account =\n        is_eu &&\n        has_malta_invest_account &&\n        mf_account_status &&\n        [ACCOUNT_BADGE_STATUS.PENDING, ACCOUNT_BADGE_STATUS.FAILED, ACCOUNT_BADGE_STATUS.NEEDS_VERIFICATION].includes(\n            mf_account_status\n        );\n    return should_show_status_for_multipliers_account ? mf_account_status : null;\n};\n\nexport default useMFAccountStatus;\n"],"names":["_ref","styles","props","_objectWithoutProperties","_excluded","_jsxs","_objectSpread","xmlns","width","height","fill","children","_jsx","d","account_status","ACCOUNT_BADGE_STATUS","PENDING","text","Localize","i18n_default_text","icon","FAILED","icon_size","NEEDS_VERIFICATION","Icon","capitalizeFirstLetter","toLowerCase","observer","is_visible","client","traders_hub","ui","useStore","account_list","accounts","switchAccount","has_any_real_account","loginid","current_loginid","closeModal","selected_region","openRealAccountSignup","toggleSetCurrencyModal","mf_account_status","useMFAccountStatus","badge_text","badge_icon","getStatusBadgeConfig","hasSetCurrency","useHasSetCurrency","timeout","Modal","is_open","toggleModal","className","Text","weight","localize","onClick","filter","acc","is_disabled","is_virtual","startsWith","map","_ref2","balance","currency","is_selected","classNames","async","startPerformanceEventTimer","CurrencyIcon","size","getCurrencyName","color","StatusBadge","Money","amount","show_currency","Button","clearTimeout","setTimeout","secondary","large","DefaultMobileLinks","React","has_wallet","toggleNeedRealAccountForCashierModal","toggleReadyToDepositModal","history","useHistory","real_account_needed_for_cashier","useIsRealAccountNeededForCashier","TradersHubOnboarding","ShowNotifications","BinaryLink","to","routes","personal_details","primary","small","handleClickCashier","location","pathname","push","cashier_deposit","displayName","notifications","notifications_store","is_notifications_visible","toggleNotificationsModal","ToggleNotifications","count","length","toggleDialog","tooltip_message","showPopover","isTabletOs","common","is_logged_in","is_mt5_allowed","platform","modal_data","header_extension","is_app_disabled","is_route_modal_on","isDesktop","useDevice","accountSettings","platforms","StaticUrl","href","DerivBrandShortLogo","TradersHubHomeButton","ToggleMenuDrawer","platform_config","payload","config","link_to","mt5","MenuLinks","is_traders_hub_routes","Popover","classNameBubble","alignment","message","should_disable_pointer_events","zIndex","RealAccountSignup","SetAccountCurrencyModal","CurrencySelectionModal","active_modal","is_dark_mode_on","useLocation","TradersHubIcon","traders_hub_v2","is_mobile","setIsWalletsOnboardingTourGuideVisible","onboardingIcon","data_testid","onClickHandler","is_set_currency_modal_visible","setCurrency","has_set_currency","id","has_close_icon","title","Body","Footer","has_effect","_Fragment","useGetMFAccountStatus","_authentication$ident","_authentication$ident2","_authentication$ident3","_authentication$docum","updateAccountStatus","useEffect","fetchData","authentication","poi_status","identity","status","onfido_status","services","onfido","manual_status","manual","poa_status","document","STATUS","need_poa_resubmission","includes","poa_pending","poa_not_submitted","poi_verified_by_onfido_or_manual","poi_pending_by_onfido_or_manual","poi_not_submitted_by_onfido_or_manual","every","is_verified","kyc_status","valid_tin","required_tin","useHasActiveRealAccount","active_accounts","some","account","has_active_real_account","is_eu","has_malta_invest_account","useHasMaltaInvestAccount"],"sourceRoot":""}