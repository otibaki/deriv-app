{"version":3,"file":"account/js/address-details-config.js","mappings":"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","sources":["webpack://@deriv/account/webpack/universalModuleDefinition","webpack://@deriv/account/external umd \"@deriv/shared\"","webpack://@deriv/account/external umd \"@deriv/translations\"","webpack://@deriv/account/webpack/bootstrap","webpack://@deriv/account/webpack/runtime/compat get default export","webpack://@deriv/account/webpack/runtime/define property getters","webpack://@deriv/account/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/account/./Configs/address-details-config.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv/shared\", \"@deriv/translations\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/account\"] = factory(require(\"@deriv/shared\"), require(\"@deriv/translations\"));\n\telse\n\t\troot[\"@deriv/account\"] = factory(root[\"@deriv/shared\"], root[\"@deriv/translations\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import React from 'react';\nimport { GetSettings, StatesList } from '@deriv/api-types';\nimport {\n    generateValidationFunction,\n    getDefaultFields,\n    getErrorMessages,\n    regex_checks,\n    address_permitted_special_characters_message,\n    TSchema,\n} from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TUpgradeInfo } from 'Types';\n\ntype TAddressDetailsConfigProps = {\n    upgrade_info: TUpgradeInfo;\n    real_account_signup_target: string;\n    residence: string;\n    account_settings: GetSettings;\n    states_list: StatesList;\n};\n\nconst address_details_config: ({\n    states_list,\n    account_settings,\n    is_svg,\n}: {\n    states_list: StatesList;\n    account_settings: GetSettings;\n    is_svg: boolean;\n}) => TSchema = ({ states_list, account_settings, is_svg }) => {\n    if (!account_settings) {\n        return {};\n    }\n\n    const base_case = {\n        address_line_1: {\n            supported_in: ['svg', 'maltainvest'],\n            default_value: account_settings.address_line_1 ?? '',\n            rules: [\n                ['req', localize('First line of address is required')],\n                ['length', localize('Only {{max}} characters, please.', { max: 70 }), { max: 70 }],\n                [\n                    'regular',\n                    localize('Use only the following special characters: {{permitted_characters}}', {\n                        permitted_characters: address_permitted_special_characters_message,\n                        interpolation: { escapeValue: false },\n                    }),\n                    {\n                        regex: regex_checks.address_details.address_line_1,\n                    },\n                ],\n                ['po_box', getErrorMessages().po_box()],\n            ].filter(x => (is_svg ? x.indexOf('po_box') !== 0 : x)),\n        },\n        address_line_2: {\n            supported_in: ['svg', 'maltainvest'],\n            default_value: account_settings.address_line_2 ?? '',\n            rules: [\n                ['length', localize('Only {{max}} characters, please.', { max: 70 }), { max: 70 }],\n                [\n                    'regular',\n                    localize('Use only the following special characters: {{permitted_characters}}', {\n                        permitted_characters: address_permitted_special_characters_message,\n                        interpolation: { escapeValue: false },\n                    }),\n                    {\n                        regex: regex_checks.address_details.address_line_2,\n                    },\n                ],\n                ['po_box', getErrorMessages().po_box()],\n            ].filter(x => (is_svg ? x.indexOf('po_box') !== 0 : x)),\n        },\n        address_city: {\n            supported_in: ['svg', 'maltainvest'],\n            default_value: account_settings.address_city ?? '',\n            rules: [\n                ['req', localize('City is required')],\n                ['length', localize('Only {{max}} characters, please.', { max: 99 }), { max: 99 }],\n                [\n                    'regular',\n                    localize('Only letters, periods, hyphens, apostrophes, and spaces, please.'),\n                    {\n                        regex: regex_checks.address_details.address_city,\n                    },\n                ],\n            ],\n        },\n        address_state: {\n            supported_in: ['svg', 'maltainvest'],\n            default_value: states_list.find(state => state.value === account_settings.address_state)?.text ?? '',\n            rules: [\n                ['req', localize('State is required')],\n                [\n                    'regular',\n                    localize('State is not in a proper format'),\n                    {\n                        regex: regex_checks.address_details.address_state,\n                    },\n                ],\n            ],\n        },\n        address_postcode: {\n            supported_in: ['svg', 'maltainvest'],\n            default_value: account_settings.address_postcode ?? '',\n            rules: [\n                [\n                    'length',\n                    localize('Please enter a {{field_name}} under {{max_number}} characters.', {\n                        field_name: localize('postal/ZIP code'),\n                        max_number: 20,\n                        interpolation: { escapeValue: false },\n                    }),\n                    { min: 0, max: 20 },\n                ],\n                [\n                    'regular',\n                    localize('Only letters, numbers, space and hyphen are allowed.'),\n                    {\n                        regex: regex_checks.address_details.address_postcode,\n                    },\n                ],\n            ],\n        },\n    };\n\n    return base_case;\n};\n\nconst addressDetailsConfig = (\n    { states_list, upgrade_info, real_account_signup_target, account_settings }: TAddressDetailsConfigProps,\n    AddressDetails: React.Component\n) => {\n    const is_svg = upgrade_info?.can_upgrade_to === 'svg';\n    const config = address_details_config({ states_list, account_settings, is_svg });\n    const disabled_items = account_settings.immutable_fields;\n\n    return {\n        header: {\n            active_title: localize('Complete your address details'),\n            title: localize('Address'),\n        },\n        body: AddressDetails,\n        form_value: getDefaultFields(real_account_signup_target, config),\n        props: {\n            validate: generateValidationFunction(\n                real_account_signup_target,\n                transformConfig(config, real_account_signup_target)\n            ),\n            disabled_items,\n        },\n        passthrough: ['residence_list', 'is_fully_authenticated', 'has_real_account'],\n        icon: 'IcDashboardAddress',\n    };\n};\n\nexport const transformConfig = (config: TSchema, real_account_signup_target: string) => {\n    // Remove required rule for svg clients and maltainvest clients\n    if (\n        !real_account_signup_target ||\n        real_account_signup_target === 'svg' ||\n        real_account_signup_target === 'maltainvest'\n    ) {\n        config.address_state.rules?.shift();\n    }\n\n    return config;\n};\n\nexport default addressDetailsConfig;\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","transformConfig","config","real_account_signup_target","address_state","rules","shift","addressDetailsConfig","_ref2","AddressDetails","states_list","upgrade_info","account_settings","_ref","is_svg","address_line_1","supported_in","default_value","localize","max","permitted_characters","address_permitted_special_characters_message","interpolation","escapeValue","regex","regex_checks","address_details","getErrorMessages","po_box","filter","x","indexOf","address_line_2","address_city","find","state","value","text","address_postcode","field_name","max_number","min","address_details_config","can_upgrade_to","disabled_items","immutable_fields","header","active_title","title","body","form_value","getDefaultFields","props","validate","generateValidationFunction","passthrough","icon"],"sourceRoot":""}