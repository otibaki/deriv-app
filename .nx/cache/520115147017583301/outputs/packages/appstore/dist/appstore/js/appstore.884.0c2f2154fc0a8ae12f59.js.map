{"version":3,"file":"appstore/js/appstore.884.0c2f2154fc0a8ae12f59.js","mappings":"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","sources":["webpack://@deriv/appstore/../cfd/src/Containers/cfd-password-modal-info.tsx","webpack://@deriv/appstore/../cfd/src/Containers/jurisdiction-checkbox.tsx","webpack://@deriv/appstore/../cfd/src/Containers/cfd-password-modal-tnc.tsx","webpack://@deriv/appstore/../hooks/src/useIsSelectedMT5AccountCreated.ts"],"sourcesContent":["import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { useIsSelectedMT5AccountCreated } from '@deriv/hooks';\n\ntype CfdPasswordModalInfoProps = {\n    jurisdiction_selected_shortcode: string;\n    platform: string;\n    product: string;\n    need_tnc: boolean;\n};\n\nconst CfdPasswordModalInfo = ({ platform, product, need_tnc }: CfdPasswordModalInfoProps) => {\n    const { available_account_to_create } = useIsSelectedMT5AccountCreated();\n    return (\n        <div className='cfd-password-modal-info'>\n            <div className='cfd-password-modal-info__icon'>\n                <Icon icon='IcInfoLight' />\n            </div>\n            <Text size='xxxs'>\n                {need_tnc ? (\n                    <Localize\n                        i18n_default_text='You are adding your {{platform}} {{product}} account under {{company}}, regulated by the {{regulatory_authority}} (license no.<0/>)'\n                        values={{\n                            platform,\n                            product,\n                            company: available_account_to_create?.name,\n                            regulatory_authority: available_account_to_create?.regulatory_authority ?? '',\n                        }}\n                        components={[\n                            <span\n                                key={0}\n                                dangerouslySetInnerHTML={{ __html: available_account_to_create?.licence_number ?? '' }}\n                            />,\n                        ]}\n                    />\n                ) : (\n                    <Localize\n                        i18n_default_text='You are adding your {{platform}} {{product}} account under {{company}}.'\n                        values={{\n                            platform,\n                            product,\n                            company: available_account_to_create?.name,\n                        }}\n                    />\n                )}\n            </Text>\n        </div>\n    );\n};\n\nexport default CfdPasswordModalInfo;\n","import React from 'react';\nimport { Checkbox, StaticUrl, Text } from '@deriv/components';\nimport { DBVI_COMPANY_NAMES } from '@deriv/shared';\nimport { observer } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { useIsSelectedMT5AccountCreated } from '@deriv/hooks';\n\ntype TJurisdictionCheckBoxProps = {\n    class_name: string;\n    is_checked: boolean;\n    jurisdiction_selected_shortcode: string;\n    onCheck: () => void;\n};\n\nconst JurisdictionCheckBox = observer(\n    ({ class_name, is_checked, jurisdiction_selected_shortcode, onCheck }: TJurisdictionCheckBoxProps) => {\n        const { available_account_to_create } = useIsSelectedMT5AccountCreated();\n        const getCheckboxLabel = () => (\n            <Text as='p' size='xxs' line_height='m'>\n                <Localize\n                    i18n_default_text=\"I confirm and accept {{company}} 's <0>terms and conditions</0>\"\n                    values={{ company: available_account_to_create?.name }}\n                    components={[\n                        <StaticUrl\n                            key={0}\n                            className='link link--no-underline'\n                            href={DBVI_COMPANY_NAMES[jurisdiction_selected_shortcode]?.tnc_url}\n                            is_document\n                        />,\n                    ]}\n                />\n            </Text>\n        );\n\n        return (\n            <div className={class_name}>\n                <Checkbox\n                    value={is_checked}\n                    onChange={onCheck}\n                    label={getCheckboxLabel()}\n                    defaultChecked={!!is_checked}\n                />\n            </div>\n        );\n    }\n);\n\nexport default JurisdictionCheckBox;\n","import React from 'react';\nimport { getCFDPlatformLabel, CFD_PRODUCTS_TITLE, CFD_PLATFORMS } from '@deriv/shared';\nimport { observer } from '@deriv/stores';\nimport CfdPasswordModalInfo from './cfd-password-modal-info';\nimport JurisdictionCheckBox from './jurisdiction-checkbox';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport classNames from 'classnames';\n\ntype CfdPasswordModalTncProps = {\n    platform: typeof CFD_PLATFORMS[keyof typeof CFD_PLATFORMS];\n    checked: boolean;\n    need_tnc: boolean;\n    onCheck: () => void;\n    className?: string;\n};\n\nconst CfdPasswordModalTnc = observer(\n    ({ platform, checked, onCheck, className, need_tnc }: CfdPasswordModalTncProps) => {\n        const { jurisdiction_selected_shortcode, account_title } = useCfdStore();\n        return (\n            <div className={classNames('cfd-password-modal-tnc', className)}>\n                <CfdPasswordModalInfo\n                    jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                    platform={getCFDPlatformLabel(platform)}\n                    product={account_title}\n                    need_tnc={need_tnc}\n                />\n                {need_tnc && (\n                    <JurisdictionCheckBox\n                        is_checked={checked}\n                        onCheck={onCheck}\n                        class_name='cfd-password-modal__checkbox'\n                        jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                    />\n                )}\n            </div>\n        );\n    }\n);\n\nexport default CfdPasswordModalTnc;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { MT5_ACCOUNT_STATUS } from '@deriv/shared';\n\nconst getStatusBadge = (status: string) => {\n    if (status === 'proof_failed') {\n        return MT5_ACCOUNT_STATUS.FAILED;\n    } else if (status === 'verification_pending') {\n        return MT5_ACCOUNT_STATUS.PENDING;\n    } else if (status === 'needs_verification') {\n        return MT5_ACCOUNT_STATUS.NEEDS_VERIFICATION;\n    }\n};\n\n/**\n * Custom React hook to check if the selected MT5 account has been created.\n *\n * @returns {Object} An object containing the following properties:\n *\n * - `is_selected_MT5_account_created` (boolean): Indicates whether the selected MT5 account has been created.\n * - `existing_account` (Object | null): If the selected account is created, contains the MT5 account details; otherwise `null`.\n * - `existing_account_status` (string | null): Status of the created account (e.g., 'failed', 'pending', 'needs_verification'), or `null` if no account is created.\n * - `available_account_to_create` (Object | null): The account available to create for the selected product. Will be `null` if an account is already created.\n */\n\nconst useIsSelectedMT5AccountCreated = () => {\n    const {\n        client,\n        modules: { cfd },\n        traders_hub: { selected_account_type },\n    } = useStore();\n    const { mt5_login_list, trading_platform_available_accounts, updateMT5AccountDetails } = client;\n\n    React.useEffect(() => {\n        async function fetchData() {\n            await updateMT5AccountDetails();\n        }\n        fetchData();\n    }, [updateMT5AccountDetails]);\n\n    const { jurisdiction_selected_shortcode, product } = cfd;\n    const created_account = mt5_login_list.filter(\n        account =>\n            account.landing_company_short === jurisdiction_selected_shortcode &&\n            account.product === product &&\n            account.account_type === selected_account_type\n    );\n    const selected_account = trading_platform_available_accounts.filter(\n        account =>\n            account.shortcode === jurisdiction_selected_shortcode &&\n            account.product === product &&\n            account.is_default_jurisdiction === 'true'\n    );\n\n    const is_selected_MT5_account_created = created_account && Object.keys(created_account).length > 0;\n\n    const existing_account = is_selected_MT5_account_created ? created_account[0] : null;\n    const existing_account_status = existing_account?.status ? getStatusBadge(existing_account?.status) : null;\n    const available_account_to_create = !is_selected_MT5_account_created ? selected_account[0] : null;\n    return {\n        is_selected_MT5_account_created,\n        existing_account,\n        existing_account_status,\n        available_account_to_create,\n    };\n};\n\nexport default useIsSelectedMT5AccountCreated;\n"],"names":["_ref","_available_account_to","_available_account_to2","platform","product","need_tnc","available_account_to_create","useIsSelectedMT5AccountCreated","React","className","Icon","icon","Text","size","Localize","i18n_default_text","values","company","name","regulatory_authority","components","key","dangerouslySetInnerHTML","__html","licence_number","observer","_DBVI_COMPANY_NAMES$j","class_name","is_checked","jurisdiction_selected_shortcode","onCheck","Checkbox","value","onChange","label","as","line_height","StaticUrl","href","DBVI_COMPANY_NAMES","tnc_url","is_document","defaultChecked","checked","_useCfdStore","useCfdStore","account_title","classNames","CfdPasswordModalInfo","getCFDPlatformLabel","JurisdictionCheckBox","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_useStore","useStore","client","cfd","modules","selected_account_type","traders_hub","mt5_login_list","trading_platform_available_accounts","updateMT5AccountDetails","_fetchData","_callee","_context","arguments","apply","_next","_throw","fetchData","status","created_account","filter","account","landing_company_short","account_type","selected_account","shortcode","is_default_jurisdiction","is_selected_MT5_account_created","existing_account","existing_account_status","MT5_ACCOUNT_STATUS","FAILED","PENDING","NEEDS_VERIFICATION"],"sourceRoot":""}