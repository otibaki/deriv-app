{"version":3,"file":"cfd/js/CFDPasswordManagerModal.js","mappings":"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","sources":["webpack://@deriv/cfd/webpack/universalModuleDefinition","webpack://@deriv/cfd/webpack/runtime/chunk loaded","webpack://@deriv/cfd/../../node_modules/@deriv-com/ui/dist/_commonjsHelpers-BkfeUUK-.js","webpack://@deriv/cfd/../../node_modules/@deriv-com/ui/dist/index-EY1gwl5O.js","webpack://@deriv/cfd/../../node_modules/@deriv-com/ui/dist/hooks/useDevice.js","webpack://@deriv/cfd/./src/Containers/cfd-change-password-confirmation.tsx","webpack://@deriv/cfd/./src/Containers/trading-password-manager.tsx","webpack://@deriv/cfd/./src/Containers/investor-password-manager/cfd-password-success-message.tsx","webpack://@deriv/cfd/./src/Containers/investor-password-manager/investor-password-manager.tsx","webpack://@deriv/cfd/./src/Containers/investor-password-manager/index.ts","webpack://@deriv/cfd/./src/Containers/cfd-password-manager-modal.tsx","webpack://@deriv/cfd/external umd \"@deriv/components\"","webpack://@deriv/cfd/external umd \"@deriv/shared\"","webpack://@deriv/cfd/external umd \"@deriv/stores\"","webpack://@deriv/cfd/external umd \"@deriv/translations\"","webpack://@deriv/cfd/external umd \"classnames\"","webpack://@deriv/cfd/external umd \"formik\"","webpack://@deriv/cfd/external umd \"mobx\"","webpack://@deriv/cfd/external umd \"react\"","webpack://@deriv/cfd/webpack/bootstrap","webpack://@deriv/cfd/webpack/runtime/compat get default export","webpack://@deriv/cfd/webpack/runtime/define property getters","webpack://@deriv/cfd/webpack/runtime/ensure chunk","webpack://@deriv/cfd/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/cfd/webpack/runtime/runtimeId","webpack://@deriv/cfd/webpack/runtime/jsonp chunk loading","webpack://@deriv/cfd/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv/components\"), require(\"@deriv/shared\"), require(\"@deriv/stores\"), require(\"@deriv/translations\"), require(\"classnames\"), require(\"formik\"), require(\"mobx\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv/components\", \"@deriv/shared\", \"@deriv/stores\", \"@deriv/translations\", \"classnames\", \"formik\", \"mobx\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/cfd\"] = factory(require(\"@deriv/components\"), require(\"@deriv/shared\"), require(\"@deriv/stores\"), require(\"@deriv/translations\"), require(\"classnames\"), require(\"formik\"), require(\"mobx\"), require(\"react\"));\n\telse\n\t\troot[\"@deriv/cfd\"] = factory(root[\"@deriv/components\"], root[\"@deriv/shared\"], root[\"@deriv/stores\"], root[\"@deriv/translations\"], root[\"classnames\"], root[\"formik\"], root[\"mobx\"], root[\"react\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_stores__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_classnames__, __WEBPACK_EXTERNAL_MODULE_formik__, __WEBPACK_EXTERNAL_MODULE_mobx__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn ","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var u = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction f(e) {\n  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, \"default\") ? e.default : e;\n}\nfunction l(e) {\n  if (e.__esModule) return e;\n  var r = e.default;\n  if (typeof r == \"function\") {\n    var t = function o() {\n      return this instanceof o ? Reflect.construct(r, arguments, this.constructor) : r.apply(this, arguments);\n    };\n    t.prototype = r.prototype;\n  } else t = {};\n  return Object.defineProperty(t, \"__esModule\", { value: !0 }), Object.keys(e).forEach(function(o) {\n    var n = Object.getOwnPropertyDescriptor(e, o);\n    Object.defineProperty(t, o, n.get ? n : {\n      enumerable: !0,\n      get: function() {\n        return e[o];\n      }\n    });\n  }), t;\n}\nexport {\n  l as a,\n  u as c,\n  f as g\n};\n","import { useState as d, useLayoutEffect as m, useEffect as u, useRef as l } from \"react\";\nimport { c as a } from \"./_commonjsHelpers-BkfeUUK-.js\";\nvar v = typeof a == \"object\" && a && a.Object === Object && a, E = typeof self == \"object\" && self && self.Object === Object && self;\nv || E || Function(\"return this\")();\nvar f = typeof window < \"u\" ? m : u;\nfunction L(t, s, o, i) {\n  const c = l(s);\n  f(() => {\n    c.current = s;\n  }, [s]), u(() => {\n    const n = window;\n    if (!(n && n.addEventListener))\n      return;\n    const r = (e) => {\n      c.current(e);\n    };\n    return n.addEventListener(t, r, i), () => {\n      n.removeEventListener(t, r, i);\n    };\n  }, [t, o, i]);\n}\nvar h = typeof window > \"u\";\nfunction O(t, {\n  defaultValue: s = !1,\n  initializeWithValue: o = !0\n} = {}) {\n  const i = (e) => h ? s : window.matchMedia(e).matches, [c, n] = d(() => o ? i(t) : s);\n  function r() {\n    n(i(t));\n  }\n  return f(() => {\n    const e = window.matchMedia(t);\n    return r(), e.addListener ? e.addListener(r) : e.addEventListener(\"change\", r), () => {\n      e.removeListener ? e.removeListener(r) : e.removeEventListener(\"change\", r);\n    };\n  }, [t]), c;\n}\nfunction g(t, s, o = \"mousedown\", i = {}) {\n  L(\n    o,\n    (c) => {\n      const n = c.target;\n      if (!n || !n.isConnected)\n        return;\n      (Array.isArray(t) ? t.filter((e) => !!e.current).every((e) => e.current && !e.current.contains(n)) : t.current && !t.current.contains(n)) && s(c);\n    },\n    void 0,\n    i\n  );\n}\nexport {\n  g as a,\n  O as u\n};\n","import { u as t } from \"../index-EY1gwl5O.js\";\nconst d = () => {\n  const i = t(\"(min-width: 1280px)\"), a = t(\"(max-width: 600px)\"), n = t(\n    \"(min-width: 601px) and (max-width: 1279px)\"\n  ), e = t(\n    \"(min-width: 601px) and (max-width: 1279px) and (orientation: portrait)\"\n  ), o = t(\n    \"(max-width: 1279px) and (orientation: landscape)\"\n  );\n  return {\n    /** returns Larger screen tablets [min-width: 1280px] */\n    isDesktop: i,\n    /**  returns Smaller screen tablets [max-width: 600px] */\n    isMobile: a,\n    /** returns Larger screen phones and smaller screen desktop [min-width: 601px and max-width: 1279px] */\n    isTablet: n,\n    /** returns tablet screen with portrait orientation [min-width: 601px and max-width: 1279px and orientation: portrait] */\n    isTabletPortrait: e,\n    /** returns mobile or medium screens in landscape orientation [max-width: 1279px and orientation: landscape] */\n    isMobileOrTabletLandscape: o\n  };\n};\nexport {\n  d as useDevice\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Formik } from 'formik';\nimport { Text, Icon, FormSubmitButton } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { CFD_PLATFORMS, getCFDPlatformLabel } from '@deriv/shared';\nimport { TCFDChangePasswordConfirmationProps } from './props.types';\n\nconst ChangePasswordConfirmation = ({\n    confirm_label,\n    className,\n    platform,\n    onConfirm,\n    onCancel,\n    context,\n}: TCFDChangePasswordConfirmationProps) => (\n    <Formik\n        initialValues={{\n            password: '',\n        }}\n        onSubmit={onConfirm}\n    >\n        {({ isSubmitting, handleSubmit }) => (\n            <form onSubmit={handleSubmit} data-testid='dt_cfd_change_password_form'>\n                <div\n                    className={classNames('cfd-change-password-confirmation__wrapper', {\n                        [`${className}-wrapper`]: className,\n                    })}\n                >\n                    <div className={classNames('cfd-change-password-confirmation', className)}>\n                        <Icon\n                            className='cfd-change-password__icon'\n                            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n                            width='122'\n                            height='108'\n                        />\n                        <Text as='p' align='center' size='s' weight='bold'>\n                            <Localize\n                                i18n_default_text='Confirm to change your {{platform}} password'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <Text\n                            className='cfd-change-password-confirmation__description'\n                            as='p'\n                            align='center'\n                            color='loss-danger'\n                            size='xs'\n                        >\n                            <Localize\n                                i18n_default_text='This will change the password to all of your {{platform}} accounts.'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <FormSubmitButton\n                            is_center={true}\n                            label={confirm_label || localize('Create')}\n                            cancel_label={localize('Cancel')}\n                            is_loading={isSubmitting}\n                            has_cancel={true}\n                            onCancel={onCancel}\n                            context={context}\n                        />\n                    </div>\n                </div>\n            </form>\n        )}\n    </Formik>\n);\n\nexport default ChangePasswordConfirmation;\n","import React from 'react';\nimport { Text, Button, Icon, MultiStep, SendEmailTemplate } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { getCFDPlatformLabel, WS } from '@deriv/shared';\nimport ChangePasswordConfirmation from './cfd-change-password-confirmation';\nimport { TChangePassword, TPasswordResetAndTradingPasswordManager } from './props.types';\nimport { CATEGORY, CFD_PLATFORMS } from '../Helpers/cfd-config';\n\nconst ChangePassword = ({ platform, onConfirm }: TChangePassword) => (\n    <div className='cfd-change-password'>\n        <Icon\n            className='cfd-change-password__icon'\n            icon={platform === CFD_PLATFORMS.MT5 ? 'IcMt5OnePassword' : 'IcDxtradeOnePassword'}\n            width='122'\n            height='108'\n        />\n        <Text as='p' align='center' size='s' weight='bold'>\n            <Localize\n                i18n_default_text='{{platform}} password'\n                values={{\n                    platform: getCFDPlatformLabel(platform),\n                }}\n            />\n        </Text>\n        <Text as='p' align='center' className='cfd-change-password__description' size='xs'>\n            {platform === CFD_PLATFORMS.MT5 ? (\n                <Localize i18n_default_text='Use this password to log in to your Deriv MT5 accounts on the desktop, web, and mobile apps.' />\n            ) : (\n                <Localize i18n_default_text='Use this password to log in to your Deriv X accounts on the web and mobile apps.' />\n            )}\n        </Text>\n        <Button\n            className='dc-btn dc-btn--primary dc-btn__large dc-modal__container_cfd-reset-password-modal__button'\n            onClick={onConfirm}\n        >\n            <Text size='xs' weight='bold' color='colored-background'>\n                <Localize i18n_default_text='Change password' />\n            </Text>\n        </Button>\n    </div>\n);\n\nconst PasswordReset = ({ email, platform, account_group }: TPasswordResetAndTradingPasswordManager) => {\n    const onClickSendEmail = React.useCallback(() => {\n        let redirect_to = platform === CFD_PLATFORMS.MT5 ? 1 : 2;\n\n        // if account type is real convert redirect_to from 1 or 2 to 10 or 20\n        // and if account type is demo convert redirect_to from 1 or 2 to 11 or 21\n        if (account_group === CATEGORY.REAL) {\n            redirect_to = Number(`${redirect_to}0`);\n        } else if (account_group === CATEGORY.DEMO) {\n            redirect_to = Number(`${redirect_to}1`);\n        }\n\n        const password_reset_code =\n            platform === CFD_PLATFORMS.MT5\n                ? 'trading_platform_mt5_password_reset'\n                : 'trading_platform_dxtrade_password_reset';\n\n        WS.verifyEmail(email, password_reset_code, {\n            url_parameters: {\n                redirect_to,\n            },\n        });\n    }, [email, platform, account_group]);\n\n    React.useEffect(() => {\n        onClickSendEmail();\n    }, [onClickSendEmail]);\n\n    return (\n        <SendEmailTemplate\n            title={localize(\"We've sent you an email\")}\n            subtitle={localize('Please click on the link in the email to change your {{platform}} password.', {\n                platform: getCFDPlatformLabel(platform),\n            })}\n            lbl_no_receive={localize(\"Didn't receive the email?\")}\n            txt_resend={localize('Resend email')}\n            txt_resend_in={localize('Resend email in')}\n            onClickSendEmail={onClickSendEmail}\n        />\n    );\n};\n\nconst TradingPasswordManager = ({ platform, email, account_group }: TPasswordResetAndTradingPasswordManager) => {\n    const multi_step_ref = React.useRef<{ goNextStep: () => void; goPrevStep: () => void }>();\n\n    const steps = [\n        {\n            component: <ChangePassword platform={platform} onConfirm={() => multi_step_ref.current?.goNextStep()} />,\n        },\n        {\n            component: (\n                <ChangePasswordConfirmation\n                    confirm_label={localize('Confirm')}\n                    platform={platform}\n                    onConfirm={() => multi_step_ref.current?.goNextStep()}\n                    onCancel={() => multi_step_ref.current?.goPrevStep()}\n                />\n            ),\n        },\n        {\n            component: <PasswordReset platform={platform} email={email} account_group={account_group} />,\n        },\n    ];\n\n    return (\n        <div className='cfd-trading-password'>\n            <MultiStep ref={multi_step_ref} steps={steps} />\n        </div>\n    );\n};\n\nexport default TradingPasswordManager;\n","import React from 'react';\nimport { Text, Button, Icon } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { TCFDPasswordSuccessMessage } from '../props.types';\n\nconst CFDPasswordSuccessMessage = ({ toggleModal, is_investor }: TCFDPasswordSuccessMessage) => (\n    <div className='cfd-password-manager__success'>\n        <Icon icon='IcPasswordUpdated' size={128} />\n        <Text as='p' size='xxs' align='center'>\n            {is_investor ? (\n                <Localize i18n_default_text='Your investor password has been changed.' />\n            ) : (\n                <Localize i18n_default_text='Your password has been changed.' />\n            )}\n        </Text>\n        <Button onClick={toggleModal} className='cfd-password-manager__success-btn' primary large>\n            <p className='dc-btn__text'>{localize('OK')}</p>\n        </Button>\n    </div>\n);\n\nexport default CFDPasswordSuccessMessage;\n","import React from 'react';\nimport { Field, Form, Formik, FieldProps } from 'formik';\nimport { PasswordInput, PasswordMeter, Text, Button } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { getErrorMessages } from '@deriv/shared';\nimport CFDPasswordSuccessMessage from './cfd-password-success-message';\nimport { TMultiStepRefProps, TPasswordManagerModalFormValues } from '../props.types';\n\ntype TInvestorPasswordManagerProps = {\n    error_message_investor: string;\n    is_submit_success_investor: boolean;\n    multi_step_ref: React.MutableRefObject<TMultiStepRefProps | undefined>;\n    onSubmit: (values: TPasswordManagerModalFormValues) => Promise<void>;\n    setPasswordType: (value: string) => void;\n    toggleModal: () => void;\n    validatePassword: (values: { old_password: string; new_password: string; password_type: string }) => void | object;\n};\n\nconst InvestorPasswordManager = ({\n    error_message_investor,\n    is_submit_success_investor,\n    multi_step_ref,\n    onSubmit,\n    setPasswordType,\n    toggleModal,\n    validatePassword,\n}: TInvestorPasswordManagerProps) => {\n    if (is_submit_success_investor) {\n        return <CFDPasswordSuccessMessage toggleModal={toggleModal} is_investor />;\n    }\n\n    const type_investor = 'investor';\n\n    const initial_values = { old_password: '', new_password: '', password_type: `${type_investor}` };\n\n    return (\n        <div className='cfd-password-manager__investor-wrapper'>\n            <Text as='p' size='xs' className='cfd-password-manager--paragraph'>\n                <Localize i18n_default_text='Use this password to grant viewing access to another user. While they may view your trading account, they will not be able to trade or take any other actions.' />\n            </Text>\n            <Text as='p' size='xs' className='cfd-password-manager--paragraph'>\n                <Localize i18n_default_text='If this is the first time you try to create a password, or you have forgotten your password, please reset it.' />\n            </Text>\n            {error_message_investor && (\n                <Text\n                    as='p'\n                    color='loss-danger'\n                    size='xs'\n                    className='cfd-password-manager--error-message'\n                    data-testid='dt_error_message_investor'\n                >\n                    {error_message_investor}\n                </Text>\n            )}\n            <Formik initialValues={initial_values} validate={validatePassword} onSubmit={onSubmit}>\n                {({ isSubmitting, errors, setFieldTouched, values, touched }) => (\n                    <Form className='cfd-password-manager__investor-form' noValidate>\n                        <Field name='old_password'>\n                            {({ field }: FieldProps<string, TPasswordManagerModalFormValues>) => (\n                                <PasswordInput\n                                    {...field}\n                                    autoComplete='current-password'\n                                    label={localize('Current investor password')}\n                                    error={touched.old_password && errors.old_password}\n                                    required\n                                />\n                            )}\n                        </Field>\n                        <Field name='new_password'>\n                            {({ field }: FieldProps<string, TPasswordManagerModalFormValues>) => (\n                                <PasswordMeter\n                                    input={field.value}\n                                    has_error={!!(touched.new_password && errors.new_password)}\n                                    custom_feedback_messages={getErrorMessages().password_warnings}\n                                >\n                                    {({ has_warning }: { has_warning: boolean }) => (\n                                        <PasswordInput\n                                            {...field}\n                                            autoComplete='new-password'\n                                            label={localize('New investor password')}\n                                            hint={\n                                                !has_warning &&\n                                                localize(\n                                                    'Strong passwords contain at least 8 characters, combine uppercase and lowercase letters and numbers.'\n                                                )\n                                            }\n                                            error={touched.new_password && errors.new_password}\n                                            onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                                                setFieldTouched('new_password', true, true);\n                                                field.onChange(e);\n                                            }}\n                                            className='cfd-password-manager__new-password'\n                                            required\n                                        />\n                                    )}\n                                </PasswordMeter>\n                            )}\n                        </Field>\n                        <div className='cfd-password-manager__actions'>\n                            <Button\n                                className='cfd-password-manager--button'\n                                is_disabled={\n                                    isSubmitting ||\n                                    !values.old_password ||\n                                    !values.new_password ||\n                                    Object.keys(errors).length > 0\n                                }\n                                is_loading={isSubmitting}\n                                text={localize('Change investor password')}\n                                primary\n                                large\n                            />\n                            <Button\n                                className='cfd-password-manager--button'\n                                type='button'\n                                onClick={() => {\n                                    setPasswordType('investor');\n                                    multi_step_ref.current?.goNextStep();\n                                }}\n                                text={localize('Create or reset investor password')}\n                                tertiary\n                                large\n                            />\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nexport default InvestorPasswordManager;\n","import InvestorPasswordManager from './investor-password-manager';\n\nexport default InvestorPasswordManager;\n","import React from 'react';\nimport {\n    Icon,\n    Modal,\n    Tabs,\n    Button,\n    Div100vhContainer,\n    MultiStep,\n    PageOverlay,\n    ThemedScrollbars,\n    UILoader,\n    Text,\n} from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { localize, Localize } from '@deriv/translations';\nimport { getCFDPlatformLabel } from '@deriv/shared';\nimport { FormikErrors } from 'formik';\nimport CFDStore from '../Stores/Modules/CFD/cfd-store';\nimport TradingPasswordManager from './trading-password-manager';\nimport InvestorPasswordManager from './investor-password-manager';\nimport {\n    TCountdownComponent,\n    TCFDPasswordReset,\n    TCFDPasswordManagerTabContentWrapper,\n    TCFDPasswordManagerTabContent,\n    TCFDPasswordManagerModal,\n    TFormValues,\n    TPasswordManagerModalFormValues,\n} from './props.types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { CFD_PLATFORMS } from '../Helpers/cfd-config';\nimport { validatePassword } from '../Helpers/constants';\n\nconst CountdownComponent = ({ count_from = 60, onTimeout }: TCountdownComponent) => {\n    const [count, setCount] = React.useState<number>(count_from);\n\n    React.useEffect(() => {\n        let interval: ReturnType<typeof setTimeout>;\n\n        if (count !== 0) {\n            interval = setTimeout(() => {\n                setCount(count - 1);\n            }, 1000);\n        } else {\n            onTimeout();\n        }\n\n        return () => {\n            clearTimeout(interval);\n        };\n\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [count]);\n    return <span className='countdown'>{count}</span>;\n};\n\nconst CFDPasswordReset = ({\n    sendVerifyEmail,\n    account_type,\n    account_group,\n    server,\n    password_type,\n}: TCFDPasswordReset) => {\n    const [is_resend_verification_requested, setResendVerification] = React.useState<boolean>(false);\n    const [is_resend_verification_sent, setResendVerificationSent] = React.useState<boolean>(false);\n\n    React.useEffect(() => {\n        localStorage.setItem('cfd_reset_password_intent', [server, account_group, account_type].join('.'));\n        localStorage.setItem('cfd_reset_password_type', password_type);\n        sendVerifyEmail();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const onClickVerification = () => {\n        setResendVerification(true);\n    };\n\n    const resendVerification = () => {\n        sendVerifyEmail();\n        setResendVerificationSent(true);\n    };\n\n    return (\n        <div className='cfd-verification-email-sent'>\n            <Icon icon='IcEmailSent' size={128} />\n            <h2 className='cfd-verification-email-sent__title'>\n                <Localize i18n_default_text=\"We've sent you an email\" />\n            </h2>\n            <Text as='p' size='xs' align='center'>\n                <Localize i18n_default_text='Please click on the link in the email to reset your password.' />\n            </Text>\n            {!is_resend_verification_requested && (\n                <Button className='cfd-verification-email-sent__resend-button' primary onClick={onClickVerification}>\n                    <Localize i18n_default_text=\"Didn't receive the email?\" />\n                </Button>\n            )}\n            {is_resend_verification_requested && (\n                <>\n                    <Text\n                        as='p'\n                        size='xs'\n                        align='center'\n                        weight='bold'\n                        className='cfd-verification-email-sent__title--sub'\n                    >\n                        <Localize i18n_default_text={\"Didn't receive the email?\"} />\n                    </Text>\n                    <Text as='p' size='xs' align='center'>\n                        <Localize i18n_default_text=\"Check your spam or junk folder. If it's not there, try resending the email.\" />\n                    </Text>\n                    <Button\n                        className='cfd-verification-email-sent__resend-button'\n                        large\n                        primary\n                        disabled={is_resend_verification_sent}\n                        onClick={resendVerification}\n                    >\n                        {!is_resend_verification_sent && <Localize i18n_default_text='Resend email' />}\n                        {is_resend_verification_sent && (\n                            <>\n                                <Localize\n                                    i18n_default_text='Resend in <0 /> seconds'\n                                    components={[\n                                        <CountdownComponent\n                                            key={0}\n                                            onTimeout={() => setResendVerificationSent(false)}\n                                            count_from={60}\n                                        />,\n                                    ]}\n                                />\n                            </>\n                        )}\n                    </Button>\n                </>\n            )}\n        </div>\n    );\n};\n\nconst CFDPasswordManagerTabContentWrapper = ({ multi_step_ref, steps }: TCFDPasswordManagerTabContentWrapper) => (\n    <MultiStep ref={multi_step_ref} steps={steps} className='cfd-password-manager' lbl_previous={localize('Back')} />\n);\n\nconst CFDPasswordManagerTabContent = ({\n    toggleModal,\n    selected_login,\n    email,\n    setPasswordType,\n    multi_step_ref,\n    platform,\n    onChangeActiveTabIndex,\n    account_group,\n}: TCFDPasswordManagerTabContent) => {\n    const { isDesktop } = useDevice();\n    const [active_tab_index, setActiveTabIndex] = React.useState<number>(0);\n    const [error_message_investor, setErrorMessageInvestor] = React.useState<string>('');\n    const [is_submit_success_investor, setSubmitSuccessInvestor] = React.useState<boolean>(false);\n\n    // view height - margin top and bottom of modal - modal title - modal content margin top and bottom - table title\n    const container_height = 'calc(100vh - 84px - 5.6rem - 8.8rem - 4rem)';\n    const validateNewPasswordPolicy = (values: TFormValues) => {\n        const errors: FormikErrors<TFormValues> = {};\n\n        if (!values.old_password) {\n            errors.old_password = localize('This field is required');\n        }\n        if (!values.new_password) {\n            errors.new_password = localize('This field is required');\n        }\n\n        if (validatePassword(values.new_password)) errors.new_password = validatePassword(values.new_password);\n\n        return errors;\n    };\n    const showError = (error_message: string) => {\n        setErrorMessageInvestor(error_message);\n    };\n\n    const hideError = () => {\n        setErrorMessageInvestor('');\n        setSubmitSuccessInvestor(true);\n    };\n\n    const onSubmit = React.useCallback(\n        async (values: TPasswordManagerModalFormValues) => {\n            if (!selected_login) {\n                return;\n            }\n\n            const error = await CFDStore.changePassword({ login: selected_login, ...values });\n            if (error) {\n                showError(error);\n            } else {\n                hideError();\n            }\n        },\n        [selected_login]\n    );\n\n    const updateAccountTabIndex = (index: number) => {\n        setActiveTabIndex(index);\n        onChangeActiveTabIndex(index);\n        setErrorMessageInvestor('');\n        setSubmitSuccessInvestor(false);\n    };\n\n    const trading_password_manager = (\n        <React.Fragment>\n            {isDesktop ? (\n                <ThemedScrollbars height={container_height} is_bypassed={!isDesktop} autohide={false}>\n                    <TradingPasswordManager\n                        toggleModal={toggleModal}\n                        platform={platform}\n                        email={email}\n                        account_group={account_group}\n                    />\n                </ThemedScrollbars>\n            ) : (\n                <Div100vhContainer className='cfd-password-manager__scroll-wrapper' height_offset='120px'>\n                    <TradingPasswordManager\n                        toggleModal={toggleModal}\n                        platform={platform}\n                        email={email}\n                        account_group={account_group}\n                    />\n                </Div100vhContainer>\n            )}\n        </React.Fragment>\n    );\n\n    if (platform === CFD_PLATFORMS.DXTRADE) return trading_password_manager;\n\n    return (\n        <Tabs active_index={active_tab_index} onTabItemClick={updateAccountTabIndex} top>\n            <div\n                label={localize('{{platform}} password', {\n                    platform: getCFDPlatformLabel(platform),\n                })}\n            >\n                {trading_password_manager}\n            </div>\n            <div label={localize('Investor password')}>\n                {isDesktop ? (\n                    <ThemedScrollbars height={container_height}>\n                        <InvestorPasswordManager\n                            is_submit_success_investor={is_submit_success_investor}\n                            toggleModal={toggleModal}\n                            error_message_investor={error_message_investor}\n                            validatePassword={validateNewPasswordPolicy}\n                            onSubmit={onSubmit}\n                            setPasswordType={setPasswordType}\n                            multi_step_ref={multi_step_ref}\n                        />\n                    </ThemedScrollbars>\n                ) : (\n                    <Div100vhContainer className='cfd-password-manager__scroll-wrapper' height_offset='120px'>\n                        <InvestorPasswordManager\n                            is_submit_success_investor={is_submit_success_investor}\n                            toggleModal={toggleModal}\n                            error_message_investor={error_message_investor}\n                            validatePassword={validateNewPasswordPolicy}\n                            onSubmit={onSubmit}\n                            setPasswordType={setPasswordType}\n                            multi_step_ref={multi_step_ref}\n                        />\n                    </Div100vhContainer>\n                )}\n            </div>\n        </Tabs>\n    );\n};\n\nconst CFDPasswordManagerModal = observer(\n    ({\n        is_visible,\n        platform,\n        selected_login,\n        toggleModal,\n        selected_account_type,\n        selected_account_group,\n        selected_server,\n    }: TCFDPasswordManagerModal) => {\n        const { client, ui } = useStore();\n        const { isDesktop } = useDevice();\n\n        const { email } = client;\n        const { enableApp, disableApp } = ui;\n\n        const { sendVerifyEmail } = useCfdStore();\n\n        const multi_step_ref: React.MutableRefObject<undefined> = React.useRef();\n        const [index, setIndex] = React.useState<number>(0);\n\n        const [password_type, setPasswordType] = React.useState('main');\n\n        if (!selected_login) return null;\n\n        const getTitle = () => {\n            return localize('Manage {{platform}} password', {\n                platform: getCFDPlatformLabel(platform),\n            });\n        };\n\n        const getHeader = (i: number) => {\n            if (i === 0) {\n                return localize('Manage {{platform}} password', {\n                    platform: getCFDPlatformLabel(platform),\n                });\n            }\n            return localize('Manage password');\n        };\n\n        const onChangeActiveTabIndex = (i: number) => {\n            setIndex(i);\n        };\n\n        const steps = [\n            {\n                component: (\n                    <CFDPasswordManagerTabContent\n                        email={email}\n                        selected_login={selected_login}\n                        toggleModal={toggleModal}\n                        setPasswordType={setPasswordType}\n                        multi_step_ref={multi_step_ref}\n                        platform={platform}\n                        onChangeActiveTabIndex={onChangeActiveTabIndex}\n                        account_group={selected_account_group}\n                    />\n                ),\n            },\n            {\n                component: (\n                    <CFDPasswordReset\n                        server={selected_server}\n                        sendVerifyEmail={sendVerifyEmail}\n                        account_type={selected_account_type}\n                        account_group={selected_account_group}\n                        password_type={password_type}\n                    />\n                ),\n            },\n        ];\n\n        return (\n            <React.Suspense fallback={<UILoader />}>\n                {isDesktop ? (\n                    <Modal\n                        className='cfd-password-manager__modal'\n                        disableApp={disableApp}\n                        enableApp={enableApp}\n                        is_open={is_visible}\n                        title={getTitle()}\n                        toggleModal={toggleModal}\n                        height='688px'\n                        width='90.4rem'\n                        should_header_stick_body={false}\n                    >\n                        <CFDPasswordManagerTabContentWrapper steps={steps} multi_step_ref={multi_step_ref} />\n                    </Modal>\n                ) : (\n                    <PageOverlay\n                        is_open={is_visible}\n                        portal_id='deriv_app'\n                        header={getHeader(index)}\n                        onClickClose={toggleModal}\n                    >\n                        <CFDPasswordManagerTabContentWrapper steps={steps} multi_step_ref={multi_step_ref} />\n                    </PageOverlay>\n                )}\n            </React.Suspense>\n        );\n    }\n);\n\nexport default CFDPasswordManagerModal;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_stores__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","module.exports = __WEBPACK_EXTERNAL_MODULE_classnames__;","module.exports = __WEBPACK_EXTERNAL_MODULE_formik__;","module.exports = __WEBPACK_EXTERNAL_MODULE_mobx__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// The chunk loading function for additional chunks\n// Since all referenced chunks are already included\n// in this file, this function is empty here.\n__webpack_require__.e = () => (Promise.resolve());","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.j = \"CFDPasswordManagerModal\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"CFDPasswordManagerModal\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_deriv_cfd\"] = self[\"webpackChunk_deriv_cfd\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"internalCFDStoreUsage\",\"utilities\"], () => (__webpack_require__(\"./src/Containers/cfd-password-manager-modal.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__deriv_components__","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_stores__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__WEBPACK_EXTERNAL_MODULE_classnames__","__WEBPACK_EXTERNAL_MODULE_formik__","__WEBPACK_EXTERNAL_MODULE_mobx__","__WEBPACK_EXTERNAL_MODULE_react__","deferred","globalThis","window","global","v","Object","E","Function","h","O","t","defaultValue","s","initializeWithValue","o","i","e","matchMedia","matches","c","n","r","addListener","addEventListener","removeListener","removeEventListener","d","isDesktop","isMobile","isTablet","isTabletPortrait","isMobileOrTabletLandscape","_ref","confirm_label","className","platform","onConfirm","onCancel","context","React","Formik","initialValues","password","onSubmit","_ref2","isSubmitting","handleSubmit","classNames","_defineProperty","concat","Icon","icon","CFD_PLATFORMS","MT5","width","height","Text","as","align","size","weight","Localize","i18n_default_text","values","getCFDPlatformLabel","color","FormSubmitButton","is_center","label","localize","cancel_label","is_loading","has_cancel","ChangePassword","Button","onClick","PasswordReset","email","account_group","onClickSendEmail","redirect_to","CATEGORY","REAL","Number","DEMO","password_reset_code","WS","verifyEmail","url_parameters","SendEmailTemplate","title","subtitle","lbl_no_receive","txt_resend","txt_resend_in","_ref3","multi_step_ref","steps","component","_multi_step_ref$curre","current","goNextStep","ChangePasswordConfirmation","_multi_step_ref$curre2","_multi_step_ref$curre3","goPrevStep","MultiStep","ref","toggleModal","is_investor","primary","large","error_message_investor","is_submit_success_investor","setPasswordType","validatePassword","CFDPasswordSuccessMessage","initial_values","old_password","new_password","password_type","validate","errors","setFieldTouched","touched","Form","noValidate","Field","name","field","PasswordInput","_extends","autoComplete","error","required","_ref4","PasswordMeter","input","value","has_error","custom_feedback_messages","getErrorMessages","password_warnings","_ref5","has_warning","hint","onChange","is_disabled","keys","length","text","type","tertiary","_regeneratorRuntime","prototype","hasOwnProperty","defineProperty","Symbol","a","iterator","asyncIterator","u","toStringTag","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","l","f","y","GeneratorFunction","GeneratorFunctionPrototype","p","getPrototypeOf","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","apply","_objectSpread","arguments","getOwnPropertyDescriptors","defineProperties","toPrimitive","String","_toPrimitive","_toPropertyKey","asyncGeneratorStep","_slicedToArray","Array","isArray","_arrayWithHoles","_iterableToArrayLimit","_arrayLikeToArray","toString","from","test","_unsupportedIterableToArray","_nonIterableRest","CountdownComponent","_ref$count_from","count_from","onTimeout","_React$useState2","count","setCount","interval","setTimeout","clearTimeout","CFDPasswordReset","sendVerifyEmail","account_type","server","_React$useState4","is_resend_verification_requested","setResendVerification","_React$useState6","is_resend_verification_sent","setResendVerificationSent","localStorage","setItem","join","disabled","components","key","CFDPasswordManagerTabContentWrapper","lbl_previous","CFDPasswordManagerTabContent","selected_login","onChangeActiveTabIndex","useDevice","_React$useState8","active_tab_index","setActiveTabIndex","_React$useState10","setErrorMessageInvestor","_React$useState12","setSubmitSuccessInvestor","container_height","validateNewPasswordPolicy","_callee","_context","CFDStore","changePassword","login","_next","_throw","_x","trading_password_manager","ThemedScrollbars","is_bypassed","autohide","TradingPasswordManager","Div100vhContainer","height_offset","DXTRADE","Tabs","active_index","onTabItemClick","index","top","InvestorPasswordManager","observer","_ref6","is_visible","selected_account_type","selected_account_group","selected_server","_useStore","useStore","client","ui","enableApp","disableApp","useCfdStore","_React$useState14","setIndex","_React$useState16","fallback","UILoader","Modal","is_open","should_header_stick_body","PageOverlay","portal_id","header","onClickClose","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","getter","__esModule","definition","get","obj","prop","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","bind","__webpack_exports__"],"sourceRoot":""}