{"version":3,"file":"cfd/js/MT5TradeModal.js","mappings":"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","sources":["webpack://@deriv/cfd/webpack/universalModuleDefinition","webpack://@deriv/cfd/webpack/runtime/chunk loaded","webpack://@deriv/cfd/./src/Containers/migration-banner/migration-banner-image.tsx","webpack://@deriv/cfd/./src/Containers/migration-banner/migration-banner.tsx","webpack://@deriv/cfd/./src/Containers/migration-banner/index.ts","webpack://@deriv/cfd/./src/Containers/mt5-desktop-redirect-option.tsx","webpack://@deriv/cfd/./src/Containers/mt5-mobile-redirect-option.tsx","webpack://@deriv/cfd/./src/Components/passwordbox.tsx","webpack://@deriv/cfd/./src/Components/cfd-account-copy.tsx","webpack://@deriv/cfd/./src/Components/specbox.tsx","webpack://@deriv/cfd/./src/Containers/dmt5-trade-modal.tsx","webpack://@deriv/cfd/./src/Containers/ctrader-derivx-trade-modal.tsx","webpack://@deriv/cfd/./src/Containers/mt5-trade-modal.tsx","webpack://@deriv/cfd/external umd \"@deriv-com/analytics\"","webpack://@deriv/cfd/external umd \"@deriv/account/src/Configs/get-mt5-status-badge-config\"","webpack://@deriv/cfd/external umd \"@deriv/components\"","webpack://@deriv/cfd/external umd \"@deriv/hooks\"","webpack://@deriv/cfd/external umd \"@deriv/shared\"","webpack://@deriv/cfd/external umd \"@deriv/stores\"","webpack://@deriv/cfd/external umd \"@deriv/translations\"","webpack://@deriv/cfd/external umd \"classnames\"","webpack://@deriv/cfd/external umd \"react\"","webpack://@deriv/cfd/webpack/bootstrap","webpack://@deriv/cfd/webpack/runtime/compat get default export","webpack://@deriv/cfd/webpack/runtime/define property getters","webpack://@deriv/cfd/webpack/runtime/ensure chunk","webpack://@deriv/cfd/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/cfd/webpack/runtime/runtimeId","webpack://@deriv/cfd/webpack/runtime/jsonp chunk loading","webpack://@deriv/cfd/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv-com/analytics\"), require(\"@deriv/account/src/Configs/get-mt5-status-badge-config\"), require(\"@deriv/components\"), require(\"@deriv/hooks\"), require(\"@deriv/shared\"), require(\"@deriv/stores\"), require(\"@deriv/translations\"), require(\"classnames\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv-com/analytics\", \"@deriv/account/src/Configs/get-mt5-status-badge-config\", \"@deriv/components\", \"@deriv/hooks\", \"@deriv/shared\", \"@deriv/stores\", \"@deriv/translations\", \"classnames\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/cfd\"] = factory(require(\"@deriv-com/analytics\"), require(\"@deriv/account/src/Configs/get-mt5-status-badge-config\"), require(\"@deriv/components\"), require(\"@deriv/hooks\"), require(\"@deriv/shared\"), require(\"@deriv/stores\"), require(\"@deriv/translations\"), require(\"classnames\"), require(\"react\"));\n\telse\n\t\troot[\"@deriv/cfd\"] = factory(root[\"@deriv-com/analytics\"], root[\"@deriv/account/src/Configs/get-mt5-status-badge-config\"], root[\"@deriv/components\"], root[\"@deriv/hooks\"], root[\"@deriv/shared\"], root[\"@deriv/stores\"], root[\"@deriv/translations\"], root[\"classnames\"], root[\"react\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_com_analytics__, __WEBPACK_EXTERNAL_MODULE__deriv_account_src_Configs_get_mt5_status_badge_config__, __WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_hooks__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_stores__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_classnames__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn ","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import React from 'react';\nimport MigrateCard from '../../Assets/banner/migrate-card.svg';\nimport MigrateCardDark from '../../Assets/banner/migrate-card-dark.svg';\n\nexport type TBannerImageProps<TMigrationBannerListProps> = {\n    image: TMigrationBannerListProps;\n};\n\ntype TMigrationBannerListProps = keyof typeof MigrationBannerList;\n\nconst MigrationBannerList = {\n    migrate_card: MigrateCard,\n    migrate_card_dark: MigrateCardDark,\n};\n\nconst MigrationBannerImage = ({ image }: TBannerImageProps<TMigrationBannerListProps>) => {\n    const Component = MigrationBannerList[image];\n\n    return <Component className='mt5-migration-banner__image' data-testid={`dt_${image}`} />;\n};\n\nexport default MigrationBannerImage;\n","import React from 'react';\nimport { Analytics } from '@deriv-com/analytics';\nimport classNames from 'classnames';\nimport { Button, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { useMT5SVGEligibleToMigrate } from '@deriv/hooks';\nimport {\n    JURISDICTION_MARKET_TYPES,\n    getFormattedJurisdictionMarketTypes,\n    getCFDPlatformNames,\n    CFD_PLATFORMS,\n} from '@deriv/shared';\nimport { useCfdStore } from '../../Stores/Modules/CFD/Helpers/useCfdStores';\nimport MigrationBannerImage from './migration-banner-image';\nimport './migration-banner.scss';\n\ntype TMigrationBannerProps = {\n    is_trade_modal?: boolean;\n};\nconst MigrationBanner = observer(({ is_trade_modal = false }: TMigrationBannerProps) => {\n    const { ui } = useStore();\n    const { is_dark_mode_on, toggleMT5MigrationModal, is_mobile } = ui;\n    const { setMT5MigrationError, is_mt5_trade_modal_visible, toggleMT5TradeModal } = useCfdStore();\n    const { has_derived_mt5_to_migrate, has_derived_and_financial_mt5 } = useMT5SVGEligibleToMigrate();\n    const openMT5MigrationModal = () => {\n        if (is_mt5_trade_modal_visible) toggleMT5TradeModal();\n        setMT5MigrationError('');\n        Analytics.trackEvent('ce_upgrade_mt5_banner', {\n            action: 'push_cta_upgrade',\n        });\n        toggleMT5MigrationModal(true);\n    };\n    const is_desktop_trade_modal = is_trade_modal && !is_mobile;\n    const banner_img = is_dark_mode_on ? 'migrate_card_dark' : 'migrate_card';\n    return (\n        <div\n            className={classNames('mt5-migration-banner', {\n                'mt5-migration-banner__trade-modal': is_trade_modal,\n            })}\n        >\n            <div\n                className={classNames('mt5-migration-banner__description', {\n                    'mt5-migration-banner__description--trade-modal': is_desktop_trade_modal,\n                })}\n            >\n                <div className='mt5-migration-banner__description-text'>\n                    {has_derived_and_financial_mt5 ? (\n                        <Text size='xs'>\n                            <Localize\n                                i18n_default_text='Upgrade your <0>{{account_1}}</0> <1/>and <0>{{account_2}} {{platform}} </0> account(s)'\n                                values={{\n                                    account_1: getFormattedJurisdictionMarketTypes(JURISDICTION_MARKET_TYPES.DERIVED),\n                                    account_2: getFormattedJurisdictionMarketTypes(JURISDICTION_MARKET_TYPES.FINANCIAL),\n                                    platform: getCFDPlatformNames(CFD_PLATFORMS.MT5),\n                                }}\n                                components={[<strong key={0} />, is_desktop_trade_modal ? null : <br key={1} />]}\n                            />\n                        </Text>\n                    ) : (\n                        <Text size='xs'>\n                            <Localize\n                                i18n_default_text='Upgrade your <0/><1>{{account_title}} {{platform}} </1> account(s)'\n                                values={{\n                                    account_title: getFormattedJurisdictionMarketTypes(\n                                        has_derived_mt5_to_migrate\n                                            ? JURISDICTION_MARKET_TYPES.DERIVED\n                                            : JURISDICTION_MARKET_TYPES.FINANCIAL\n                                    ),\n                                    platform: getCFDPlatformNames(CFD_PLATFORMS.MT5),\n                                }}\n                                components={[is_desktop_trade_modal ? null : <br key={0} />, <strong key={1} />]}\n                            />\n                        </Text>\n                    )}\n                </div>\n                <Button primary_light onClick={openMT5MigrationModal}>\n                    <Localize i18n_default_text='Upgrade' />\n                </Button>\n            </div>\n            <MigrationBannerImage image={banner_img} />\n        </div>\n    );\n});\n\nexport default MigrationBanner;\n","import MigrationBanner from './migration-banner';\n\nexport default MigrationBanner;\n","import React, { Fragment } from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { getDesktopDownloadOptions, getMobileDownloadOptions } from '../Helpers/constants';\nimport { CFD_PLATFORMS, getCFDPlatformLabel, getPlatformSettings, getUrlBase } from '@deriv/shared';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport './mt5-mobile-redirect-option.scss';\n\ntype TMT5DesktopRedirectOptionProps = {\n    account_title: string;\n    mt5_trade_account: DetailsOfEachMT5Loginid;\n};\n\nconst MT5DesktopRedirectOption = ({ account_title, mt5_trade_account }: TMT5DesktopRedirectOptionProps) => {\n    const desktopDownloadOptions = getDesktopDownloadOptions({ mt5_trade_account });\n    const mobileDownloadOptions = getMobileDownloadOptions({ mt5_trade_account });\n\n    return (\n        <Fragment>\n            <div className='cfd-trade-modal__download-center-app'>\n                {desktopDownloadOptions.map(option => (\n                    <div key={option.icon} className='cfd-trade-modal__download-center-app--option'>\n                        <Icon icon={option.icon} size={32} />\n                        <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                            {option.text}\n                        </Text>\n                        <a\n                            className='cfd-trade-modal__download-center-app--option-link'\n                            type='button'\n                            href={option.href as string}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <Text size='xxs' weight='bold' color='prominent'>\n                                {option.button_text}\n                            </Text>\n                        </a>\n                    </div>\n                ))}\n            </div>\n            <Text align='center' as='div' className='cfd-trade-modal__download-center-text' size='xxs' weight='bold'>\n                {localize(\n                    'Download {{ platform }} on your phone to trade with the {{ platform }} {{ account }} account',\n                    {\n                        platform: getCFDPlatformLabel(CFD_PLATFORMS.MT5),\n                        account: account_title,\n                    }\n                )}\n            </Text>\n            <div className='cfd-trade-modal__download-center-options'>\n                <div className='cfd-trade-modal__download-center-options--mobile-links'>\n                    {mobileDownloadOptions.map(({ href, icon }) => (\n                        <a key={icon} href={href} target='_blank' rel='noopener noreferrer'>\n                            <Icon icon={icon} width={135} height={40} />\n                        </a>\n                    ))}\n                </div>\n\n                <div className='cfd-trade-modal__download-center-options--qrcode'>\n                    <img\n                        alt='mt5 download qr'\n                        src={getUrlBase('/public/images/common/mt5_download.png')}\n                        width={80}\n                        height={80}\n                    />\n                    <Text align='center' size='xxs'>\n                        {localize('Scan the QR code to download {{ platform }}.', {\n                            platform: getPlatformSettings(CFD_PLATFORMS.MT5).name,\n                        })}\n                    </Text>\n                </div>\n            </div>\n        </Fragment>\n    );\n};\n\nexport default MT5DesktopRedirectOption;\n","import React from 'react';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { Icon, Text } from '@deriv/components';\nimport { getDeeplinkUrl, getMobileAppInstallerUrl, getWebtraderUrl } from '../Helpers/constants';\nimport './mt5-mobile-redirect-option.scss';\nimport { Localize } from '@deriv/translations';\n\nconst MT5MobileRedirectOption = ({ mt5_trade_account }: { mt5_trade_account: DetailsOfEachMT5Loginid }) => {\n    const mobileURLSet = async () => {\n        window.location.replace(getDeeplinkUrl({ mt5_trade_account }));\n        const mobileAppURL = await getMobileAppInstallerUrl({ mt5_trade_account });\n\n        const timeout = setTimeout(() => {\n            mobileAppURL && window.location.replace(mobileAppURL);\n        }, 4000);\n\n        document.addEventListener('visibilitychange', function () {\n            if (document.hidden) {\n                clearTimeout(timeout);\n            }\n\n            // iOS (17+) and certain browsers (edge) may have popups before redirecting\n            if (window.onblur) {\n                clearTimeout(timeout); // installer wont open but will redirect to MetaTrader5\n                if (!document.hidden) {\n                    mobileAppURL && window.location.replace(mobileAppURL); // if it is not redirecting then open installer\n                }\n            }\n        });\n    };\n\n    return (\n        <div className='mt5-download-container'>\n            <a\n                className='mt5-download-container--option'\n                href={getWebtraderUrl({ mt5_trade_account })}\n                target='_blank'\n                rel='noopener noreferrer'\n            >\n                <div className='full-row'>\n                    <Icon icon='IcDesktopOutline' size={16} />\n                    <Text align='left' size='xxs' weight='bold' className='title'>\n                        <Localize i18n_default_text={'MetaTrader5 web terminal'} />\n                    </Text>\n                    <Icon icon='IcChevronRight' size={16} />\n                </div>\n            </a>\n            <button className='mt5-download-container--option blue' onClick={mobileURLSet}>\n                <div className='full-row'>\n                    <Icon icon='IcMobileOutline' size={16} />\n                    <Text align='left' size='xxs' weight='bold' className='title'>\n                        <Localize i18n_default_text={'Trade with MT5 mobile app'} />\n                    </Text>\n                    <Icon icon='IcChevronRightLight' size={16} />\n                </div>\n            </button>\n\n            <Text as='p' size='xxxxs'>\n                <Localize\n                    i18n_default_text=\"Note: Don't have the MT5 app? Tap the <0>Trade with MT5 mobile app</0> button to download. Once you have\n                installed the app, return to this screen and hit the same button to log in.\"\n                    components={[<strong key={0} />]}\n                />\n            </Text>\n        </div>\n    );\n};\n\nexport default MT5MobileRedirectOption;\n","import React from 'react';\nimport { Button } from '@deriv/components';\nimport { TPasswordBoxProps } from './props.types';\nimport { Localize } from '@deriv/translations';\n\nconst PasswordBox = ({ onClick }: TPasswordBoxProps) => (\n    <div className='cfd-trade-modal__password-box'>\n        <Button className='cfd-trade-modal__password-action' transparent onClick={onClick}>\n            <Localize i18n_default_text='Forgot password?' />\n        </Button>\n    </div>\n);\n\nexport default PasswordBox;\n","import React from 'react';\nimport { Clipboard } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isMobile } from '@deriv/shared';\nimport { TCFDAccountCopy } from './props.types';\n\nconst CFDAccountCopy = ({ text, className }: TCFDAccountCopy) => {\n    return (\n        <div className={className} data-testid='cfd_account_copy_main_div'>\n            <Clipboard\n                text_copy={text}\n                info_message={isMobile() ? '' : localize('copy')}\n                success_message={localize('copied!')}\n                popoverAlignment={isMobile() ? 'left' : 'bottom'}\n            />\n        </div>\n    );\n};\n\nexport { CFDAccountCopy };\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Text } from '@deriv/components';\n\nimport { CFDAccountCopy } from './cfd-account-copy';\n\nexport type TSpecBoxProps = {\n    value?: string;\n    is_bold?: boolean;\n    is_broker?: boolean;\n};\n\nconst SpecBox = ({ value, is_bold, is_broker }: TSpecBoxProps) => (\n    <div className='cfd-trade-modal__spec-box '>\n        <Text\n            size='xs'\n            weight={is_bold ? 'bold' : ''}\n            className={classNames('cfd-trade-modal__spec-text', { 'cfd-trade-modal__spec-text-broker': is_broker })}\n        >\n            {value}\n        </Text>\n        <CFDAccountCopy text={value} className='cfd-trade-modal__spec-copy' />\n    </div>\n);\n\nexport default SpecBox;\n","import React from 'react';\nimport { TAdditionalDetailsOfEachMT5Loginid } from '@deriv/stores/types';\nimport { useDevice } from '@deriv-com/ui';\nimport { Text, Icon, Money, StatusBadge } from '@deriv/components';\nimport getMT5StatusBadgeConfig from '@deriv/account/src/Configs/get-mt5-status-badge-config';\nimport { getCFDAccountKey, MT5_ACCOUNT_STATUS, PRODUCT, Jurisdiction } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { CFD_PLATFORMS, MARKET_TYPE } from '../Helpers/cfd-config';\nimport TradingPlatformIcon from '../Assets/svgs/trading-platform';\nimport MigrationBanner from './migration-banner';\nimport MT5DesktopRedirectOption from './mt5-desktop-redirect-option';\nimport MT5MobileRedirectOption from './mt5-mobile-redirect-option';\nimport PasswordBox from '../Components/passwordbox';\nimport SpecBox from '../Components/specbox';\nimport { TCFDPasswordReset } from './props.types';\nimport { TProducts, TTradingPlatformAccounts } from '../Components/props.types';\n\ntype TMT5TradeModalProps = {\n    mt5_trade_account: TAdditionalDetailsOfEachMT5Loginid;\n    show_eu_related_content: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        group: TCFDPasswordReset['account_group'],\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n    product?: TProducts;\n    is_demo: string;\n};\n\nconst getTitle = (market_type: string, show_eu_related_content: boolean) => {\n    if (show_eu_related_content) localize('MT5 CFDs');\n    return market_type;\n};\n\nconst DMT5TradeModal = observer(\n    ({\n        mt5_trade_account,\n        show_eu_related_content,\n        onPasswordManager,\n        toggleModal,\n        product,\n        is_demo,\n    }: TMT5TradeModalProps) => {\n        const { isDesktop } = useDevice();\n        const { client } = useStore();\n        const { account_status: { authentication } = {} } = client;\n        const is_eligible_to_migrate = mt5_trade_account.eligible_to_migrate;\n\n        const getAccountTitle = () => {\n            switch (mt5_trade_account.product) {\n                case PRODUCT.STANDARD:\n                    return 'Standard';\n                case PRODUCT.SWAPFREE:\n                    return 'Swap-Free';\n                case PRODUCT.ZEROSPREAD:\n                    return 'Zero Spread';\n                case PRODUCT.STP:\n                    return 'Financial STP';\n                case PRODUCT.GOLD:\n                    return 'Gold';\n                default:\n                    return show_eu_related_content ? 'CFDs' : 'Financial';\n            }\n        };\n\n        const getAccountIcons = () => {\n            if (show_eu_related_content && product === PRODUCT.FINANCIAL) return 'CFDs';\n            else if (mt5_trade_account.market_type === MARKET_TYPE.SYNTHETIC) return 'Standard';\n            else if (mt5_trade_account.market_type === MARKET_TYPE.ALL && product === PRODUCT.SWAPFREE)\n                return 'SwapFree';\n            else if (mt5_trade_account.market_type === MARKET_TYPE.ALL && product === PRODUCT.ZEROSPREAD)\n                return 'ZeroSpread';\n            else if (mt5_trade_account.market_type === MARKET_TYPE.FINANCIAL && product === PRODUCT.GOLD) return 'Gold';\n            return 'Financial';\n        };\n\n        const { text: badge_text, icon: badge_icon } = getMT5StatusBadgeConfig(mt5_trade_account?.status);\n        const has_migration_status = [\n            MT5_ACCOUNT_STATUS.MIGRATED_WITH_POSITION,\n            MT5_ACCOUNT_STATUS.MIGRATED_WITHOUT_POSITION,\n        ].includes(mt5_trade_account?.status);\n        const getShortcode = () => {\n            switch (mt5_trade_account.landing_company_short) {\n                case Jurisdiction.SVG:\n                    return 'SVG';\n                case Jurisdiction.BVI:\n                    return 'BVI';\n                case Jurisdiction.VANUATU:\n                    return 'Vanuatu';\n                case Jurisdiction.MAURITIUS:\n                    return 'DML';\n                default:\n                    return null;\n            }\n        };\n\n        return (\n            <div className='cfd-trade-modal-container'>\n                <div className='cfd-trade-modal'>\n                    <TradingPlatformIcon icon={getAccountIcons()} size={24} />\n                    <div className='cfd-trade-modal__desc'>\n                        <div className='cfd-trade-modal__desc-heading'>\n                            <Text size='xs' line_height='l'>\n                                {getAccountTitle()}\n                            </Text>\n                            {!is_demo ? (\n                                getShortcode() && (\n                                    <Text size='xxs' line_height='l' className='cfd-trade-modal__desc-heading--real'>\n                                        {getShortcode()}\n                                    </Text>\n                                )\n                            ) : (\n                                <Text\n                                    size='xxs'\n                                    line_height='l'\n                                    weight='bold'\n                                    className='cfd-trade-modal__desc-heading--demo'\n                                >\n                                    {localize('Demo')}\n                                </Text>\n                            )}\n                        </div>\n                        {(mt5_trade_account as TTradingPlatformAccounts)?.display_login && (\n                            <Text color='less-prominent' size='xxxs' line_height='xxxs'>\n                                {(mt5_trade_account as TTradingPlatformAccounts)?.display_login}\n                            </Text>\n                        )}\n                    </div>\n                    <div className='cfd-trade-modal__acc_status'>\n                        {mt5_trade_account?.display_balance && (\n                            <Text\n                                size='xs'\n                                color='profit-success'\n                                className='cfd-trade-modal__desc-balance'\n                                weight='bold'\n                            >\n                                <Money\n                                    amount={mt5_trade_account.display_balance}\n                                    currency={mt5_trade_account.currency}\n                                    has_sign={!!mt5_trade_account.balance && mt5_trade_account.balance < 0}\n                                    show_currency\n                                />\n                            </Text>\n                        )}\n                        {has_migration_status && (\n                            <StatusBadge\n                                className='trading-app-card__acc_status_badge'\n                                account_status={mt5_trade_account.status}\n                                icon={badge_icon}\n                                text={badge_text}\n                            />\n                        )}\n                    </div>\n                </div>\n                <div className='cfd-trade-modal__login-specs'>\n                    <div className='cfd-trade-modal__login-specs-item'>\n                        <Text className='cfd-trade-modal--paragraph'>{localize('Broker')}</Text>\n                        <SpecBox is_bold is_broker value={mt5_trade_account?.landing_company} />\n                    </div>\n                    <div className='cfd-trade-modal__login-specs-item'>\n                        <Text className='cfd-trade-modal--paragraph'>{localize('Server')}</Text>\n                        <SpecBox\n                            is_bold\n                            value={(mt5_trade_account as TAdditionalDetailsOfEachMT5Loginid)?.server_info?.environment}\n                        />\n                    </div>\n                    <div className='cfd-trade-modal__login-specs-item'>\n                        <Text className='cfd-trade-modal--paragraph'>{localize('Login ID')}</Text>\n                        <SpecBox is_bold value={(mt5_trade_account as TTradingPlatformAccounts)?.display_login} />\n                    </div>\n                    <div className='cfd-trade-modal__login-specs-item'>\n                        <Text className='cfd-trade-modal--paragraph'>{localize('Password')}</Text>\n                        <div className='cfd-trade-modal--paragraph'>\n                            <PasswordBox\n                                platform='mt5'\n                                onClick={() => {\n                                    const account_type = getCFDAccountKey({\n                                        market_type: mt5_trade_account.market_type,\n                                        sub_account_type: mt5_trade_account.sub_account_type,\n                                        platform: CFD_PLATFORMS.MT5,\n                                        shortcode: mt5_trade_account.landing_company_short,\n                                        product,\n                                    });\n                                    onPasswordManager(\n                                        mt5_trade_account?.login,\n                                        getTitle(mt5_trade_account.market_type ?? '', show_eu_related_content),\n                                        mt5_trade_account.account_type ?? '',\n                                        account_type,\n                                        (mt5_trade_account as TAdditionalDetailsOfEachMT5Loginid)?.server\n                                    );\n                                    toggleModal();\n                                }}\n                            />\n                        </div>\n                    </div>\n                    <div className='cfd-trade-modal__maintenance'>\n                        <Icon\n                            icon='IcAlertWarning'\n                            size={!isDesktop ? 28 : 20}\n                            className='cfd-trade-modal__maintenance-icon'\n                        />\n                        <div className='cfd-trade-modal__maintenance-text'>\n                            <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                        </div>\n                    </div>\n                </div>\n                {is_eligible_to_migrate && <MigrationBanner is_trade_modal />}\n\n                {!isDesktop ? (\n                    <MT5MobileRedirectOption mt5_trade_account={mt5_trade_account} />\n                ) : (\n                    <MT5DesktopRedirectOption account_title={getAccountTitle()} mt5_trade_account={mt5_trade_account} />\n                )}\n            </div>\n        );\n    }\n);\n\nexport default DMT5TradeModal;\n","import React from 'react';\nimport { useDevice } from '@deriv-com/ui';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize, Localize } from '@deriv/translations';\nimport { getCFDAccountKey } from '@deriv/shared';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { Icon, Money, Text, ExpansionPanel, Button } from '@deriv/components';\nimport SpecBox from '../Components/specbox';\nimport { CFD_PLATFORMS } from '../Helpers/cfd-config';\nimport PasswordBox from '../Components/passwordbox';\nimport { getPlatformQRCode, mobileDownloadLink, PlatformsDesktopDownload } from '../Helpers/config';\nimport { TCFDDashboardContainer, TCFDsPlatformType, TTradingPlatformAccounts } from 'Components/props.types';\nimport {\n    CTRADER_DESKTOP_MAC_DOWNLOAD,\n    CTRADER_DESKTOP_WINDOWS_DOWNLOAD,\n    getTitle,\n    platformsText,\n    STRATEGY_PROVIDER_NOTES,\n} from '../Helpers/constants';\n\nimport { TCFDPasswordReset } from './props.types';\n\ntype TTradeModalProps = {\n    ctrader_derivx_trade_account: Required<DetailsOfEachMT5Loginid>;\n    is_eu_user: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        group: TCFDPasswordReset['account_group'],\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n    dxtrade_tokens: TCFDDashboardContainer['dxtrade_tokens'];\n    ctrader_tokens: TCFDDashboardContainer['ctrader_tokens'];\n    is_demo: string;\n    platform: TCFDsPlatformType;\n    is_mobile?: boolean;\n};\n\nconst PlatformIconsAndDescriptions = (\n    platform: TCFDsPlatformType,\n    is_demo: string,\n    ctrader_derivx_trade_account: Required<DetailsOfEachMT5Loginid>\n) => {\n    return (\n        <React.Fragment>\n            <Icon icon={`IcRebranding${platform.charAt(0).toUpperCase()}${platform.slice(1)}Dashboard`} size={24} />\n            <div className='cfd-trade-modal__desc'>\n                <Text size='xs' line_height='l' weight='bold' className='cfd-trade-modal__desc-heading'>\n                    <Localize\n                        i18n_default_text='Deriv {{platform}} <0>{{is_demo}}</0>'\n                        values={{\n                            platform: platformsText(platform),\n                            is_demo: is_demo ? 'Demo' : '',\n                        }}\n                        components={[\n                            <span\n                                key={0}\n                                className={platform === CFD_PLATFORMS.CTRADER && is_demo ? 'cfd-trade-modal--tag' : ''}\n                            />,\n                        ]}\n                    />\n                </Text>\n                {((ctrader_derivx_trade_account as TTradingPlatformAccounts)?.display_login &&\n                    platform === CFD_PLATFORMS.DXTRADE) ||\n                    (platform === CFD_PLATFORMS.CTRADER && is_demo && (\n                        <Text color='less-prominent' size='xxxs' line_height='xxxs'>\n                            {(ctrader_derivx_trade_account as TTradingPlatformAccounts)?.display_login}\n                        </Text>\n                    ))}\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst CTraderDerivXTradeModal = ({\n    ctrader_derivx_trade_account,\n    is_eu_user,\n    onPasswordManager,\n    toggleModal,\n    dxtrade_tokens,\n    ctrader_tokens,\n    is_demo,\n    platform,\n    is_mobile,\n}: TTradeModalProps) => {\n    const { isDesktop } = useDevice();\n    const {\n        ui,\n        client,\n        common,\n        traders_hub,\n        modules: { cfd },\n    } = useStore();\n\n    const { ctrader_accounts_list, ctrader_trading_platform_available_accounts, ctrader_total_balance } = client;\n    const { setAccountType, toggleMT5TradeModal, is_account_being_created, loadCTraderTokens } = cfd;\n    const { setAppstorePlatform } = common;\n    const { openDerivRealAccountNeededModal } = ui;\n    const { selected_account_type, no_CR_account, is_real, has_any_real_account, getAccount } = traders_hub;\n\n    const message = {\n        header: (\n            <Text as='h2' size='xs' weight='bold' className='cfd-trade-modal__expansion-panel--header'>\n                {localize('See important notes')}\n            </Text>\n        ),\n        content: (\n            <ol className='cfd-trade-modal__expansion-panel--ordered-list'>\n                <Text as='li' size='xxs' line_height='l' className='cfd-trade-modal__expansion-panel--content'>\n                    {localize('Use your Deriv account email and password to log in to cTrader.')}\n                </Text>\n                <Text as='li' size='xxs' line_height='l' className='cfd-trade-modal__expansion-panel--content'>\n                    <Localize\n                        i18n_default_text='Manage up to {{max_count}} Deriv cTrader accounts. While you can convert any of your Deriv cTrader accounts into a strategy account, please take note of the following:'\n                        values={{\n                            max_count: ctrader_trading_platform_available_accounts[0]?.max_count,\n                        }}\n                    />\n                </Text>\n                <ul className='cfd-trade-modal__expansion-panel--unordered-list'>\n                    {STRATEGY_PROVIDER_NOTES.map(note => (\n                        <Text\n                            key={note}\n                            as='li'\n                            size='xxs'\n                            line_height='l'\n                            className='cfd-trade-modal__expansion-panel--content'\n                        >\n                            {localize(note)}\n                        </Text>\n                    ))}\n                    <Text as='li' size='xxs' line_height='l' className='cfd-trade-modal__expansion-panel--content'>\n                        <Localize\n                            i18n_default_text='To ensure you can always create and manage strategies with fees, <0>keep at least one account free from being a strategy provider.</0> This way, you’ll always have an account ready for collecting fees, allowing you to have up to four strategies where you may impose fees.'\n                            components={[<span key={0} className='cfd-trade-modal__expansion-panel--content-bold' />]}\n                        />\n                    </Text>\n                </ul>\n            </ol>\n        ),\n    };\n\n    const downloadCenterDescription = () => {\n        switch (platform) {\n            case 'dxtrade':\n                return (\n                    <Text\n                        align='center'\n                        as='p'\n                        className='cfd-trade-modal__download-center-text'\n                        size={!isDesktop ? 'xxxs' : 'xxs'}\n                        weight='bold'\n                    >\n                        {localize('Download Deriv X on your phone to trade with the Deriv X account')}\n                    </Text>\n                );\n            case 'ctrader':\n                return (\n                    <Text\n                        align='center'\n                        as='p'\n                        className='cfd-trade-modal__download-center-text'\n                        size={!isDesktop ? 'xxxs' : 'xxs'}\n                        weight='bold'\n                    >\n                        {localize('Download cTrader on your phone to trade with the Deriv cTrader account')}\n                    </Text>\n                );\n            default:\n                return '';\n        }\n    };\n\n    const downloadCenterAppOption = (platform_type: TCFDsPlatformType) => {\n        let app_title = '';\n        if (platform_type === CFD_PLATFORMS.DXTRADE) {\n            app_title = localize('Run Deriv X on your browser');\n        } else if (platform_type === 'ctrader' && !is_mobile) {\n            app_title = localize('Run cTrader on your browser');\n        } else if (platform_type === 'ctrader' && is_mobile) {\n            return null;\n        } else {\n            return null;\n        }\n\n        return (\n            <div className='cfd-trade-modal__download-center-app--option'>\n                <Text className='cfd-trade-modal__download-center-app--option-item' size='xs'>\n                    {app_title}\n                </Text>\n                <PlatformsDesktopDownload\n                    platform={platform}\n                    is_demo={is_demo}\n                    dxtrade_tokens={dxtrade_tokens}\n                    ctrader_tokens={ctrader_tokens}\n                    ctraderTokenCall={loadCTraderTokens}\n                />\n            </div>\n        );\n    };\n\n    return (\n        <div className='cfd-trade-modal-container'>\n            <div className='cfd-trade-modal'>\n                {PlatformIconsAndDescriptions(platform, is_demo, ctrader_derivx_trade_account)}\n                {ctrader_derivx_trade_account?.display_balance && (\n                    <div className='cfd-trade-modal__balance'>\n                        {platform === CFD_PLATFORMS.CTRADER && is_real && (\n                            <Text size='xxs' align='right'>\n                                {localize('Total balance:')}\n                            </Text>\n                        )}\n                        <Text\n                            size='s'\n                            color={platform !== CFD_PLATFORMS.CTRADER ? 'profit-success' : 'prominent'}\n                            className='cfd-trade-modal__desc-balance'\n                            weight='bold'\n                        >\n                            <Money\n                                amount={\n                                    is_real && platform === CFD_PLATFORMS.CTRADER\n                                        ? ctrader_total_balance\n                                        : ctrader_derivx_trade_account.display_balance\n                                }\n                                currency={ctrader_derivx_trade_account.currency}\n                                has_sign={\n                                    !!ctrader_derivx_trade_account.balance && ctrader_derivx_trade_account.balance < 0\n                                }\n                                show_currency\n                            />\n                        </Text>\n                    </div>\n                )}\n            </div>\n            <div className='cfd-trade-modal__login-specs'>\n                {platform === CFD_PLATFORMS.DXTRADE && (\n                    <React.Fragment>\n                        <div className='cfd-trade-modal__login-specs-item'>\n                            <Text className='cfd-trade-modal--paragraph'>{localize('Username')}</Text>\n                            <SpecBox\n                                is_bold\n                                value={(ctrader_derivx_trade_account as TTradingPlatformAccounts)?.login}\n                            />\n                        </div>\n                        <div className='cfd-trade-modal__login-specs-item'>\n                            <Text className='cfd-trade-modal--paragraph'>{localize('Password')}</Text>\n                            <div className='cfd-trade-modal--paragraph'>\n                                <PasswordBox\n                                    platform='dxtrade'\n                                    onClick={() => {\n                                        const account_type = getCFDAccountKey({\n                                            market_type: ctrader_derivx_trade_account.market_type,\n                                            sub_account_type: ctrader_derivx_trade_account.sub_account_type,\n                                            platform: CFD_PLATFORMS.MT5,\n                                            shortcode: ctrader_derivx_trade_account.landing_company_short,\n                                        });\n                                        onPasswordManager(\n                                            ctrader_derivx_trade_account?.login,\n                                            getTitle(ctrader_derivx_trade_account.market_type, is_eu_user),\n                                            ctrader_derivx_trade_account.account_type,\n                                            account_type,\n                                            ctrader_derivx_trade_account?.server\n                                        );\n                                        toggleModal();\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    </React.Fragment>\n                )}\n\n                {platform === CFD_PLATFORMS.CTRADER && is_real && (\n                    <React.Fragment>\n                        {ctrader_accounts_list\n                            .filter(all_ctrader_accounts => all_ctrader_accounts.account_type === 'real')\n                            .map(ctrader_account => {\n                                return (\n                                    <div key={ctrader_account.login} className='cfd-trade-modal__list-of-accounts'>\n                                        <Text size='xs'>{ctrader_account.login}</Text>\n                                        <Text size='xs' weight='bold'>\n                                            <Money\n                                                amount={ctrader_account.balance}\n                                                currency={ctrader_account.currency}\n                                                has_sign={!!ctrader_account.balance && ctrader_account.balance < 0}\n                                                show_currency\n                                            />\n                                        </Text>\n                                    </div>\n                                );\n                            })}\n                        {(ctrader_trading_platform_available_accounts[0]?.available_count ?? 1) > 0 && (\n                            <div className='cfd-trade-modal__get-more-accounts'>\n                                <Button\n                                    onClick={() => {\n                                        toggleMT5TradeModal();\n                                        if ((!has_any_real_account || no_CR_account) && is_real) {\n                                            openDerivRealAccountNeededModal();\n                                        } else {\n                                            setAccountType({\n                                                category: selected_account_type,\n                                                type: 'all',\n                                            });\n                                            setAppstorePlatform(CFD_PLATFORMS.CTRADER);\n                                            getAccount();\n                                        }\n                                    }}\n                                    transparent\n                                    disabled={!!is_account_being_created}\n                                >\n                                    <Icon\n                                        icon={'IcAppstoreGetMoreAccounts'}\n                                        size={24}\n                                        className='cfd-trade-modal__get-more-accounts--icon'\n                                    />\n                                    <div className='cfd-trade-modal__get-more-accounts--details'>\n                                        <Text size='xxs' line-height='xxs'>\n                                            {localize('Get another cTrader account')}\n                                        </Text>\n                                    </div>\n                                </Button>\n                            </div>\n                        )}\n\n                        <div className='cfd-trade-modal__expansion-panel'>\n                            <ExpansionPanel message={message} />\n                        </div>\n                    </React.Fragment>\n                )}\n\n                <div className='cfd-trade-modal__maintenance'>\n                    <Icon\n                        icon='IcAlertWarning'\n                        size={!isDesktop ? 28 : 24}\n                        className='cfd-trade-modal__maintenance-icon'\n                    />\n                    <div className='cfd-trade-modal__maintenance-text'>\n                        <Text size='xxxs' className='cfd-trade-modal__maintenance-text'>\n                            {platform === CFD_PLATFORMS.DXTRADE && (\n                                <Localize i18n_default_text='Server maintenance starts at 06:00 GMT every Sunday and may last up to 2 hours. You may experience service disruption during this time.' />\n                            )}\n                            {platform === CFD_PLATFORMS.MT5 && (\n                                <Localize i18n_default_text='Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.' />\n                            )}\n                            {platform === CFD_PLATFORMS.CTRADER && (\n                                <Localize i18n_default_text='Server maintenance occurs every first Saturday of the month from 7 to 10 GMT time. You may experience service disruption during this time.' />\n                            )}\n                        </Text>\n                    </div>\n                </div>\n            </div>\n            <div className='cfd-trade-modal__download-center-app'>{downloadCenterAppOption(platform)}</div>\n            {platform === CFD_PLATFORMS.CTRADER && (\n                <React.Fragment>\n                    {!is_mobile && (\n                        <React.Fragment>\n                            <div className='cfd-trade-modal__download-center-app--windows'>\n                                <Icon icon='IcWindowsLogo' size={32} />\n                                <Text className='cfd-trade-modal__download-center-app--windows-item' size='xs'>\n                                    {localize('cTrader Windows app')}\n                                </Text>\n                                <a\n                                    className='dc-btn cfd-trade-modal__download-center-app--windows-link'\n                                    type='button'\n                                    href={CTRADER_DESKTOP_WINDOWS_DOWNLOAD}\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                >\n                                    <Text size='xxs' weight='bold' color='prominent'>\n                                        {localize('Download')}\n                                    </Text>\n                                </a>\n                            </div>\n                            <div className='cfd-trade-modal__download-center-app--macos'>\n                                <Icon icon='IcMacosLogo' size={32} />\n                                <Text className='cfd-trade-modal__download-center-app--macos-item' size='xs'>\n                                    {localize('cTrader MacOS app')}\n                                </Text>\n                                <a\n                                    className='dc-btn cfd-trade-modal__download-center-app--macos-link'\n                                    type='button'\n                                    href={CTRADER_DESKTOP_MAC_DOWNLOAD}\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                >\n                                    <Text size='xxs' weight='bold' color='prominent'>\n                                        {localize('Download')}\n                                    </Text>\n                                </a>\n                            </div>\n                        </React.Fragment>\n                    )}\n                </React.Fragment>\n            )}\n            <div className='cfd-trade-modal__download-center-description'>{downloadCenterDescription()}</div>\n\n            <div className='cfd-trade-modal__download-center-options'>\n                <div className='cfd-trade-modal__download-center-options--mobile-links'>\n                    <div className='cfd-trade-modal__download-center-options--mobile-links--apple'>\n                        <a href={mobileDownloadLink(platform, 'ios')} target='_blank' rel='noopener noreferrer'>\n                            <Icon icon='IcInstallationApple' width={!isDesktop ? '160' : '130'} height={40} />\n                        </a>\n                    </div>\n                    <a href={mobileDownloadLink(platform, 'android')} target='_blank' rel='noopener noreferrer'>\n                        <Icon icon='IcInstallationGoogle' width={135} height={40} />\n                    </a>\n                    {/* all platforms are on ios/android and huawei except ctrader is not on Huawei*/}\n                    {platform !== CFD_PLATFORMS.CTRADER && (\n                        <a href={mobileDownloadLink(platform, 'huawei')} target='_blank' rel='noopener noreferrer'>\n                            <Icon icon='IcInstallationHuawei' width={135} height={40} />\n                        </a>\n                    )}\n                </div>\n                {isDesktop && (\n                    <div className='cfd-trade-modal__download-center-options--qrcode'>\n                        {getPlatformQRCode(platform)}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default observer(CTraderDerivXTradeModal);\n","import React from 'react';\nimport { useDevice } from '@deriv-com/ui';\n\nimport { Div100vhContainer, Modal, PageOverlay, UILoader } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\n\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\n\nimport DMT5TradeModal from './dmt5-trade-modal';\nimport { TCFDPasswordReset } from './props.types';\nimport CTraderDerivXTradeModal from './ctrader-derivx-trade-modal';\n\ntype TMT5TradeModalProps = {\n    is_eu_user: boolean;\n    is_open: boolean;\n    onPasswordManager: (\n        arg1: string | undefined,\n        arg2: string,\n        group: TCFDPasswordReset['account_group'],\n        arg4: string,\n        arg5: string | undefined\n    ) => void;\n    toggleModal: () => void;\n    is_demo: string;\n};\n\nconst MT5TradeModal = observer(\n    ({ is_eu_user, is_open, onPasswordManager, toggleModal, is_demo }: TMT5TradeModalProps) => {\n        const { isDesktop } = useDevice();\n        const { traders_hub, common } = useStore();\n\n        const { show_eu_related_content } = traders_hub;\n        const { platform } = common;\n\n        const { mt5_trade_account, dxtrade_tokens, ctrader_tokens, product } = useCfdStore();\n\n        const CFDTradeModal = () => {\n            if (platform === 'mt5') {\n                return (\n                    <DMT5TradeModal\n                        mt5_trade_account={mt5_trade_account}\n                        show_eu_related_content={show_eu_related_content}\n                        onPasswordManager={onPasswordManager}\n                        toggleModal={toggleModal}\n                        product={product}\n                        is_demo={is_demo}\n                    />\n                );\n            }\n            return (\n                <CTraderDerivXTradeModal\n                    ctrader_derivx_trade_account={mt5_trade_account}\n                    is_eu_user={is_eu_user}\n                    onPasswordManager={onPasswordManager}\n                    toggleModal={toggleModal}\n                    is_demo={is_demo}\n                    platform={platform}\n                    ctrader_tokens={ctrader_tokens}\n                    dxtrade_tokens={dxtrade_tokens}\n                    is_mobile={!isDesktop}\n                />\n            );\n        };\n\n        return (\n            <React.Suspense fallback={<UILoader />}>\n                {isDesktop ? (\n                    <Modal\n                        is_open={is_open}\n                        title={localize('Trade')}\n                        toggleModal={toggleModal}\n                        should_header_stick_body={false}\n                        width='600px'\n                        exit_classname='cfd-modal--custom-exit'\n                    >\n                        <CFDTradeModal />\n                    </Modal>\n                ) : (\n                    <PageOverlay\n                        is_open={is_open}\n                        portal_id='deriv_app'\n                        header='Trade'\n                        onClickClose={toggleModal}\n                        header_classname='cfd-trade-modal__mobile-title'\n                    >\n                        <Div100vhContainer className='cfd-trade-modal__mobile-view-wrapper' height_offset='80px'>\n                            <CFDTradeModal />\n                        </Div100vhContainer>\n                    </PageOverlay>\n                )}\n            </React.Suspense>\n        );\n    }\n);\n\nexport default MT5TradeModal;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_com_analytics__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_src_Configs_get_mt5_status_badge_config__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_hooks__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_stores__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","module.exports = __WEBPACK_EXTERNAL_MODULE_classnames__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// The chunk loading function for additional chunks\n// Since all referenced chunks are already included\n// in this file, this function is empty here.\n__webpack_require__.e = () => (Promise.resolve());","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.j = \"MT5TradeModal\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"MT5TradeModal\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_deriv_cfd\"] = self[\"webpackChunk_deriv_cfd\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"internalCFDStoreUsage\",\"utilities\",\"assets\",\"vendors-node_modules_deriv-com_ui_dist_hooks_useDevice_js-node_modules_react-qrcode_lib_qrcode_js\"], () => (__webpack_require__(\"./src/Containers/mt5-trade-modal.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__deriv_com_analytics__","__WEBPACK_EXTERNAL_MODULE__deriv_account_src_Configs_get_mt5_status_badge_config__","__WEBPACK_EXTERNAL_MODULE__deriv_components__","__WEBPACK_EXTERNAL_MODULE__deriv_hooks__","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_stores__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__WEBPACK_EXTERNAL_MODULE_classnames__","__WEBPACK_EXTERNAL_MODULE_react__","deferred","MigrationBannerList","migrate_card","MigrateCard","migrate_card_dark","MigrateCardDark","_ref","image","Component","React","className","concat","observer","_ref$is_trade_modal","is_trade_modal","ui","useStore","is_dark_mode_on","toggleMT5MigrationModal","is_mobile","_useCfdStore","useCfdStore","setMT5MigrationError","is_mt5_trade_modal_visible","toggleMT5TradeModal","_useMT5SVGEligibleToM","useMT5SVGEligibleToMigrate","has_derived_mt5_to_migrate","has_derived_and_financial_mt5","is_desktop_trade_modal","banner_img","classNames","Text","size","Localize","i18n_default_text","values","account_1","getFormattedJurisdictionMarketTypes","JURISDICTION_MARKET_TYPES","DERIVED","account_2","FINANCIAL","platform","getCFDPlatformNames","CFD_PLATFORMS","MT5","components","key","account_title","Button","primary_light","onClick","Analytics","trackEvent","action","MigrationBannerImage","mt5_trade_account","desktopDownloadOptions","getDesktopDownloadOptions","mobileDownloadOptions","getMobileDownloadOptions","Fragment","map","option","icon","Icon","text","type","href","target","rel","weight","color","button_text","align","as","localize","getCFDPlatformLabel","account","_ref2","width","height","alt","src","getUrlBase","getPlatformSettings","name","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","mobileURLSet","_callee","mobileAppURL","timeout","_context","window","location","replace","getDeeplinkUrl","getMobileAppInstallerUrl","setTimeout","document","addEventListener","hidden","clearTimeout","onblur","arguments","apply","_next","_throw","getWebtraderUrl","transparent","CFDAccountCopy","Clipboard","text_copy","info_message","isMobile","success_message","popoverAlignment","is_bold","is_broker","_server_info","show_eu_related_content","onPasswordManager","toggleModal","product","is_demo","isDesktop","useDevice","_client$account_statu","client","account_status","is_eligible_to_migrate","authentication","eligible_to_migrate","getAccountTitle","PRODUCT","STANDARD","SWAPFREE","ZEROSPREAD","STP","GOLD","_getMT5StatusBadgeCon","getMT5StatusBadgeConfig","status","badge_text","badge_icon","has_migration_status","MT5_ACCOUNT_STATUS","MIGRATED_WITH_POSITION","MIGRATED_WITHOUT_POSITION","includes","getShortcode","landing_company_short","Jurisdiction","SVG","BVI","VANUATU","MAURITIUS","TradingPlatformIcon","market_type","MARKET_TYPE","SYNTHETIC","ALL","line_height","display_login","display_balance","Money","amount","currency","has_sign","balance","show_currency","StatusBadge","SpecBox","landing_company","server_info","environment","PasswordBox","_mt5_trade_account$ma","_mt5_trade_account$ac","account_type","getCFDAccountKey","sub_account_type","shortcode","login","getTitle","server","MigrationBanner","MT5DesktopRedirectOption","MT5MobileRedirectOption","_ctrader_trading_plat","_ctrader_trading_plat2","_ctrader_trading_plat3","ctrader_derivx_trade_account","is_eu_user","dxtrade_tokens","ctrader_tokens","_useStore","common","traders_hub","cfd","modules","ctrader_accounts_list","ctrader_trading_platform_available_accounts","ctrader_total_balance","setAccountType","is_account_being_created","loadCTraderTokens","setAppstorePlatform","openDerivRealAccountNeededModal","selected_account_type","no_CR_account","is_real","has_any_real_account","getAccount","message","header","content","max_count","STRATEGY_PROVIDER_NOTES","note","toUpperCase","platformsText","CTRADER","DXTRADE","PlatformIconsAndDescriptions","filter","all_ctrader_accounts","ctrader_account","available_count","category","disabled","ExpansionPanel","platform_type","app_title","PlatformsDesktopDownload","ctraderTokenCall","downloadCenterAppOption","CTRADER_DESKTOP_WINDOWS_DOWNLOAD","CTRADER_DESKTOP_MAC_DOWNLOAD","downloadCenterDescription","mobileDownloadLink","getPlatformQRCode","is_open","CFDTradeModal","DMT5TradeModal","CTraderDerivXTradeModal","fallback","UILoader","Modal","title","should_header_stick_body","exit_classname","PageOverlay","portal_id","onClickClose","header_classname","Div100vhContainer","height_offset","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","getter","__esModule","definition","get","obj","prop","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","bind","__webpack_exports__"],"sourceRoot":""}