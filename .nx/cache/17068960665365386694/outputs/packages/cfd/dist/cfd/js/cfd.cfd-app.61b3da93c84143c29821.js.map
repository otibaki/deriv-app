{"version":3,"file":"cfd/js/cfd.cfd-app.61b3da93c84143c29821.js","mappings":"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","sources":["webpack://@deriv/cfd/./src/Components/Routes/route-with-sub-routes.tsx","webpack://@deriv/cfd/./src/Components/Routes/binary-routes.tsx","webpack://@deriv/cfd/./src/Components/Routes/index.ts","webpack://@deriv/cfd/./src/Components/Errors/error-component.tsx","webpack://@deriv/cfd/./src/Components/Errors/index.ts","webpack://@deriv/cfd/./src/Containers/routes/routes.tsx","webpack://@deriv/cfd/./src/Containers/routes/index.ts","webpack://@deriv/cfd/./src/_common/base/server_time.js","webpack://@deriv/cfd/./src/init-store.js","webpack://@deriv/cfd/./src/cfd-providers.tsx","webpack://@deriv/cfd/./src/app.tsx"],"sourcesContent":["import React from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { Redirect, Route } from 'react-router-dom';\nimport { redirectToLogin, isEmptyObject, routes, removeBranchName, default_title } from '@deriv/shared';\nimport { getLanguage } from '@deriv/translations';\nimport { TBinaryRoutes, TRoute, TRouteConfig } from '../../types/types';\n\ntype TRouteWithSubRoutesProps = TRouteConfig & TBinaryRoutes;\n\nconst RouteWithSubRoutes = (route: TRouteWithSubRoutesProps) => {\n    const renderFactory = (props: RouteComponentProps) => {\n        let result = null;\n\n        if (route.component === Redirect) {\n            let to = route.to;\n\n            // This if clause has been added just to remove '/index' from url in localhost env.\n            if (route.path === routes.index) {\n                const { location } = props;\n                to = location.pathname.toLowerCase().replace(route.path, '');\n            }\n            result = <Redirect to={to} />;\n        } else if (route.is_authenticated && !route.is_logged_in && !route.is_logging_in) {\n            redirectToLogin(route.is_logged_in, getLanguage());\n        } else {\n            const default_subroute: TRoute = (route.routes ?? []).reduce(\n                (acc: TRoute, cur: TRoute) => ({\n                    ...acc,\n                    ...cur.subroutes?.find(subroute => subroute.default),\n                }),\n                {}\n            );\n            const has_default_subroute = !isEmptyObject(default_subroute);\n            const pathname = removeBranchName(location.pathname);\n            const RouteComponent = route.component as React.ElementType;\n\n            result = (\n                <React.Fragment>\n                    {has_default_subroute && pathname === route.path && <Redirect to={default_subroute?.path} />}\n                    <RouteComponent {...props} routes={route.routes} />\n                </React.Fragment>\n            );\n        }\n\n        const title = route.getTitle?.() || '';\n        document.title = `${title} | ${default_title}`;\n        return result;\n    };\n\n    return <Route exact={route.exact} path={route.path} render={renderFactory} />;\n};\n\nexport default RouteWithSubRoutes;\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\nimport { Localize } from '@deriv/translations';\nimport getRoutesConfig from 'Constants/routes-config';\nimport RouteWithSubRoutes from './route-with-sub-routes';\nimport { TBinaryRoutes } from 'Types/types';\n\nconst BinaryRoutes = (props: TBinaryRoutes) => {\n    return (\n        <React.Suspense\n            fallback={\n                <div>\n                    <Localize i18n_default_text='Loading...' />\n                </div>\n            }\n        >\n            <Switch>\n                {getRoutesConfig().map((route, id) => (\n                    <RouteWithSubRoutes key={id} {...route} {...props} />\n                ))}\n            </Switch>\n        </React.Suspense>\n    );\n};\n\nexport default BinaryRoutes;\n","import BinaryRoutes from './binary-routes';\nimport RouteWithSubRoutes from './route-with-sub-routes';\n\nexport default BinaryRoutes;\nexport { RouteWithSubRoutes };\n","import React from 'react';\nimport { Dialog, PageErrorContainer } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\n\ntype TErrorComponentProps = {\n    header?: JSX.Element | string;\n    is_dialog?: boolean;\n    message?: JSX.Element | string;\n    redirect_label?: string;\n    redirectOnClick?: (() => void) | null;\n    should_show_refresh?: boolean;\n};\n\nconst ErrorComponent = ({\n    header,\n    message,\n    is_dialog,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}: TErrorComponentProps) => {\n    const refresh_message = should_show_refresh ? localize('Please refresh this page to continue.') : '';\n\n    if (is_dialog) {\n        return (\n            <Dialog\n                title={header || localize('There was an error')}\n                is_visible\n                confirm_button_text={redirect_label || localize('Ok')}\n                onConfirm={redirectOnClick || (() => location.reload())}\n            >\n                {message || localize('Sorry, an error occured while processing your request.')}\n            </Dialog>\n        );\n    }\n    return (\n        <PageErrorContainer\n            error_header={header ?? ''}\n            error_messages={message ? [message, refresh_message] : []}\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label || localize('Refresh')]}\n            buttonOnClick={redirectOnClick || (() => location.reload())}\n        />\n    );\n};\n\nexport default ErrorComponent;\n","import ErrorComponent from './error-component';\n\nexport default ErrorComponent;\n","import React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\nimport BinaryRoutes from '../../Components/Routes';\nimport ErrorComponent from '../../Components/Errors';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TRoutesProps = RouteComponentProps & { passthrough?: React.ComponentProps<typeof BinaryRoutes>['passthrough'] };\n\nconst Routes = observer(({ passthrough }: TRoutesProps) => {\n    const { client, common } = useStore();\n\n    const { is_logged_in, is_logging_in } = client;\n    const { error, has_error } = common;\n\n    if (has_error) {\n        return <ErrorComponent {...error} />;\n    }\n\n    return <BinaryRoutes is_logged_in={is_logged_in} is_logging_in={is_logging_in} passthrough={passthrough} />;\n});\n\n// need to wrap withRouter around connect\n// to prevent updates on <BinaryRoutes /> from being blocked\nexport default withRouter(Routes);\n","import Routes from './routes';\n\nexport default Routes;\n","import { PromiseUtils } from '@deriv-com/utils';\n\nconst ServerTime = (() => {\n    let clock_started = false;\n    const pending = PromiseUtils.createPromise();\n    let common_store;\n\n    const init = store => {\n        if (!clock_started) {\n            common_store = store;\n            pending.resolve(common_store.server_time);\n            clock_started = true;\n        }\n    };\n\n    const get = () => (clock_started && common_store.server_time ? common_store.server_time.clone() : undefined);\n\n    return {\n        init,\n        get,\n        timePromise: () => (clock_started ? Promise.resolve(common_store.server_time) : pending.promise),\n    };\n})();\n\nexport default ServerTime;\n","import { configure } from 'mobx';\nimport RootStore from './Stores';\nimport { setWebsocket } from '@deriv/shared';\nimport ServerTime from '_common/base/server_time';\n\nconfigure({ enforceActions: 'observed' });\n\nlet root_store;\n\nconst initStore = (core_store, websocket) => {\n    if (root_store) return root_store;\n\n    ServerTime.init(core_store.common);\n    setWebsocket(websocket);\n    root_store = new RootStore(core_store);\n\n    return root_store;\n};\n\nexport default initStore;\n","import React from 'react';\nimport { APIProvider } from '@deriv/api';\nimport { StoreProvider } from '@deriv/stores';\nimport { CFDStoreProvider } from './Stores/Modules/CFD/Helpers/useCfdStores';\nimport type { TCoreStores } from '@deriv/stores/types';\n\nconst CFDProviders = ({ children, store }: React.PropsWithChildren<{ store: TCoreStores }>) => {\n    return (\n        <APIProvider>\n            <StoreProvider store={store}>\n                <CFDStoreProvider>{children}</CFDStoreProvider>\n            </StoreProvider>\n        </APIProvider>\n    );\n};\n\nexport default CFDProviders;\n","import React from 'react';\nimport Routes from './Containers/routes';\nimport initStore from './init-store';\nimport CFDProviders from './cfd-providers';\nimport type { TCoreStores } from '@deriv/stores/types';\n\ntype TAppProps = {\n    passthrough: {\n        root_store: TCoreStores;\n        WS: unknown;\n    };\n};\n\nconst App = ({ passthrough }: TAppProps) => {\n    initStore(passthrough.root_store, passthrough.WS);\n\n    return (\n        <CFDProviders store={passthrough.root_store}>\n            <Routes />\n        </CFDProviders>\n    );\n};\n\nexport default App;\n"],"names":["route","React","Route","exact","path","render","props","_route$getTitle","result","component","Redirect","to","routes","index","location","pathname","toLowerCase","replace","is_authenticated","is_logged_in","is_logging_in","_route$routes","default_subroute","reduce","acc","cur","_cur$subroutes","_objectSpread","subroutes","find","subroute","has_default_subroute","isEmptyObject","removeBranchName","RouteComponent","_extends","redirectToLogin","getLanguage","title","getTitle","call","document","concat","default_title","fallback","Localize","i18n_default_text","Switch","getRoutesConfig","map","id","RouteWithSubRoutes","key","_ref","header","message","is_dialog","redirect_label","redirectOnClick","_ref$should_show_refr","should_show_refresh","refresh_message","localize","Dialog","is_visible","confirm_button_text","onConfirm","reload","PageErrorContainer","error_header","error_messages","redirect_urls","trade","redirect_labels","buttonOnClick","Routes","observer","passthrough","_useStore","useStore","client","common","error","has_error","ErrorComponent","BinaryRoutes","withRouter","common_store","clock_started","pending","PromiseUtils","createPromise","init","store","resolve","server_time","get","clone","undefined","timePromise","Promise","promise","root_store","configure","enforceActions","core_store","websocket","ServerTime","setWebsocket","RootStore","children","APIProvider","StoreProvider","CFDStoreProvider","initStore","WS","CFDProviders"],"sourceRoot":""}