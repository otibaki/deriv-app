{"version":3,"file":"p2p/js/p2p.p2p-app-389e2277.3d548454909c2452f78b.js","mappings":"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","sources":["webpack://@deriv/p2p/./src/utils/adverts.ts","webpack://@deriv/p2p/./src/utils/block-user.ts","webpack://@deriv/p2p/./src/utils/chat-message.ts","webpack://@deriv/p2p/./src/utils/date-time.ts","webpack://@deriv/p2p/./src/utils/file-uploader.ts","webpack://@deriv/p2p/./src/utils/format-value.ts","webpack://@deriv/p2p/./src/utils/orders.ts","webpack://@deriv/p2p/./src/utils/responsive.ts","webpack://@deriv/p2p/./src/utils/server_time.ts","webpack://@deriv/p2p/./src/utils/string.ts","webpack://@deriv/p2p/./src/utils/validations.ts","webpack://@deriv/p2p/./src/utils/websocket.js"],"sourcesContent":["import { Duration } from 'moment';\nimport { getDiffDuration, toMoment, epochToMoment } from '@deriv/shared';\nimport { localize } from 'Components/i18next';\nimport { api_error_codes } from 'Constants/api-error-codes';\n\n/**\n * Function to generate localized error title for the corresponding error code\n *\n * @param {string} error_code - The error code returned from the API\n * @returns {string} The title for the error dialog\n */\nexport const generateErrorDialogTitle = (error_code: string): string => {\n    switch (error_code) {\n        case api_error_codes.ADVERT_SAME_LIMITS:\n            return localize('You already have an ad with this range');\n        case api_error_codes.DUPLICATE_ADVERT:\n            return localize('You already have an ad with this rate');\n        default:\n            return localize(\"Something's not right\");\n    }\n};\n\n/**\n * Function to generate the error message for the error dialog based on the given error code and message.\n *\n * @param {string} error_code - The error code to determine the error message for.\n * @param {string} error_message - The custom error message to be displayed, if applicable.\n * @returns {string} The error message for the dialog.\n */\nexport const generateErrorDialogBody = (error_code: string): string => {\n    switch (error_code) {\n        case api_error_codes.ADVERT_SAME_LIMITS:\n            return localize(\n                'Please set a different minimum and/or maximum order limit. \\n\\nThe range of your ad should not overlap with any of your active ads.'\n            );\n        case api_error_codes.DUPLICATE_ADVERT:\n            return localize(\n                'You already have an ad with the same exchange rate for this currency pair and order type. \\n\\nPlease set a different rate for your ad.'\n            );\n        default:\n            return localize(\"Something's not right\");\n    }\n};\n\nconst getStatusLabel = (diff: Duration) => {\n    if (diff.years()) return localize('Seen more than 6 months ago');\n\n    if (diff.months()) {\n        if (diff.months() > 6) {\n            return localize('Seen more than 6 months ago');\n        }\n        if (diff.months() === 1) {\n            return localize('Seen {{ duration }} month ago', {\n                duration: diff.months(),\n            });\n        }\n        return localize('Seen {{ duration }} months ago', {\n            duration: diff.months(),\n        });\n    }\n    if (diff.days()) {\n        if (diff.days() === 1) {\n            return localize('Seen {{ duration }} day ago', {\n                duration: diff.days(),\n            });\n        }\n        return localize('Seen {{ duration }} days ago', {\n            duration: diff.days(),\n        });\n    }\n    if (diff.hours()) {\n        if (diff.hours() === 1) {\n            return localize('Seen {{ duration }} hour ago', {\n                duration: diff.hours(),\n            });\n        }\n        return localize('Seen {{ duration }} hours ago', {\n            duration: diff.hours(),\n        });\n    }\n    if (diff.minutes()) {\n        if (diff.minutes() === 1) {\n            return localize('Seen {{ duration }} minute ago', {\n                duration: diff.minutes(),\n            });\n        }\n        return localize('Seen {{ duration }} minutes ago', {\n            duration: diff.minutes(),\n        });\n    }\n    return localize('Online');\n};\n\nconst getTimeDifference = (last_seen_online: number) => {\n    const start_time = epochToMoment(last_seen_online).unix();\n    const end_time = toMoment().unix();\n    return getDiffDuration(start_time, end_time);\n};\n\n/**\n * Function to generate the status label for the user based on the given online status and last online time.\n *\n * @param {0|1} is_online - The online status of the user\n * @param {number} last_online_time - The last online time in epoch\n * @returns {string} The status label to be shown.\n */\nexport const getLastOnlineLabel = (is_online: 0 | 1, last_online_time?: number) => {\n    if (!is_online) {\n        if (last_online_time) {\n            const diff = getTimeDifference(last_online_time);\n            return getStatusLabel(diff);\n        }\n        return localize('Seen more than 6 months ago');\n    }\n    return localize('Online');\n};\n\n/**\n * Function to get the message to be shown to users when they are not eligible to create an order against an advert.\n *\n * @param {string[]} eligibility_statuses - The list of reasons why the user is not eligible.\n * @returns {string} The eligibility message based on the given eligibility statuses.\n */\nexport const getEligibilityMessage = (eligibility_statuses: string[]) => {\n    if (eligibility_statuses.length === 1) {\n        if (eligibility_statuses.includes('completion_rate')) {\n            return localize('Your completion rate is too low for this ad.');\n        } else if (eligibility_statuses.includes('join_date')) {\n            return localize(\"You've not used Deriv P2P long enough for this ad.\");\n        }\n    }\n\n    return localize(\"The advertiser has set conditions for this ad that you don't meet.\");\n};\n","import { localize } from 'Components/i18next';\n\n/**\n * Gets the error message to be displayed\n *\n * @param {String} default_message - Default message to be displayed\n * @param {boolean} error_message_boolean - Boolean to check if error message is to be displayed\n * @param {boolean} is_invalid_advertiser_id - Boolean to check if advertiser id is invalid\n * @param {String} name - Name of the advertiser\n * @returns {String} error message\n */\nexport const getErrorMessage = (\n    default_message: string,\n    error_message_boolean: boolean,\n    is_invalid_advertiser_id: boolean,\n    name: string\n): string => {\n    if (is_invalid_advertiser_id) {\n        if (error_message_boolean) {\n            return localize(\"Unblocking wasn't possible as {{name}} is not using Deriv P2P anymore.\", {\n                name,\n            });\n        }\n        return localize(\"Blocking wasn't possible as {{name}} is not using Deriv P2P anymore.\", {\n            name,\n        });\n    }\n    return default_message;\n};\n\n/**\n * Gets the error modal title\n *\n * @param {boolean} is_invalid_advertiser_id - Boolean to check if advertiser id is invalid\n * @param {String} name - Name of the advertiser\n * @returns {String} error modal title\n */\nexport const getErrorModalTitle = (is_invalid_advertiser_id: boolean, name: string): string => {\n    return is_invalid_advertiser_id\n        ? localize('{{name}} is no longer on Deriv P2P', {\n              name,\n          })\n        : localize('Unable to block advertiser');\n};\n","import { FileMessage, UserMessage } from '@sendbird/chat/message';\n\ntype TChatMessageArgs = {\n    created_at: number;\n    channel_url: string;\n    custom_type?: string;\n    id: string;\n    file_type?: string;\n    message?: string;\n    message_type: string;\n    name?: string;\n    sender_user_id: string;\n    size?: number;\n    status?: number;\n    url?: string;\n};\n\nexport default class ChatMessage {\n    created_at: number;\n    channel_url: string;\n    custom_type?: string;\n    id: string;\n    file_type?: string;\n    message?: string;\n    message_type: string;\n    name?: string;\n    sender_user_id: string;\n    size?: number;\n    status?: number;\n    url?: string;\n\n    constructor({\n        created_at,\n        channel_url,\n        custom_type,\n        id,\n        file_type,\n        message,\n        message_type,\n        name,\n        sender_user_id,\n        size,\n        status,\n        url,\n    }: TChatMessageArgs) {\n        this.created_at = created_at;\n        this.channel_url = channel_url;\n        this.custom_type = custom_type;\n        this.file_type = file_type;\n        this.id = id;\n        this.message = message;\n        this.message_type = message_type;\n        this.name = name;\n        this.sender_user_id = sender_user_id;\n        this.size = size;\n        this.status = status;\n        this.url = url;\n    }\n\n    static STATUS_PENDING = 0;\n    static STATUS_ERRORED = 1;\n\n    // Below two statuses are never used but here for consistency.\n    // The read receipts are generated based on \"chat_channel\" receipt timestamps\n    // rather than individual message statuses.\n    // static STATUS_DELIVERED_TO_SERVER = 2;\n    // static STATUS_READ_BY_RECEIVER = 3;\n\n    static TYPE_ADMIN = 'admin';\n    static TYPE_USER = 'user';\n    static TYPE_FILE = 'file';\n}\n\nexport const convertFromChannelMessage = (channel_message: UserMessage | FileMessage) => {\n    return new ChatMessage({\n        created_at: channel_message.createdAt,\n        channel_url: channel_message.channelUrl,\n        custom_type: channel_message.customType,\n        file_type: channel_message.isFileMessage() ? channel_message.type : undefined,\n        id: channel_message.messageId.toString(),\n        message: channel_message.isUserMessage() ? channel_message.message : undefined,\n        message_type: channel_message.messageType,\n        name: channel_message.isFileMessage() ? channel_message.name : undefined,\n        sender_user_id: channel_message.sender.userId,\n        size: channel_message.isFileMessage() ? channel_message.size : undefined,\n        url: channel_message.isFileMessage() ? channel_message.url : undefined,\n    });\n};\n","/**\n * Gets the formatted date string in the format \"DD MMM YYYY HH:mm:ss\". e.g.: \"01 Jan 1970 21:01:11\"\n * or \"MMM DD YYYY HH:mm:ss\" for local time. e.g.: \"Jan 01 1970 21:01:11\" or without seconds if\n * has_seconds is false. e.g.: \"01 Jan 1970 21:01\" or \"Jan 01 1970 21:01\".\n *\n * @param {Date} date_obj - The date object to format.\n * @param {boolean} is_local - Whether to use local time or UTC time.\n * @param {boolean} has_seconds - Whether to include seconds in the time.\n * @returns {String} The formatted date string.\n */\nexport const getFormattedDateString = (\n    date_obj: Date,\n    is_local = false,\n    has_seconds = false,\n    only_date = false\n): string => {\n    const date_string = is_local ? date_obj.toString().split(' ') : date_obj.toUTCString().split(' ');\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, day, month, year, time] = date_string;\n    const times = time.split(':');\n\n    // Return time in the format \"HH:mm:ss\". e.g.: \"01 Jan 1970 21:01:11\"\n    if (!has_seconds) {\n        times.pop();\n    }\n\n    if (only_date) {\n        return `${month} ${day} ${year}`;\n    }\n\n    const time_without_sec = times.join(':');\n\n    // Return in the format \"DD MMM YYYY HH:mm\". e.g.: \"01 Jan 1970 21:01\"\n    return `${day} ${month} ${year}, ${time_without_sec}`;\n};\n\n/**\n * Converts the epoch time to milliseconds.\n * @param {Number} epoch - The epoch time to convert.\n * @returns {Number} The epoch time in milliseconds.\n */\nexport const convertToMillis = (epoch: number): number => {\n    const milliseconds = epoch * 1000;\n    return milliseconds;\n};\n\n/**\n * Gets the date string after the given number of hours.\n * @param {Number} initial_epoch - The initial epoch time.\n * @param {Number} hours - The number of hours to add.\n * @returns {String} The date string after the given number of hours.\n */\nexport const getDateAfterHours = (initial_epoch: number, hours: number): string => {\n    const milliseconds = hours * 60 * 60 * 1000;\n    const initial_day_milliseconds = convertToMillis(initial_epoch);\n    const total_milliseconds = initial_day_milliseconds + milliseconds;\n\n    return getFormattedDateString(new Date(total_milliseconds));\n};\n\n/**\n * Converts a number to double digits.\n * @param {Number} number - The number to convert.\n * @returns {String} The number in double digits.\n */\nconst toDoubleDigits = (number: number): string => number.toString().padStart(2, '0');\n\n/**\n * Converts the distance in milliseconds to a timer string in the format \"HH:MM:SS\". e.g.: \"00:00:00\"\n * @param {Number} distance - The distance in milliseconds.\n * @returns {String} The timer string.\n */\nexport const millisecondsToTimer = (distance: number): string => {\n    const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n    return `${toDoubleDigits(hours)}:${toDoubleDigits(minutes)}:${toDoubleDigits(seconds)}`;\n};\n","import { localize } from 'Components/i18next';\n\nexport type TFile = File & { file: Blob };\n\nexport const max_pot_file_size = 5242880;\n\n/**\n * Convert bytes to MB\n * @param {number} bytes\n * @returns {number} MB\n */\nexport const convertToMB = (bytes: number): number => bytes / (1024 * 1024);\n\n/**\n * Gets the supported file extensions from the filename\n * @param {string} filename\n * @returns {boolean} true if supported, false otherwise\n */\nexport const getPotSupportedFiles = (filename: string): boolean =>\n    /^.*\\.(png|PNG|jpg|JPG|jpeg|JPEG|pdf|PDF)$/.test(filename);\n\n/**\n * Checks if the file type is an image\n * @param {string} type\n * @returns {boolean} true if image, false otherwise\n */\nexport const isImageType = (type: string): boolean => ['image/jpeg', 'image/png', 'image/gif'].includes(type);\n\n/**\n * Checks if the file type is a pdf\n * @param {string} type\n * @returns {boolean} true if pdf, false otherwise\n */\nexport const isPDFType = (type: string): boolean => type === 'application/pdf';\n\n/**\n * Checks if the file is too large\n * @param {TFile[]} files\n * @returns {boolean} true if file is too large, false otherwise\n */\nconst isFileTooLarge = (files: TFile[]): boolean => files?.length > 0 && files[0].file.size > max_pot_file_size;\n\n/**\n * Checks if the file is supported\n * @param {TFile[]} files\n * @returns {boolean} true if file is supported, false otherwise\n */\nconst isFileSupported = (files: TFile[]): boolean =>\n    files.filter(each_file => getPotSupportedFiles(each_file.file.name))?.length > 0;\n\n/**\n * Gets the error message for the file if it is not supported or too large\n * @param {TFile[]} files\n * @returns {string} error message\n */\nexport const getErrorMessage = (files: TFile[]): string =>\n    isFileTooLarge(files) && isFileSupported(files)\n        ? localize('Cannot upload a file over 5MB')\n        : localize('The file you uploaded is not supported. Upload another.');\n\n/**\n * Truncates the file name to a certain length\n * @param {TFile} file\n * @param {number} limit\n * @returns {string} truncated file name\n */\nexport const truncateFileName = (file: TFile, limit: number): string => {\n    const string_limit_regex = new RegExp(`(.{${limit || 30}})..+`);\n    return file?.name?.replace(string_limit_regex, `$1….${getFileExtension(file)}`);\n};\n\n/**\n * Gets the file extension\n * @param {TFile} file\n * @returns {string | null} file extension or null if not found\n */\nconst getFileExtension = (file: TFile): string | null => {\n    const f = file?.type?.match(/[^/]+$/u);\n    return f && f[0];\n};\n\n/**\n * The function renames the files by removing any non ISO-8859-1 code point from filename and returns a new blob object with the updated file name.\n * @param {TFile} file\n * @returns {Blob}\n */\nexport const renameFile = (file: TFile): Blob => {\n    const new_file = new Blob([file], { type: file.type });\n    // eslint-disable-next-line no-control-regex\n    new_file.name = file.name.replace(/[^\\x00-\\x7F]+/g, '');\n    return new_file;\n};\n","import { formatMoney } from '@deriv/shared';\nimport { ad_type } from 'Constants/floating-rate';\n\n/**\n * Rounds off the number to the specified decimal place.\n * @param {Number} number - The number to round off\n * @param {Number} decimal_place - The decimal place to round off to (default: 2)\n * @returns {String} The rounded off number\n */\nexport const roundOffDecimal = (number: number, decimal_place = 2): string => number.toFixed(decimal_place);\n\n/**\n * Sets the decimal places of the number to the specified decimal place.\n * @param {Number} value - The number to set the decimal places.\n * @param {Number} expected_decimal_place - The decimal place to set the number to.\n * @returns {Number} The number with the decimal places set.\n */\nexport const setDecimalPlaces = (value: number, expected_decimal_place: number): number => {\n    const actual_decimal_place = value.toString().split('.')[1]?.length;\n    return actual_decimal_place > expected_decimal_place ? expected_decimal_place : actual_decimal_place;\n};\n\n/**\n * Calculates the percent of the number.\n * @param {String} number - The number to calculate the percent of.\n * @param {String} percent - The percent to calculate.\n * @returns {Number} The percent of the number.\n */\nexport const percentOf = (number: number, percent: number): number => number + number * (percent / 100);\n\ntype TGenerateEffectiveRate = {\n    price: number;\n    rate: number;\n    local_currency: string;\n    exchange_rate: number;\n    market_rate: number;\n    rate_type: string;\n};\n\n/**\n * Calculates the effective rate.\n * @param {Object} params - The parameters to calculate the effective rate.\n * @param {Number} params.price - The price of the ad.\n * @param {Number} params.rate - The rate of the ad.\n * @param {String} params.local_currency - The local currency of the ad.\n * @param {Number} params.exchange_rate - The exchange rate of the ad.\n * @param {Number} params.market_rate - The market rate of the ad.\n * @param {String} params.rate_type - The rate type of the ad.\n * @returns {Object} The effective rate and the display effective rate.\n */\nexport const generateEffectiveRate = ({\n    price = 0,\n    rate = 0,\n    local_currency = '',\n    exchange_rate = 0,\n    market_rate = 0,\n    rate_type = ad_type.FIXED,\n}: Partial<TGenerateEffectiveRate>): object => {\n    let effective_rate, display_effective_rate;\n\n    if (rate_type === ad_type.FIXED) {\n        effective_rate = price;\n        display_effective_rate = formatMoney(local_currency, effective_rate, true);\n    } else {\n        effective_rate = exchange_rate > 0 ? percentOf(exchange_rate, rate) : market_rate;\n        const decimal_place = setDecimalPlaces(effective_rate, 6);\n        display_effective_rate = removeTrailingZeros(\n            formatMoney(local_currency, roundOffDecimal(effective_rate, decimal_place), true, decimal_place)\n        );\n    }\n    return { effective_rate, display_effective_rate };\n};\n\n/**\n * Removes the trailing zeros from the number.\n * @param {String} value - The number to remove the trailing zeros.\n * @returns {String} The number without the trailing zeros.\n */\nexport const removeTrailingZeros = (value: string): string => {\n    const [input, unit] = value.trim().split(' ');\n\n    if (input.indexOf('.') === -1) return formatInput(input, unit);\n\n    let trim_from = input.length - 1;\n\n    do {\n        if (input[trim_from] === '0') trim_from--;\n    } while (input[trim_from] === '0');\n\n    if (input[trim_from] === '.') trim_from--;\n\n    const result = value.toString().substring(0, trim_from + 1);\n\n    return formatInput(result, unit);\n};\n\n/**\n * Formats the input to the specified format.\n * @param {String} input - The input to format.\n * @param {String} unit - The unit to append to the input.\n * @returns {String} The formatted input.\n */\nexport const formatInput = (input: string, unit: string): string => {\n    const plain_input = input.replace(/,/g, '');\n\n    if (parseFloat(plain_input) % 1 === 0) return `${input}.00 ${unit ? unit.trim() : ''}`;\n\n    if (plain_input.split('.')[1].length === 1) return `${input}0 ${unit ? unit.trim() : ''}`;\n\n    return `${input}${unit ? ` ${unit.trim()}` : ''}`;\n};\n","import { P2POrderInfo } from '@deriv/api-types';\nimport { toMoment } from '@deriv/shared';\nimport { localize } from 'Components/i18next';\nimport { buy_sell } from 'Constants/buy-sell';\nimport { order_status } from 'Constants/order-list';\nimport { convertToMillis, getFormattedDateString } from 'Utils/date-time';\nimport ServerTime from './server-time';\n\ntype TServerTime = typeof ServerTime;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\ninterface ExtendedOrderDetails extends P2POrderInfo {}\n\nclass ExtendedOrderDetails {\n    constructor(\n        public order_details: P2POrderInfo,\n        public loginid: string,\n        public server_time: TServerTime\n    ) {\n        Object.assign(this, order_details);\n    }\n\n    // Order statuses\n\n    /**\n     * Function to check if order is a buy order based on the type\n     *\n     * @returns {boolean}\n     */\n    get is_buy_order() {\n        return this.order_details.type === buy_sell.BUY;\n    }\n\n    /**\n     * Function to check if order is a sell order based on the type\n     *\n     * @returns {boolean}\n     */\n    get is_sell_order() {\n        return this.order_details.type === buy_sell.SELL;\n    }\n\n    /**\n     * Function to check if the user has cancelled the order based on the status\n     *\n     * @returns {boolean}\n     */\n    get is_buyer_cancelled_order() {\n        return this.order_details.status === order_status.CANCELLED;\n    }\n\n    /**\n     * Function to check if the user has confirmed the order based on the status\n     *\n     * @returns {boolean}\n     */\n    get is_buyer_confirmed_order() {\n        return this.order_details.status === order_status.BUYER_CONFIRMED;\n    }\n\n    /**\n     * Function to check if the order is completed based on the status\n     *\n     * @returns {boolean}\n     */\n    get is_completed_order() {\n        return this.order_details.status === order_status.COMPLETED;\n    }\n\n    /**\n     * Function to check if the order is in a disputed state based on the status\n     *\n     * @returns {boolean}\n     */\n    get is_disputed_order() {\n        return this.order_details.status === order_status.DISPUTED;\n    }\n\n    /**\n     * Function to check if the order is in a dispute refunded state based on the status\n     *\n     * @returns {boolean}\n     */\n    get is_dispute_refunded_order() {\n        return this.order_details.status === order_status.DISPUTE_REFUNDED;\n    }\n\n    /**\n     * Function to check if the order is in a dispute completed state based on the status\n     *\n     * @returns {boolean}\n     */\n    get is_dispute_completed_order() {\n        return this.order_details.status === order_status.DISPUTE_COMPLETED;\n    }\n\n    /**\n     * Function to check if the order is expired based on the status\n     *\n     * @returns {boolean}\n     */\n    get is_expired_order() {\n        return this.order_details.status === order_status.TIMED_OUT;\n    }\n\n    /**\n     * Function to check if the order is incoming\n     *\n     * @returns {boolean}\n     */\n    get is_incoming_order() {\n        return !!this.order_details.is_incoming;\n    }\n\n    /**\n     * Function to check if the order is pending based on the status\n     *\n     * @returns {boolean}\n     */\n    get is_pending_order() {\n        return this.order_details.status === order_status.PENDING;\n    }\n\n    /**\n     * Function to check if the order is refunded based on the status\n     *\n     * @returns {boolean}\n     */\n    get is_refunded_order() {\n        return this.order_details.status === order_status.REFUNDED;\n    }\n\n    /**\n     * Function to check if the ad is the logged in user's ad based on login id from the advertiser's details\n     *\n     * @returns {boolean}\n     */\n    get is_my_ad() {\n        return this.order_details?.advertiser_details?.loginid === this.loginid;\n    }\n\n    /**\n     * Function to check if the order is not active\n     *\n     * @returns {boolean} true if order is cancelled, refunded, completed, dispute completed or dispute refunded\n     */\n    get is_inactive_order() {\n        return this.is_finalised_order || this.is_dispute_completed_order || this.is_dispute_refunded_order;\n    }\n\n    /**\n     * Function to check if the order is active\n     *\n     * @returns {boolean}\n     */\n    get is_active_order() {\n        return !this.is_inactive_order;\n    }\n\n    /**\n     * Function to check if the order is finalised\n     *\n     * @returns {boolean} true if order is completed, cancelled or refunded\n     */\n    get is_finalised_order() {\n        return this.is_completed_order || this.is_buyer_cancelled_order || this.is_refunded_order;\n    }\n\n    /**\n     * Function to check if the order has review details\n     *\n     * @returns {boolean}\n     */\n    get has_review_details() {\n        return !!this.order_details?.review_details;\n    }\n\n    /**\n     * Function to check if the order is reviewable\n     *\n     * @returns {boolean}\n     */\n    get is_order_reviewable() {\n        return this.order_details.is_reviewable;\n    }\n\n    get is_pending_active() {\n        return this.is_pending_order && this.is_active_order;\n    }\n\n    /**\n     * Function to check if the user has any recommendations\n     *\n     * @returns {boolean}\n     */\n    get is_user_recommended_previously() {\n        return this.is_my_ad\n            ? this.order_details.client_details.is_recommended\n            : this.order_details.advertiser_details.is_recommended;\n    }\n\n    /**\n     * Function that returns the rating of the order\n     *\n     * @returns {number} rating\n     */\n    get rating() {\n        return this.order_details?.review_details?.rating;\n    }\n\n    /**\n     * Function that checks if the order is an ongoing order\n     *\n     * A happening order describes an order where an action has been taken by either side, i.e.\n     * one side confirmed they've paid or received funds.\n     *\n     * @returns {boolean}\n     */\n    get is_ongoing_order() {\n        return this.is_buyer_confirmed_order || this.is_buyer_cancelled_order;\n    }\n\n    /**\n     * Function that checks if the order is a buy order for the user\n     *\n     * @returns {boolean}\n     */\n    get is_buy_order_for_user() {\n        return (this.is_buy_order && !this.is_my_ad) || (this.is_sell_order && this.is_my_ad);\n    }\n\n    /**\n     * Function that checks if the order is already expired\n     *\n     * This boolean is used to fix a backend feature where they will only\n     * expire orders once a minute, as a result FE will incorrectly show\n     * orders as active when they're actually expired. This boolean is used\n     * as an extra check to ensure orders look expired on FE.\n     *\n     * @returns {boolean}\n     */\n    get has_timer_expired() {\n        const server_time_moment = toMoment(this.server_time.get());\n        const expiry_time_moment = toMoment(this.order_details.expiry_time);\n        return server_time_moment.isAfter(expiry_time_moment);\n    }\n\n    /**\n     * Function to get the remaining seconds of the order\n     *\n     * @returns {number} remaining seconds\n     */\n    get remaining_seconds() {\n        const server_time_moment = this.server_time.get();\n        const expiry_time_moment = toMoment(this.order_details.expiry_time);\n        return expiry_time_moment.diff(server_time_moment, 'seconds');\n    }\n\n    /**\n     * Function to check if the highlighted status should be disabled\n     *\n     * @returns {boolean}\n     */\n    get should_highlight_disabled() {\n        return (\n            this.is_buyer_cancelled_order ||\n            this.is_expired_order ||\n            this.is_refunded_order ||\n            this.is_disputed_order ||\n            this.is_dispute_refunded_order ||\n            (this.has_timer_expired && !this.is_completed_order && !this.is_dispute_completed_order)\n        );\n    }\n\n    /**\n     * Function to check if the order should be displayed in highlighted alert status based on order status\n     *\n     * @returns {boolean}\n     */\n    get should_highlight_alert() {\n        if (this.has_timer_expired) return false;\n\n        if (this.is_my_ad) {\n            return this.is_buy_order ? this.is_pending_order : this.is_buyer_confirmed_order;\n        }\n\n        return this.is_buy_order ? this.is_buyer_confirmed_order : this.is_pending_order;\n    }\n\n    /**\n     * Function to check if the order should be displayed in highlighted danger status based on order status\n     *\n     * @returns {boolean}\n     */\n    get should_highlight_danger() {\n        if (this.has_timer_expired) return false;\n\n        if (this.is_my_ad) {\n            return this.is_buy_order ? this.is_buyer_confirmed_order : this.is_pending_order;\n        }\n\n        return this.is_buy_order ? this.is_pending_order : this.is_buyer_confirmed_order;\n    }\n\n    /**\n     * Function to check if the order should be displayed in highlighted success status based on order status\n     *\n     * @returns {boolean}\n     */\n    get should_highlight_success() {\n        return this.is_completed_order || this.is_dispute_completed_order;\n    }\n\n    /**\n     * Function to check if the order details should display cancel and paid buttons\n     *\n     * @returns {boolean}\n     */\n    get should_show_cancel_and_paid_button() {\n        if (this.has_timer_expired) return false;\n\n        return this.is_pending_active && (this.is_buy_order ? !this.is_my_ad : this.is_my_ad);\n    }\n\n    get is_expired_or_ongoing_timer_expired() {\n        return this.is_expired_order || (this.is_ongoing_order && this.has_timer_expired);\n    }\n\n    /**\n     * Function to check if the order details should display complain and received buttons\n     *\n     * @returns {boolean}\n     */\n    get should_show_complain_and_received_button() {\n        if (this.is_finalised_order) return false;\n\n        return this.is_expired_or_ongoing_timer_expired && (this.is_sell_order ? !this.is_my_ad : this.is_my_ad);\n    }\n\n    /**\n     * Function to check if the order details should display only complain button\n     *\n     * Only show the complain button for expired orders (determined by backend), or for orders\n     * that are expired (determined by FE). This logic exists because BE only expires orders\n     * once a minute rather than on expiry time. FE should expire orders so users cannot\n     * execute actions such as \"I've paid\" or \"I've received payment\" on technically expired orders.\n     *\n     * @returns {boolean}\n     */\n    get should_show_only_complain_button() {\n        if (this.is_finalised_order) return false;\n\n        if (this.is_sell_order) {\n            return this.is_expired_or_ongoing_timer_expired;\n        }\n\n        return this.is_expired_or_ongoing_timer_expired && !this.is_my_ad;\n    }\n\n    /**\n     * Function to check if the order details should display only received button\n     *\n     * @returns {boolean}\n     */\n    get should_show_only_received_button() {\n        if (this.is_disputed_order) {\n            return (!this.is_incoming_order && this.is_sell_order) || (this.is_incoming_order && this.is_buy_order);\n        }\n\n        return this.is_buyer_confirmed_order && (this.is_buy_order ? this.is_my_ad : !this.is_my_ad);\n    }\n\n    /**\n     * Function to check if the order details should display footer section\n     *\n     * @returns {boolean}\n     */\n    get should_show_order_footer() {\n        return (\n            this.should_show_cancel_and_paid_button ||\n            this.should_show_complain_and_received_button ||\n            this.should_show_only_complain_button ||\n            this.should_show_only_received_button\n        );\n    }\n\n    /**\n     * Function to check if the order details should display timer\n     *\n     * @returns {boolean}\n     */\n    get should_show_order_timer() {\n        if (this.is_finalised_order) return false;\n        return this.is_pending_order || this.is_ongoing_order;\n    }\n\n    /**\n     * Function to check if the order details should display lost funds banner\n     *\n     * @returns {boolean}\n     */\n    get should_show_lost_funds_banner() {\n        return this.is_pending_order || this.is_buyer_confirmed_order;\n    }\n\n    /**\n     * Function that returns the status string of the order\n     *\n     * @returns {string} localized status string\n     */\n    get status_string() {\n        // Finalised orders, should take precedence over is_expired_order/has_timer_expired.\n        if (this.is_completed_order || this.is_dispute_completed_order) {\n            return localize('Completed');\n        }\n        if (this.is_buyer_cancelled_order) {\n            return localize('Cancelled');\n        }\n        if (this.is_refunded_order || this.is_dispute_refunded_order) {\n            return localize('Expired');\n        }\n\n        if (this.is_disputed_order) {\n            return localize('Under dispute');\n        }\n\n        // Keep this here, has_timer_expired should take priority over statuses below.\n        if (this.is_expired_order || this.has_timer_expired) {\n            return localize('Expired');\n        }\n\n        if (this.is_pending_order) {\n            return this.getStatusForPendingOrder();\n        }\n\n        if (this.is_buyer_confirmed_order) {\n            return this.getStatusForBuyerConfirmedOrder();\n        }\n\n        return localize('Unknown');\n    }\n\n    /**\n     * Function that returns the status string of the pending order\n     *\n     * @returns {string} localized status string\n     */\n    getStatusForPendingOrder() {\n        const wait_message = localize('Wait for payment');\n        const pay_message = localize('Pay now');\n\n        if (this.is_my_ad) {\n            return this.is_buy_order ? wait_message : pay_message;\n        }\n        return this.is_buy_order ? pay_message : wait_message;\n    }\n\n    /**\n     * Function that returns the status string of the buyer confirmed order\n     *\n     * @returns {string} localized status string\n     */\n    getStatusForBuyerConfirmedOrder() {\n        const confirm_message = localize('Confirm payment');\n        const wait_message = localize('Waiting for the seller to confirm');\n        if (this.is_my_ad) {\n            return this.is_buy_order ? confirm_message : wait_message;\n        }\n        return this.is_buy_order ? wait_message : confirm_message;\n    }\n\n    get my_ad_status_string() {\n        return {\n            counterparty_nickname_label: this.is_buy_order\n                ? localize(\"Buyer's nickname\")\n                : localize(\"Seller's nickname\"),\n            counterparty_real_name_label: this.is_buy_order\n                ? localize(\"Buyer's real name\")\n                : localize(\"Seller's real name\"),\n            left_send_or_receive: this.is_buy_order ? localize('Receive') : localize('Send'),\n            right_send_or_receive: this.is_buy_order ? localize('Send') : localize('Receive'),\n            payment_details: this.is_buy_order\n                ? localize('Your payment details')\n                : localize(\"Seller's payment details\"),\n            contact_details: this.is_buy_order\n                ? localize('Your contact details')\n                : localize(\"Seller's contact details\"),\n            instructions: localize('Your instructions'),\n            result_string: this.is_buy_order\n                ? localize('You sold {{offered_amount}} {{offered_currency}}', {\n                      ...this.result_string_values,\n                  })\n                : localize(\"You've received {{offered_amount}} {{offered_currency}}\", {\n                      ...this.result_string_values,\n                  }),\n        };\n    }\n\n    get counterparty_ad_status_string() {\n        return {\n            counterparty_nickname_label: this.is_buy_order\n                ? localize(\"Seller's nickname\")\n                : localize(\"Buyer's nickname\"),\n            counterparty_real_name_label: this.is_buy_order\n                ? localize(\"Seller's real name\")\n                : localize(\"Buyer's real name\"),\n            left_send_or_receive: this.is_buy_order ? localize('Send') : localize('Receive'),\n            right_send_or_receive: this.is_buy_order ? localize('Receive') : localize('Send'),\n            payment_details: this.is_buy_order\n                ? localize(\"Seller's payment details\")\n                : localize('Your payment details'),\n            contact_details: this.is_buy_order\n                ? localize(\"Seller's contact details\")\n                : localize('Your contact details'),\n            instructions: this.is_buy_order ? localize(\"Seller's instructions\") : localize(\"Buyer's instructions\"),\n            result_string: this.is_buy_order\n                ? localize(\"You've received {{offered_amount}} {{offered_currency}}\", {\n                      ...this.result_string_values,\n                  })\n                : localize('You sold {{offered_amount}} {{offered_currency}}', {\n                      ...this.result_string_values,\n                  }),\n        };\n    }\n\n    get result_string_values() {\n        return {\n            offered_amount: this.order_details.amount_display,\n            offered_currency: this.order_details.account_currency,\n        };\n    }\n\n    /**\n     * Function that returns the status labels\n     *\n     * @returns {string} object containing the status labels\n     */\n    get labels() {\n        if (this.is_my_ad) {\n            return this.my_ad_status_string;\n        }\n\n        return this.counterparty_ad_status_string;\n    }\n\n    /**\n     * Function that returns the user details of the order\n     *\n     * @returns {object} user details\n     */\n    get other_user_details() {\n        return this.is_my_ad ? this.order_details.client_details : this.order_details.advertiser_details;\n    }\n\n    /**\n     * Function that returns the order expiry time in milliseconds\n     *\n     * @returns {number} expiry time in milliseconds\n     */\n    get order_expiry_milliseconds() {\n        return convertToMillis(this.order_details.expiry_time);\n    }\n\n    /**\n     * Function to get the purchase time of the order\n     *\n     * @returns {string} purchase time\n     */\n    get purchase_time() {\n        return getFormattedDateString(\n            new Date(convertToMillis(this.order_details.created_time)),\n            true,\n            false,\n            this.is_inactive_order\n        );\n    }\n}\n\nexport default ExtendedOrderDetails;\n\nexport const createExtendedOrderDetails = (order_details: P2POrderInfo, loginid: string, server_time: TServerTime) =>\n    new ExtendedOrderDetails(order_details, loginid, server_time);\n\n/**\n * The below function is used to format the display the time given in minutes to hours and minutes\n * e.g. 90 minutes will be displayed as 1 hour 30 minutes\n * @param {number} minutes\n * @returns {string} formatted time string e.g. 1 hour 30 minutes\n */\nexport const formatTime = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const remaining_minutes = minutes % 60;\n    const hours_text = hours === 1 ? localize('hour') : localize('hours');\n    const minutes_text = remaining_minutes === 1 ? localize('minute') : localize('minutes');\n\n    if (hours === 0) {\n        return `${remaining_minutes} ${minutes_text}`;\n    }\n\n    if (remaining_minutes === 0) {\n        return `${hours} ${hours_text}`;\n    }\n\n    return `${hours} ${hours_text} ${remaining_minutes} ${minutes_text}`;\n};\n","/**\n * Function to get desired text size based off responsive size\n * @function getTextSize\n * @returns {string} text size\n */\nexport const getTextSize = (mobile_size: string, desktop_size: string, is_mobile = false): string =>\n    is_mobile ? mobile_size : desktop_size;\n\n/**\n * Function to get desired icon size based off responsive size\n * @function getIconSize\n * @returns {number} icon size\n */\nexport const getIconSize = (mobile_size: number, desktop_size: number, is_mobile = false): number =>\n    is_mobile ? mobile_size : desktop_size;\n\ntype TInlineTextSize = 'xs' | 'sm' | 'md' | 'lg';\n\n/**\n * Function to get desired inline text size based off responsive size\n * @function getInlineTextSize\n * @returns {TInlineTextSize} inline message text size\n */\nexport const getInlineTextSize = (\n    mobile_size: TInlineTextSize,\n    desktop_size: TInlineTextSize,\n    is_mobile = false\n): TInlineTextSize => (is_mobile ? mobile_size : desktop_size);\n","import moment from 'moment';\nimport { WS } from '@deriv/shared';\nimport { PromiseUtils } from '@deriv-com/utils';\n\nlet clock_started = false;\nconst pending = PromiseUtils.createPromise();\nlet server_time: moment.Moment,\n    performance_request_time: number,\n    get_time_interval: ReturnType<typeof setInterval>,\n    update_time_interval: ReturnType<typeof setInterval>,\n    onTimeUpdated: VoidFunction;\n\n/** Request server time from the server */\nconst requestTime = () => {\n    performance_request_time = performance.now();\n    WS.send({ time: 1 }).then(timeCounter);\n};\n\n/**\n * Initialize the clock\n * @param {Function} fncTimeUpdated - The function to call when the time is updated.\n */\nexport const init = (fncTimeUpdated?: VoidFunction) => {\n    if (!clock_started) {\n        if (fncTimeUpdated) {\n            onTimeUpdated = fncTimeUpdated;\n        }\n        requestTime();\n        clearInterval(get_time_interval);\n        get_time_interval = setInterval(requestTime, 30000);\n        clock_started = true;\n    }\n};\n\n/**\n * Update the server time\n * @param {Object} response - The response from the server.\n */\nconst timeCounter = (response: { error?: Error; time: number }) => {\n    if (response.error) return;\n\n    if (!clock_started) {\n        init();\n        return;\n    }\n\n    clearInterval(update_time_interval);\n\n    const start_timestamp = response.time;\n    const performance_response_time = performance.now();\n    const time_taken = performance_response_time - performance_request_time;\n    const server_time_at_response = start_timestamp * 1000 + time_taken;\n\n    const updateTime = () => {\n        const time_since_response = performance.now() - performance_response_time;\n        server_time = moment(server_time_at_response + time_since_response).utc();\n\n        if (typeof onTimeUpdated === 'function') {\n            onTimeUpdated();\n        }\n    };\n    updateTime();\n    pending.resolve?.();\n\n    update_time_interval = setInterval(updateTime, 1000);\n};\n\n/**\n * Get the server time if it is available.\n * @returns {Object | undefined} The server time.\n */\nexport const get = (): object | undefined => (server_time ? server_time.clone() : undefined);\n\n/**\n * Get the distance to the server time.\n * @param {Number} compare_time - The time to compare to the server time.\n * @returns {Number} The distance to the server time.\n */\nexport const getDistanceToServerTime = (compare_time: number): number => {\n    const time = moment(compare_time);\n    const now_time = get();\n    const distance = time.diff(now_time, 'milliseconds');\n\n    return distance;\n};\n","/**\n * A function that counts the number of decimal places in a number.\n * @param {Number | String} value - The number to count the decimal places of.\n * @returns {Number} The number of decimal places in the number.\n */\nexport const countDecimalPlaces = (value: number | string): number => (value.toString().split('.')?.[1] ?? '').length;\n\n/**\n * A function that gets the short nickname from a nickname.\n *\n * @param {String} nickname - The nickname to get the short nickname from.\n * @returns {String} The short nickname.\n */\nexport const getShortNickname = (nickname: string): string => nickname?.substring(0, 2).toUpperCase();\n","/**\n * Validates that a string represents a decimal number.\n * It checks if the string contains only digits and at most one decimal point.\n *\n * @param {String} value - The string to validate as a decimal number.\n * @returns {boolean} A boolean indicating the string is a valid decimal number.\n */\nexport const decimalValidator = (value: string): boolean => /^(\\d+\\.)?\\d+$/.test(value);\n\n/**\n * Validates the length of the text is between 1 and 300 characters.\n *\n * @param {String} value - The string to validate length.\n * @returns {boolean} A boolean indicating the length of the text is valid.\n */\nexport const lengthValidator = (value: string): boolean => value.length >= 1 && value.length <= 300;\n\n/**\n * Validates whether a string contains only letters, numbers, spaces, and certain punctuation marks.\n * @param {String} value - The string to validate text.\n * @returns {boolean} A boolean indicating the text is valid.\n */\nexport const textValidator = (value: string): boolean => /^[\\p{L}\\p{Nd}\\s'.,:;()@#+/-]*$/u.test(value);\n\n/**\n * Validates if the given value falls within the set range and returns a boolean.\n *\n * @param {Number} input - The value to validate\n * @param {Number} limit - The limit to validate against.\n * @returns {boolean} A boolean indicating if the value is within the set range.\n */\nexport const rangeValidator = (input: number, limit: number): boolean => input >= limit * -1 && input <= limit;\n\n/**\n * Validates floating-point integers in input box and checks if the string contains only\n * digits and at most one decimal point.\n *\n * @param {String} value - The value to validate as a floating-point integer.\n * @returns {boolean} A boolean indicating if the value is a valid floating-point integer.\n */\nexport const floatingPointValidator = (value: string): boolean =>\n    ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', '.'].includes(value) || /^\\d*\\.?\\d+$/.test(value);\n","import { setCurrencies, getCurrencies, isEmptyObject } from '@deriv/shared';\n\nlet ws;\n\nconst initial_responses = {};\n\nexport const init = websocket => {\n    ws = websocket;\n};\n\nconst setCurrenciesConfig = website_status_response => {\n    if ('website_status' in website_status_response && isEmptyObject(getCurrencies())) {\n        setCurrencies(website_status_response.website_status);\n    }\n};\n\nconst populateInitialResponses = async () => {\n    if (isEmptyObject(initial_responses)) {\n        initial_responses.website_status = await ws.send({ website_status: 1 });\n        setCurrenciesConfig(initial_responses.website_status);\n    }\n};\n\nexport const requestWS = async request => {\n    // Added a check to proceed only if ws is available\n    if (ws) {\n        await populateInitialResponses();\n        return ws.authorized.send(request);\n    }\n    return null;\n};\n\nexport const subscribeWS = (request, callbacks, enabled = true) => {\n    if (!enabled) return null;\n    return ws.p2pSubscribe(request, response => {\n        callbacks.map(callback => callback(response));\n    });\n};\n\nexport const waitWS = args => ws.wait(args);\n"],"names":["generateErrorDialogTitle","error_code","api_error_codes","ADVERT_SAME_LIMITS","localize","DUPLICATE_ADVERT","generateErrorDialogBody","getLastOnlineLabel","is_online","last_online_time","last_seen_online","start_time","end_time","diff","years","months","duration","days","hours","minutes","getStatusLabel","epochToMoment","unix","toMoment","getDiffDuration","getEligibilityMessage","eligibility_statuses","length","includes","getErrorMessage","default_message","error_message_boolean","is_invalid_advertiser_id","name","getErrorModalTitle","ChatMessage","_createClass","_ref","created_at","channel_url","custom_type","id","file_type","message","message_type","sender_user_id","size","status","url","_classCallCheck","this","STATUS_PENDING","STATUS_ERRORED","TYPE_ADMIN","TYPE_USER","TYPE_FILE","convertFromChannelMessage","channel_message","createdAt","channelUrl","customType","isFileMessage","type","undefined","messageId","toString","isUserMessage","messageType","sender","userId","getFormattedDateString","date_obj","has_seconds","arguments","only_date","_date_string","_slicedToArray","split","toUTCString","day","month","year","times","pop","concat","time_without_sec","join","convertToMillis","epoch","getDateAfterHours","initial_epoch","milliseconds","initial_day_milliseconds","Date","toDoubleDigits","number","padStart","millisecondsToTimer","distance","Math","floor","seconds","max_pot_file_size","convertToMB","bytes","isImageType","isPDFType","files","file","isFileTooLarge","_files$filter","filter","each_file","filename","test","isFileSupported","truncateFileName","limit","_file$name","string_limit_regex","RegExp","replace","getFileExtension","_file$type","f","match","renameFile","new_file","Blob","roundOffDecimal","decimal_place","toFixed","setDecimalPlaces","value","expected_decimal_place","_value$toString$split","actual_decimal_place","percentOf","percent","generateEffectiveRate","effective_rate","display_effective_rate","_ref$price","price","_ref$rate","rate","_ref$local_currency","local_currency","_ref$exchange_rate","exchange_rate","_ref$market_rate","market_rate","_ref$rate_type","rate_type","ad_type","FIXED","formatMoney","removeTrailingZeros","_value$trim$split2","trim","input","unit","indexOf","formatInput","trim_from","result","substring","plain_input","parseFloat","ExtendedOrderDetails","order_details","loginid","server_time","Object","assign","key","get","buy_sell","BUY","SELL","order_status","CANCELLED","BUYER_CONFIRMED","COMPLETED","DISPUTED","DISPUTE_REFUNDED","DISPUTE_COMPLETED","TIMED_OUT","is_incoming","PENDING","REFUNDED","_this$order_details","advertiser_details","is_finalised_order","is_dispute_completed_order","is_dispute_refunded_order","is_inactive_order","is_completed_order","is_buyer_cancelled_order","is_refunded_order","_this$order_details2","review_details","is_reviewable","is_pending_order","is_active_order","is_my_ad","client_details","is_recommended","_this$order_details3","rating","is_buyer_confirmed_order","is_buy_order","is_sell_order","server_time_moment","expiry_time_moment","expiry_time","isAfter","is_expired_order","is_disputed_order","has_timer_expired","is_pending_active","is_ongoing_order","is_expired_or_ongoing_timer_expired","is_incoming_order","should_show_cancel_and_paid_button","should_show_complain_and_received_button","should_show_only_complain_button","should_show_only_received_button","getStatusForPendingOrder","getStatusForBuyerConfirmedOrder","wait_message","pay_message","confirm_message","counterparty_nickname_label","counterparty_real_name_label","left_send_or_receive","right_send_or_receive","payment_details","contact_details","instructions","result_string","_objectSpread","result_string_values","offered_amount","amount_display","offered_currency","account_currency","my_ad_status_string","counterparty_ad_status_string","created_time","createExtendedOrderDetails","formatTime","remaining_minutes","hours_text","minutes_text","getTextSize","mobile_size","desktop_size","getIconSize","getInlineTextSize","performance_request_time","get_time_interval","update_time_interval","onTimeUpdated","clock_started","pending","PromiseUtils","createPromise","requestTime","performance","now","WS","send","time","then","timeCounter","init","fncTimeUpdated","clearInterval","setInterval","response","_pending$resolve","error","start_timestamp","performance_response_time","server_time_at_response","updateTime","time_since_response","moment","utc","resolve","call","clone","getDistanceToServerTime","compare_time","now_time","countDecimalPlaces","_value$toString$split2","getShortNickname","nickname","toUpperCase","decimalValidator","lengthValidator","textValidator","rangeValidator","floatingPointValidator","ws","_regeneratorRuntime","e","t","r","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","h","l","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","__await","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","apply","_next","_throw","initial_responses","websocket","populateInitialResponses","_callee","_context","isEmptyObject","website_status","website_status_response","getCurrencies","setCurrencies","requestWS","_ref2","_callee2","request","_context2","authorized","_x","subscribeWS","callbacks","p2pSubscribe","map","callback","waitWS","args","wait"],"sourceRoot":""}