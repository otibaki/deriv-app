{"version":3,"file":"reports/js/reports.trade-modals.54219429147e1c1634ba.js","mappings":"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","sources":["webpack://@deriv/reports/./src/Components/Elements/Modals/MarketUnavailableModal/market-unavailable.tsx","webpack://@deriv/reports/./src/Components/Elements/Modals/MarketUnavailableModal/index.ts","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/constants.ts","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/authorization-required-modal.tsx","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/insufficient-balance-modal.tsx","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/company-wide-limit-exceeded-modal.tsx","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/account-verification-required-modal.tsx","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/services-error-modal.tsx","webpack://@deriv/reports/./src/Components/Elements/Modals/ServicesErrorModal/index.ts","webpack://@deriv/reports/./src/Components/Elements/Modals/AccountVerificationPendingModal/account-verification-pending-modal.tsx","webpack://@deriv/reports/./src/Components/Elements/Modals/AccountVerificationPendingModal/index.ts","webpack://@deriv/reports/./src/Components/Modals/trade-modals.tsx","webpack://@deriv/reports/./src/Components/Modals/index.ts"],"sourcesContent":["import React from 'react';\nimport { Dialog } from '@deriv/components';\nimport { getPlatformSettings } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\n\ntype TMarketUnavailableModalProps = {\n    is_loading?: boolean;\n    onCancel: () => void;\n    onConfirm: () => void;\n};\n\nconst MarketUnavailableModal = observer(({ is_loading, onCancel, onConfirm }: TMarketUnavailableModalProps) => {\n    const { ui } = useStore();\n    const { disableApp, enableApp, has_only_forward_starting_contracts: is_visible } = ui;\n\n    return (\n        <Dialog\n            className='market-unavailable-modal'\n            title={<Localize i18n_default_text='Weâ€™re working on it' />}\n            confirm_button_text={localize('Stay on {{platform_name_trader}}', {\n                platform_name_trader: getPlatformSettings('trader').name,\n            })}\n            cancel_button_text={localize('Go to {{platform_name_smarttrader}}', {\n                platform_name_smarttrader: getPlatformSettings('smarttrader').name,\n            })}\n            onConfirm={onConfirm}\n            onCancel={onCancel}\n            is_mobile_full_width={false}\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading}\n        >\n            <Localize\n                i18n_default_text='This market is not yet available on {{platform_name_trader}}, but it is on {{platform_name_smarttrader}}.'\n                values={{\n                    platform_name_trader: getPlatformSettings('trader').name,\n                    platform_name_smarttrader: getPlatformSettings('smarttrader').name,\n                }}\n            />\n        </Dialog>\n    );\n});\n\nexport default MarketUnavailableModal;\n","import MarketUnavailableModal from './market-unavailable';\n\nexport default MarketUnavailableModal;\n","import { localize } from '@deriv/translations';\n\nexport const getTitle = (type?: string) => {\n    switch (type) {\n        case 'buy':\n            return localize('Purchase Error');\n        case 'cancel':\n            return localize('Deal Cancellation Error');\n        case 'contract_update':\n            return localize('Contract Update Error');\n        case 'sell':\n            return localize('Sell Error');\n        default:\n            return 'Error';\n    }\n};\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { getLanguage, localize } from '@deriv/translations';\nimport { redirectToLogin, redirectToSignUp } from '@deriv/shared';\n\ntype TAuthorizationRequiredModal = {\n    is_visible: boolean;\n    toggleModal: () => void;\n    is_appstore?: boolean;\n    is_logged_in: boolean;\n};\n\nconst AuthorizationRequiredModal = ({\n    is_visible,\n    toggleModal,\n    is_appstore,\n    is_logged_in,\n}: TAuthorizationRequiredModal) => (\n    <Modal\n        id='dt_authorization_required_modal'\n        is_open={is_visible}\n        small\n        toggleModal={toggleModal}\n        title={localize('Start trading with us')}\n    >\n        <Modal.Body>{localize('Log in or create a free account to place a trade.')}</Modal.Body>\n        <Modal.Footer>\n            <Button\n                has_effect\n                text={localize('Log in')}\n                onClick={() => redirectToLogin(is_logged_in, getLanguage())}\n                secondary\n            />\n            <Button\n                has_effect\n                text={localize('Create free account')}\n                onClick={() => redirectToSignUp({ is_appstore })}\n                primary\n            />\n        </Modal.Footer>\n    </Modal>\n);\n\nexport default AuthorizationRequiredModal;\n","import React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { Button, Modal } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\n\ntype TInsufficientBalanceModal = RouteComponentProps & {\n    is_virtual?: boolean;\n    is_visible: boolean;\n    message: string;\n    toggleModal: () => void;\n};\n\nconst InsufficientBalanceModal = observer(\n    ({ history, is_virtual, is_visible, message, toggleModal }: TInsufficientBalanceModal) => {\n        const {\n            ui: { is_mobile },\n            client,\n        } = useStore();\n        const { has_wallet } = client;\n        return (\n            <Modal\n                id='dt_insufficient_balance_modal'\n                is_open={is_visible}\n                small\n                is_vertical_centered={is_mobile}\n                toggleModal={toggleModal}\n                title={localize('Insufficient balance')}\n            >\n                <Modal.Body>{message}</Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        has_effect\n                        text={is_virtual ? localize('OK') : localize('Deposit now')}\n                        onClick={() => {\n                            if (!is_virtual) {\n                                history?.push?.(has_wallet ? routes.wallets_deposit : routes.cashier_deposit);\n                            } else {\n                                toggleModal();\n                            }\n                        }}\n                        primary\n                    />\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n);\n\nexport default withRouter(InsufficientBalanceModal);\n","import React from 'react';\nimport { Button, Modal, StaticUrl } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize, Localize } from '@deriv/translations';\n\ntype TCompanyWideLimitExceededModal = {\n    is_visible: boolean;\n    onConfirm: () => void;\n};\n\nconst CompanyWideLimitExceededModal = observer(({ is_visible, onConfirm }: TCompanyWideLimitExceededModal) => {\n    const {\n        ui: { is_mobile },\n    } = useStore();\n    return (\n        <Modal\n            is_open={is_visible}\n            small\n            is_vertical_centered={is_mobile}\n            toggleModal={onConfirm}\n            title={localize('Purchase Error')}\n        >\n            <Modal.Body>\n                <Localize\n                    i18n_default_text='No further trading is allowed on this contract type for the current trading session. For more info, refer to our <0>terms and conditions</0>.'\n                    components={[<StaticUrl key={0} className='link' href='tnc/trading-terms.pdf' is_document />]}\n                />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button has_effect text={localize('OK')} onClick={onConfirm} primary />\n            </Modal.Footer>\n        </Modal>\n    );\n});\n\nexport default CompanyWideLimitExceededModal;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Modal } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize, Localize } from '@deriv/translations';\n\ntype TAccountVerificationRequiredModalProps = {\n    is_visible: boolean;\n    onConfirm: () => void;\n};\n\nconst AccountVerificationRequiredModal = observer(\n    ({ is_visible, onConfirm }: TAccountVerificationRequiredModalProps) => {\n        const history = useHistory();\n        const {\n            ui: { is_mobile },\n        } = useStore();\n        return (\n            <Modal\n                is_open={is_visible}\n                is_vertical_centered={is_mobile}\n                className='account-verification-required-modal'\n                toggleModal={onConfirm}\n                title={localize('Account verification required')}\n                width='440px'\n                height={is_mobile ? 'auto' : '220px'}\n            >\n                <Modal.Body className='account-verification-required-modal-text'>\n                    <Localize i18n_default_text='Please submit your proof of identity and proof of address to verify your account and continue trading.' />\n                </Modal.Body>\n\n                <div className='account-verification-required-modal-button'>\n                    <Modal.Footer>\n                        <Button\n                            has_effect\n                            text={localize('Submit Proof')}\n                            onClick={() => history.push(routes.proof_of_identity)}\n                            primary\n                        />\n                    </Modal.Footer>\n                </div>\n            </Modal>\n        );\n    }\n);\n\nexport default AccountVerificationRequiredModal;\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { getTitle } from './constants';\nimport AuthorizationRequiredModal from './authorization-required-modal';\nimport InsufficientBalanceModal from './insufficient-balance-modal';\nimport CompanyWideLimitExceededModal from './company-wide-limit-exceeded-modal';\nimport AccountVerificationRequiredModal from './account-verification-required-modal';\n\ntype TServicesError = {\n    code?: string;\n    message?: string;\n    type?: string;\n};\n\ntype TPropServicesErrorModel = {\n    is_virtual?: boolean;\n    is_visible: boolean;\n    is_logged_in: boolean;\n    onConfirm: () => void;\n    services_error: TServicesError;\n};\n\nconst ServicesErrorModal = ({\n    is_virtual,\n    is_visible,\n    is_logged_in,\n    onConfirm,\n    services_error,\n}: TPropServicesErrorModel) => {\n    const { code, message, type } = services_error;\n\n    if (!code || !message) return <React.Fragment />;\n    switch (code) {\n        case 'AuthorizationRequired':\n            return (\n                <AuthorizationRequiredModal\n                    is_logged_in={is_logged_in}\n                    is_visible={is_visible}\n                    toggleModal={onConfirm}\n                />\n            );\n        case 'InsufficientBalance':\n            return (\n                <InsufficientBalanceModal\n                    is_virtual={is_virtual}\n                    is_visible={is_visible}\n                    message={message}\n                    toggleModal={onConfirm}\n                />\n            );\n        case 'CompanyWideLimitExceeded':\n            return <CompanyWideLimitExceededModal is_visible={is_visible} onConfirm={onConfirm} />;\n        case 'PleaseAuthenticate':\n            return <AccountVerificationRequiredModal is_visible={is_visible} onConfirm={onConfirm} />;\n        default:\n            return (\n                <Modal is_open={is_visible} small title={getTitle(type)} toggleModal={onConfirm}>\n                    <Modal.Body>{message}</Modal.Body>\n                    <Modal.Footer>\n                        <Button has_effect text={localize('OK')} onClick={onConfirm} primary />\n                    </Modal.Footer>\n                </Modal>\n            );\n    }\n};\n\nexport default ServicesErrorModal;\n","import ServicesErrorModal from './services-error-modal';\n\nexport default ServicesErrorModal;\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\ntype TAccountVerificationPendingModalProps = {\n    is_visible: boolean;\n    onConfirm: () => void;\n};\n\nconst AccountVerificationPendingModal = ({ is_visible, onConfirm }: TAccountVerificationPendingModalProps) => (\n    <Modal\n        small\n        is_open={is_visible}\n        title={<Localize i18n_default_text='Pending verification' />}\n        toggleModal={onConfirm}\n        className='account-verification-pending-modal'\n    >\n        <Modal.Body>\n            <Localize i18n_default_text='You cannot trade as your documents are still under review. We will notify you by email once your verification is approved.' />\n        </Modal.Body>\n        <Modal.Footer>\n            <Button has_effect onClick={onConfirm} primary large>\n                <Localize i18n_default_text='OK' />\n            </Button>\n        </Modal.Footer>\n    </Modal>\n);\n\nexport default AccountVerificationPendingModal;\n","import AccountVerificationPendingModal from './account-verification-pending-modal';\n\nexport default AccountVerificationPendingModal;\n","import React from 'react';\nimport { getUrlSmartTrader } from '@deriv/shared';\nimport MarketUnavailableModal from '../Elements/Modals/MarketUnavailableModal';\nimport ServicesErrorModal from '../Elements/Modals/ServicesErrorModal';\nimport AccountVerificationPendingModal from '../Elements/Modals/AccountVerificationPendingModal';\nimport { observer, useStore } from '@deriv/stores';\n\nconst TradeModals = observer(() => {\n    const { ui, client, common } = useStore();\n    const { is_virtual, is_logged_in } = client;\n\n    const { services_error } = common;\n    const {\n        is_mf_verification_pending_modal_visible,\n        is_services_error_visible,\n        setHasOnlyForwardingContracts,\n        setIsMFVericationPendingModal,\n        toggleServicesErrorModal,\n    } = ui;\n    const resetToPreviousMarket = () => {\n        setHasOnlyForwardingContracts(false);\n    };\n\n    const marketUnavailableOnConfirm = () => {\n        resetToPreviousMarket();\n    };\n\n    const marketUnavailableOnCancel = () => {\n        window.open(getUrlSmartTrader());\n        resetToPreviousMarket();\n    };\n\n    const servicesErrorModalOnConfirm = () => {\n        toggleServicesErrorModal(false);\n    };\n\n    return (\n        <React.Fragment>\n            <MarketUnavailableModal onConfirm={marketUnavailableOnConfirm} onCancel={marketUnavailableOnCancel} />\n\n            <ServicesErrorModal\n                onConfirm={servicesErrorModalOnConfirm}\n                services_error={services_error}\n                is_visible={is_services_error_visible}\n                is_virtual={is_virtual}\n                is_logged_in={is_logged_in}\n            />\n\n            <AccountVerificationPendingModal\n                is_visible={is_mf_verification_pending_modal_visible}\n                onConfirm={() => setIsMFVericationPendingModal(false)}\n            />\n        </React.Fragment>\n    );\n});\n\nexport default TradeModals;\n","import TradeModals from './trade-modals';\n\nexport default TradeModals;\n"],"names":["observer","_ref","is_loading","onCancel","onConfirm","ui","useStore","disableApp","enableApp","is_visible","has_only_forward_starting_contracts","React","Dialog","className","title","Localize","i18n_default_text","confirm_button_text","localize","platform_name_trader","getPlatformSettings","name","cancel_button_text","platform_name_smarttrader","is_mobile_full_width","values","getTitle","type","toggleModal","is_appstore","is_logged_in","Modal","id","is_open","small","Body","Footer","Button","has_effect","text","onClick","redirectToLogin","getLanguage","secondary","redirectToSignUp","primary","InsufficientBalanceModal","history","is_virtual","message","_useStore","is_mobile","has_wallet","client","is_vertical_centered","_history$push","push","call","routes","wallets_deposit","cashier_deposit","withRouter","components","StaticUrl","key","href","is_document","useHistory","width","height","proof_of_identity","services_error","code","AuthorizationRequiredModal","CompanyWideLimitExceededModal","AccountVerificationRequiredModal","large","common","is_mf_verification_pending_modal_visible","is_services_error_visible","setHasOnlyForwardingContracts","setIsMFVericationPendingModal","toggleServicesErrorModal","resetToPreviousMarket","MarketUnavailableModal","window","open","getUrlSmartTrader","ServicesErrorModal","AccountVerificationPendingModal"],"sourceRoot":""}