{"version":3,"file":"wallets/js/wallets.544.2aa46fdbc934a69f4828.js","mappings":"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","sources":["webpack://@deriv/wallets/./src/components/WalletsCarouselContent/WalletsCarouselContent.tsx","webpack://@deriv/wallets/./src/components/WalletsCarouselHeader/WalletsCarouselHeader.tsx","webpack://@deriv/wallets/./src/components/WalletsCarousel/WalletsCarousel.tsx","webpack://@deriv/wallets/./src/components/WalletsCarousel/WalletsCarousel.scss","webpack://@deriv/wallets/./src/components/WalletsCarouselContent/WalletsCarouselContent.scss","webpack://@deriv/wallets/./src/components/WalletsCarouselHeader/WalletsCarouselHeader.scss","webpack://@deriv/wallets/./src/components/WalletsCarousel/WalletsCarousel.scss?891c","webpack://@deriv/wallets/./src/components/WalletsCarouselContent/WalletsCarouselContent.scss?6c9f","webpack://@deriv/wallets/./src/components/WalletsCarouselHeader/WalletsCarouselHeader.scss?c788"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport useEmblaCarousel, { EmblaCarouselType, EmblaEventType } from 'embla-carousel-react';\nimport { useHistory } from 'react-router-dom';\nimport { useActiveWalletAccount, useCurrencyConfig, useMobileCarouselWalletsList } from '@deriv/api-v2';\nimport { displayMoney } from '@deriv/api-v2/src/utils';\nimport { Localize } from '@deriv-com/translations';\nimport { Text } from '@deriv-com/ui';\nimport useAllBalanceSubscription from '../../hooks/useAllBalanceSubscription';\nimport useIsRtl from '../../hooks/useIsRtl';\nimport useWalletAccountSwitcher from '../../hooks/useWalletAccountSwitcher';\nimport { THooks } from '../../types';\nimport { ProgressBar } from '../Base';\nimport { WalletsCarouselLoader } from '../SkeletonLoader';\nimport { WalletCard } from '../WalletCard';\nimport { WalletListCardActions } from '../WalletListCardActions';\nimport { WalletsDisabledAccountsBanner } from '../WalletsDisabledAccountsBanner';\nimport './WalletsCarouselContent.scss';\n\ntype TProps = {\n    accountsActiveTabIndex: number;\n};\n\nconst numberWithinRange = (number: number, min: number, max: number): number => Math.min(Math.max(number, min), max);\n\n// scale based on the width difference between active wallet (288px) and inactive wallets + padding (240px + 16px)\nconst TRANSITION_FACTOR_SCALE = 1 - 25.6 / 28.8;\n\n/**\n * carousel component\n * idea behind data flow here:\n * - Embla is the SINGLE SOURCE OF TRUTH for current active card, so the state flow / data flow is simple\n * - everything else gets in sync with Embla eventually\n */\nconst WalletsCarouselContent: React.FC<TProps> = ({ accountsActiveTabIndex }) => {\n    const switchWalletAccount = useWalletAccountSwitcher();\n    const isRtl = useIsRtl();\n    const history = useHistory();\n\n    const { data: walletAccountsListData, isLoading: isWalletAccountsListLoading } = useMobileCarouselWalletsList();\n    const { data: activeWallet, isLoading: isActiveWalletLoading } = useActiveWalletAccount();\n    const { data: balanceData } = useAllBalanceSubscription();\n    const { isLoading: isCurrencyConfigLoading } = useCurrencyConfig();\n\n    const [selectedLoginId, setSelectedLoginId] = useState('');\n    const [currentIndex, setCurrentIndex] = useState(-1);\n    const [isInitialDataLoaded, setIsInitialDataLoaded] = useState(false);\n\n    const walletAccountsList = useMemo(\n        () => walletAccountsListData?.filter(wallet => !wallet.is_disabled),\n        [walletAccountsListData]\n    );\n    const disabledWallets = useMemo(\n        () => walletAccountsListData?.filter(wallet => wallet.is_disabled) ?? [],\n        [walletAccountsListData]\n    );\n\n    // for the embla \"on select\" callback\n    // to avoid unbinding / cleaning etc, just let it use up-to-date list\n    const walletsAccountsListRef = useRef(walletAccountsList);\n    const transitionNodes = useRef<HTMLElement[]>([]);\n    const transitionFactor = useRef(0);\n\n    const getBalance = (\n        loginid: string,\n        currency?: string,\n        wallet?: ReturnType<typeof useActiveWalletAccount>['data']\n    ) => {\n        return displayMoney(balanceData?.[loginid]?.balance, currency, {\n            fractional_digits: wallet?.currency_config?.fractional_digits,\n        });\n    };\n\n    // sets the transition nodes to be scaled\n    const setTransitionNodes = useCallback((walletsCarouselEmblaApi: EmblaCarouselType) => {\n        // find and store all available wallet card containers for the transition nodes\n        transitionNodes.current = walletsCarouselEmblaApi.slideNodes().map(slideNode => {\n            return slideNode.querySelector('.wallets-card__container') as HTMLElement;\n        });\n    }, []);\n\n    // function to set the transition factor based on the number of scroll snaps\n    const setTransitionFactor = useCallback((walletsCarouselEmblaApi: EmblaCarouselType) => {\n        transitionFactor.current = TRANSITION_FACTOR_SCALE * walletsCarouselEmblaApi.scrollSnapList().length;\n    }, []);\n\n    // function to interpolate the scale of wallet cards based on scroll events\n    const transitionScale = useCallback(\n        (walletsCarouselEmblaApi: EmblaCarouselType, walletsCarouselEvent?: EmblaEventType) => {\n            const engine = walletsCarouselEmblaApi.internalEngine();\n            const scrollProgress = walletsCarouselEmblaApi.scrollProgress();\n            const slidesInView = walletsCarouselEmblaApi.slidesInView();\n            const isScrollEvent = walletsCarouselEvent === 'scroll';\n\n            walletsCarouselEmblaApi.scrollSnapList().forEach((scrollSnap, snapIndex) => {\n                //scrollProgress returns the progress for the whole list with a value of 0<x<1 while scrollSnap return the position of the item in the array\n                //difference between the array item position and the progress in the whole scroll event is calculated to determine the transition value\n                let diffToTarget = scrollSnap - scrollProgress;\n                const slidesInSnap = engine.slideRegistry[snapIndex];\n\n                slidesInSnap.forEach(slideIndex => {\n                    if (isScrollEvent && !slidesInView.includes(slideIndex)) return;\n\n                    // iterate through the loop points in the carousel engine using the embla API internal engine\n                    if (engine.options.loop) {\n                        engine.slideLooper.loopPoints.forEach(loopItem => {\n                            const target = loopItem.target();\n\n                            // determine the direction of the loop based on the sign and adjust the difference to the target based on loop direction\n                            if (slideIndex === loopItem.index && target !== 0) {\n                                const sign = Math.sign(target);\n\n                                if (sign === -1) {\n                                    diffToTarget = scrollSnap - (1 + scrollProgress);\n                                }\n                                if (sign === 1) {\n                                    diffToTarget = scrollSnap + (1 - scrollProgress);\n                                }\n                            }\n                        });\n                    }\n\n                    // calculate transition scale value based on the scroll position\n                    // active wallet will scale down until it reaches the point where width is 24rem and vice versa\n                    const transitionValue = 1 - Math.abs(diffToTarget * transitionFactor.current);\n                    const scale = numberWithinRange(transitionValue, 0, 1).toString();\n\n                    // apply the scale to the wallet cards\n                    const transitionNode = transitionNodes.current[slideIndex];\n                    transitionNode.style.transform = `scale(${scale})`;\n                });\n            });\n        },\n        []\n    );\n\n    const [walletsCarouselEmblaRef, walletsCarouselEmblaApi] = useEmblaCarousel({\n        containScroll: false,\n        direction: isRtl ? 'rtl' : 'ltr',\n        skipSnaps: true,\n    });\n\n    const handleCardClick = useCallback(\n        (account: THooks.ActiveWalletAccount, index: number) => {\n            walletsCarouselEmblaApi?.scrollTo(index);\n            walletAccountsList && setSelectedLoginId(walletAccountsList[index].loginid);\n            account.is_active &&\n                (account.is_virtual\n                    ? history.push('/wallet/reset-balance', { accountsActiveTabIndex })\n                    : history.push('/wallet/deposit', { accountsActiveTabIndex }));\n        },\n        [walletsCarouselEmblaApi, walletAccountsList, history, accountsActiveTabIndex]\n    );\n\n    useEffect(() => {\n        walletsAccountsListRef.current = walletAccountsList;\n    }, [walletAccountsList]);\n\n    // set login ID once wallet changes\n    useEffect(() => {\n        if (activeWallet?.loginid) {\n            setSelectedLoginId(activeWallet?.loginid);\n        }\n    }, [activeWallet?.loginid]);\n\n    // bind to embla events\n    useEffect(() => {\n        walletsCarouselEmblaApi?.on('select', () => {\n            const index = walletsCarouselEmblaApi?.selectedScrollSnap();\n            if (index === undefined) {\n                return;\n            }\n            const loginId = walletsAccountsListRef?.current?.[index]?.loginid;\n\n            loginId && setSelectedLoginId(loginId);\n        });\n\n        return () => {\n            walletsCarouselEmblaApi?.off('select', () => {\n                const index = walletsCarouselEmblaApi?.selectedScrollSnap();\n                if (index === undefined) {\n                    return;\n                }\n                const loginId = walletsAccountsListRef?.current?.[index]?.loginid;\n\n                loginId && setSelectedLoginId(loginId);\n            });\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [walletsCarouselEmblaApi]);\n\n    // load active wallet whenever its scrolled\n    useEffect(() => {\n        if (selectedLoginId) {\n            switchWalletAccount(selectedLoginId).then(() => {\n                const index = walletAccountsList?.findIndex(({ loginid }) => loginid === selectedLoginId) ?? -1;\n                if (index !== -1) {\n                    walletsCarouselEmblaApi?.scrollTo(index);\n                }\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedLoginId, walletAccountsList]);\n\n    // initial loading\n    useEffect(() => {\n        if (walletsCarouselEmblaApi && isInitialDataLoaded) {\n            const index = walletAccountsList?.findIndex(({ loginid }) => loginid === selectedLoginId) ?? -1;\n            if (index !== -1) {\n                walletsCarouselEmblaApi?.scrollTo(index, true);\n            }\n\n            walletsCarouselEmblaApi && setTransitionNodes(walletsCarouselEmblaApi);\n            walletsCarouselEmblaApi && setTransitionFactor(walletsCarouselEmblaApi);\n            walletsCarouselEmblaApi && transitionScale(walletsCarouselEmblaApi);\n\n            walletsCarouselEmblaApi\n                ?.on('reInit', setTransitionNodes)\n                .on('reInit', setTransitionFactor)\n                .on('reInit', transitionScale)\n                .on('scroll', transitionScale);\n\n            return () => {\n                walletsCarouselEmblaApi\n                    ?.off('reInit', setTransitionNodes)\n                    .off('reInit', setTransitionFactor)\n                    .off('reInit', transitionScale)\n                    .off('scroll', transitionScale);\n            };\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [walletsCarouselEmblaApi, isInitialDataLoaded, transitionScale]);\n\n    useEffect(() => {\n        const index = walletAccountsList?.findIndex(({ loginid }) => loginid === selectedLoginId) ?? -1;\n        if (index >= 0) {\n            setCurrentIndex(index);\n        }\n    }, [selectedLoginId, walletAccountsList]);\n\n    // set the initial data loading flag to false once all \"is loading\" flags are false,\n    // as then and only then we can display all the stuff and we want to display it permanently after that\n    useEffect(() => {\n        if (!isWalletAccountsListLoading && !isActiveWalletLoading && !isCurrencyConfigLoading) {\n            setIsInitialDataLoaded(true);\n        }\n    }, [isWalletAccountsListLoading, isActiveWalletLoading, isCurrencyConfigLoading]);\n\n    if (!isInitialDataLoaded) {\n        return <WalletsCarouselLoader />;\n    }\n\n    return (\n        <div className='wallets-carousel-content'>\n            <div className='wallets-carousel-content__wrapper'>\n                <div className='wallets-carousel-content__title'>\n                    <Text size='xl' weight='bold'>\n                        <Localize i18n_default_text='Trader’s Hub' />\n                    </Text>\n                </div>\n                {disabledWallets.length > 0 ? (\n                    <WalletsDisabledAccountsBanner disabledAccounts={disabledWallets} />\n                ) : null}\n                <div className='wallets-carousel-content__carousel' ref={walletsCarouselEmblaRef}>\n                    <div className='wallets-carousel-content__cards'>\n                        {walletAccountsList?.map((account, index) => (\n                            <WalletCard\n                                balance={\n                                    account.loginid === activeWallet?.loginid\n                                        ? getBalance(activeWallet?.loginid, activeWallet?.currency, activeWallet)\n                                        : getBalance(account.loginid, account?.currency, account)\n                                }\n                                currency={account.currency || 'USD'}\n                                iconSize='lg'\n                                isCarouselContent\n                                isDemo={account.is_virtual}\n                                key={`wallet-card-${account.loginid}`}\n                                onClick={() => handleCardClick(account, index)}\n                            />\n                        ))}\n                    </div>\n                    <div className='wallets-carousel-content__progress-bar'>\n                        <ProgressBar\n                            activeIndex={currentIndex}\n                            count={walletAccountsList?.length ?? 0}\n                            onClick={walletsCarouselEmblaApi?.scrollTo}\n                        />\n                    </div>\n                </div>\n            </div>\n            <WalletListCardActions accountsActiveTabIndex={accountsActiveTabIndex} />\n        </div>\n    );\n};\n\nexport default WalletsCarouselContent;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useHistory } from 'react-router-dom';\nimport { LabelPairedArrowUpArrowDownSmBoldIcon } from '@deriv/quill-icons';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { Text, useDevice } from '@deriv-com/ui';\nimport { IconButton } from '../Base';\nimport { WalletCurrencyCard } from '../WalletCurrencyCard';\nimport './WalletsCarouselHeader.scss';\n\ntype TProps = {\n    balance?: string;\n    currency: string;\n    hidden?: boolean;\n    isBalanceLoading?: boolean;\n    isDemo?: boolean;\n};\n\nconst WalletsCarouselHeader: React.FC<TProps> = ({ balance, currency, hidden, isBalanceLoading, isDemo }) => {\n    const history = useHistory();\n    const { localize } = useTranslations();\n    const { isMobile } = useDevice();\n\n    return (\n        <div className={classNames('wallets-carousel-header', { 'wallets-carousel-header--hidden': hidden })}>\n            <div className='wallets-carousel-header__content'>\n                <WalletCurrencyCard currency={currency} isDemo={isDemo} size='md' />\n                <div className='wallets-carousel-header__details'>\n                    <Text color='general' size={isMobile ? 'sm' : 'xs'}>\n                        {isDemo ? (\n                            <Localize i18n_default_text='{{currency}} Demo Wallet' values={{ currency }} />\n                        ) : (\n                            <Localize i18n_default_text='{{currency}} Wallet' values={{ currency }} />\n                        )}\n                    </Text>\n                    {isBalanceLoading ? (\n                        <div\n                            className='wallets-skeleton wallets-carousel-header__balance-loader'\n                            data-testid='dt_wallets_carousel_header_balance_loader'\n                        />\n                    ) : (\n                        <Text color='general' size={isMobile ? 'lg' : 'md'} weight='bold'>\n                            {balance}\n                        </Text>\n                    )}\n                </div>\n            </div>\n            <IconButton\n                aria-label={localize('Transfer')}\n                className='wallets-carousel-header__button'\n                color='white'\n                data-testid='dt_wallets_carousel_header_button'\n                icon={<LabelPairedArrowUpArrowDownSmBoldIcon />}\n                onClick={() => history.push('/wallet/account-transfer')}\n                size='md'\n            />\n        </div>\n    );\n};\n\nexport default WalletsCarouselHeader;\n","import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useActiveWalletAccount } from '@deriv/api-v2';\nimport { displayMoney } from '@deriv/api-v2/src/utils';\nimport useAllBalanceSubscription from '../../hooks/useAllBalanceSubscription';\nimport { AccountsList } from '../AccountsList';\nimport { WalletsCarouselContent } from '../WalletsCarouselContent';\nimport { WalletsCarouselHeader } from '../WalletsCarouselHeader';\nimport './WalletsCarousel.scss';\n\nconst WalletsCarousel = () => {\n    const { data: activeWallet, isLoading: isActiveWalletLoading } = useActiveWalletAccount();\n    const [hideWalletsCarouselHeader, setHideWalletsCarouselHeader] = useState(true);\n    const contentRef = useRef(null);\n    const location = useLocation();\n    const [accountsActiveTabIndex, setAccountsActiveTabIndex] = useState(location.state?.accountsActiveTabIndex ?? 0);\n\n    const { data: balanceData, isLoading: isBalanceLoading } = useAllBalanceSubscription();\n\n    const displayedBalance = useMemo(() => {\n        if (isBalanceLoading) return;\n\n        return displayMoney(balanceData?.[activeWallet?.loginid ?? '']?.balance, activeWallet?.currency, {\n            fractional_digits: activeWallet?.currency_config?.fractional_digits,\n        });\n    }, [\n        isBalanceLoading,\n        balanceData,\n        activeWallet?.loginid,\n        activeWallet?.currency,\n        activeWallet?.currency_config?.fractional_digits,\n    ]);\n\n    // useEffect hook to handle event for hiding/displaying WalletsCarouselHeader\n    // walletsCarouselHeader will be displayed when WalletsCarouselContent is almost out of viewport\n    useEffect(() => {\n        const observer = new IntersectionObserver(\n            entries => {\n                entries.forEach(entry => {\n                    setHideWalletsCarouselHeader(entry.isIntersecting);\n                });\n            },\n            { threshold: 0.4 } // triggers when 40% of the element is left in view\n        );\n\n        const currentContentRef = contentRef.current;\n\n        if (currentContentRef) {\n            observer.observe(currentContentRef);\n        }\n\n        return () => {\n            if (currentContentRef) {\n                observer.unobserve(currentContentRef);\n            }\n        };\n    }, []);\n\n    return (\n        <div className='wallets-carousel'>\n            <div className='wallets-carousel__header'>\n                {!isActiveWalletLoading && (\n                    <WalletsCarouselHeader\n                        balance={displayedBalance}\n                        currency={activeWallet?.currency || 'USD'}\n                        hidden={hideWalletsCarouselHeader}\n                        isBalanceLoading={isBalanceLoading}\n                        isDemo={activeWallet?.is_virtual}\n                    />\n                )}\n                <div ref={contentRef}>\n                    <WalletsCarouselContent accountsActiveTabIndex={accountsActiveTabIndex} />\n                </div>\n            </div>\n            <AccountsList\n                accountsActiveTabIndex={accountsActiveTabIndex}\n                onTabClickHandler={setAccountsActiveTabIndex}\n            />\n        </div>\n    );\n};\n\nexport default WalletsCarousel;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-carousel{width:100%}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WalletsCarousel.scss\"],\"names\":[],\"mappings\":\"AAiuBA,kBACI,UAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 40px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-carousel {\\n    width: 100%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-carousel-content{background-color:#ffffff;background-color:var(--general-main-1, #ffffff);width:100%}@media(max-width: 600px){.wallets-carousel-content{width:100vw}}.wallets-carousel-content__wrapper{width:100%;height:100%}.wallets-carousel-content__title{margin-bottom:auto;padding:.8rem 1.4rem 0}.wallets-carousel-content__carousel{padding:.8rem 3.6rem;overflow:hidden}.wallets-carousel-content__cards{height:17.6rem;display:flex;align-items:center;justify-content:flex-start}.wallets-carousel-content__cards>.wallets-card__details{width:45vw}.wallets-carousel-content__progress-bar{display:flex;align-items:center;justify-content:center;padding:1.6rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./WalletsCarouselContent.scss\"],\"names\":[],\"mappings\":\"AAiuBA,0BACI,wBAAA,CAAA,+CAAA,CACA,UAAA,CAnEA,yBAiEJ,0BAKQ,WAAA,CAAA,CAGJ,mCACI,UAAA,CACA,WAAA,CAGJ,iCACI,kBAAA,CACA,sBAAA,CAGJ,oCACI,oBAAA,CACA,eAAA,CAGJ,iCACI,cAAA,CACA,YAAA,CACA,kBAAA,CACA,0BAAA,CAEA,wDACI,UAAA,CAIR,wCACI,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,cAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 40px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n.wallets-carousel-content {\\n    background-color: var(--general-main-1, #ffffff);\\n    width: 100%;\\n\\n    @include mobile-screen {\\n        width: 100vw;\\n    }\\n\\n    &__wrapper {\\n        width: 100%;\\n        height: 100%;\\n    }\\n\\n    &__title {\\n        margin-bottom: auto;\\n        padding: 0.8rem 1.4rem 0;\\n    }\\n\\n    &__carousel {\\n        padding: 0.8rem 3.6rem;\\n        overflow: hidden;\\n    }\\n\\n    &__cards {\\n        height: 17.6rem;\\n        display: flex;\\n        align-items: center;\\n        justify-content: flex-start;\\n\\n        & > .wallets-card__details {\\n            width: 45vw;\\n        }\\n    }\\n\\n    &__progress-bar {\\n        display: flex;\\n        align-items: center;\\n        justify-content: center;\\n        padding: 1.6rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".wallets-skeleton{background-color:#e2e5e7;opacity:.3;background-image:linear-gradient(90deg, rgba(255, 255, 255, 0), rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0));background-size:4rem 100%;background-repeat:no-repeat;background-position:left -4rem top 0;animation:shine 1s ease infinite}@keyframes shine{to{background-position:right -4rem top 0}}.wallets-carousel-header{background:#fff;background:var(--system-light-8-primary-background, #fff);border-bottom:1px solid #f2f3f4;border-bottom:1px solid var(--general-section-1, #f2f3f4);height:6.1rem;display:flex;align-items:center;justify-content:space-between;padding:1rem 1.6rem 1rem .8rem;position:absolute;top:0;width:100%;z-index:1;opacity:1;transition:all .2s ease-out}@media(min-width: 601px)and (max-width: 1279px){.wallets-carousel-header{width:60rem}}.wallets-carousel-header--hidden{z-index:-1;opacity:0}.wallets-carousel-header__balance-loader{padding:.7rem;width:8rem;background-color:rgba(248,245,245,.2588235294);border-radius:.5rem}.wallets-carousel-header__content{display:flex;gap:.8rem}.wallets-carousel-header__details{display:flex;flex-direction:column;align-items:flex-start}.wallets-carousel-header__button{border-radius:1.2rem;border:.1rem solid #333333;border:.1rem solid var(--text-general, #333333)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./../SkeletonLoader/SkeletonLoader.scss\",\"webpack://./WalletsCarouselHeader.scss\"],\"names\":[],\"mappings\":\"AAAA,kBACI,wBAAA,CACA,UAAA,CACA,iHAAA,CACA,yBAAA,CACA,2BAAA,CACA,oCAAA,CACA,gCAAA,CAGJ,iBACI,GACI,qCAAA,CAAA,CCutBR,yBACI,eAAA,CAAA,yDAAA,CACA,+BAAA,CAAA,yDAAA,CACA,aAAA,CACA,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,8BAAA,CACA,iBAAA,CACA,KAAA,CACA,UAAA,CACA,SAAA,CACA,SAAA,CACA,2BAAA,CA1EA,gDA6DJ,yBAgBQ,WAAA,CAAA,CAGJ,iCACI,UAAA,CACA,SAAA,CAGJ,yCACI,aAAA,CACA,UAAA,CACA,8CAAA,CACA,mBAAA,CAGJ,kCACI,YAAA,CACA,SAAA,CAGJ,kCACI,YAAA,CACA,qBAAA,CACA,sBAAA,CAGJ,iCACI,oBAAA,CACA,0BAAA,CAAA,+CAAA\",\"sourcesContent\":[\".wallets-skeleton {\\n    background-color: #e2e5e7;\\n    opacity: 0.3;\\n    background-image: linear-gradient(90deg, rgba(#fff, 0), rgba(#fff, 0.5), rgba(#fff, 0));\\n    background-size: 4rem 100%;\\n    background-repeat: no-repeat;\\n    background-position: left -4rem top 0;\\n    animation: shine 1s ease infinite;\\n}\\n\\n@keyframes shine {\\n    to {\\n        background-position: right -4rem top 0;\\n    }\\n}\\n\",\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 40px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin mobile {\\n    @media (max-width: #{$tablet-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@import '../../components/SkeletonLoader/SkeletonLoader.scss';\\n\\n.wallets-carousel-header {\\n    background: var(--system-light-8-primary-background, #fff);\\n    border-bottom: 1px solid var(--general-section-1, #f2f3f4);\\n    height: 6.1rem;\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    padding: 1rem 1.6rem 1rem 0.8rem;\\n    position: absolute;\\n    top: 0;\\n    width: 100%;\\n    z-index: 1;\\n    opacity: 1;\\n    transition: all 0.2s ease-out;\\n\\n    @include tablet-screen {\\n        width: 60rem;\\n    }\\n\\n    &--hidden {\\n        z-index: -1;\\n        opacity: 0;\\n    }\\n\\n    &__balance-loader {\\n        padding: 0.7rem;\\n        width: 8rem;\\n        background-color: #f8f5f542;\\n        border-radius: 0.5rem;\\n    }\\n\\n    &__content {\\n        display: flex;\\n        gap: 0.8rem;\\n    }\\n\\n    &__details {\\n        display: flex;\\n        flex-direction: column;\\n        align-items: flex-start;\\n    }\\n\\n    &__button {\\n        border-radius: 1.2rem;\\n        border: 0.1rem solid var(--text-general, #333333);\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WalletsCarousel.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WalletsCarouselContent.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[3].use[1]!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../../../node_modules/resolve-url-loader/index.js??ruleSet[1].rules[3].use[3]!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[3].use[5]!./WalletsCarouselHeader.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};"],"names":["TRANSITION_FACTOR_SCALE","_ref","_walletAccountsList$l","accountsActiveTabIndex","switchWalletAccount","useWalletAccountSwitcher","isRtl","useIsRtl","history","useHistory","_useMobileCarouselWal","useMobileCarouselWalletsList","walletAccountsListData","data","isWalletAccountsListLoading","isLoading","_useActiveWalletAccou","useActiveWalletAccount","activeWallet","isActiveWalletLoading","balanceData","useAllBalanceSubscription","isCurrencyConfigLoading","useCurrencyConfig","_useState2","_slicedToArray","useState","selectedLoginId","setSelectedLoginId","_useState4","currentIndex","setCurrentIndex","_useState6","isInitialDataLoaded","setIsInitialDataLoaded","walletAccountsList","useMemo","filter","wallet","is_disabled","disabledWallets","_walletAccountsListDa","walletsAccountsListRef","useRef","transitionNodes","transitionFactor","getBalance","loginid","currency","_balanceData$loginid","_wallet$currency_conf","displayMoney","balance","fractional_digits","currency_config","setTransitionNodes","useCallback","walletsCarouselEmblaApi","current","slideNodes","map","slideNode","querySelector","setTransitionFactor","scrollSnapList","length","transitionScale","walletsCarouselEvent","engine","internalEngine","scrollProgress","slidesInView","isScrollEvent","forEach","scrollSnap","snapIndex","diffToTarget","slideRegistry","slideIndex","includes","options","loop","slideLooper","loopPoints","loopItem","target","index","sign","Math","number","min","max","transitionValue","abs","scale","toString","style","transform","concat","_useEmblaCarousel2","useEmblaCarousel","containScroll","direction","skipSnaps","walletsCarouselEmblaRef","handleCardClick","account","scrollTo","is_active","is_virtual","push","useEffect","on","_walletsAccountsListR","selectedScrollSnap","undefined","loginId","off","_walletsAccountsListR2","then","_walletAccountsList$f","findIndex","_ref2","_walletAccountsList$f2","_ref3","_walletAccountsList$f3","_ref4","React","className","Text","size","weight","Localize","i18n_default_text","WalletsDisabledAccountsBanner","disabledAccounts","ref","WalletCard","iconSize","isCarouselContent","isDemo","key","onClick","ProgressBar","activeIndex","count","WalletListCardActions","WalletsCarouselLoader","hidden","isBalanceLoading","localize","useTranslations","isMobile","useDevice","classNames","WalletCurrencyCard","color","values","IconButton","icon","LabelPairedArrowUpArrowDownSmBoldIcon","_location$state$accou","_location$state","_activeWallet$currenc2","hideWalletsCarouselHeader","setHideWalletsCarouselHeader","contentRef","location","useLocation","state","setAccountsActiveTabIndex","_useAllBalanceSubscri","displayedBalance","_balanceData","_activeWallet$loginid","_activeWallet$currenc","observer","IntersectionObserver","entries","entry","isIntersecting","threshold","currentContentRef","observe","unobserve","WalletsCarouselHeader","WalletsCarouselContent","AccountsList","onTabClickHandler","___CSS_LOADER_EXPORT___","module","id","api","content","__esModule","default","exports","locals"],"sourceRoot":""}