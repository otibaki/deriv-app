{"version":3,"file":"cfd/js/CFDResetPasswordModal.js","mappings":"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","sources":["webpack://@deriv/cfd/webpack/universalModuleDefinition","webpack://@deriv/cfd/webpack/runtime/chunk loaded","webpack://@deriv/cfd/./src/Containers/cfd-reset-password-modal.tsx","webpack://@deriv/cfd/external umd \"@deriv/components\"","webpack://@deriv/cfd/external umd \"@deriv/shared\"","webpack://@deriv/cfd/external umd \"@deriv/stores\"","webpack://@deriv/cfd/external umd \"@deriv/translations\"","webpack://@deriv/cfd/external umd \"formik\"","webpack://@deriv/cfd/external umd \"react\"","webpack://@deriv/cfd/webpack/bootstrap","webpack://@deriv/cfd/webpack/runtime/compat get default export","webpack://@deriv/cfd/webpack/runtime/define property getters","webpack://@deriv/cfd/webpack/runtime/ensure chunk","webpack://@deriv/cfd/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/cfd/webpack/runtime/runtimeId","webpack://@deriv/cfd/webpack/runtime/jsonp chunk loading","webpack://@deriv/cfd/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv/components\"), require(\"@deriv/shared\"), require(\"@deriv/stores\"), require(\"@deriv/translations\"), require(\"formik\"), require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv/components\", \"@deriv/shared\", \"@deriv/stores\", \"@deriv/translations\", \"formik\", \"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/cfd\"] = factory(require(\"@deriv/components\"), require(\"@deriv/shared\"), require(\"@deriv/stores\"), require(\"@deriv/translations\"), require(\"formik\"), require(\"react\"));\n\telse\n\t\troot[\"@deriv/cfd\"] = factory(root[\"@deriv/components\"], root[\"@deriv/shared\"], root[\"@deriv/stores\"], root[\"@deriv/translations\"], root[\"formik\"], root[\"react\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_stores__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_formik__, __WEBPACK_EXTERNAL_MODULE_react__) => {\nreturn ","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import { Formik, FormikHelpers } from 'formik';\nimport React from 'react';\nimport { Button, Icon, PasswordMeter, PasswordInput, FormSubmitButton, Loading, Modal, Text } from '@deriv/components';\nimport { validLength, validPassword, validMT5Password, getErrorMessages, WS, redirectToLogin } from '@deriv/shared';\nimport { localize, Localize, getLanguage } from '@deriv/translations';\nimport { getMtCompanies, TMtCompanies } from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport { TResetPasswordIntent, TCFDResetPasswordModal, TError } from './props.types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { CFD_PLATFORMS } from '../Helpers/cfd-config';\n\nconst ResetPasswordIntent = ({ current_list, children, is_eu, ...props }: TResetPasswordIntent) => {\n    const reset_password_intent = localStorage.getItem('cfd_reset_password_intent');\n    const reset_password_type = localStorage.getItem('cfd_reset_password_type') || 'main'; // Default to main\n    const has_intent =\n        reset_password_intent &&\n        /(real|demo)\\.(gold_dml|gold_bvi|gold_v|gold|financial|financial_demo|financial_stp|financial_svg|financial_bvi|financial_fx|financial_v|synthetic|synthetic_svg|synthetic_bvi|synthetic_v|all_swap_free_svg|all_zero_spread_bvi|dxtrade|all)/.test(\n            reset_password_intent\n        );\n\n    let group, type, login, title, server;\n    if (has_intent && current_list) {\n        [server, group, type] = reset_password_intent.split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`].login;\n        title =\n            getMtCompanies(is_eu)[group as keyof TMtCompanies][type as keyof TMtCompanies['demo' | 'real']]?.title ??\n            '';\n    } else if (current_list) {\n        [server, group, type] = (Object.keys(current_list).pop() as string).split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`]?.login ?? '';\n        title =\n            getMtCompanies(is_eu)?.[group as keyof TMtCompanies]?.[type as keyof TMtCompanies['demo' | 'real']]\n                ?.title ?? '';\n    } else {\n        // Set a default intent\n        login = '';\n        title = '';\n    }\n\n    return children({\n        login,\n        title,\n        type: reset_password_type,\n        ...props,\n    });\n};\n\nconst CFDResetPasswordModal = observer(({ platform }: TCFDResetPasswordModal) => {\n    const { client, ui } = useStore();\n\n    const { email, is_eu, is_logged_in } = client;\n    const { is_cfd_reset_password_modal_enabled, setCFDPasswordResetModal } = ui;\n\n    const { current_list } = useCfdStore();\n\n    React.useEffect(() => {\n        if (!/reset-password/.test(location.hash)) {\n            return;\n        }\n        setCFDPasswordResetModal(true);\n    }, [setCFDPasswordResetModal]);\n\n    const [state, setState] = React.useState<{\n        error_code: string | number | undefined;\n        has_error: boolean;\n        error_message: string | undefined;\n        is_finished: boolean;\n        changed_password_type: string;\n    }>({\n        error_code: undefined,\n        has_error: false,\n        error_message: undefined,\n        is_finished: false,\n        changed_password_type: '',\n    });\n\n    const renderErrorBox = (error: TError) => {\n        setState({\n            ...state,\n            error_code: error.code,\n            has_error: true,\n            error_message: error.message,\n        });\n    };\n    const clearAddressBar = () => {\n        localStorage.removeItem('cfd_reset_password_intent');\n        localStorage.removeItem('cfd_reset_password_type');\n        localStorage.removeItem('cfd_reset_password_code');\n    };\n    const validatePassword = (values: { new_password: string }) => {\n        const errors: { new_password?: string } = {};\n        const max_length = platform === CFD_PLATFORMS.DXTRADE ? 25 : 16;\n\n        if (\n            !validLength(values.new_password, {\n                min: 8,\n                max: max_length,\n            })\n        ) {\n            errors.new_password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: max_length,\n            });\n        } else if (!validPassword(values.new_password)) {\n            errors.new_password = getErrorMessages().password();\n        } else if (platform !== CFD_PLATFORMS.DXTRADE && !validMT5Password(values.new_password)) {\n            errors.new_password = localize(\n                'Please include at least 1 special character such as ( _ @ ? ! / # ) in your password.'\n            );\n        }\n        if (values.new_password.toLowerCase() === email.toLowerCase()) {\n            errors.new_password = localize('Your password cannot be the same as your email address.');\n        }\n\n        return errors;\n    };\n\n    const resetPassword = (\n        values: { new_password: string },\n        password_type: string,\n        login: string,\n        actions: FormikHelpers<{ new_password: string }>\n    ) => {\n        const { setSubmitting } = actions;\n        setSubmitting(true);\n        const request = {\n            account_id: login,\n            platform: CFD_PLATFORMS.MT5,\n            new_password: values.new_password,\n            verification_code: localStorage.getItem('cfd_reset_password_code'),\n        };\n\n        WS.tradingPlatformInvestorPasswordReset(request).then((response: { error: TError; password_type: string }) => {\n            if (response?.error?.code) {\n                renderErrorBox(response.error);\n            } else {\n                setState({\n                    ...state,\n                    is_finished: true,\n                    changed_password_type: password_type,\n                });\n                clearAddressBar();\n            }\n            setSubmitting(false);\n        });\n    };\n    const getIsListFetched = () => {\n        return Object.keys(current_list).length !== 0;\n    };\n\n    const is_invalid_investor_token = !getIsListFetched() && localStorage.getItem('cfd_reset_password_code');\n\n    return (\n        <Modal\n            className='cfd-reset-password-modal'\n            is_open={is_cfd_reset_password_modal_enabled && !is_invalid_investor_token}\n            toggleModal={() => setCFDPasswordResetModal(false)}\n            title={\n                platform === CFD_PLATFORMS.DXTRADE\n                    ? localize('Reset Deriv X investor password')\n                    : localize('Reset Deriv MT5 investor password')\n            }\n            onMount={() => redirectToLogin(is_logged_in, getLanguage(), true)}\n            should_header_stick_body={false}\n        >\n            {!getIsListFetched() && !state.has_error && <Loading is_fullscreen={false} />}\n            {getIsListFetched() && !state.has_error && !state.is_finished && (\n                <ResetPasswordIntent current_list={current_list} is_eu={is_eu}>\n                    {({ type, login }) => (\n                        <Formik\n                            initialValues={{ new_password: '' }}\n                            validate={validatePassword}\n                            onSubmit={(values, actions) => resetPassword(values, type, login, actions)}\n                        >\n                            {({ handleSubmit, errors, values, isSubmitting, handleChange, handleBlur, touched }) => (\n                                <form autoComplete='off' onSubmit={handleSubmit}>\n                                    <div className='cfd-reset-password'>\n                                        <div className='cfd-reset-password__container'>\n                                            <div className='cfd-reset-password__password-area'>\n                                                <PasswordMeter\n                                                    input={values.new_password}\n                                                    has_error={!!(touched.new_password && errors.new_password)}\n                                                    custom_feedback_messages={getErrorMessages().password_warnings}\n                                                >\n                                                    {({ has_warning }: { has_warning: boolean }) => (\n                                                        <PasswordInput\n                                                            autoComplete='new-password'\n                                                            className='cfd-reset-password__password-field'\n                                                            name='new_password'\n                                                            label={localize('New {{type}} password', { type })}\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n                                                            error={touched.new_password && errors.new_password}\n                                                            value={values.new_password}\n                                                            data-lpignore='true'\n                                                            required\n                                                            hint={\n                                                                !has_warning &&\n                                                                localize(\n                                                                    'Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.'\n                                                                )\n                                                            }\n                                                        />\n                                                    )}\n                                                </PasswordMeter>\n                                            </div>\n                                            {platform !== CFD_PLATFORMS.DXTRADE && (\n                                                <div className='cfd-reset-password__password-area'>\n                                                    <Text\n                                                        as='p'\n                                                        size='xs'\n                                                        align='center'\n                                                        className='cfd-reset-password__description2'\n                                                    >\n                                                        <Localize i18n_default_text='Your password must contain between 8-16 characters that include uppercase and lowercase letters, and at least one number and special character ( _ @ ? ! / # ).' />\n                                                    </Text>\n                                                </div>\n                                            )}\n                                            {isSubmitting && <Loading is_fullscreen={false} />}\n                                            {!isSubmitting && (\n                                                <FormSubmitButton\n                                                    is_disabled={\n                                                        isSubmitting ||\n                                                        !values.new_password ||\n                                                        Object.keys(errors).length > 0\n                                                    }\n                                                    errors={errors}\n                                                    is_center={true}\n                                                    large\n                                                    label={localize('Create {{type}} password', { type })}\n                                                />\n                                            )}\n                                        </div>\n                                    </div>\n                                </form>\n                            )}\n                        </Formik>\n                    )}\n                </ResetPasswordIntent>\n            )}\n            {state.has_error && (\n                <div className='cfd-reset-password__error'>\n                    <Icon icon='IcMt5Expired' size={128} />\n                    <Text as='p' size='xs' weight='bold' align='center' className='cfd-reset-password__heading'>\n                        {state.error_message}\n                    </Text>\n                    {state.error_code === 'InvalidToken' && (\n                        <Text\n                            as='p'\n                            color='prominent'\n                            size='xs'\n                            align='center'\n                            className='cfd-reset-password__description--is-centered'\n                        >\n                            <Localize i18n_default_text='Please request a new password and check your email for the new token.' />\n                        </Text>\n                    )}\n                    <Button\n                        primary\n                        large\n                        className='cfd-reset-password__confirm-button'\n                        onClick={() => {\n                            clearAddressBar();\n                            setCFDPasswordResetModal(false);\n                        }}\n                    >\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n            {state.is_finished && (\n                <div className='cfd-reset-password__success'>\n                    <Icon icon='IcMt5PasswordUpdated' size={128} />\n                    <div className='cfd-reset-password__description'>\n                        <Text as='p' size='xs' align='center' weight='bold' line_height='xxl'>\n                            <Localize i18n_default_text='Password saved' />\n                        </Text>\n                        <Localize\n                            i18n_default_text='Your {{account_type}} password has been changed.'\n                            values={{\n                                account_type:\n                                    state.changed_password_type === 'main' ? localize('main') : localize('investor'),\n                            }}\n                        />\n                    </div>\n                    <Button primary large onClick={() => setCFDPasswordResetModal(false)}>\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n        </Modal>\n    );\n});\n\nexport default React.memo(CFDResetPasswordModal);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_stores__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","module.exports = __WEBPACK_EXTERNAL_MODULE_formik__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// The chunk loading function for additional chunks\n// Since all referenced chunks are already included\n// in this file, this function is empty here.\n__webpack_require__.e = () => (Promise.resolve());","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.j = \"CFDResetPasswordModal\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"CFDResetPasswordModal\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_deriv_cfd\"] = self[\"webpackChunk_deriv_cfd\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"internalCFDStoreUsage\",\"utilities\"], () => (__webpack_require__(\"./src/Containers/cfd-reset-password-modal.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__deriv_components__","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_stores__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__WEBPACK_EXTERNAL_MODULE_formik__","__WEBPACK_EXTERNAL_MODULE_react__","deferred","ResetPasswordIntent","_ref","group","type","login","title","server","current_list","children","is_eu","props","_objectWithoutProperties","_excluded","reset_password_intent","localStorage","getItem","reset_password_type","test","_getMtCompanies$title","_getMtCompanies","_reset_password_inten2","_slicedToArray","split","concat","getMtCompanies","_current_list$login","_current_list","_getMtCompanies$title2","_getMtCompanies2","_getMtCompanies3","_getMtCompanies4","_split2","Object","keys","pop","_objectSpread","CFDResetPasswordModal","observer","_ref2","platform","_useStore","useStore","client","ui","email","is_logged_in","is_cfd_reset_password_modal_enabled","setCFDPasswordResetModal","useCfdStore","React","location","hash","_React$useState2","error_code","undefined","has_error","error_message","is_finished","changed_password_type","state","setState","clearAddressBar","removeItem","validatePassword","values","errors","max_length","CFD_PLATFORMS","DXTRADE","validLength","new_password","min","max","validPassword","validMT5Password","localize","getErrorMessages","password","min_number","max_number","toLowerCase","resetPassword","password_type","actions","setSubmitting","request","account_id","MT5","verification_code","WS","tradingPlatformInvestorPasswordReset","then","response","_response$error","error","code","message","getIsListFetched","length","is_invalid_investor_token","Modal","className","is_open","toggleModal","onMount","redirectToLogin","getLanguage","should_header_stick_body","Loading","is_fullscreen","_ref3","Formik","initialValues","validate","onSubmit","_ref4","handleSubmit","isSubmitting","handleChange","handleBlur","touched","autoComplete","PasswordMeter","input","custom_feedback_messages","password_warnings","_ref5","has_warning","PasswordInput","name","label","onChange","onBlur","value","required","hint","Text","as","size","align","Localize","i18n_default_text","FormSubmitButton","is_disabled","is_center","large","Icon","icon","weight","color","Button","primary","onClick","line_height","account_type","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","key","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","e","Promise","resolve","obj","prop","prototype","hasOwnProperty","call","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}