{"version":3,"file":"appstore/js/appstore.modules-traders-hub.2df66a78f0597d76e82f.js","mappings":"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","sources":["webpack://@deriv/appstore/./src/components/banners/wallets-banner/wallets-banner.tsx","webpack://@deriv/appstore/./src/components/banners/wallets-banner/index.ts","webpack://@deriv/appstore/./src/components/add-options-account/add-options-account.tsx","webpack://@deriv/appstore/./src/components/add-options-account/index.ts","webpack://@deriv/appstore/./src/components/pre-loader/platform-loader.tsx","webpack://@deriv/appstore/./src/components/compare-account/compare-account.tsx","webpack://@deriv/appstore/./src/components/compare-account/index.ts","webpack://@deriv/appstore/./src/components/cfds-listing/index.tsx","webpack://@deriv/appstore/../cfd/src/Containers/cfd-reset-password-modal.tsx","webpack://@deriv/appstore/./src/stores/index.ts","webpack://@deriv/appstore/./src/components/modals/modal-manager.tsx","webpack://@deriv/appstore/./src/components/pre-loader/regulations-switcher-loader.tsx","webpack://@deriv/appstore/./src/components/main-title-bar/account-type-dropdown.tsx","webpack://@deriv/appstore/./src/components/pre-loader/total-assets-loader.tsx","webpack://@deriv/appstore/../hooks/src/useCFDAllAccounts.ts","webpack://@deriv/appstore/../hooks/src/useCFDDemoAccounts.ts","webpack://@deriv/appstore/../hooks/src/useCFDRealAccounts.ts","webpack://@deriv/appstore/../hooks/src/useCFDAccounts.ts","webpack://@deriv/appstore/../hooks/src/useTotalAssetCurrency.ts","webpack://@deriv/appstore/../hooks/src/useTotalAccountBalance.ts","webpack://@deriv/appstore/./src/components/main-title-bar/asset-summary.tsx","webpack://@deriv/appstore/./src/components/main-title-bar/regulators-switcher.tsx","webpack://@deriv/appstore/./src/components/main-title-bar/index.tsx","webpack://@deriv/appstore/./src/components/options-multipliers-listing/index.tsx","webpack://@deriv/appstore/./src/components/pre-loader/button-toggle-loader.tsx","webpack://@deriv/appstore/./src/components/after-signup-flow/after-signup-flow.tsx","webpack://@deriv/appstore/./src/components/after-signup-flow/index.ts","webpack://@deriv/appstore/../hooks/src/useStoreHasAccountDeposited.ts","webpack://@deriv/appstore/./src/components/banners/book-banner/banner-template.tsx","webpack://@deriv/appstore/./src/components/banners/book-banner/book-banner.tsx","webpack://@deriv/appstore/./src/components/banners/book-banner/index.ts","webpack://@deriv/appstore/./src/components/banners/traders-hub-banners/traders-hub-banners.tsx","webpack://@deriv/appstore/./src/components/banners/traders-hub-banners/index.ts","webpack://@deriv/appstore/./src/components/banners/business-closure-banner/business-closure-banner.tsx","webpack://@deriv/appstore/./src/components/banners/business-closure-banner/index.ts","webpack://@deriv/appstore/./src/modules/traders-hub/index.tsx","webpack://@deriv/appstore/../cfd/src/Helpers/cfd-config.ts","webpack://@deriv/appstore/../cfd/src/Stores/Modules/CFD/Helpers/cfd-config.ts","webpack://@deriv/appstore/../hooks/src/useContentFlag.ts","webpack://@deriv/appstore/../hooks/src/useExchangeRate.ts","webpack://@deriv/appstore/../hooks/src/useMT5SVGEligibleToMigrate.ts","webpack://@deriv/appstore/../hooks/src/useTradingPlatformStatus.ts","webpack://@deriv/appstore/../hooks/src/useWalletMigration.ts"],"sourcesContent":["import React from 'react';\n\nimport { Loading } from '@deriv/components';\nimport { useWalletMigration } from '@deriv/hooks';\nimport { makeLazyLoader, moduleLoader } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\nimport './wallets-banner.scss';\n\nconst WalletsBannerUpgrade = makeLazyLoader(\n    () => moduleLoader(() => import(/* webpackChunkName: \"wallets-banner-upgrade\" */ './wallets-banner-upgrade')),\n    () => <Loading />\n)();\n\nconst WalletsBannerUpgrading = makeLazyLoader(\n    () => moduleLoader(() => import(/* webpackChunkName: \"wallets-banner-upgrading\" */ './wallets-banner-upgrading')),\n    () => <Loading />\n)();\n\nconst WalletsBannerUnsuccessful = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () => import(/* webpackChunkName: \"wallets-banner-unsuccessful\" */ './wallets-banner-unsuccessful')\n        ),\n    () => <Loading />\n)();\n\nconst WalletsBanner = observer(() => {\n    const { client } = useStore();\n    const { is_eu } = client;\n    const { is_eligible, is_failed, is_in_progress, is_migrating } = useWalletMigration();\n\n    const is_upgrading = is_in_progress || is_migrating;\n\n    if (is_upgrading) return <WalletsBannerUpgrading />;\n\n    if (is_failed) return <WalletsBannerUnsuccessful />;\n\n    if (!is_eu && is_eligible) return <WalletsBannerUpgrade is_upgrading={is_upgrading} />;\n\n    return null;\n});\n\nexport default WalletsBanner;\n","import WalletsBanner from './wallets-banner';\n\nexport default WalletsBanner;\n","import React from 'react';\nimport { DesktopWrapper, MobileWrapper, Button, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport './add-options-account.scss';\nimport { useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { useStore, observer } from '@deriv/stores';\nimport { isMobile, ContentFlag, cacheTrackEvents } from '@deriv/shared';\n\nconst AddOptions = observer(() => {\n    const { client, traders_hub, ui } = useStore();\n    const { is_real, content_flag, selected_account_type } = traders_hub;\n    const { setShouldShowCooldownModal, openRealAccountSignup } = ui;\n    const { real_account_creation_unlock_date } = client;\n\n    const add_deriv_account_text = localize('To trade CFDs, get a Deriv Apps account first.');\n    const add_deriv_account_btn = localize('Get a Deriv account');\n\n    const eu_user = content_flag === ContentFlag.LOW_RISK_CR_EU || content_flag === ContentFlag.EU_REAL;\n\n    const [is_traders_dashboard_tracking_enabled] = useGrowthbookGetFeatureValue({\n        featureFlag: 'ce_tradershub_dashboard_tracking',\n        defaultValue: false,\n    });\n\n    return (\n        <React.Fragment>\n            <div className='add-options-account__title'>\n                <Text size={isMobile() ? 'xxs' : 's'} weight='bold'>\n                    <Localize i18n_default_text={add_deriv_account_text} />\n                </Text>\n            </div>\n            <div className='add-options-account__button'>\n                <Button\n                    className='add-options-account__button'\n                    type='submit'\n                    has_effect\n                    onClick={() => {\n                        if (is_traders_dashboard_tracking_enabled) {\n                            cacheTrackEvents.loadEvent([\n                                {\n                                    event: {\n                                        name: 'ce_tradershub_dashboard_form',\n                                        properties: {\n                                            action: 'account_get',\n                                            form_name: 'traders_hub_default',\n                                            account_mode: selected_account_type,\n                                            account_name: 'cfd_banner',\n                                        },\n                                    },\n                                },\n                            ]);\n                        }\n\n                        if (is_real && eu_user) {\n                            if (real_account_creation_unlock_date) {\n                                setShouldShowCooldownModal(true);\n                            } else {\n                                openRealAccountSignup('maltainvest');\n                            }\n                        } else {\n                            openRealAccountSignup('svg');\n                        }\n                    }}\n                    is_disabled={false}\n                    is_loading={false}\n                    text={add_deriv_account_btn}\n                    medium\n                    primary\n                />\n            </div>\n        </React.Fragment>\n    );\n});\n\nconst AddOptionsAccount = observer(() => {\n    return (\n        <React.Fragment>\n            <div className='add-options-account'>\n                <DesktopWrapper>\n                    <AddOptions />\n                </DesktopWrapper>\n                <MobileWrapper>\n                    <AddOptions />\n                </MobileWrapper>\n            </div>\n        </React.Fragment>\n    );\n});\n\nexport default AddOptionsAccount;\n","import AddOptionsAccount from './add-options-account';\nimport './add-options-account.scss';\n\nexport default AddOptionsAccount;\n","import ContentLoader from 'react-content-loader';\nimport React from 'react';\nimport { DesktopWrapper, MobileWrapper } from '@deriv/components';\n\nconst PlatformLoader = () => (\n    <ContentLoader\n        backgroundColor={'var(--general-section-1)'}\n        foregroundColor={'var(--general-hover)'}\n        width={600}\n        height={140}\n    >\n        <DesktopWrapper>\n            <rect x='0' y='0' rx='5' ry='5' width='50' height='50' />\n            <rect x='70' y='10' rx='4' ry='4' width='70' height='10' />\n            <rect x='70' y='30' rx='3' ry='3' width='150' height='10' />\n            <rect x='350' y='10' rx='5' ry='5' width='70' height='30' />\n        </DesktopWrapper>\n        <MobileWrapper>\n            <rect x='5' y='0' rx='5' ry='5' width='50' height='50' />\n            <rect x='80' y='10' rx='4' ry='4' width='70' height='10' />\n            <rect x='80' y='30' rx='3' ry='3' width='100' height='10' />\n            <rect x='300' y='15' rx='5' ry='5' width='50' height='20' />\n        </MobileWrapper>\n    </ContentLoader>\n);\n\nexport default PlatformLoader;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { useHistory } from 'react-router-dom';\nimport { routes, cacheTrackEvents } from '@deriv/shared';\nimport { useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { useStore, observer } from '@deriv/stores';\n\ntype TCompareAccount = {\n    accounts_sub_text: string;\n    is_desktop?: boolean;\n};\n\nconst CompareAccount = observer(({ accounts_sub_text, is_desktop }: TCompareAccount) => {\n    const history = useHistory();\n    const { traders_hub } = useStore();\n    const { selected_account_type } = traders_hub;\n    const [is_traders_dashboard_tracking_enabled] = useGrowthbookGetFeatureValue({\n        featureFlag: 'ce_tradershub_dashboard_tracking',\n        defaultValue: false,\n    });\n\n    return (\n        <div\n            className='cfd-accounts__compare-table-title'\n            onClick={() => {\n                history.push(routes.compare_cfds);\n                if (is_traders_dashboard_tracking_enabled) {\n                    cacheTrackEvents.loadEvent([\n                        {\n                            event: {\n                                name: 'ce_tradershub_dashboard_form',\n                                properties: {\n                                    action: 'compare_accounts_push',\n                                    form_name: 'traders_hub_default',\n                                    account_mode: selected_account_type,\n                                },\n                            },\n                        },\n                    ]);\n                }\n            }}\n        >\n            <Text\n                size={is_desktop ? 'xxs' : 'xs'}\n                color='red'\n                weight='bold'\n                line_height='s'\n                styles={is_desktop ? { marginInlineStart: '1rem' } : ''}\n            >\n                <Localize i18n_default_text={accounts_sub_text} />\n            </Text>\n        </div>\n    );\n});\n\nexport default CompareAccount;\n","import CompareAccount from './compare-account';\nimport './compare-account.scss';\n\nexport default CompareAccount;\n","import React, { Fragment, useEffect } from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport { Loading, Text } from '@deriv/components';\nimport {\n    CFD_PLATFORMS,\n    formatMoney,\n    MT5_ACCOUNT_STATUS,\n    TRADING_PLATFORM_STATUS,\n    makeLazyLoader,\n    moduleLoader,\n    setPerformanceValue,\n    cacheTrackEvents,\n} from '@deriv/shared';\nimport { useDevice } from '@deriv-com/ui';\nimport { localize } from '@deriv/translations';\nimport ListingContainer from 'Components/containers/listing-container';\nimport AddOptionsAccount from 'Components/add-options-account';\nimport TradingAppCard from 'Components/containers/trading-app-card';\nimport PlatformLoader from 'Components/pre-loader/platform-loader';\nimport CompareAccount from 'Components/compare-account';\nimport CFDsDescription from 'Components/elements/cfds-description';\nimport { getHasDivider } from 'Constants/utils';\nimport {\n    useMT5SVGEligibleToMigrate,\n    useTradingPlatformStatus,\n    TradingPlatformStatus,\n    useGrowthbookGetFeatureValue,\n} from '@deriv/hooks';\n\nimport './cfds-listing.scss';\n\nconst MigrationBanner = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"cfd_migration-banner\" */ '@deriv/cfd/src/Containers/migration-banner/migration-banner'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst CFDsListing = observer(() => {\n    const { isDesktop } = useDevice();\n    const {\n        client,\n        modules: { cfd },\n        traders_hub,\n        common,\n        ui,\n    } = useStore();\n    const {\n        available_dxtrade_accounts,\n        available_ctrader_accounts,\n        combined_cfd_mt5_accounts,\n        selected_region,\n        has_any_real_account,\n        startTrade,\n        is_real,\n        getExistingAccounts,\n        getAccount,\n        selected_account_type,\n        is_eu_user,\n        is_demo_low_risk,\n        no_MF_account,\n        toggleAccountTransferModal,\n        is_demo,\n        showTopUpModal,\n        no_CR_account,\n        setSelectedAccount,\n        CFDs_restricted_countries,\n        financial_restricted_countries,\n        getDefaultJurisdiction,\n    } = traders_hub;\n    const {\n        setAccountType,\n        toggleCTraderTransferModal,\n        setAccountUnavailableModal,\n        setServerMaintenanceModal,\n        setProduct,\n        setJurisdictionSelectedShortcode,\n    } = cfd;\n\n    const {\n        is_landing_company_loaded,\n        is_populating_mt5_account_list,\n        real_account_creation_unlock_date,\n        ctrader_total_balance,\n        is_trading_platform_available_account_loaded,\n        updateMT5AccountDetails,\n        is_switching,\n    } = client;\n    const { setAppstorePlatform } = common;\n    const { openDerivRealAccountNeededModal, setShouldShowCooldownModal } = ui;\n    const has_no_real_account = !has_any_real_account;\n    const accounts_sub_text =\n        !is_eu_user || is_demo_low_risk ? localize('Compare accounts') : localize('Account Information');\n\n    const [is_traders_dashboard_tracking_enabled] = useGrowthbookGetFeatureValue({\n        featureFlag: 'ce_tradershub_dashboard_tracking',\n        defaultValue: false,\n    });\n\n    const { has_svg_accounts_to_migrate } = useMT5SVGEligibleToMigrate();\n\n    const { getPlatformStatus } = useTradingPlatformStatus();\n\n    const getTradingPlatformStatus = (platform: TradingPlatformStatus['platform']) => {\n        const status = getPlatformStatus(platform);\n\n        switch (status) {\n            case TRADING_PLATFORM_STATUS.MAINTENANCE:\n                return setServerMaintenanceModal(true);\n            case TRADING_PLATFORM_STATUS.UNAVAILABLE:\n                return setAccountUnavailableModal(true);\n            case TRADING_PLATFORM_STATUS.ACTIVE:\n                return getAccount();\n            default:\n                break;\n        }\n    };\n\n    const hasUnavailableAccount = combined_cfd_mt5_accounts.some(\n        account => account.status === TRADING_PLATFORM_STATUS.UNAVAILABLE\n    );\n    const hasMaintenanceStatus =\n        combined_cfd_mt5_accounts.some(account => account.status === MT5_ACCOUNT_STATUS.UNDER_MAINTENANCE) ||\n        combined_cfd_mt5_accounts.some(\n            account => getPlatformStatus(account.platform ?? CFD_PLATFORMS.MT5) === TRADING_PLATFORM_STATUS.MAINTENANCE\n        );\n\n    const getMT5AccountAuthStatus = (current_acc_status?: string | null, jurisdiction?: string) => {\n        if (current_acc_status === 'under_maintenance') {\n            return MT5_ACCOUNT_STATUS.UNDER_MAINTENANCE;\n        } else if (current_acc_status === 'unavailable') {\n            return TRADING_PLATFORM_STATUS.UNAVAILABLE;\n        } else if (jurisdiction) {\n            switch (current_acc_status) {\n                case 'proof_failed':\n                case 'poa_failed':\n                case 'poa_outdated':\n                    return MT5_ACCOUNT_STATUS.FAILED;\n                case 'verification_pending':\n                case 'poa_pending':\n                    return MT5_ACCOUNT_STATUS.PENDING;\n                case 'needs_verification':\n                case 'poa_required':\n                    return MT5_ACCOUNT_STATUS.NEEDS_VERIFICATION;\n                case 'migrated_with_position':\n                    return MT5_ACCOUNT_STATUS.MIGRATED_WITH_POSITION;\n                case 'migrated_without_position':\n                    return MT5_ACCOUNT_STATUS.MIGRATED_WITHOUT_POSITION;\n                default:\n                    return null;\n            }\n        }\n        return '';\n    };\n\n    const no_real_mf_account_eu_regulator = no_MF_account && is_eu_user && is_real;\n\n    const no_real_cr_non_eu_regulator = no_CR_account && !is_eu_user && is_real;\n\n    const AddDerivAccount = () => {\n        if (is_real) {\n            if (no_CR_account && !is_eu_user) {\n                return (\n                    <div className='cfd-full-row'>\n                        <AddOptionsAccount />\n                    </div>\n                );\n            } else if (no_MF_account && is_eu_user) {\n                return (\n                    <div className='cfd-full-row'>\n                        <AddOptionsAccount />\n                    </div>\n                );\n            }\n        }\n        return null;\n    };\n\n    useEffect(() => {\n        if (is_landing_company_loaded && is_populating_mt5_account_list) {\n            setPerformanceValue('login_time');\n            setPerformanceValue('redirect_from_deriv_com_time');\n            setPerformanceValue('switch_currency_accounts_time');\n            setPerformanceValue('switch_from_demo_to_real_time');\n            setPerformanceValue('switch_from_real_to_demo_time');\n        }\n        updateMT5AccountDetails();\n    }, [is_landing_company_loaded, is_populating_mt5_account_list]);\n\n    const is_cfd_accounts_supported =\n        combined_cfd_mt5_accounts.length || available_dxtrade_accounts.length || available_ctrader_accounts.length;\n\n    const is_mt5_list_loaded =\n        is_landing_company_loaded &&\n        !is_populating_mt5_account_list &&\n        !is_switching &&\n        is_trading_platform_available_account_loaded;\n\n    if (is_mt5_list_loaded && !is_cfd_accounts_supported) {\n        return null;\n    }\n\n    return (\n        <ListingContainer\n            title={\n                isDesktop && (\n                    <div className='cfd-accounts__title'>\n                        <Text size='sm' weight='bold' color='prominent'>\n                            {localize('CFDs')}\n                        </Text>\n                        <CompareAccount accounts_sub_text={accounts_sub_text} is_desktop />\n                    </div>\n                )\n            }\n            description={<CFDsDescription />}\n        >\n            {!isDesktop && <CompareAccount accounts_sub_text={accounts_sub_text} />}\n            <AddDerivAccount />\n            <div className='cfd-full-row' style={{ paddingTop: '2rem' }}>\n                <Text line_height='m' weight='bold' color='prominent'>\n                    {localize('Deriv MT5')}\n                </Text>\n            </div>\n            {has_svg_accounts_to_migrate && is_landing_company_loaded && <MigrationBanner />}\n            {is_mt5_list_loaded && combined_cfd_mt5_accounts.length ? (\n                <React.Fragment>\n                    {/* MT5 */}\n                    {combined_cfd_mt5_accounts.map((existing_account, index: number) => {\n                        const list_size = combined_cfd_mt5_accounts.length;\n\n                        const track_account_subtitle = existing_account.tracking_name ?? '';\n\n                        const has_mt5_account_status =\n                            existing_account?.status || hasMaintenanceStatus\n                                ? getMT5AccountAuthStatus(\n                                      existing_account?.status,\n                                      existing_account?.landing_company_short\n                                  )\n                                : '';\n                        return (\n                            <TradingAppCard\n                                client_kyc_status={existing_account?.client_kyc_status}\n                                action_type={existing_account.action_type}\n                                availability={selected_region}\n                                clickable_icon\n                                is_new\n                                icon={existing_account.icon}\n                                sub_title={existing_account?.sub_title}\n                                name={!has_mt5_account_status ? existing_account?.name : ''}\n                                short_code_and_region={existing_account?.short_code_and_region}\n                                platform={existing_account.platform}\n                                description={existing_account.description}\n                                key={existing_account.key}\n                                has_divider={(!is_eu_user || is_demo) && getHasDivider(index, list_size, 3)}\n                                onAction={(e?: React.MouseEvent<HTMLButtonElement>) => {\n                                    if (existing_account.action_type === 'get') {\n                                        if (is_traders_dashboard_tracking_enabled) {\n                                            cacheTrackEvents.loadEvent([\n                                                {\n                                                    event: {\n                                                        name: 'ce_tradershub_dashboard_form',\n                                                        properties: {\n                                                            action: 'account_get',\n                                                            form_name: 'traders_hub_default',\n                                                            account_mode: selected_account_type,\n                                                            account_name: track_account_subtitle,\n                                                        },\n                                                    },\n                                                },\n                                            ]);\n                                        }\n                                        if (hasUnavailableAccount || hasMaintenanceStatus)\n                                            return setServerMaintenanceModal(true);\n\n                                        if (real_account_creation_unlock_date && no_real_mf_account_eu_regulator) {\n                                            setShouldShowCooldownModal(true);\n                                        } else if (no_real_cr_non_eu_regulator || no_real_mf_account_eu_regulator) {\n                                            openDerivRealAccountNeededModal();\n                                        } else {\n                                            setAccountType({\n                                                category: selected_account_type,\n                                                type: existing_account.market_type,\n                                            });\n                                            setProduct(existing_account.product);\n                                            setAppstorePlatform(existing_account.platform);\n                                            setJurisdictionSelectedShortcode(getDefaultJurisdiction());\n                                            getTradingPlatformStatus(existing_account.platform);\n                                        }\n                                    } else if (existing_account.action_type === 'multi-action') {\n                                        const button_name = e?.currentTarget?.name;\n                                        setProduct(existing_account.product);\n                                        if (button_name === 'transfer-btn') {\n                                            if (is_traders_dashboard_tracking_enabled) {\n                                                cacheTrackEvents.loadEvent([\n                                                    {\n                                                        event: {\n                                                            name: 'ce_tradershub_dashboard_form',\n                                                            properties: {\n                                                                action: 'account_transfer',\n                                                                form_name: 'traders_hub_default',\n                                                                account_mode: selected_account_type,\n                                                                account_name: track_account_subtitle,\n                                                            },\n                                                        },\n                                                    },\n                                                ]);\n                                            }\n\n                                            toggleAccountTransferModal();\n                                            setSelectedAccount(existing_account);\n                                        } else if (button_name === 'topup-btn') {\n                                            if (is_traders_dashboard_tracking_enabled) {\n                                                cacheTrackEvents.loadEvent([\n                                                    {\n                                                        event: {\n                                                            name: 'ce_tradershub_dashboard_form',\n                                                            properties: {\n                                                                action: 'account_topup',\n                                                                form_name: 'traders_hub_default',\n                                                                account_mode: selected_account_type,\n                                                                account_name: track_account_subtitle,\n                                                            },\n                                                        },\n                                                    },\n                                                ]);\n                                            }\n\n                                            showTopUpModal(existing_account);\n                                            setAppstorePlatform(existing_account.platform);\n                                        } else {\n                                            if (is_traders_dashboard_tracking_enabled) {\n                                                cacheTrackEvents.loadEvent([\n                                                    {\n                                                        event: {\n                                                            name: 'ce_tradershub_dashboard_form',\n                                                            properties: {\n                                                                action: 'account_open',\n                                                                form_name: 'traders_hub_default',\n                                                                account_mode: selected_account_type,\n                                                                account_name: track_account_subtitle,\n                                                            },\n                                                        },\n                                                    },\n                                                ]);\n                                            }\n\n                                            startTrade(existing_account.platform, existing_account);\n                                        }\n                                    }\n                                }}\n                                mt5_acc_auth_status={has_mt5_account_status}\n                                selected_mt5_jurisdiction={{\n                                    platform: existing_account.platform,\n                                    category: selected_account_type,\n                                    type: existing_account.market_type,\n                                    jurisdiction: existing_account.landing_company_short,\n                                    product: existing_account.product,\n                                }}\n                                market_type={existing_account?.market_type}\n                            />\n                        );\n                    })}\n                </React.Fragment>\n            ) : (\n                <PlatformLoader />\n            )}\n\n            {/* cTrader */}\n            {!is_eu_user && !CFDs_restricted_countries && !financial_restricted_countries && (\n                <Fragment>\n                    <div className='cfd-full-row'>\n                        <hr className='divider' />\n                    </div>\n                    <div className='cfd-full-row' style={{ paddingTop: '2rem' }}>\n                        <Text weight='bold'>{localize('Deriv cTrader')}</Text>\n                    </div>\n                    {is_landing_company_loaded ? (\n                        available_ctrader_accounts.map(account => {\n                            const existing_accounts = getExistingAccounts(account.platform, account.market_type);\n                            const has_existing_accounts = existing_accounts.length > 0;\n                            const track_account_name = is_demo ? `${account.name} ${'Demo'}` : account.name;\n                            return has_existing_accounts ? (\n                                existing_accounts.map(existing_account => (\n                                    <TradingAppCard\n                                        action_type='multi-action'\n                                        availability={selected_region}\n                                        clickable_icon\n                                        icon={account.icon}\n                                        sub_title={account.name}\n                                        name={`${formatMoney(\n                                            existing_account.currency,\n                                            is_demo ? existing_account.display_balance : ctrader_total_balance,\n                                            true\n                                        )} ${existing_account.currency}`}\n                                        description={existing_account.display_login}\n                                        platform={account.platform}\n                                        key={`trading_app_card_${existing_account.display_login}`}\n                                        onAction={(e?: React.MouseEvent<HTMLButtonElement>) => {\n                                            const button_name = e?.currentTarget?.name;\n                                            setProduct();\n                                            if (button_name === 'transfer-btn') {\n                                                if (is_traders_dashboard_tracking_enabled) {\n                                                    cacheTrackEvents.loadEvent([\n                                                        {\n                                                            event: {\n                                                                name: 'ce_tradershub_dashboard_form',\n                                                                properties: {\n                                                                    action: 'account_transfer',\n                                                                    form_name: 'traders_hub_default',\n                                                                    account_mode: selected_account_type,\n                                                                    account_name: track_account_name,\n                                                                },\n                                                            },\n                                                        },\n                                                    ]);\n                                                }\n\n                                                toggleCTraderTransferModal();\n                                            } else if (button_name === 'topup-btn') {\n                                                if (is_traders_dashboard_tracking_enabled) {\n                                                    cacheTrackEvents.loadEvent([\n                                                        {\n                                                            event: {\n                                                                name: 'ce_tradershub_dashboard_form',\n                                                                properties: {\n                                                                    action: 'account_topup',\n                                                                    form_name: 'traders_hub_default',\n                                                                    account_mode: selected_account_type,\n                                                                    account_name: track_account_name,\n                                                                },\n                                                            },\n                                                        },\n                                                    ]);\n                                                }\n\n                                                showTopUpModal(existing_account);\n                                                setAppstorePlatform(account.platform);\n                                            } else {\n                                                if (is_traders_dashboard_tracking_enabled) {\n                                                    cacheTrackEvents.loadEvent([\n                                                        {\n                                                            event: {\n                                                                name: 'ce_tradershub_dashboard_form',\n                                                                properties: {\n                                                                    action: 'account_open',\n                                                                    form_name: 'traders_hub_default',\n                                                                    account_mode: selected_account_type,\n                                                                    account_name: track_account_name,\n                                                                },\n                                                            },\n                                                        },\n                                                    ]);\n                                                }\n\n                                                startTrade(account.platform, existing_account);\n                                            }\n                                        }}\n                                    />\n                                ))\n                            ) : (\n                                <TradingAppCard\n                                    action_type='get'\n                                    availability={selected_region}\n                                    clickable_icon\n                                    icon={account.icon}\n                                    name={account.name}\n                                    platform={account.platform}\n                                    description={account.description}\n                                    onAction={() => {\n                                        setProduct();\n                                        if (is_traders_dashboard_tracking_enabled) {\n                                            cacheTrackEvents.loadEvent([\n                                                {\n                                                    event: {\n                                                        name: 'ce_tradershub_dashboard_form',\n                                                        properties: {\n                                                            action: 'account_get',\n                                                            form_name: 'traders_hub_default',\n                                                            account_mode: selected_account_type,\n                                                            account_name: track_account_name,\n                                                        },\n                                                    },\n                                                },\n                                            ]);\n                                        }\n                                        if ((has_no_real_account || no_CR_account) && is_real) {\n                                            openDerivRealAccountNeededModal();\n                                        } else {\n                                            setAccountType({\n                                                category: selected_account_type,\n                                                type: account.market_type,\n                                            });\n                                            setAppstorePlatform(account.platform);\n                                            getTradingPlatformStatus(account.platform);\n                                        }\n                                    }}\n                                    key={`trading_app_card_${account.name}`}\n                                    is_new\n                                />\n                            );\n                        })\n                    ) : (\n                        <PlatformLoader />\n                    )}\n                    <React.Fragment>\n                        <div className='cfd-full-row'>\n                            <hr className='divider' />\n                        </div>\n\n                        <div className='cfd-full-row'>\n                            <Text line_height='m' weight='bold' color='prominent'>\n                                {localize('Deriv X')}\n                            </Text>\n                        </div>\n                    </React.Fragment>\n                    {/* dxtrade */}\n                    {is_landing_company_loaded ? (\n                        available_dxtrade_accounts?.map(account => {\n                            const existing_accounts = getExistingAccounts(account.platform, account.market_type);\n                            const has_existing_accounts = existing_accounts.length > 0;\n                            const track_account_name = is_demo ? `${account.name} ${'Demo'}` : account.name;\n\n                            return has_existing_accounts ? (\n                                existing_accounts.map(existing_account => (\n                                    <TradingAppCard\n                                        action_type='multi-action'\n                                        availability={selected_region}\n                                        clickable_icon\n                                        icon={account.icon}\n                                        sub_title={account.name}\n                                        name={`${formatMoney(\n                                            existing_account.currency,\n                                            existing_account.display_balance,\n                                            true\n                                        )} ${existing_account.currency}`}\n                                        description={existing_account.login}\n                                        platform={account.platform}\n                                        key={`trading_app_card_${existing_account.login}`}\n                                        onAction={(e?: React.MouseEvent<HTMLButtonElement>) => {\n                                            const button_name = e?.currentTarget?.name;\n                                            setProduct();\n                                            if (button_name === 'transfer-btn') {\n                                                if (is_traders_dashboard_tracking_enabled) {\n                                                    cacheTrackEvents.loadEvent([\n                                                        {\n                                                            event: {\n                                                                name: 'ce_tradershub_dashboard_form',\n                                                                properties: {\n                                                                    action: 'account_transfer',\n                                                                    form_name: 'traders_hub_default',\n                                                                    account_mode: selected_account_type,\n                                                                    account_name: track_account_name,\n                                                                },\n                                                            },\n                                                        },\n                                                    ]);\n                                                }\n\n                                                toggleAccountTransferModal();\n                                                setSelectedAccount(existing_account);\n                                            } else if (button_name === 'topup-btn') {\n                                                if (is_traders_dashboard_tracking_enabled) {\n                                                    cacheTrackEvents.loadEvent([\n                                                        {\n                                                            event: {\n                                                                name: 'ce_tradershub_dashboard_form',\n                                                                properties: {\n                                                                    action: 'account_topup',\n                                                                    form_name: 'traders_hub_default',\n                                                                    account_mode: selected_account_type,\n                                                                    account_name: track_account_name,\n                                                                },\n                                                            },\n                                                        },\n                                                    ]);\n                                                }\n\n                                                showTopUpModal(existing_account);\n                                                setAppstorePlatform(account.platform);\n                                            } else {\n                                                if (is_traders_dashboard_tracking_enabled) {\n                                                    cacheTrackEvents.loadEvent([\n                                                        {\n                                                            event: {\n                                                                name: 'ce_tradershub_dashboard_form',\n                                                                properties: {\n                                                                    action: 'account_open',\n                                                                    form_name: 'traders_hub_default',\n                                                                    account_mode: selected_account_type,\n                                                                    account_name: track_account_name,\n                                                                },\n                                                            },\n                                                        },\n                                                    ]);\n                                                }\n\n                                                startTrade(account.platform, existing_account);\n                                            }\n                                        }}\n                                    />\n                                ))\n                            ) : (\n                                <TradingAppCard\n                                    action_type='get'\n                                    availability={selected_region}\n                                    clickable_icon\n                                    icon={account.icon}\n                                    name={account.name}\n                                    platform={account.platform}\n                                    description={account.description}\n                                    onAction={() => {\n                                        setProduct();\n                                        if (is_traders_dashboard_tracking_enabled) {\n                                            cacheTrackEvents.loadEvent([\n                                                {\n                                                    event: {\n                                                        name: 'ce_tradershub_dashboard_form',\n                                                        properties: {\n                                                            action: 'account_get',\n                                                            form_name: 'traders_hub_default',\n                                                            account_mode: selected_account_type,\n                                                            account_name: track_account_name,\n                                                        },\n                                                    },\n                                                },\n                                            ]);\n                                        }\n                                        if ((has_no_real_account || no_CR_account) && is_real) {\n                                            openDerivRealAccountNeededModal();\n                                        } else {\n                                            setAccountType({\n                                                category: selected_account_type,\n                                                type: account.market_type,\n                                            });\n                                            setAppstorePlatform(account.platform);\n                                            getTradingPlatformStatus(account.platform);\n                                        }\n                                    }}\n                                    key={`trading_app_card_${account.name}`}\n                                />\n                            );\n                        })\n                    ) : (\n                        <PlatformLoader />\n                    )}\n                </Fragment>\n            )}\n        </ListingContainer>\n    );\n});\n\nexport default CFDsListing;\n","import { Formik, FormikHelpers } from 'formik';\nimport React from 'react';\nimport { Button, Icon, PasswordMeter, PasswordInput, FormSubmitButton, Loading, Modal, Text } from '@deriv/components';\nimport { validLength, validPassword, validMT5Password, getErrorMessages, WS, redirectToLogin } from '@deriv/shared';\nimport { localize, Localize, getLanguage } from '@deriv/translations';\nimport { getMtCompanies, TMtCompanies } from '../Stores/Modules/CFD/Helpers/cfd-config';\nimport { TResetPasswordIntent, TCFDResetPasswordModal, TError } from './props.types';\nimport { observer, useStore } from '@deriv/stores';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { CFD_PLATFORMS } from '../Helpers/cfd-config';\n\nconst ResetPasswordIntent = ({ current_list, children, is_eu, ...props }: TResetPasswordIntent) => {\n    const reset_password_intent = localStorage.getItem('cfd_reset_password_intent');\n    const reset_password_type = localStorage.getItem('cfd_reset_password_type') || 'main'; // Default to main\n    const has_intent =\n        reset_password_intent &&\n        /(real|demo)\\.(gold_dml|gold_bvi|gold_v|gold|financial|financial_demo|financial_stp|financial_svg|financial_bvi|financial_fx|financial_v|synthetic|synthetic_svg|synthetic_bvi|synthetic_v|all_swap_free_svg|all_zero_spread_bvi|dxtrade|all)/.test(\n            reset_password_intent\n        );\n\n    let group, type, login, title, server;\n    if (has_intent && current_list) {\n        [server, group, type] = reset_password_intent.split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`].login;\n        title =\n            getMtCompanies(is_eu)[group as keyof TMtCompanies][type as keyof TMtCompanies['demo' | 'real']]?.title ??\n            '';\n    } else if (current_list) {\n        [server, group, type] = (Object.keys(current_list).pop() as string).split('.');\n        login = current_list[`mt5.${group}.${type}@${server}`]?.login ?? '';\n        title =\n            getMtCompanies(is_eu)?.[group as keyof TMtCompanies]?.[type as keyof TMtCompanies['demo' | 'real']]\n                ?.title ?? '';\n    } else {\n        // Set a default intent\n        login = '';\n        title = '';\n    }\n\n    return children({\n        login,\n        title,\n        type: reset_password_type,\n        ...props,\n    });\n};\n\nconst CFDResetPasswordModal = observer(({ platform }: TCFDResetPasswordModal) => {\n    const { client, ui } = useStore();\n\n    const { email, is_eu, is_logged_in } = client;\n    const { is_cfd_reset_password_modal_enabled, setCFDPasswordResetModal } = ui;\n\n    const { current_list } = useCfdStore();\n\n    React.useEffect(() => {\n        if (!/reset-password/.test(location.hash)) {\n            return;\n        }\n        setCFDPasswordResetModal(true);\n    }, [setCFDPasswordResetModal]);\n\n    const [state, setState] = React.useState<{\n        error_code: string | number | undefined;\n        has_error: boolean;\n        error_message: string | undefined;\n        is_finished: boolean;\n        changed_password_type: string;\n    }>({\n        error_code: undefined,\n        has_error: false,\n        error_message: undefined,\n        is_finished: false,\n        changed_password_type: '',\n    });\n\n    const renderErrorBox = (error: TError) => {\n        setState({\n            ...state,\n            error_code: error.code,\n            has_error: true,\n            error_message: error.message,\n        });\n    };\n    const clearAddressBar = () => {\n        localStorage.removeItem('cfd_reset_password_intent');\n        localStorage.removeItem('cfd_reset_password_type');\n        localStorage.removeItem('cfd_reset_password_code');\n    };\n    const validatePassword = (values: { new_password: string }) => {\n        const errors: { new_password?: string } = {};\n        const max_length = platform === CFD_PLATFORMS.DXTRADE ? 25 : 16;\n\n        if (\n            !validLength(values.new_password, {\n                min: 8,\n                max: max_length,\n            })\n        ) {\n            errors.new_password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: max_length,\n            });\n        } else if (!validPassword(values.new_password)) {\n            errors.new_password = getErrorMessages().password();\n        } else if (platform !== CFD_PLATFORMS.DXTRADE && !validMT5Password(values.new_password)) {\n            errors.new_password = localize(\n                'Please include at least 1 special character such as ( _ @ ? ! / # ) in your password.'\n            );\n        }\n        if (values.new_password.toLowerCase() === email.toLowerCase()) {\n            errors.new_password = localize('Your password cannot be the same as your email address.');\n        }\n\n        return errors;\n    };\n\n    const resetPassword = (\n        values: { new_password: string },\n        password_type: string,\n        login: string,\n        actions: FormikHelpers<{ new_password: string }>\n    ) => {\n        const { setSubmitting } = actions;\n        setSubmitting(true);\n        const request = {\n            account_id: login,\n            platform: CFD_PLATFORMS.MT5,\n            new_password: values.new_password,\n            verification_code: localStorage.getItem('cfd_reset_password_code'),\n        };\n\n        WS.tradingPlatformInvestorPasswordReset(request).then((response: { error: TError; password_type: string }) => {\n            if (response?.error?.code) {\n                renderErrorBox(response.error);\n            } else {\n                setState({\n                    ...state,\n                    is_finished: true,\n                    changed_password_type: password_type,\n                });\n                clearAddressBar();\n            }\n            setSubmitting(false);\n        });\n    };\n    const getIsListFetched = () => {\n        return Object.keys(current_list).length !== 0;\n    };\n\n    const is_invalid_investor_token = !getIsListFetched() && localStorage.getItem('cfd_reset_password_code');\n\n    return (\n        <Modal\n            className='cfd-reset-password-modal'\n            is_open={is_cfd_reset_password_modal_enabled && !is_invalid_investor_token}\n            toggleModal={() => setCFDPasswordResetModal(false)}\n            title={\n                platform === CFD_PLATFORMS.DXTRADE\n                    ? localize('Reset Deriv X investor password')\n                    : localize('Reset Deriv MT5 investor password')\n            }\n            onMount={() => redirectToLogin(is_logged_in, getLanguage(), true)}\n            should_header_stick_body={false}\n        >\n            {!getIsListFetched() && !state.has_error && <Loading is_fullscreen={false} />}\n            {getIsListFetched() && !state.has_error && !state.is_finished && (\n                <ResetPasswordIntent current_list={current_list} is_eu={is_eu}>\n                    {({ type, login }) => (\n                        <Formik\n                            initialValues={{ new_password: '' }}\n                            validate={validatePassword}\n                            onSubmit={(values, actions) => resetPassword(values, type, login, actions)}\n                        >\n                            {({ handleSubmit, errors, values, isSubmitting, handleChange, handleBlur, touched }) => (\n                                <form autoComplete='off' onSubmit={handleSubmit}>\n                                    <div className='cfd-reset-password'>\n                                        <div className='cfd-reset-password__container'>\n                                            <div className='cfd-reset-password__password-area'>\n                                                <PasswordMeter\n                                                    input={values.new_password}\n                                                    has_error={!!(touched.new_password && errors.new_password)}\n                                                    custom_feedback_messages={getErrorMessages().password_warnings}\n                                                >\n                                                    {({ has_warning }: { has_warning: boolean }) => (\n                                                        <PasswordInput\n                                                            autoComplete='new-password'\n                                                            className='cfd-reset-password__password-field'\n                                                            name='new_password'\n                                                            label={localize('New {{type}} password', { type })}\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n                                                            error={touched.new_password && errors.new_password}\n                                                            value={values.new_password}\n                                                            data-lpignore='true'\n                                                            required\n                                                            hint={\n                                                                !has_warning &&\n                                                                localize(\n                                                                    'Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.'\n                                                                )\n                                                            }\n                                                        />\n                                                    )}\n                                                </PasswordMeter>\n                                            </div>\n                                            {platform !== CFD_PLATFORMS.DXTRADE && (\n                                                <div className='cfd-reset-password__password-area'>\n                                                    <Text\n                                                        as='p'\n                                                        size='xs'\n                                                        align='center'\n                                                        className='cfd-reset-password__description2'\n                                                    >\n                                                        <Localize i18n_default_text='Your password must contain between 8-16 characters that include uppercase and lowercase letters, and at least one number and special character ( _ @ ? ! / # ).' />\n                                                    </Text>\n                                                </div>\n                                            )}\n                                            {isSubmitting && <Loading is_fullscreen={false} />}\n                                            {!isSubmitting && (\n                                                <FormSubmitButton\n                                                    is_disabled={\n                                                        isSubmitting ||\n                                                        !values.new_password ||\n                                                        Object.keys(errors).length > 0\n                                                    }\n                                                    errors={errors}\n                                                    is_center={true}\n                                                    large\n                                                    label={localize('Create {{type}} password', { type })}\n                                                />\n                                            )}\n                                        </div>\n                                    </div>\n                                </form>\n                            )}\n                        </Formik>\n                    )}\n                </ResetPasswordIntent>\n            )}\n            {state.has_error && (\n                <div className='cfd-reset-password__error'>\n                    <Icon icon='IcMt5Expired' size={128} />\n                    <Text as='p' size='xs' weight='bold' align='center' className='cfd-reset-password__heading'>\n                        {state.error_message}\n                    </Text>\n                    {state.error_code === 'InvalidToken' && (\n                        <Text\n                            as='p'\n                            color='prominent'\n                            size='xs'\n                            align='center'\n                            className='cfd-reset-password__description--is-centered'\n                        >\n                            <Localize i18n_default_text='Please request a new password and check your email for the new token.' />\n                        </Text>\n                    )}\n                    <Button\n                        primary\n                        large\n                        className='cfd-reset-password__confirm-button'\n                        onClick={() => {\n                            clearAddressBar();\n                            setCFDPasswordResetModal(false);\n                        }}\n                    >\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n            {state.is_finished && (\n                <div className='cfd-reset-password__success'>\n                    <Icon icon='IcMt5PasswordUpdated' size={128} />\n                    <div className='cfd-reset-password__description'>\n                        <Text as='p' size='xs' align='center' weight='bold' line_height='xxl'>\n                            <Localize i18n_default_text='Password saved' />\n                        </Text>\n                        <Localize\n                            i18n_default_text='Your {{account_type}} password has been changed.'\n                            values={{\n                                account_type:\n                                    state.changed_password_type === 'main' ? localize('main') : localize('investor'),\n                            }}\n                        />\n                    </div>\n                    <Button primary large onClick={() => setCFDPasswordResetModal(false)}>\n                        <Localize i18n_default_text='Ok' />\n                    </Button>\n                </div>\n            )}\n        </Modal>\n    );\n});\n\nexport default React.memo(CFDResetPasswordModal);\n","import { useStore } from '@deriv/stores';\n\n/** @deprecated Use `useStore` from `@deriv/stores` package instead. */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const useStores: () => any = useStore;\n","import React from 'react';\nimport { observer } from 'mobx-react-lite';\n\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport CFDResetPasswordModal from '@deriv/cfd/src/Containers/cfd-reset-password-modal';\nimport { Loading } from '@deriv/components';\nimport { useWalletMigration } from '@deriv/hooks';\nimport { makeLazyLoader, moduleLoader } from '@deriv/shared';\n\nimport { useStores } from 'Stores';\n\nimport { TTradingPlatformAvailableAccount } from './account-type-modal/types';\n\nconst VerificationDocsListModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () => import(/* webpackChunkName: \"modal_verification-docs-list-modal\" */ './verification-docs-list-modal')\n        ),\n    () => <Loading />\n)();\n\nconst AccountTransferModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_Components_account-transfer-modal\" */ 'Components/account-transfer-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst RegulatorsCompareModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () => import(/* webpackChunkName: \"modal_regulators-compare-modal\" */ './regulators-compare-modal')\n        ),\n    () => <Loading />\n)();\n\nconst WalletsMigrationFailed = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () => import(/* webpackChunkName: \"modal_wallets-migration-failed\" */ './wallets-migration-failed')\n        ),\n    () => <Loading />\n)();\n\nconst WalletsUpgradeModal = makeLazyLoader(\n    () => moduleLoader(() => import(/* webpackChunkName: \"modal_wallets-upgrade-modal\" */ './wallets-upgrade-modal')),\n    () => <Loading />\n)();\n\nconst WalletsEUUpgradeModal = makeLazyLoader(\n    () =>\n        moduleLoader(() => import(/* webpackChunkName: \"modal_wallets-upgrade-modal\" */ './wallets-eu-upgrade-modal')),\n    () => <Loading />\n)();\n\nconst CFDServerErrorDialog = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_cfd-server-error-dialog\" */ '@deriv/cfd/src/Containers/cfd-server-error-dialog'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst CFDPasswordModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_cfd-password-modal\" */ '@deriv/cfd/src/Containers/cfd-password-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst CFDServerMaintenanceModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_cfd-server-maintenance-modal\" */ '@deriv/cfd/src/Containers/cfd-server-maintenance-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst MT5AccountUnavailableModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_mt5-account-unavailable-modal\" */ '@deriv/cfd/src/Containers/mt5-account-unavailable-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst CFDTopUpDemoModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_cfd-top-up-demo-modal\" */ '@deriv/cfd/src/Containers/cfd-top-up-demo-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst MT5TradeModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(/* webpackChunkName: \"modal_cfd_mt5-trade-modal\" */ '@deriv/cfd/src/Containers/mt5-trade-modal')\n        ),\n    () => <Loading />\n)();\n\nconst CFDPasswordManagerModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_cfd-password-manager-modal\" */ '@deriv/cfd/src/Containers/cfd-password-manager-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst MT5MigrationModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_mt5-migration-modal\" */ '@deriv/cfd/src/Containers/mt5-migration-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst ResetTradingPasswordModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_account_reset-trading-password-modal\" */ '@deriv/account/src/Components/reset-trading-password-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst CTraderTransferModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_cfd_ctrader-transfer-modal\" */ '@deriv/cfd/src/Containers/ctrader-transfer-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst SetupRealAccountOrGoToDemoModal = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"modal_setup-real-account-or-go-to-demo\" */ './setup-real-account-or-go-to-demo-modal'\n                )\n        ),\n    () => <Loading />\n)();\n\ntype TCurrentList = DetailsOfEachMT5Loginid & {\n    enabled: number;\n};\n\nconst ModalManager = () => {\n    const { is_eligible, is_in_progress } = useWalletMigration();\n    const store = useStores();\n    const { common, client, modules, traders_hub, ui } = store;\n    const {\n        is_logged_in,\n        is_eu,\n        is_eu_country,\n        is_populating_mt5_account_list,\n        verification_code,\n        is_trading_experience_incomplete,\n        is_virtual,\n    } = client;\n    const { platform } = common;\n    const {\n        current_list,\n        is_mt5_trade_modal_visible,\n        toggleMT5TradeModal,\n        getRealSyntheticAccountsExistingData,\n        getRealFinancialAccountsExistingData,\n        getRealSwapfreeAccountsExistingData,\n        has_cfd_error,\n        mt5_migration_error,\n        is_mt5_password_invalid_format_modal_visible,\n        is_cfd_password_modal_enabled,\n        is_cfd_success_dialog_enabled,\n        is_sent_email_modal_enabled,\n        is_ctrader_transfer_modal_visible,\n        is_server_maintenance_modal_visible,\n        is_account_unavailable_modal_visible,\n    } = modules.cfd;\n    const {\n        enableApp,\n        disableApp,\n        is_reset_trading_password_modal_visible,\n        setResetTradingPasswordModalOpen,\n        setCFDPasswordResetModal,\n        is_top_up_virtual_open,\n        is_top_up_virtual_success,\n        is_mt5_migration_modal_open,\n        should_show_assessment_complete_modal,\n    } = ui;\n    const {\n        is_demo,\n        is_account_transfer_modal_open,\n        toggleAccountTransferModal,\n        is_real_wallets_upgrade_on,\n        is_verification_docs_list_modal_visible,\n        is_regulators_compare_modal_visible,\n        is_wallet_migration_failed,\n        is_setup_real_account_or_go_to_demo_modal_visible,\n    } = traders_hub;\n\n    const [password_manager, setPasswordManager] = React.useState<{\n        is_visible: boolean;\n        selected_login: string;\n        selected_account: string;\n        selected_account_type: string;\n        selected_account_group: '' | 'demo' | 'real';\n        selected_server: string;\n    }>({\n        is_visible: false,\n        selected_login: '',\n        selected_account: '',\n        selected_account_type: '',\n        selected_account_group: '',\n        selected_server: '',\n    });\n\n    const togglePasswordManagerModal = (\n        login?: string,\n        title?: string,\n        group?: 'demo' | 'real' | '',\n        type?: string,\n        server?: string\n    ) => {\n        setPasswordManager(prev_state => ({\n            is_visible: !prev_state.is_visible,\n            selected_login: typeof login === 'string' ? login : '',\n            selected_account: typeof title === 'string' ? title : '',\n            selected_account_group: group || '',\n            selected_account_type: type || '',\n            selected_server: server || '',\n        }));\n    };\n\n    const existing_accounts_data = (acc_type: TTradingPlatformAvailableAccount['market_type'] | 'synthetic') => {\n        const current_list_keys = Object.keys(current_list);\n        const should_be_enabled = (list_item: TCurrentList) =>\n            platform === 'dxtrade' ? list_item.enabled === 1 : true;\n        const acc = current_list_keys.some(\n            key => key.startsWith(`${platform}.real.${acc_type}`) && should_be_enabled(current_list[key])\n        )\n            ? current_list_keys\n                  .filter(key => key.startsWith(`${platform}.real.${acc_type}`))\n                  .reduce((_acc, cur) => {\n                      _acc.push(current_list[cur]);\n                      return _acc;\n                  }, [] as DetailsOfEachMT5Loginid[])\n            : undefined;\n        return acc;\n    };\n    const trading_platform_dxtrade_password_reset = verification_code?.trading_platform_dxtrade_password_reset;\n    const trading_platform_mt5_password_reset = verification_code?.trading_platform_mt5_password_reset;\n\n    getRealSyntheticAccountsExistingData(existing_accounts_data('synthetic'));\n    getRealFinancialAccountsExistingData(existing_accounts_data('financial'));\n    getRealSwapfreeAccountsExistingData(existing_accounts_data('all'));\n\n    const should_show_cfd_password_modal =\n        is_cfd_password_modal_enabled ||\n        is_cfd_success_dialog_enabled ||\n        is_mt5_password_invalid_format_modal_visible ||\n        is_sent_email_modal_enabled;\n\n    const should_show_wallets_non_eu_upgrade_modal =\n        !is_eu && (is_eligible || is_real_wallets_upgrade_on || is_in_progress);\n\n    const should_show_wallets_eu_upgrade_modal =\n        is_eu &&\n        (is_virtual || !is_trading_experience_incomplete) &&\n        !should_show_assessment_complete_modal &&\n        (is_eligible || is_real_wallets_upgrade_on);\n\n    return (\n        <React.Fragment>\n            {is_server_maintenance_modal_visible && <CFDServerMaintenanceModal />}\n            {is_account_unavailable_modal_visible && <MT5AccountUnavailableModal />}\n            {should_show_cfd_password_modal && <CFDPasswordModal platform={platform} />}\n            <CFDResetPasswordModal platform={platform} /> {/* a new condition for this hotfix needs to be found */}\n            {is_ctrader_transfer_modal_visible && <CTraderTransferModal />}\n            {has_cfd_error && <CFDServerErrorDialog />}\n            {(is_top_up_virtual_open || is_top_up_virtual_success) && <CFDTopUpDemoModal platform={platform} />}\n            {is_mt5_trade_modal_visible && (\n                <MT5TradeModal\n                    is_open={is_mt5_trade_modal_visible}\n                    onPasswordManager={togglePasswordManagerModal}\n                    toggleModal={toggleMT5TradeModal}\n                    is_eu_user={(is_logged_in && is_eu) || (!is_logged_in && is_eu_country)}\n                    is_demo={is_demo}\n                />\n            )}\n            {password_manager.is_visible && (\n                <CFDPasswordManagerModal\n                    is_visible={password_manager.is_visible}\n                    selected_login={password_manager.selected_login}\n                    selected_account_group={password_manager.selected_account_group}\n                    selected_account_type={password_manager.selected_account_type}\n                    selected_server={password_manager.selected_server}\n                    platform={platform}\n                    toggleModal={togglePasswordManagerModal}\n                />\n            )}\n            {is_reset_trading_password_modal_visible && (\n                <ResetTradingPasswordModal\n                    platform={trading_platform_dxtrade_password_reset ? 'dxtrade' : 'mt5'}\n                    enableApp={enableApp}\n                    disableApp={disableApp}\n                    toggleResetTradingPasswordModal={() => {\n                        setResetTradingPasswordModalOpen(false);\n                        setCFDPasswordResetModal(false);\n                    }}\n                    is_visible={is_reset_trading_password_modal_visible}\n                    is_loading={is_populating_mt5_account_list}\n                    verification_code={trading_platform_dxtrade_password_reset || trading_platform_mt5_password_reset}\n                />\n            )}\n            {(is_mt5_migration_modal_open || !!mt5_migration_error) && <MT5MigrationModal />}\n            {is_regulators_compare_modal_visible && <RegulatorsCompareModal />}\n            {is_account_transfer_modal_open && (\n                <AccountTransferModal\n                    is_modal_open={is_account_transfer_modal_open}\n                    toggleModal={toggleAccountTransferModal}\n                />\n            )}\n            {is_verification_docs_list_modal_visible && <VerificationDocsListModal />}\n            <React.Fragment>\n                {is_wallet_migration_failed && <WalletsMigrationFailed />}\n                {should_show_wallets_non_eu_upgrade_modal && <WalletsUpgradeModal />}\n                {should_show_wallets_eu_upgrade_modal && <WalletsEUUpgradeModal />}\n            </React.Fragment>\n            {is_setup_real_account_or_go_to_demo_modal_visible && <SetupRealAccountOrGoToDemoModal />}\n        </React.Fragment>\n    );\n};\n\nexport default observer(ModalManager);\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\nimport { useDevice } from '@deriv-com/ui';\n\nconst RegulationsSwitcherLoader = () => {\n    const { isDesktop } = useDevice();\n\n    return (\n        <ContentLoader\n            backgroundColor='var(--general-section-1)'\n            foregroundColor='var(--general-hover)'\n            width={300}\n            height={60}\n        >\n            {isDesktop ? (\n                <rect x='10' y='10' rx='6' ry='6' width='190' height='40' />\n            ) : (\n                <rect x='60' y='10' rx='6' ry='6' width='80' height='30' />\n            )}\n        </ContentLoader>\n    );\n};\n\nexport default RegulationsSwitcherLoader;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Dropdown } from '@deriv/components';\nimport { getAccountTypes } from 'Constants/platform-config';\nimport { useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { useStore, observer } from '@deriv/stores';\nimport { startPerformanceEventTimer, cacheTrackEvents } from '@deriv/shared';\nimport { TAccountCategory } from 'Types';\nimport './account-type-dropdown.scss';\n\nconst AccountTypeDropdown = observer(() => {\n    const { traders_hub, client, common } = useStore();\n    const { selected_account_type, selectAccountType } = traders_hub;\n    const { setPrevAccountType } = client;\n    const { current_language } = common;\n\n    const [is_traders_dashboard_tracking_enabled] = useGrowthbookGetFeatureValue({\n        featureFlag: 'ce_tradershub_dashboard_tracking',\n        defaultValue: false,\n    });\n\n    return (\n        <div className={classNames('account-type-dropdown--parent')}>\n            <Dropdown\n                classNameIcon={`account-type-dropdown__icon--${selected_account_type}`}\n                value={selected_account_type}\n                classNameDisplay={classNames(\n                    'account-type-dropdown',\n                    `account-type-dropdown--${selected_account_type}`\n                )}\n                list={getAccountTypes()}\n                key={`account-type-dropdown__icon--key-${current_language}`}\n                onChange={async (e: React.ChangeEvent<HTMLInputElement>) => {\n                    if ((selected_account_type as TAccountCategory) === 'real')\n                        startPerformanceEventTimer('switch_from_real_to_demo_time');\n                    else if ((selected_account_type as TAccountCategory) === 'demo')\n                        startPerformanceEventTimer('switch_from_demo_to_real_time');\n                    await selectAccountType(e.target.value);\n                    await setPrevAccountType(e.target.value);\n                    if (is_traders_dashboard_tracking_enabled) {\n                        cacheTrackEvents.loadEvent([\n                            {\n                                event: {\n                                    name: 'ce_tradershub_dashboard_form',\n                                    properties: {\n                                        action: 'switch_account_mode',\n                                        form_name: 'traders_hub_default',\n                                        account_mode: selected_account_type,\n                                    },\n                                },\n                            },\n                        ]);\n                    }\n                }}\n            />\n        </div>\n    );\n});\n\nexport default AccountTypeDropdown;\n","import ContentLoader from 'react-content-loader';\nimport React from 'react';\nimport { useDevice } from '@deriv-com/ui';\n\nconst TotalAssetsLoader = () => {\n    const { isDesktop } = useDevice();\n\n    return (\n        <ContentLoader\n            backgroundColor={'var(--general-section-1)'}\n            foregroundColor={'var(--general-hover)'}\n            height={50}\n        >\n            {isDesktop ? (\n                <rect x='5' y='5' rx='3' ry='3' width='120' height='50' />\n            ) : (\n                <rect x='0' y='5' rx='3' ry='3' width='100' height='30' />\n            )}\n        </ContentLoader>\n    );\n};\n\nexport default TotalAssetsLoader;\n","import { useStore } from '@deriv/stores';\n\n/** @deprecated Use `useMT5AccountsList` for MT5 accounts and `useDxtradeAccountsList` for Other CFD accounts from `@deriv/api` instead. */\nconst useCFDAllAccounts = () => {\n    const { client } = useStore();\n    const { dxtrade_accounts_list, mt5_login_list, ctrader_accounts_list } = client;\n\n    let cfd_accounts: typeof mt5_login_list = [];\n    if (Array.isArray(mt5_login_list)) {\n        cfd_accounts = [...cfd_accounts, ...mt5_login_list];\n    }\n    if (Array.isArray(dxtrade_accounts_list)) {\n        cfd_accounts = [...cfd_accounts, ...dxtrade_accounts_list];\n    }\n    if (Array.isArray(ctrader_accounts_list)) {\n        cfd_accounts = [...cfd_accounts, ...ctrader_accounts_list];\n    }\n\n    return cfd_accounts;\n};\n\nexport default useCFDAllAccounts;\n","import useCFDAllAccounts from './useCFDAllAccounts';\n\n/**\n *  we can use this hook to get the CFD demo accounts.\n *  it loops through the all of user's CFD accounts, finds and returns demo accounts\n */\nconst useCFDDemoAccounts = () => {\n    const cfd_accounts = useCFDAllAccounts();\n\n    const cfd_demo_accounts = cfd_accounts.filter(account => account.account_type === 'demo');\n\n    return cfd_demo_accounts;\n};\n\nexport default useCFDDemoAccounts;\n","import { useStore } from '@deriv/stores';\nimport useCFDAllAccounts from './useCFDAllAccounts';\n\n/**\n * we can use this hook to get the real CFD accounts for both Eu and Non-Eu regions.\n * it loops through the all of user's CFD accounts, finds and returns real accounts\n */\nconst useCFDRealAccounts = () => {\n    const { traders_hub } = useStore();\n    const { is_eu_user } = traders_hub;\n    const cfd_accounts = useCFDAllAccounts();\n\n    const cfd_real_accounts = cfd_accounts.filter(account => {\n        const is_demo = account.account_type === 'demo';\n        const is_maltainvest = account.landing_company_short === 'maltainvest';\n\n        if (is_demo) return false;\n        if (!is_eu_user) return !is_maltainvest;\n\n        return is_maltainvest;\n    });\n\n    return cfd_real_accounts;\n};\n\nexport default useCFDRealAccounts;\n","import useCFDAllAccounts from './useCFDAllAccounts';\nimport useCFDDemoAccounts from './useCFDDemoAccounts';\nimport useCFDRealAccounts from './useCFDRealAccounts';\n\n/**\n * this is a wrapper hook for useCFDDemoAccounts and useCFDRealAccounts\n * and it returns different cfd account types which are demo, real, and all\n */\n\nconst useCFDAccounts = () => {\n    const all_cfd_accounts = useCFDAllAccounts();\n    const cfd_demo_accounts = useCFDDemoAccounts();\n    const cfd_real_accounts = useCFDRealAccounts();\n\n    return {\n        all: all_cfd_accounts,\n        demo: cfd_demo_accounts,\n        real: cfd_real_accounts,\n    };\n};\n\nexport default useCFDAccounts;\n","import { useStore } from '@deriv/stores';\nimport usePlatformAccounts from './usePlatformAccounts';\n\nconst useRealTotalAssetCurrency = () => {\n    const { client, traders_hub } = useStore();\n    const { current_fiat_currency, is_crypto, currency, default_currency } = client;\n    const { is_eu_user } = traders_hub;\n    const { real: platform_real_accounts } = usePlatformAccounts();\n\n    if (!platform_real_accounts.length) return default_currency;\n\n    const non_crypto_accounts = platform_real_accounts.find(account => !is_crypto(account.currency || 'USD'));\n\n    if (non_crypto_accounts) return non_crypto_accounts?.currency || '';\n\n    const currency_if_is_crypto = is_eu_user\n        ? current_fiat_currency || default_currency\n        : platform_real_accounts[0].currency;\n\n    return is_crypto() ? currency_if_is_crypto : currency;\n};\n\nexport default useRealTotalAssetCurrency;\n","import useRealTotalAssetCurrency from './useTotalAssetCurrency';\nimport { useExchangeRate } from './useExchangeRate';\n/**\n * we can use this hook to get the total balance of the given accounts list.\n * it loops through the accounts list and adds the balance of each account\n * to the total balance, it also converts the balance to the currency of the\n * first account in the list\n */\ntype TUseTotalAccountBalance = {\n    balance?: number;\n    currency?: string;\n    account_type?: string;\n};\n\nconst useTotalAccountBalance = (accounts: TUseTotalAccountBalance[]) => {\n    const total_assets_real_currency = useRealTotalAssetCurrency();\n    const { handleSubscription, getExchangeRate } = useExchangeRate();\n\n    if (!accounts.length) return { balance: 0, currency: total_assets_real_currency };\n\n    const balance = accounts.reduce((total, account) => {\n        const new_base = account?.account_type === 'demo' ? 'USD' : total_assets_real_currency || '';\n        const new_target = account.currency || total_assets_real_currency || '';\n\n        if (new_base !== new_target) handleSubscription(new_base, new_target);\n\n        const new_rate = getExchangeRate(new_base, new_target);\n\n        return total + (account.balance || 0) / new_rate;\n    }, 0);\n\n    return {\n        balance,\n        currency: total_assets_real_currency,\n    };\n};\n\nexport default useTotalAccountBalance;\n","import React from 'react';\nimport { Text, Popover } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport BalanceText from 'Components/elements/text/balance-text';\nimport { observer, useStore } from '@deriv/stores';\nimport './asset-summary.scss';\nimport TotalAssetsLoader from 'Components/pre-loader/total-assets-loader';\nimport {\n    useTotalAccountBalance,\n    useCFDAccounts,\n    usePlatformAccounts,\n    useTotalAssetCurrency,\n    useExchangeRate,\n} from '@deriv/hooks';\nimport { isRatesLoaded } from '../../helpers';\n\nconst AssetSummary = observer(() => {\n    const { isDesktop } = useDevice();\n    const {\n        traders_hub,\n        client,\n        common,\n        modules,\n        gtm: { pushDataLayer },\n    } = useStore();\n\n    const { selected_account_type, is_eu_user, no_CR_account, no_MF_account } = traders_hub;\n    const {\n        is_logging_in,\n        is_switching,\n        default_currency,\n        is_landing_company_loaded,\n        is_mt5_allowed,\n        is_populating_account_list,\n        is_populating_mt5_account_list,\n        is_populating_dxtrade_account_list,\n        is_populating_ctrader_account_list,\n    } = client;\n    const { account_transfer, general_store } = modules.cashier;\n    const { is_transfer_confirm } = account_transfer;\n    const { is_loading } = general_store;\n    const { current_language } = common;\n    const { real: platform_real_accounts, demo: platform_demo_account } = usePlatformAccounts();\n    const { real: cfd_real_accounts, demo: cfd_demo_accounts } = useCFDAccounts();\n\n    const is_still_waiting_for_loading_accounts =\n        is_populating_account_list ||\n        is_populating_mt5_account_list ||\n        is_populating_dxtrade_account_list ||\n        is_populating_ctrader_account_list;\n\n    const platform_real_balance = useTotalAccountBalance(platform_real_accounts);\n    const cfd_real_balance = useTotalAccountBalance(cfd_real_accounts);\n    const cfd_demo_balance = useTotalAccountBalance(cfd_demo_accounts);\n    const total_assets_real_currency = useTotalAssetCurrency();\n    const { exchange_rates } = useExchangeRate();\n\n    const is_real = selected_account_type === 'real';\n\n    const real_total_balance = platform_real_balance.balance + cfd_real_balance.balance;\n    const demo_total_balance = (platform_demo_account?.balance || 0) + cfd_demo_balance.balance;\n\n    const has_active_related_deriv_account = !((no_CR_account && !is_eu_user) || (no_MF_account && is_eu_user)); // if selected region is non-eu, check active cr accounts, if selected region is eu- check active mf accounts\n    const eu_account = is_eu_user && !no_MF_account;\n    const cr_account = !is_eu_user && !no_CR_account;\n\n    const eu_mt5_allowed_total_assets = is_mt5_allowed\n        ? localize('Total assets in your Deriv Apps and Deriv MT5 CFDs demo account.')\n        : localize('Total assets in your account.');\n\n    const should_show_loader =\n        ((is_switching || is_logging_in) && (eu_account || cr_account)) ||\n        !is_landing_company_loaded ||\n        is_loading ||\n        is_transfer_confirm ||\n        is_still_waiting_for_loading_accounts ||\n        !isRatesLoaded(is_real, total_assets_real_currency, platform_real_accounts, cfd_real_accounts, exchange_rates);\n\n    React.useEffect(() => {\n        if (!should_show_loader && is_real) {\n            if (real_total_balance == 0) {\n                pushDataLayer({ event: 'balance', value: false });\n            } else if (real_total_balance > 0) {\n                pushDataLayer({ event: 'balance', value: true });\n            }\n        }\n    }, [should_show_loader, is_real, pushDataLayer, real_total_balance]);\n\n    if (should_show_loader) {\n        return (\n            <React.Fragment>\n                <div className='asset-summary__container content-loader'>\n                    <TotalAssetsLoader />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    return (\n        <div className='asset-summary'>\n            {has_active_related_deriv_account || selected_account_type === 'demo' ? (\n                <React.Fragment>\n                    {isDesktop ? (\n                        <Text align='right' key={`asset-summary--key-${current_language}`} size='xs' line_height='s'>\n                            {localize('Total assets')}\n                        </Text>\n                    ) : null}\n                    <Popover\n                        alignment={isDesktop ? 'left' : 'top'}\n                        message={\n                            is_eu_user ? eu_mt5_allowed_total_assets : localize('Total assets in all your accounts')\n                        }\n                        zIndex={9999}\n                        is_bubble_hover_enabled\n                    >\n                        <BalanceText\n                            currency={\n                                is_real\n                                    ? platform_real_balance.currency || ''\n                                    : platform_demo_account?.currency || default_currency\n                            }\n                            balance={is_real ? real_total_balance : demo_total_balance}\n                            underline_style='dotted'\n                        />\n                    </Popover>\n                </React.Fragment>\n            ) : null}\n        </div>\n    );\n});\n\nexport default AssetSummary;\n","import React, { HTMLAttributes } from 'react';\nimport classNames from 'classnames';\nimport { Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { region_availability } from 'Constants/platform-config';\nimport RegulationsSwitcherLoader from 'Components/pre-loader/regulations-switcher-loader';\nimport { useStore, observer } from '@deriv/stores';\nimport './regulators-switcher.scss';\n\ntype SwitcherItemProps = {\n    onClick: () => void;\n    is_selected: boolean;\n};\n\nconst SwitcherItem = ({ children, is_selected, ...props }: SwitcherItemProps & HTMLAttributes<HTMLDivElement>) => {\n    return (\n        <div className={classNames('item', { 'is-selected': is_selected })} {...props}>\n            <Text size='xs' weight={is_selected ? 'bold' : 'normal'} color={is_selected ? 'prominent' : 'general'}>\n                {children}\n            </Text>\n        </div>\n    );\n};\n\nconst RegulatorSwitcher = observer(() => {\n    const { traders_hub, client } = useStore();\n    const { toggleRegulatorsCompareModal } = traders_hub;\n    const { is_switching } = client;\n\n    return (\n        <div className='regulators-switcher__container'>\n            <div className='regulators-switcher--text'>\n                <Text>{localize('Regulation:')}</Text>\n                <div\n                    data-testid='dt_regulators-switcher-icon'\n                    className='regulators-switcher--icon'\n                    onClick={() => toggleRegulatorsCompareModal()}\n                >\n                    <Icon icon='IcInfoOutline' />\n                </div>\n            </div>\n            {!is_switching ? (\n                <div className='regulators-switcher__switch'>\n                    {region_availability.map(region => {\n                        return (\n                            <SwitcherItem\n                                key={`regulator-item_${region}`}\n                                is_selected={region === traders_hub.selected_region}\n                                onClick={() => traders_hub.selectRegion(region)}\n                            >\n                                {region}\n                            </SwitcherItem>\n                        );\n                    })}\n                </div>\n            ) : (\n                <div className='regulators-switcher__container content-loader'>\n                    <RegulationsSwitcherLoader />\n                </div>\n            )}\n        </div>\n    );\n});\n\nexport default RegulatorSwitcher;\n","import React from 'react';\nimport { Text, Tabs, Icon, Loading } from '@deriv/components';\nimport { ContentFlag, makeLazyLoader, moduleLoader } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport RegulationsSwitcherLoader from 'Components/pre-loader/regulations-switcher-loader';\nimport AccountTypeDropdown from './account-type-dropdown';\nimport AssetSummary from './asset-summary';\nimport RegulatorSwitcher from './regulators-switcher';\nimport './main-title-bar.scss';\n\nconst WalletsBanner = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () => import(/* webpackChunkName: \"Components_wallets-banner\" */ 'Components/banners/wallets-banner')\n        ),\n    () => <Loading />\n)();\n\nconst MainTitleBar = () => {\n    const { isDesktop } = useDevice();\n    const { traders_hub, client } = useStore();\n    const { is_landing_company_loaded, is_switching, has_maltainvest_account } = client;\n    const { selected_region, handleTabItemClick, toggleRegulatorsCompareModal, content_flag } = traders_hub;\n\n    const is_low_risk_cr_real_account =\n        content_flag === ContentFlag.LOW_RISK_CR_NON_EU || content_flag === ContentFlag.LOW_RISK_CR_EU;\n\n    const [active_index, setActiveIndex] = React.useState(0);\n    React.useEffect(() => {\n        setActiveIndex(selected_region === 'Non-EU' ? 0 : 1);\n    }, [selected_region]);\n\n    return (\n        <React.Fragment>\n            {isDesktop ? (\n                <div className='main-title-bar'>\n                    <div className='main-title-bar__right'>\n                        <Text size='m' weight='bold' color='prominent'>\n                            <Localize i18n_default_text=\"Trader's Hub\" />\n                        </Text>\n                        <AccountTypeDropdown />\n                    </div>\n                    {is_low_risk_cr_real_account && has_maltainvest_account && is_landing_company_loaded && (\n                        <RegulatorSwitcher />\n                    )}\n                    <AssetSummary />\n                </div>\n            ) : (\n                <React.Fragment>\n                    <Text weight='bold' className='main-title-bar__text' color='prominent'>\n                        <Localize i18n_default_text=\"Trader's Hub\" />\n                    </Text>\n                    <div className='main-title-bar-mobile'>\n                        <div className='main-title-bar-mobile--account-type-dropdown'>\n                            <AccountTypeDropdown />\n                        </div>\n                        {is_low_risk_cr_real_account && has_maltainvest_account && is_landing_company_loaded ? (\n                            <div className='main-title-bar-mobile--regulator'>\n                                {!is_switching ? (\n                                    <>\n                                        <div\n                                            className='main-title-bar-mobile--regulator--compare-modal'\n                                            onClick={() => toggleRegulatorsCompareModal()}\n                                        >\n                                            <Icon icon='IcInfoOutline' />\n                                        </div>\n                                        <Tabs\n                                            active_index={active_index}\n                                            onTabItemClick={(index: number) => {\n                                                setActiveIndex(index);\n                                                handleTabItemClick(index);\n                                            }}\n                                            top\n                                            is_scrollable\n                                            is_overflow_hidden\n                                        >\n                                            <div label={localize('Non-EU')} />\n                                            <div label={localize('EU')} />\n                                        </Tabs>\n                                    </>\n                                ) : (\n                                    <div className='main-title-bar-mobile--regulator__container content-loader'>\n                                        <RegulationsSwitcherLoader />\n                                    </div>\n                                )}\n                            </div>\n                        ) : null}\n                    </div>\n                    <AssetSummary />\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default observer(MainTitleBar);\n","import React, { useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Text, StaticUrl } from '@deriv/components';\nimport { ContentFlag, setPerformanceValue, cacheTrackEvents } from '@deriv/shared';\nimport { useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport ListingContainer from 'Components/containers/listing-container';\nimport TradingAppCard from 'Components/containers/trading-app-card';\nimport { BrandConfig } from 'Constants/platform-config';\nimport { getHasDivider } from 'Constants/utils';\nimport PlatformLoader from 'Components/pre-loader/platform-loader';\nimport OptionsDescription from 'Components/elements/options-description';\n\nconst OptionsAndMultipliersListing = observer(() => {\n    const { isDesktop } = useDevice();\n    const { traders_hub, client, ui } = useStore();\n    const {\n        available_platforms,\n        is_eu_user,\n        is_real,\n        no_MF_account,\n        no_CR_account,\n        is_demo,\n        content_flag,\n        selected_account_type,\n    } = traders_hub;\n    const { is_landing_company_loaded, is_eu, has_maltainvest_account, real_account_creation_unlock_date } = client;\n\n    const { setShouldShowCooldownModal, openRealAccountSignup } = ui;\n\n    const low_risk_cr_non_eu = content_flag === ContentFlag.LOW_RISK_CR_NON_EU;\n\n    const low_risk_cr_eu = content_flag === ContentFlag.LOW_RISK_CR_EU;\n\n    const high_risk_cr = content_flag === ContentFlag.HIGH_RISK_CR;\n\n    const cr_demo = content_flag === ContentFlag.CR_DEMO;\n\n    const [is_traders_dashboard_tracking_enabled] = useGrowthbookGetFeatureValue({\n        featureFlag: 'ce_tradershub_dashboard_tracking',\n        defaultValue: false,\n    });\n\n    const OptionsTitle = () => {\n        if (!isDesktop) return null;\n        if (low_risk_cr_non_eu || high_risk_cr || cr_demo) {\n            return (\n                <Text size='sm' weight='bold'>\n                    <Localize i18n_default_text='Options' />\n                </Text>\n            );\n        } else if (low_risk_cr_eu || is_eu) {\n            return (\n                <Text size='sm' weight='bold' color='prominent'>\n                    <Localize i18n_default_text='Multipliers' />\n                </Text>\n            );\n        }\n        return null;\n    };\n\n    useEffect(() => {\n        if (is_landing_company_loaded) {\n            setPerformanceValue('option_multiplier_section_loading_time');\n        }\n    }, [is_landing_company_loaded]);\n\n    return (\n        <ListingContainer\n            title={<OptionsTitle />}\n            description={<OptionsDescription is_eu_user={!(low_risk_cr_non_eu || high_risk_cr || cr_demo)} />}\n            is_deriv_platform\n        >\n            {is_real && (no_CR_account || no_MF_account) && (\n                <div className='full-row'>\n                    <TradingAppCard\n                        action_type='get'\n                        availability='All'\n                        clickable_icon\n                        name={localize('Deriv account')}\n                        description={\n                            is_eu_user\n                                ? localize('To trade multipliers, get a Deriv Apps account first.')\n                                : localize('To trade options and multipliers, get a Deriv Apps account first.')\n                        }\n                        icon='Options'\n                        onAction={() => {\n                            if (no_MF_account) {\n                                if (real_account_creation_unlock_date) {\n                                    setShouldShowCooldownModal(true);\n                                } else {\n                                    openRealAccountSignup('maltainvest');\n                                }\n                            } else {\n                                openRealAccountSignup('svg');\n                            }\n                        }}\n                    />\n                </div>\n            )}\n\n            {!available_platforms.length && <PlatformLoader />}\n            {available_platforms.map((available_platform: BrandConfig, index: number) => (\n                <TradingAppCard\n                    key={`trading_app_card_${available_platform.name}`}\n                    {...available_platform}\n                    clickable_icon\n                    action_type={\n                        is_demo || (!no_CR_account && !is_eu_user) || (has_maltainvest_account && is_eu_user)\n                            ? 'trade'\n                            : 'none'\n                    }\n                    is_deriv_platform\n                    onAction={() => {\n                        if (is_traders_dashboard_tracking_enabled) {\n                            cacheTrackEvents.loadEvent([\n                                {\n                                    event: {\n                                        name: 'ce_tradershub_dashboard_form',\n                                        properties: {\n                                            action: 'account_open',\n                                            form_name: 'traders_hub_default',\n                                            account_mode: selected_account_type,\n                                            account_name: is_demo\n                                                ? `${available_platform.name} Demo`\n                                                : available_platform.name,\n                                        },\n                                    },\n                                },\n                            ]);\n                        }\n                    }}\n                    has_divider={(!is_eu_user || is_demo) && getHasDivider(index, available_platforms.length, 3)}\n                />\n            ))}\n        </ListingContainer>\n    );\n});\n\nexport default OptionsAndMultipliersListing;\n","import ContentLoader from 'react-content-loader';\nimport React from 'react';\nimport { MobileWrapper } from '@deriv/components';\n\nconst ButtonToggleLoader = () => (\n    <ContentLoader\n        height={80}\n        backgroundColor={'var(--general-section-1)'}\n        foregroundColor={'var(--general-hover)'}\n        width={500}\n    >\n        <MobileWrapper>\n            <rect x='10' y='35' rx='5' ry='5' width='330' height='45' />\n        </MobileWrapper>\n    </ContentLoader>\n);\n\nexport default ButtonToggleLoader;\n","import React, { useEffect } from 'react';\nimport { useContentFlag, useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { observer, useStore } from '@deriv/stores';\nimport { Jurisdiction } from '@deriv/shared';\n\nconst AfterSignupFlow = observer(() => {\n    const { client, ui, traders_hub } = useStore();\n    const { openRealAccountSignup, is_from_signup_account, setIsFromSignupAccount } = ui;\n    const { is_logged_in, has_active_real_account } = client;\n    const { setIsSetupRealAccountOrGoToDemoModalVisible } = traders_hub;\n\n    const { is_cr_demo, is_eu_demo } = useContentFlag();\n\n    const [direct_to_real_account_creation] = useGrowthbookGetFeatureValue({\n        featureFlag: 'direct-real-account-creation-flow',\n        defaultValue: false,\n    });\n\n    const [show_setup_real_or_go_demo] = useGrowthbookGetFeatureValue({\n        featureFlag: 'show_setup_real_or_go_demo',\n        defaultValue: false,\n    });\n\n    useEffect(() => {\n        if (!has_active_real_account && is_from_signup_account && is_logged_in) {\n            // move the user directly to setup real account\n            if (direct_to_real_account_creation && !show_setup_real_or_go_demo) {\n                if (is_cr_demo) {\n                    openRealAccountSignup(Jurisdiction.SVG);\n                    setIsFromSignupAccount(false);\n                } else if (is_eu_demo) {\n                    openRealAccountSignup(Jurisdiction.MALTA_INVEST);\n                    setIsFromSignupAccount(false);\n                }\n            }\n\n            // show setup real or go to demo modal for user\n            if (!direct_to_real_account_creation && show_setup_real_or_go_demo) {\n                setIsSetupRealAccountOrGoToDemoModalVisible(true);\n                setIsFromSignupAccount(false);\n            }\n        }\n    }, [\n        is_cr_demo,\n        is_eu_demo,\n        has_active_real_account,\n        is_from_signup_account,\n        is_logged_in,\n        direct_to_real_account_creation,\n        openRealAccountSignup,\n        setIsFromSignupAccount,\n    ]);\n\n    return null;\n});\n\nexport default AfterSignupFlow;\n","import AfterSignupFlow from './after-signup-flow';\n\nexport default AfterSignupFlow;\n","import { useStore } from '@deriv/stores';\n\n/**\n * A custom hook to check whether the current account has deposited based on statement from the client store\n * This hook should be used in the component wrapped by observer\n */\nconst useStoreHasAccountDeposited = () => {\n    const { client } = useStore();\n    const { statement } = client;\n\n    const count = statement?.count ?? 0;\n    const transactions = statement?.transactions ?? [];\n    const hasDeposited = transactions.some(tx => tx.action_type === 'deposit');\n    const hasTransferred = transactions.some(tx => tx.action_type === 'transfer' && tx.amount && tx.amount > 0);\n    const isLoaded = statement?.count !== undefined && statement?.transactions !== undefined;\n\n    return { count, transactions, hasDeposited, hasTransferred, isLoaded };\n};\n\nexport default useStoreHasAccountDeposited;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { Analytics } from '@deriv-com/analytics';\nimport { SessionStore, cacheTrackEvents } from '@deriv/shared';\nimport { getAllowedLanguages, Localize } from '@deriv/translations';\nimport { LabelPairedCircleChevronDownXlBoldIcon, LabelPairedXmarkLgBoldIcon } from '@deriv/quill-icons';\nimport { TEbooksUrl } from 'Components/banners/book-banner/book-banner';\n\ntype TBookBannerTemplate = {\n    e_book_show_way: string;\n    e_books_url: TEbooksUrl;\n    e_book_from_landing: keyof TEbooksUrl;\n    lang: ReturnType<typeof getAllowedLanguages>;\n};\n\nconst BookBannerTemplate = ({ e_book_show_way, e_books_url, e_book_from_landing, lang }: TBookBannerTemplate) => {\n    const [is_banner_shows, setIsBannerShows] = React.useState(true);\n    const { traders_hub, ui } = useStore();\n    const { selected_account_type } = traders_hub;\n    const analytics_data: Parameters<typeof Analytics.trackEvent>[1] = {\n        banner_name: e_book_from_landing,\n        account_mode: selected_account_type,\n    };\n\n    React.useEffect(() => {\n        cacheTrackEvents.loadEvent([\n            {\n                event: {\n                    name: 'ce_tradershub_banner',\n                    properties: {\n                        action: 'open',\n                        ...analytics_data,\n                    },\n                },\n            },\n        ]);\n    }, []);\n\n    return (\n        <React.Fragment>\n            {is_banner_shows ? (\n                <div id='e-book-banner' className='book-banner-template'>\n                    <div className='book-banner-template__left'>\n                        <LabelPairedCircleChevronDownXlBoldIcon width='24' height='24' fill='#00822A' />\n                        {e_book_show_way === 'banner-with-link' ? (\n                            <div className='book-banner-template__content'>\n                                <label>\n                                    <Localize i18n_default_text='We’ve sent your e-book to your email. You can also download it here.' />\n                                </label>\n                                <a\n                                    href={e_books_url[e_book_from_landing][lang] || e_books_url[e_book_from_landing].EN}\n                                    target='_blank'\n                                    rel='noopener noreferrer'\n                                    onClick={() => {\n                                        cacheTrackEvents.loadEvent([\n                                            {\n                                                event: {\n                                                    name: 'ce_tradershub_banner',\n                                                    properties: {\n                                                        action: 'click download',\n                                                        ...analytics_data,\n                                                    },\n                                                },\n                                            },\n                                        ]);\n                                    }}\n                                >\n                                    <Localize i18n_default_text='Download e-book' />\n                                </a>\n                            </div>\n                        ) : (\n                            <div className='book-banner-template__content'>\n                                <label>\n                                    <Localize i18n_default_text='We’ve sent your e-book. Check your email to download it.' />\n                                </label>\n                            </div>\n                        )}\n                    </div>\n                    <LabelPairedXmarkLgBoldIcon\n                        className='book-banner-template__cancel'\n                        width='24'\n                        height='24'\n                        fill='var(--text-prominent)'\n                        onClick={() => {\n                            cacheTrackEvents.loadEvent([\n                                {\n                                    event: {\n                                        name: 'ce_tradershub_banner',\n                                        properties: {\n                                            action: 'close',\n                                            ...analytics_data,\n                                        },\n                                    },\n                                },\n                            ]);\n                            SessionStore.remove('show_book');\n                            setIsBannerShows(false);\n                        }}\n                    />\n                </div>\n            ) : null}\n        </React.Fragment>\n    );\n};\n\nexport default BookBannerTemplate;\n","import React from 'react';\nimport { SessionStore } from '@deriv/shared';\nimport { getAllowedLanguages, getLanguage } from '@deriv/translations';\nimport { Analytics } from '@deriv-com/analytics';\nimport BookBannerTemplate from 'Components/banners/book-banner/banner-template';\n\ntype TEbooks = 'forex-ebook' | 'stock-ebook' | 'cryptocurrencies-ebook' | 'synthetic-indices-ebook' | 'chart-patterns';\nexport type TEbooksUrl = { [B in TEbooks]: Record<keyof ReturnType<typeof getAllowedLanguages>, string> };\n\nconst e_books_url: TEbooksUrl = {\n    'forex-ebook': {\n        EN: 'https://deriv.link/ebook-forex-en-lq',\n        FR: 'https://deriv.link/ebook-forex-fr-lq',\n        PT: 'https://deriv.link/ebook-forex-pt-lq',\n        ES: 'https://deriv.link/ebook-forex-sp-lq',\n        VI: 'https://deriv.link/ebook-forex-vn-lq',\n    },\n    'stock-ebook': {\n        EN: 'https://deriv.link/ebook-stocks-en-lq',\n        FR: 'https://deriv.link/ebook-stocks-fr-lq',\n        PT: 'https://deriv.link/ebook-stocks-pt-lq',\n        ES: 'https://deriv.link/ebook-stocks-sp-lq',\n    },\n    'cryptocurrencies-ebook': {\n        EN: 'https://deriv.link/ebook-crypto-en-lq',\n        FR: 'https://deriv.link/ebook-crypto-fr-lq',\n        PT: 'https://deriv.link/ebook-crypto-pt-lq',\n        ES: 'https://deriv.link/ebook-crypto-fr-lq',\n    },\n    'synthetic-indices-ebook': {\n        EN: 'https://deriv.link/ebook-synthetics-en-lq',\n        FR: 'https://deriv.link/ebook-synthetics-fr-lq',\n        PT: 'https://deriv.link/ebook-synthetics-pt-lq',\n        ES: 'https://deriv.link/ebook-synthetics-sp-lq',\n        VI: 'https://deriv.link/ebook-synthetics-vn-lq',\n    },\n    'chart-patterns': {\n        EN: 'https://deriv.link/ebook-10chart-en-lq',\n        FR: 'https://deriv.link/ebook-10charts-fr-lq',\n        PT: 'https://deriv.link/ebook-10charts-pt-lq',\n        ES: 'https://deriv.link/ebook-10charts-sp-lq',\n    },\n};\nconst e_book_show_way: string = Analytics.getFeatureValue('e_book', 'inactive');\n\nconst BookBanner = () => {\n    const e_book_from_landing: TEbooks = SessionStore.get('show_book');\n    const lang = getLanguage();\n\n    if (e_book_from_landing && e_book_show_way?.includes('banner')) {\n        return (\n            <BookBannerTemplate\n                e_book_show_way={e_book_show_way}\n                e_books_url={e_books_url}\n                e_book_from_landing={e_book_from_landing}\n                lang={lang}\n            />\n        );\n    }\n    // Will be a part of upcoming a/b experiment\n    // if (e_book && e_book_show_way === 'popup') return ( <BookPopupTemplate e_books_url={e_books_url} e_book={e_book} lang={lang} />)\n    return null;\n};\n\nexport default BookBanner;\n","import BookBanner from './book-banner';\nimport './book-banner.scss';\n\nexport default BookBanner;\n","import React from 'react';\nimport { Loading } from '@deriv/components';\nimport { useStore, observer } from '@deriv/stores';\nimport { makeLazyLoader, moduleLoader } from '@deriv/shared';\nimport { useContentFlag, useGrowthbookGetFeatureValue, useStoreHasAccountDeposited } from '@deriv/hooks';\nimport BookBanner from 'Components/banners/book-banner';\nimport WalletsBanner from 'Components/banners/wallets-banner';\n\nconst RealAccountCreationBanner = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"Components_banners_real-account-creation-banner\" */ 'Components/banners/real-account-creation-banner'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst DepositNowBanner = makeLazyLoader(\n    () =>\n        moduleLoader(\n            () =>\n                import(\n                    /* webpackChunkName: \"Components_banners_deposit-now-banner\" */ 'Components/banners/deposit-now-banner'\n                )\n        ),\n    () => <Loading />\n)();\n\nconst TradersHubBanners = observer(() => {\n    const { client, traders_hub } = useStore();\n    const { is_landing_company_loaded, has_any_real_account, is_eu, has_maltainvest_account, is_low_risk } = client;\n    const { is_real } = traders_hub;\n    const { hasDeposited, hasTransferred, isLoaded } = useStoreHasAccountDeposited();\n\n    const [ff_real_account_creation_banner] = useGrowthbookGetFeatureValue({\n        featureFlag: 'traders-hub-real-account-banner',\n        defaultValue: false,\n    });\n\n    const [ff_deposit_now_banner] = useGrowthbookGetFeatureValue({\n        featureFlag: 'traders_hub_first_deposit_banner',\n        defaultValue: false,\n    });\n\n    const should_add_empty_div_for_get_started_trading_banner_clever_tap = has_any_real_account;\n    const should_show_real_account_creation_banner =\n        ff_real_account_creation_banner && !has_any_real_account && !is_eu && is_landing_company_loaded;\n    const should_show_deposit_now_banner =\n        ff_deposit_now_banner &&\n        is_real &&\n        !(is_low_risk && has_maltainvest_account) &&\n        isLoaded &&\n        !hasDeposited &&\n        !hasTransferred;\n\n    return (\n        <React.Fragment>\n            {should_add_empty_div_for_get_started_trading_banner_clever_tap && (\n                <div className='get-started-trading-banner-ct' />\n            )}\n            {should_show_real_account_creation_banner && <RealAccountCreationBanner />}\n            {should_show_deposit_now_banner && <DepositNowBanner />}\n            <BookBanner />\n            <WalletsBanner />\n        </React.Fragment>\n    );\n});\n\nexport default TradersHubBanners;\n","import TradersHubBanners from './traders-hub-banners';\n\nexport default TradersHubBanners;\n","import React from 'react';\nimport { InlineMessage, Text } from '@deriv-com/ui';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { formatDate } from '@deriv/shared';\nimport './business-closure-banner.scss';\n\nconst BusinessClosureBanner = observer(() => {\n    const { client } = useStore();\n    const { is_account_to_be_closed_by_residence, account_time_of_closure } = client;\n\n    if (!is_account_to_be_closed_by_residence) return null;\n\n    return (\n        <InlineMessage type='filled' variant='warning' className='business-closure-banner'>\n            <Text size='xs'>\n                <Localize\n                    i18n_default_text='Due to business changes, client accounts in your country are to be closed. Deposits and trading are disabled. Withdraw your funds by {{date}}.'\n                    values={{\n                        date: formatDate(account_time_of_closure, 'DD MMM YYYY'),\n                    }}\n                />\n            </Text>\n        </InlineMessage>\n    );\n});\n\nexport default BusinessClosureBanner;\n","import BusinessClosureBanner from './business-closure-banner';\n\nexport default BusinessClosureBanner;\n","import React from 'react';\nimport { ButtonToggle, Div100vhContainer, Text } from '@deriv/components';\nimport { routes, checkServerMaintenance, startPerformanceEventTimer } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { useContentFlag } from '@deriv/hooks';\nimport { useDevice } from '@deriv-com/ui';\nimport CFDsListing from 'Components/cfds-listing';\nimport ModalManager from 'Components/modals/modal-manager';\nimport MainTitleBar from 'Components/main-title-bar';\nimport OptionsAndMultipliersListing from 'Components/options-multipliers-listing';\nimport ButtonToggleLoader from 'Components/pre-loader/button-toggle-loader';\nimport AfterSignupFlow from 'Components/after-signup-flow';\nimport Disclaimer from 'Components/disclaimer';\nimport TradersHubBanners from 'Components/banners/traders-hub-banners';\nimport BusinessClosureBanner from 'Components/banners/business-closure-banner';\nimport classNames from 'classnames';\nimport './traders-hub.scss';\n\ntype OrderedPlatformSectionsProps = {\n    is_cfd_visible?: boolean;\n    is_options_and_multipliers_visible?: boolean;\n};\n\nconst OrderedPlatformSections = observer(\n    ({ is_cfd_visible = true, is_options_and_multipliers_visible = true }: OrderedPlatformSectionsProps) => {\n        const {\n            traders_hub: { selected_region, is_eu_user },\n        } = useStore();\n\n        return (\n            <div\n                data-testid='dt_traders_hub'\n                className={classNames('traders-hub__main-container', {\n                    'traders-hub__main-container-reversed': is_eu_user || selected_region === 'EU',\n                })}\n            >\n                {is_options_and_multipliers_visible && <OptionsAndMultipliersListing />}\n                {is_cfd_visible && <CFDsListing />}\n            </div>\n        );\n    }\n);\n\nconst TradersHub = observer(() => {\n    const { isDesktop } = useDevice();\n    const { traders_hub, client, ui } = useStore();\n    const { notification_messages_ui: Notifications } = ui;\n    const {\n        is_landing_company_loaded,\n        is_logged_in,\n        is_switching,\n        is_logging_in,\n        is_account_setting_loaded,\n        is_mt5_allowed,\n        website_status,\n    } = client;\n\n    const { is_eu_demo, is_eu_real } = useContentFlag();\n    const {\n        selected_platform_type,\n        setTogglePlatformType,\n        is_eu_user,\n        combined_cfd_mt5_accounts,\n        available_ctrader_accounts,\n        available_dxtrade_accounts,\n    } = traders_hub;\n    const traders_hub_ref = React.useRef<HTMLDivElement>(null);\n\n    const can_show_notify =\n        (!is_switching && !is_logging_in && is_account_setting_loaded && is_landing_company_loaded) ||\n        checkServerMaintenance(website_status);\n\n    React.useEffect(() => {\n        if (is_eu_user) {\n            setTogglePlatformType('cfd');\n        }\n    }, [is_eu_user, setTogglePlatformType]);\n\n    React.useEffect(() => {\n        if (is_eu_user) setTogglePlatformType('cfd');\n    }, [is_eu_user, setTogglePlatformType]);\n\n    React.useLayoutEffect(() => {\n        startPerformanceEventTimer('option_multiplier_section_loading_time');\n    }, []);\n\n    const eu_title = is_eu_demo || is_eu_real || is_eu_user;\n    const getPlatformToggleOptions = () => [\n        { text: eu_title ? localize('Multipliers') : localize('Options'), value: 'options' },\n        { text: localize('CFDs'), value: 'cfd' },\n    ];\n    const platform_toggle_options = getPlatformToggleOptions();\n    const platform_toggle_options_eu = getPlatformToggleOptions().reverse();\n\n    const platformTypeChange = (event: {\n        target: {\n            value: string;\n            name: string;\n        };\n    }) => {\n        setTogglePlatformType(event.target.value);\n    };\n    if (!is_logged_in) return null;\n    const is_cfd_accounts_supported =\n        combined_cfd_mt5_accounts.length || available_dxtrade_accounts.length || available_ctrader_accounts.length;\n    const should_show_cfd_section = !!(is_mt5_allowed && is_cfd_accounts_supported);\n\n    const getOrderedPlatformSections = () => {\n        if (should_show_cfd_section) {\n            return (\n                <OrderedPlatformSections\n                    is_cfd_visible={selected_platform_type === 'cfd'}\n                    is_options_and_multipliers_visible={selected_platform_type === 'options'}\n                />\n            );\n        }\n        return <OrderedPlatformSections is_cfd_visible={false} is_options_and_multipliers_visible={true} />;\n    };\n\n    const desktopContent = !is_landing_company_loaded ? (\n        <OrderedPlatformSections />\n    ) : (\n        <OrderedPlatformSections is_cfd_visible={should_show_cfd_section} />\n    );\n\n    const mobileTabletContent = (\n        <React.Fragment>\n            {is_landing_company_loaded ? (\n                should_show_cfd_section && (\n                    <ButtonToggle\n                        buttons_arr={is_eu_user ? platform_toggle_options_eu : platform_toggle_options}\n                        className='traders-hub__button-toggle'\n                        has_rounded_button\n                        is_traders_hub={window.location.pathname === routes.traders_hub}\n                        name='platform_type'\n                        onChange={platformTypeChange}\n                        value={selected_platform_type}\n                    />\n                )\n            ) : (\n                <ButtonToggleLoader />\n            )}\n            {is_landing_company_loaded && !should_show_cfd_section && (\n                <div className='traders-hub--mt5-not-allowed'>\n                    <Text size='s' weight='bold' color='prominent'>\n                        <Localize i18n_default_text='Multipliers' />\n                    </Text>\n                </div>\n            )}\n            {getOrderedPlatformSections()}\n        </React.Fragment>\n    );\n\n    return (\n        <React.Fragment>\n            <AfterSignupFlow />\n            <BusinessClosureBanner />\n            <Div100vhContainer className='traders-hub--mobile' height_offset='50px' is_disabled={isDesktop}>\n                {can_show_notify && <Notifications />}\n                <div\n                    id='traders-hub'\n                    className={classNames('traders-hub', {\n                        'traders-hub--eu-user': is_eu_user && should_show_cfd_section,\n                        'traders-hub--eu-user-without-mt5': is_eu_user && !should_show_cfd_section,\n                    })}\n                    ref={traders_hub_ref}\n                >\n                    <TradersHubBanners />\n                    <MainTitleBar />\n                    {isDesktop ? desktopContent : mobileTabletContent}\n                    <ModalManager />\n                </div>\n            </Div100vhContainer>\n            {is_eu_user && <Disclaimer />}\n        </React.Fragment>\n    );\n});\n\nexport default TradersHub;\n","export const CFD_PLATFORMS = {\n    MT5: 'mt5',\n    DXTRADE: 'dxtrade',\n    CTRADER: 'ctrader',\n    CFD: 'cfd',\n    CFDS: 'CFDs',\n} as const;\n\nexport const CATEGORY = {\n    DEMO: 'demo',\n    REAL: 'real',\n} as const;\n\nexport const MARKET_TYPE = {\n    SYNTHETIC: 'synthetic',\n    GAMING: 'gaming',\n    FINANCIAL: 'financial',\n    ALL: 'all',\n} as const;\n\nexport const PRODUCT = {\n    SWAPFREE: 'swap_free',\n    ZEROSPREAD: 'zero_spread',\n    CTRADER: 'ctrader',\n    DERIVX: 'derivx',\n    STP: 'stp',\n    GOLD: 'gold',\n} as const;\n\nexport const MOBILE_PLATFORMS = {\n    IOS: 'ios',\n    HAUWEI: 'huawei',\n    ANDROID: 'android',\n} as const;\n\nexport const DESKTOP_PLATFORMS = {\n    WINDOWS: 'windows',\n    LINUX: 'linux',\n    MACOS: 'macos',\n} as const;\n\nexport const REGION = {\n    EU: 'EU',\n    NON_EU: 'Non-EU',\n} as const;\n\nexport const JURISDICTION = {\n    SVG: 'svg',\n    BVI: 'bvi',\n    VANUATU: 'vanuatu',\n    LABUAN: 'labuan',\n    MALTA_INVEST: 'maltainvest',\n} as const;\n\nexport const MARKET_TYPE_SHORTCODE = {\n    SYNTHETIC: 'synthetic',\n    GAMING: 'gaming',\n    FINANCIAL: 'financial',\n    FINANCIAL_LABUAN: 'financial_stp_labuan',\n    FINANCIAL_MALTA_INVEST: 'financial_maltainvest',\n    FINANCIAL_GOLD: 'financial_gold',\n    CFDS_GOLD: 'CFDs_gold',\n    ALL_SWAP_FREE_SVG: 'all_swap_free_svg',\n    ALL_ZERO_SPREAD_BVI: 'all_zero_spread_bvi',\n    ALL_ZS_BVI: 'all_bvi',\n    ALL_DXTRADE: 'all_',\n} as const;\n\nexport const QUERY_STATUS = {\n    SUCCESS: 'success',\n    ERROR: 'error',\n    IDLE: 'idle',\n    LOADING: 'loading',\n} as const;\n\nexport const PASSWORD_TYPE = {\n    INVESTOR: 'investor',\n} as const;\n","import { Jurisdiction, PRODUCT } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TProducts } from 'Components/props.types';\n\nexport type TDxCompanies = ReturnType<typeof getDxCompanies>;\nexport type TMtCompanies = ReturnType<typeof getMtCompanies>;\nexport type TCTraderCompanies = ReturnType<typeof getCTraderCompanies>;\n\nexport const getDxCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('CFDs'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Standard'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: localize('Financial'),\n    };\n    return {\n        demo: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getCTraderCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('All'),\n    };\n    return {\n        demo: {\n            all: {\n                ctrader_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('All'),\n                short_title: all_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getMtCompanies = (is_eu: boolean, product?: TProducts) => {\n    const all_config = {\n        account_type: '',\n        leverage: 100,\n        short_title: product === 'swap_free' ? localize('Swap-Free') : localize('Zero Spread'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Standard'),\n    };\n\n    let financial_title;\n    switch (product) {\n        case PRODUCT.STP:\n            financial_title = localize('Financial STP');\n            break;\n        case PRODUCT.GOLD:\n            financial_title = localize('Gold');\n            break;\n        default:\n            financial_title = localize('Financial');\n    }\n\n    const financial_demo_title = product === PRODUCT.GOLD ? localize('Demo Gold') : localize('Demo Financial');\n    const financial_demo_title_eu = product === PRODUCT.GOLD ? localize('Demo Gold') : localize('Demo CFDs');\n    const financial_demo_short_title = product === PRODUCT.GOLD ? localize('Gold') : localize('Deriv CFDs');\n    const financial_title_eu = product === PRODUCT.GOLD ? localize('Deriv Gold') : localize('Deriv CFDs');\n\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: is_eu ? financial_demo_short_title : financial_title,\n    };\n    const financial_stp_config = {\n        account_type: 'financial_stp',\n        leverage: 100,\n        short_title: localize('Financial STP'),\n    };\n\n    return {\n        demo: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: product === 'swap_free' ? localize('Demo Swap-Free') : localize('Demo Zero Spread'),\n                short_title: all_config.short_title,\n            },\n            all_swap_free_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free SVG'),\n                short_title: localize('Swap-Free SVG'),\n            },\n            all_zero_spread_bvi: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Zero Spread BVI'),\n                short_title: localize('Zero Spread BVI'),\n            },\n            ctrader: {\n                mt5_account_type: all_config.account_type,\n                leverage: '500',\n                title: localize('Demo'),\n                short_title: localize('cTrader'),\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? financial_demo_title_eu : financial_demo_title,\n                short_title: financial_config.short_title,\n            },\n            financial_demo: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Standard SVG'),\n                short_title: synthetic_config.short_title,\n            },\n\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial SVG'),\n                short_title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Demo Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: product === 'swap_free' ? localize('Swap-Free') : localize('Zero Spread'),\n                short_title: all_config.short_title,\n            },\n            all_swap_free_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free SVG'),\n                short_title: all_config.short_title,\n            },\n            all_zero_spread_bvi: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Zero Spread BVI'),\n                short_title: all_config.short_title,\n            },\n            ctrader: {\n                mt5_account_type: all_config.account_type,\n                leverage: '500',\n                title: localize('Real'),\n                short_title: localize('cTrader'),\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard SVG'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_bvi: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard BVI'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_v: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard Vanuatu'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? financial_title_eu : financial_title,\n                short_title: financial_config.short_title,\n            },\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n                short_title: financial_config.short_title,\n            },\n            financial_bvi: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial BVI'),\n                short_title: financial_config.short_title,\n            },\n            financial_fx: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Labuan'),\n                short_title: financial_config.short_title,\n            },\n            financial_v: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Vanuatu'),\n                short_title: financial_config.short_title,\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getFormattedJurisdictionCode = (jurisdiction_code: string) => {\n    let formatted_label = '';\n\n    switch (jurisdiction_code) {\n        case Jurisdiction.SVG:\n            formatted_label = localize('SVG');\n            break;\n        case Jurisdiction.BVI:\n            formatted_label = localize('BVI');\n            break;\n        case Jurisdiction.LABUAN:\n            formatted_label = localize('Labuan');\n            break;\n        case Jurisdiction.VANUATU:\n            formatted_label = localize('Vanuatu');\n            break;\n        case Jurisdiction.MALTA_INVEST:\n            formatted_label = localize('Malta');\n            break;\n        default:\n            formatted_label = jurisdiction_code?.toUpperCase();\n            break;\n    }\n\n    return formatted_label;\n};\n","import { ContentFlag } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\n\nconst useContentFlag = () => {\n    const { traders_hub } = useStore();\n    const content_flag = traders_hub?.content_flag;\n\n    return {\n        is_low_risk_cr_non_eu: content_flag === ContentFlag.LOW_RISK_CR_NON_EU,\n        is_low_risk_cr_eu: content_flag === ContentFlag.LOW_RISK_CR_EU,\n        is_high_risk_cr: content_flag === ContentFlag.HIGH_RISK_CR,\n        is_cr_demo: content_flag === ContentFlag.CR_DEMO,\n        is_eu_demo: content_flag === ContentFlag.EU_DEMO,\n        is_eu_real: content_flag === ContentFlag.EU_REAL,\n    };\n};\n\nexport default useContentFlag;\n","import { useStore } from '@deriv/stores';\n\nexport const useExchangeRate = () => {\n    const { client } = useStore();\n    const {\n        exchange_rates,\n        subscribeToExchangeRate,\n        getExchangeRate,\n        unsubscribeFromExchangeRate,\n        unsubscribeFromAllExchangeRates,\n    } = client;\n\n    return {\n        handleSubscription: subscribeToExchangeRate,\n        exchange_rates,\n        getExchangeRate,\n        unsubscribe: unsubscribeFromExchangeRate,\n        unsubscribeAll: unsubscribeFromAllExchangeRates,\n    };\n};\n\nexport default useExchangeRate;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { Jurisdiction, getFormattedJurisdictionCode } from '@deriv/shared';\n\nconst useMT5SVGEligibleToMigrate = () => {\n    const { client, traders_hub } = useStore();\n    const { mt5_login_list } = client;\n    const { show_eu_related_content } = traders_hub;\n\n    const mt5_migration_config = React.useMemo(() => {\n        const svg_accounts_to_migrate = mt5_login_list.filter(\n            account => account.landing_company_short === Jurisdiction.SVG && !!account.eligible_to_migrate\n        );\n\n        const has_svg_accounts_to_migrate = !!svg_accounts_to_migrate.length && !show_eu_related_content;\n\n        const no_of_svg_accounts_to_migrate = svg_accounts_to_migrate.length;\n\n        const is_eligible_for_svg_to_bvi_migration = !!svg_accounts_to_migrate.filter(account =>\n            Object.values(account.eligible_to_migrate ?? {}).includes(Jurisdiction.BVI)\n        ).length;\n\n        const is_eligible_for_svg_to_vanuatu_migration = !!svg_accounts_to_migrate.filter(account =>\n            Object.values(account.eligible_to_migrate ?? {}).includes(Jurisdiction.VANUATU)\n        ).length;\n\n        const getEligibleAccountToMigrate = () => {\n            if (is_eligible_for_svg_to_bvi_migration) {\n                return Jurisdiction.BVI;\n            } else if (is_eligible_for_svg_to_vanuatu_migration) {\n                return Jurisdiction.VANUATU;\n            }\n        };\n        const eligible_account_to_migrate_label = getFormattedJurisdictionCode(getEligibleAccountToMigrate());\n\n        const eligible_svg_to_bvi_derived_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.synthetic === Jurisdiction.BVI\n        ).length;\n\n        const eligible_svg_to_bvi_financial_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.financial === Jurisdiction.BVI\n        ).length;\n\n        const eligible_svg_to_vanuatu_derived_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.synthetic === Jurisdiction.VANUATU\n        ).length;\n\n        const eligible_svg_to_vanuatu_financial_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.financial === Jurisdiction.VANUATU\n        ).length;\n\n        const has_derived_mt5_to_migrate =\n            eligible_svg_to_bvi_derived_accounts || eligible_svg_to_vanuatu_derived_accounts;\n        const has_financial_mt5_to_migrate =\n            eligible_svg_to_bvi_financial_accounts || eligible_svg_to_vanuatu_financial_accounts;\n        const has_derived_and_financial_mt5 = has_derived_mt5_to_migrate && has_financial_mt5_to_migrate;\n\n        return {\n            eligible_account_to_migrate_label,\n            eligible_svg_to_bvi_derived_accounts,\n            eligible_svg_to_bvi_financial_accounts,\n            eligible_svg_to_vanuatu_derived_accounts,\n            eligible_svg_to_vanuatu_financial_accounts,\n            getEligibleAccountToMigrate,\n            has_derived_and_financial_mt5,\n            has_derived_mt5_to_migrate,\n            has_svg_accounts_to_migrate,\n            no_of_svg_accounts_to_migrate,\n            svg_accounts_to_migrate,\n        };\n    }, [mt5_login_list, show_eu_related_content]);\n    return {\n        ...mt5_migration_config,\n    };\n};\n\nexport default useMT5SVGEligibleToMigrate;\n","import { useState, useEffect } from 'react';\nimport { WS } from '@deriv/shared';\n\nexport type TradingPlatformStatus = {\n    platform: 'mt5' | 'dxtrade' | 'ctrader';\n    status: 'active' | 'maintenance' | 'unavailable';\n};\n\n/** A custom hook that gets the list of statuses of ctrader dxtrade mt5 platform. */\nconst useTradingPlatformStatus = () => {\n    const [data, setData] = useState<TradingPlatformStatus[] | null>(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await WS.send({ trading_platform_status: 1 });\n            setData(response.trading_platform_status);\n        };\n\n        fetchData();\n    }, []);\n\n    const getPlatformStatus = (platform: TradingPlatformStatus['platform']) =>\n        data?.find(status => status.platform === platform)?.status;\n\n    return { data, getPlatformStatus };\n};\n\nexport default useTradingPlatformStatus;\n","import { useStore } from '@deriv/stores';\n\n/** A custom hook to get the status of wallet_migration API and to start/reset the migration process\n * This hook is for the legacy WS connection (appstore and core packages)\n * This hook should be used in the component wrapped by observer\n */\nconst useWalletMigration = () => {\n    const { client } = useStore();\n    const {\n        wallet_migration_state,\n        startWalletMigration,\n        resetWalletMigration,\n        is_wallet_migration_request_is_in_progress,\n    } = client;\n\n    return {\n        /** The status of the wallet_migration API */\n        state: wallet_migration_state,\n        /** A boolean to check if the status is not_eligible */\n        is_ineligible: wallet_migration_state === 'ineligible',\n        /** A boolean to check if the status is eligible */\n        is_eligible: wallet_migration_state === 'eligible',\n        /** A boolean to check if the status is in_progress */\n        is_in_progress: wallet_migration_state === 'in_progress',\n        /** A boolean to check if the status is completed */\n        is_migrated: wallet_migration_state === 'migrated',\n        /** A boolean to check if the status is failed */\n        is_failed: wallet_migration_state === 'failed',\n        /** A boolean to check if migration is happening */\n        is_migrating: is_wallet_migration_request_is_in_progress,\n        /** Sends a request to wallet_migration API to start the migration process */\n        startMigration: startWalletMigration,\n        /** Sends a request to wallet_migration API to reset the migration process */\n        resetMigration: resetWalletMigration,\n    };\n};\n\nexport default useWalletMigration;\n"],"names":["WalletsBannerUpgrade","makeLazyLoader","moduleLoader","React","Loading","WalletsBannerUpgrading","WalletsBannerUnsuccessful","observer","is_eu","useStore","client","_useWalletMigration","useWalletMigration","is_eligible","is_failed","is_in_progress","is_migrating","is_upgrading","AddOptions","_useStore","traders_hub","ui","is_real","content_flag","selected_account_type","setShouldShowCooldownModal","openRealAccountSignup","real_account_creation_unlock_date","add_deriv_account_text","localize","add_deriv_account_btn","eu_user","ContentFlag","LOW_RISK_CR_EU","EU_REAL","is_traders_dashboard_tracking_enabled","_slicedToArray","useGrowthbookGetFeatureValue","featureFlag","defaultValue","className","Text","size","isMobile","weight","Localize","i18n_default_text","Button","type","has_effect","onClick","cacheTrackEvents","loadEvent","event","name","properties","action","form_name","account_mode","account_name","is_disabled","is_loading","text","medium","primary","DesktopWrapper","MobileWrapper","ContentLoader","backgroundColor","foregroundColor","width","height","x","y","rx","ry","_ref","accounts_sub_text","is_desktop","history","useHistory","push","routes","compare_cfds","color","line_height","styles","marginInlineStart","MigrationBanner","CFDsListing","isDesktop","useDevice","cfd","modules","common","available_dxtrade_accounts","available_ctrader_accounts","combined_cfd_mt5_accounts","selected_region","has_any_real_account","startTrade","getExistingAccounts","getAccount","is_eu_user","is_demo_low_risk","no_MF_account","toggleAccountTransferModal","is_demo","showTopUpModal","no_CR_account","setSelectedAccount","CFDs_restricted_countries","financial_restricted_countries","getDefaultJurisdiction","setAccountType","toggleCTraderTransferModal","setAccountUnavailableModal","setServerMaintenanceModal","setProduct","setJurisdictionSelectedShortcode","is_landing_company_loaded","is_populating_mt5_account_list","ctrader_total_balance","is_trading_platform_available_account_loaded","updateMT5AccountDetails","is_switching","setAppstorePlatform","openDerivRealAccountNeededModal","has_no_real_account","has_svg_accounts_to_migrate","useMT5SVGEligibleToMigrate","getPlatformStatus","useTradingPlatformStatus","getTradingPlatformStatus","platform","TRADING_PLATFORM_STATUS","MAINTENANCE","UNAVAILABLE","ACTIVE","hasUnavailableAccount","some","account","status","hasMaintenanceStatus","MT5_ACCOUNT_STATUS","UNDER_MAINTENANCE","_account$platform","CFD_PLATFORMS","MT5","no_real_mf_account_eu_regulator","no_real_cr_non_eu_regulator","AddDerivAccount","AddOptionsAccount","useEffect","setPerformanceValue","is_cfd_accounts_supported","length","is_mt5_list_loaded","ListingContainer","title","CompareAccount","description","CFDsDescription","style","paddingTop","map","existing_account","index","_existing_account$tra","list_size","track_account_subtitle","tracking_name","has_mt5_account_status","current_acc_status","jurisdiction","FAILED","PENDING","NEEDS_VERIFICATION","MIGRATED_WITH_POSITION","MIGRATED_WITHOUT_POSITION","getMT5AccountAuthStatus","landing_company_short","TradingAppCard","client_kyc_status","action_type","availability","clickable_icon","is_new","icon","sub_title","short_code_and_region","key","has_divider","getHasDivider","onAction","e","category","market_type","product","_e$currentTarget","button_name","currentTarget","mt5_acc_auth_status","selected_mt5_jurisdiction","PlatformLoader","Fragment","existing_accounts","has_existing_accounts","track_account_name","concat","formatMoney","currency","display_balance","display_login","_e$currentTarget2","login","_e$currentTarget3","ResetPasswordIntent","group","server","current_list","children","props","_objectWithoutProperties","_excluded","reset_password_intent","localStorage","getItem","reset_password_type","test","_getMtCompanies$title","_getMtCompanies","_reset_password_inten2","split","getMtCompanies","_current_list$login","_current_list","_getMtCompanies$title2","_getMtCompanies2","_split2","Object","keys","pop","_objectSpread","CFDResetPasswordModal","_ref2","email","is_logged_in","is_cfd_reset_password_modal_enabled","setCFDPasswordResetModal","useCfdStore","location","hash","_React$useState2","error_code","undefined","has_error","error_message","is_finished","changed_password_type","state","setState","clearAddressBar","removeItem","validatePassword","values","errors","max_length","DXTRADE","validLength","new_password","min","max","validPassword","validMT5Password","getErrorMessages","password","min_number","max_number","toLowerCase","resetPassword","password_type","actions","setSubmitting","request","account_id","verification_code","WS","tradingPlatformInvestorPasswordReset","then","response","_response$error","error","code","message","getIsListFetched","is_invalid_investor_token","Modal","is_open","toggleModal","onMount","redirectToLogin","getLanguage","should_header_stick_body","is_fullscreen","_ref3","Formik","initialValues","validate","onSubmit","_ref4","handleSubmit","isSubmitting","handleChange","handleBlur","touched","autoComplete","PasswordMeter","input","custom_feedback_messages","password_warnings","_ref5","has_warning","PasswordInput","label","onChange","onBlur","value","required","hint","as","align","FormSubmitButton","is_center","large","Icon","account_type","useStores","VerificationDocsListModal","AccountTransferModal","RegulatorsCompareModal","WalletsMigrationFailed","WalletsUpgradeModal","WalletsEUUpgradeModal","CFDServerErrorDialog","CFDPasswordModal","CFDServerMaintenanceModal","MT5AccountUnavailableModal","CFDTopUpDemoModal","MT5TradeModal","CFDPasswordManagerModal","MT5MigrationModal","ResetTradingPasswordModal","CTraderTransferModal","SetupRealAccountOrGoToDemoModal","store","is_eu_country","is_trading_experience_incomplete","is_virtual","_modules$cfd","is_mt5_trade_modal_visible","toggleMT5TradeModal","getRealSyntheticAccountsExistingData","getRealFinancialAccountsExistingData","getRealSwapfreeAccountsExistingData","has_cfd_error","mt5_migration_error","is_mt5_password_invalid_format_modal_visible","is_cfd_password_modal_enabled","is_cfd_success_dialog_enabled","is_sent_email_modal_enabled","is_ctrader_transfer_modal_visible","is_server_maintenance_modal_visible","is_account_unavailable_modal_visible","enableApp","disableApp","is_reset_trading_password_modal_visible","setResetTradingPasswordModalOpen","is_top_up_virtual_open","is_top_up_virtual_success","is_mt5_migration_modal_open","should_show_assessment_complete_modal","is_account_transfer_modal_open","is_real_wallets_upgrade_on","is_verification_docs_list_modal_visible","is_regulators_compare_modal_visible","is_wallet_migration_failed","is_setup_real_account_or_go_to_demo_modal_visible","is_visible","selected_login","selected_account","selected_account_group","selected_server","password_manager","setPasswordManager","togglePasswordManagerModal","prev_state","existing_accounts_data","acc_type","current_list_keys","startsWith","list_item","enabled","filter","reduce","_acc","cur","trading_platform_dxtrade_password_reset","trading_platform_mt5_password_reset","should_show_cfd_password_modal","should_show_wallets_non_eu_upgrade_modal","should_show_wallets_eu_upgrade_modal","onPasswordManager","toggleResetTradingPasswordModal","is_modal_open","_regeneratorRuntime","t","r","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","arg","call","h","l","f","s","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","constructor","mark","setPrototypeOf","__proto__","awrap","async","Promise","reverse","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","Array","isArray","_arrayWithHoles","_iterableToArrayLimit","_arrayLikeToArray","toString","from","_unsupportedIterableToArray","_nonIterableRest","AccountTypeDropdown","selectAccountType","setPrevAccountType","current_language","classNames","Dropdown","classNameIcon","classNameDisplay","list","getAccountTypes","_callee","_context","startPerformanceEventTimer","target","arguments","apply","_next","_throw","_x","dxtrade_accounts_list","mt5_login_list","ctrader_accounts_list","cfd_accounts","_toConsumableArray","useCFDAllAccounts","is_maltainvest","all","demo","useCFDDemoAccounts","real","useCFDRealAccounts","current_fiat_currency","is_crypto","default_currency","platform_real_accounts","usePlatformAccounts","non_crypto_accounts","find","currency_if_is_crypto","accounts","total_assets_real_currency","useRealTotalAssetCurrency","_useExchangeRate","useExchangeRate","handleSubscription","getExchangeRate","balance","total","new_base","new_target","new_rate","AssetSummary","pushDataLayer","gtm","is_logging_in","is_mt5_allowed","is_populating_account_list","is_populating_dxtrade_account_list","is_populating_ctrader_account_list","_modules$cashier","cashier","account_transfer","general_store","is_transfer_confirm","_usePlatformAccounts","platform_demo_account","_useCFDAccounts","useCFDAccounts","cfd_real_accounts","cfd_demo_accounts","is_still_waiting_for_loading_accounts","platform_real_balance","useTotalAccountBalance","cfd_real_balance","cfd_demo_balance","useTotalAssetCurrency","exchange_rates","real_total_balance","demo_total_balance","has_active_related_deriv_account","eu_account","cr_account","eu_mt5_allowed_total_assets","should_show_loader","isRatesLoaded","TotalAssetsLoader","Popover","alignment","zIndex","is_bubble_hover_enabled","BalanceText","underline_style","SwitcherItem","is_selected","_extends","RegulatorSwitcher","toggleRegulatorsCompareModal","RegulationsSwitcherLoader","region_availability","region","selectRegion","has_maltainvest_account","handleTabItemClick","is_low_risk_cr_real_account","LOW_RISK_CR_NON_EU","active_index","setActiveIndex","Tabs","onTabItemClick","top","is_scrollable","is_overflow_hidden","OptionsAndMultipliersListing","available_platforms","low_risk_cr_non_eu","low_risk_cr_eu","high_risk_cr","HIGH_RISK_CR","cr_demo","CR_DEMO","OptionsTitle","OptionsDescription","is_deriv_platform","available_platform","AfterSignupFlow","is_from_signup_account","setIsFromSignupAccount","has_active_real_account","setIsSetupRealAccountOrGoToDemoModalVisible","_useContentFlag","useContentFlag","is_cr_demo","is_eu_demo","direct_to_real_account_creation","show_setup_real_or_go_demo","Jurisdiction","SVG","MALTA_INVEST","_statement$count","_statement$transactio","statement","count","transactions","hasDeposited","tx","hasTransferred","amount","isLoaded","e_book_show_way","e_books_url","e_book_from_landing","lang","is_banner_shows","setIsBannerShows","analytics_data","banner_name","id","LabelPairedCircleChevronDownXlBoldIcon","fill","href","EN","rel","LabelPairedXmarkLgBoldIcon","SessionStore","remove","FR","PT","ES","VI","Analytics","getFeatureValue","get","includes","BookBannerTemplate","RealAccountCreationBanner","DepositNowBanner","TradersHubBanners","is_low_risk","_useStoreHasAccountDe","useStoreHasAccountDeposited","should_add_empty_div_for_get_started_trading_banner_clever_tap","should_show_real_account_creation_banner","should_show_deposit_now_banner","BookBanner","WalletsBanner","is_account_to_be_closed_by_residence","account_time_of_closure","InlineMessage","variant","date","formatDate","OrderedPlatformSections","_ref$is_cfd_visible","is_cfd_visible","_ref$is_options_and_m","is_options_and_multipliers_visible","_useStore$traders_hub","TradersHub","_useStore2","Notifications","notification_messages_ui","is_account_setting_loaded","website_status","is_eu_real","selected_platform_type","setTogglePlatformType","traders_hub_ref","can_show_notify","checkServerMaintenance","eu_title","getPlatformToggleOptions","platform_toggle_options","platform_toggle_options_eu","should_show_cfd_section","desktopContent","mobileTabletContent","ButtonToggle","buttons_arr","has_rounded_button","is_traders_hub","window","pathname","ButtonToggleLoader","BusinessClosureBanner","Div100vhContainer","height_offset","ref","MainTitleBar","ModalManager","Disclaimer","CTRADER","CFD","CFDS","CATEGORY","DEMO","REAL","MARKET_TYPE","SYNTHETIC","GAMING","FINANCIAL","ALL","PRODUCT","SWAPFREE","ZEROSPREAD","DERIVX","STP","GOLD","MOBILE_PLATFORMS","IOS","HAUWEI","ANDROID","DESKTOP_PLATFORMS","WINDOWS","LINUX","MACOS","getDxCompanies","all_config","leverage","short_title","synthetic_config","financial_config","dxtrade_account_type","synthetic","financial","dxtrade","mt5_account_type","getCTraderCompanies","ctrader_account_type","financial_title","financial_demo_title","financial_demo_title_eu","financial_demo_short_title","financial_title_eu","financial_stp_config","all_swap_free_svg","all_zero_spread_bvi","ctrader","financial_demo","synthetic_svg","financial_svg","financial_stp","synthetic_bvi","synthetic_v","financial_bvi","financial_fx","financial_v","getFormattedJurisdictionCode","jurisdiction_code","formatted_label","BVI","LABUAN","VANUATU","toUpperCase","is_low_risk_cr_non_eu","is_low_risk_cr_eu","is_high_risk_cr","EU_DEMO","subscribeToExchangeRate","unsubscribe","unsubscribeFromExchangeRate","unsubscribeAll","unsubscribeFromAllExchangeRates","show_eu_related_content","svg_accounts_to_migrate","eligible_to_migrate","no_of_svg_accounts_to_migrate","is_eligible_for_svg_to_bvi_migration","_account$eligible_to_","is_eligible_for_svg_to_vanuatu_migration","_account$eligible_to_2","getEligibleAccountToMigrate","eligible_account_to_migrate_label","eligible_svg_to_bvi_derived_accounts","_account$eligible_to_3","eligible_svg_to_bvi_financial_accounts","_account$eligible_to_4","eligible_svg_to_vanuatu_derived_accounts","_account$eligible_to_5","eligible_svg_to_vanuatu_financial_accounts","_account$eligible_to_6","has_derived_mt5_to_migrate","has_derived_and_financial_mt5","_useState2","useState","data","setData","fetchData","send","trading_platform_status","_data$find","wallet_migration_state","startWalletMigration","resetWalletMigration","is_ineligible","is_migrated","is_wallet_migration_request_is_in_progress","startMigration","resetMigration"],"sourceRoot":""}