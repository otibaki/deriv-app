{"version":3,"file":"js/core.dtrader-header-wallets.2040fb523b62dc8b1807.js","mappings":"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","sources":["webpack:///./App/Components/Layout/Header/wallets/accounts-info-loader-wallets.tsx","webpack:///./App/Containers/Layout/header/dtrader-header-wallets.tsx","webpack:///./App/Containers/Layout/header/traders-hub-home-button.tsx","webpack:///./App/Containers/SetAccountCurrencyModal/set-currency-modal.jsx","webpack:///./App/Containers/SetAccountCurrencyModal/index.js","webpack:///./App/Containers/new-version-notification.jsx","webpack:///../../hooks/src/useHasActiveRealAccount.ts","webpack:///../../hooks/src/useHasSetCurrency.ts"],"sourcesContent":["import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\ntype TAccountsInfoLoaderWallets = {\n    is_mobile: boolean;\n    is_logged_in: boolean;\n    speed: number;\n};\n\nconst AccountsInfoLoaderWallets = ({ is_mobile, is_logged_in, speed }: TAccountsInfoLoaderWallets) => (\n    <ContentLoader\n        height={is_mobile ? 42 : 46}\n        width={is_mobile ? 216 : 450}\n        speed={speed}\n        backgroundColor={'var(--general-section-1)'}\n        foregroundColor={'var(--general-hover)'}\n    >\n        {is_logged_in ? <LoggedInPreloader is_mobile={is_mobile} /> : <LoggedOutPreloader is_mobile={is_mobile} />}\n    </ContentLoader>\n);\n\nconst LoggedOutPreloader = ({ is_mobile }: Pick<TAccountsInfoLoaderWallets, 'is_mobile'>) => (\n    <React.Fragment>\n        <rect x={is_mobile ? 42 : 166} y='8' rx='4' ry='4' width='66' height='32' />\n        <rect x={is_mobile ? 120 : 250} y='8' rx='4' ry='4' width='80' height='32' />\n    </React.Fragment>\n);\n\nconst LoggedInPreloader = ({ is_mobile }: Pick<TAccountsInfoLoaderWallets, 'is_mobile'>) =>\n    is_mobile ? (\n        <React.Fragment>\n            <circle cx='97' cy='22' r='13' />\n            <circle cx='59' cy='22' r='13' />\n            <rect x='128' y='19' rx='4' ry='4' width='76' height='7' />\n        </React.Fragment>\n    ) : (\n        <React.Fragment>\n            <circle cx='14' cy='22' r='12' />\n            <circle cx='58' cy='22' r='12' />\n            <rect x='87' y='8' rx='4' ry='4' width='1' height='30' />\n            <circle cx='118' cy='24' r='13' />\n            <rect x='150' y='20' rx='4' ry='4' width='150' height='7' />\n            <rect x='330' y='8' rx='4' ry='4' width='122' height='32' />\n        </React.Fragment>\n    );\n\nexport default AccountsInfoLoaderWallets;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { withRouter } from 'react-router-dom';\nimport { useDevice } from '@deriv-com/ui';\nimport { observer, useStore } from '@deriv/stores';\nimport { routes, platforms } from '@deriv/shared';\nimport { MenuLinks, PlatformSwitcher } from 'App/Components/Layout/Header';\nimport { AccountActionsWallets } from 'App/Components/Layout/Header/wallets/account-actions-wallets';\nimport platform_config from 'App/Constants/platform-config';\nimport RealAccountSignup from 'App/Containers/RealAccountSignup';\nimport SetAccountCurrencyModal from 'App/Containers/SetAccountCurrencyModal';\nimport NewVersionNotification from 'App/Containers/new-version-notification.jsx';\nimport ToggleMenuDrawer from 'App/Components/Layout/Header/toggle-menu-drawer.jsx';\nimport AccountsInfoLoaderWallets from 'App/Components/Layout/Header/wallets/accounts-info-loader-wallets';\nimport TradersHubHomeButton from './traders-hub-home-button';\n\nconst MenuLeft = observer(() => {\n    const { client, common, ui, traders_hub } = useStore();\n    const { is_bot_allowed, is_logged_in, is_mt5_allowed, is_dxtrade_allowed } = client;\n    const { app_routing_history, current_language } = common;\n    const { header_extension } = ui;\n    const { setTogglePlatformType } = traders_hub;\n\n    const { isDesktop } = useDevice();\n\n    const filterPlatformsForClients = (payload: typeof platform_config) =>\n        payload.filter(config => {\n            if (config.link_to === routes.mt5) {\n                return !is_logged_in || is_mt5_allowed;\n            }\n            if (config.link_to === routes.dxtrade) {\n                return is_dxtrade_allowed;\n            }\n            if (config.link_to === routes.bot || config.href === routes.smarttrader) {\n                return is_bot_allowed;\n            }\n            return true;\n        });\n\n    return (\n        <div className='header__menu-left'>\n            {isDesktop ? (\n                <React.Fragment>\n                    <TradersHubHomeButton />\n                    <div className='traders-hub-header__divider traders-hub-header__divider--wallets' />\n                    <PlatformSwitcher\n                        app_routing_history={app_routing_history}\n                        platform_config={filterPlatformsForClients(platform_config)}\n                        setTogglePlatformType={setTogglePlatformType}\n                        current_language={current_language}\n                    />\n                </React.Fragment>\n            ) : (\n                <React.Fragment>\n                    <ToggleMenuDrawer platform_config={filterPlatformsForClients(platform_config)} />\n                    {header_extension && is_logged_in && (\n                        <div className='header__menu-left-extensions'>{header_extension}</div>\n                    )}\n                </React.Fragment>\n            )}\n            <MenuLinks />\n        </div>\n    );\n});\n\nconst MenuRight = observer(() => {\n    const { client, ui } = useStore();\n    const { is_logged_in, is_logging_in, is_switching, accounts, loginid, is_crypto } = client;\n    const { is_mobile } = ui;\n\n    const active_account = accounts?.[loginid ?? ''];\n    const currency = active_account?.currency ?? '';\n\n    return (\n        <div className='header__menu-right'>\n            {is_logging_in || is_switching ? (\n                <div\n                    id='dt_core_header_acc-info-preloader'\n                    className={classNames('acc-info__preloader__dtrader acc-info__preloader__dtrader--wallets', {\n                        'acc-info__preloader__dtrader--no-currency': !currency,\n                        'acc-info__preloader__dtrader--is-crypto': is_crypto(currency),\n                    })}\n                >\n                    <AccountsInfoLoaderWallets is_logged_in={is_logged_in} is_mobile={is_mobile} speed={3} />\n                </div>\n            ) : (\n                <div id={'dt_core_header_acc-info-container'} className='acc-info__container'>\n                    <AccountActionsWallets />\n                </div>\n            )}\n        </div>\n    );\n});\n\nconst DTraderHeaderWallets = observer(() => {\n    const { common, ui, notifications } = useStore();\n    const { platform } = common;\n    const { is_app_disabled, is_route_modal_on } = ui;\n    const { addNotificationMessage, client_notifications, removeNotificationMessage } = notifications;\n\n    const addUpdateNotification = () => addNotificationMessage(client_notifications.new_version_available);\n    const removeUpdateNotification = React.useCallback(\n        () => removeNotificationMessage({ key: 'new_version_available' }),\n        [removeNotificationMessage]\n    );\n\n    React.useEffect(() => {\n        document.addEventListener('IgnorePWAUpdate', removeUpdateNotification);\n        return () => document.removeEventListener('IgnorePWAUpdate', removeUpdateNotification);\n    }, [removeUpdateNotification]);\n\n    return (\n        <header\n            className={classNames('header', {\n                'header--is-disabled': is_app_disabled || is_route_modal_on,\n                'header--is-hidden': platforms[platform],\n            })}\n        >\n            <div className='header__menu-items'>\n                <MenuLeft />\n                <MenuRight />\n            </div>\n            <RealAccountSignup />\n            <SetAccountCurrencyModal />\n            <NewVersionNotification onUpdate={addUpdateNotification} />\n        </header>\n    );\n});\n\nexport default withRouter(DTraderHeaderWallets);\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport classNames from 'classnames';\nimport { Icon, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\n\nconst TradersHubHomeButton = observer(() => {\n    const { ui } = useStore();\n    const { is_dark_mode_on } = ui;\n    const history = useHistory();\n    const location = useLocation();\n    const { pathname } = location;\n\n    const TradersHubIcon = is_dark_mode_on ? 'IcAppstoreHomeDark' : 'IcAppstoreTradersHubHomeUpdated';\n\n    return (\n        <div\n            data-testid='dt_traders_hub_home_button'\n            className={classNames('traders-hub-header__tradershub', {\n                'traders-hub-header__tradershub--active':\n                    pathname === routes.traders_hub || pathname === routes.traders_hub_v2,\n            })}\n            onClick={() => history.push(routes.traders_hub)}\n        >\n            <div className='traders-hub-header__tradershub--home-logo'>\n                <Icon icon={TradersHubIcon} size={is_dark_mode_on ? 15 : 17} />\n            </div>\n            <Text className='traders-hub-header__tradershub--text'>\n                <Localize i18n_default_text=\"Trader's Hub\" />\n            </Text>\n        </div>\n    );\n});\n\nexport default TradersHubHomeButton;\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { useHasSetCurrency } from '@deriv/hooks';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport 'Sass/set-currency-modal.scss';\n\nconst SetAccountCurrencyModal = observer(() => {\n    const { client, ui } = useStore();\n    const { is_virtual } = client;\n    const {\n        is_set_currency_modal_visible: is_visible,\n        openRealAccountSignup: setCurrency,\n        toggleSetCurrencyModal: toggleModal,\n    } = ui;\n    const has_set_currency = useHasSetCurrency();\n\n    return (\n        <Modal\n            id='dt_set_account_currency_modal'\n            has_close_icon={false}\n            is_open={is_visible}\n            small\n            toggleModal={toggleModal}\n            title={\n                !has_set_currency\n                    ? localize('No currency assigned to your account')\n                    : localize('You have an account that needs action')\n            }\n        >\n            <Modal.Body>\n                {localize('Please set a currency for your existing real account before creating another account.')}\n            </Modal.Body>\n            <Modal.Footer>\n                {!is_virtual ? (\n                    <>\n                        <Button has_effect text={localize('Cancel')} onClick={toggleModal} secondary />\n                        <Button\n                            has_effect\n                            text={localize('Set currency')}\n                            onClick={() => {\n                                toggleModal();\n                                // timeout is to ensure no jumpy animation when modals are overlapping enter/exit transitions\n                                setTimeout(() => {\n                                    setCurrency('set_currency');\n                                }, 250);\n                            }}\n                            primary\n                        />\n                    </>\n                ) : (\n                    <Button has_effect text={localize('OK')} onClick={toggleModal} primary />\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n});\n\nexport default SetAccountCurrencyModal;\n","import SetAccountCurrencyModal from './set-currency-modal.jsx';\n\nexport default SetAccountCurrencyModal;\n","import React from 'react';\n\n/**\n * Listens on emitted events to show notification on available updates.\n *  - IgnorePWAUpdate event will prevent notification\n *  - ListenPWAUpdate event is usefull to re-assign notify on update behavior\n * @param onUpdate\n * @return {null}\n * @constructor\n */\nconst NewVersionNotification = ({ onUpdate }) => {\n    React.useEffect(() => {\n        const removeUpdateListener = () => {\n            document.removeEventListener('UpdateAvailable', onUpdate);\n        };\n\n        const addUpdateListener = () => {\n            document.addEventListener('UpdateAvailable', onUpdate);\n        };\n\n        document.addEventListener('UpdateAvailable', onUpdate);\n        document.addEventListener('IgnorePWAUpdate', removeUpdateListener);\n        document.addEventListener('ListenPWAUpdate', addUpdateListener);\n\n        return () => {\n            document.removeEventListener('IgnorePWAUpdate', removeUpdateListener);\n            document.removeEventListener('ListenPWAUpdate', addUpdateListener);\n            document.removeEventListener('UpdateAvailable', onUpdate);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return null;\n};\n\nexport default NewVersionNotification;\n","import { useStore } from '@deriv/stores';\n\nconst useHasActiveRealAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n\n    const has_active_real_account = active_accounts.some(account => account.is_virtual === 0);\n\n    return has_active_real_account;\n};\n\nexport default useHasActiveRealAccount;\n","import { useStore } from '@deriv/stores';\nimport useHasActiveRealAccount from './useHasActiveRealAccount';\n\nconst useHasSetCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n    const has_active_real_account = useHasActiveRealAccount();\n\n    const has_real_account = account_list\n        .filter(account => !account.is_virtual)\n        .some(account => account.title !== 'Real' && account.title !== 'Investment');\n\n    const has_set_currency = has_real_account || !has_active_real_account;\n\n    return has_set_currency;\n};\n\nexport default useHasSetCurrency;\n"],"names":["LoggedOutPreloader","_ref2","is_mobile","_jsxs","React","children","_jsx","x","y","rx","ry","width","height","LoggedInPreloader","_ref3","cx","cy","r","_ref","is_logged_in","speed","ContentLoader","backgroundColor","foregroundColor","MenuLeft","observer","client","common","ui","traders_hub","useStore","is_bot_allowed","is_mt5_allowed","is_dxtrade_allowed","app_routing_history","current_language","header_extension","setTogglePlatformType","isDesktop","useDevice","filterPlatformsForClients","payload","filter","config","link_to","routes","mt5","dxtrade","bot","href","smarttrader","className","TradersHubHomeButton","PlatformSwitcher","platform_config","ToggleMenuDrawer","MenuLinks","MenuRight","_active_account$curre","is_logging_in","is_switching","accounts","loginid","is_crypto","active_account","currency","id","classNames","AccountsInfoLoaderWallets","AccountActionsWallets","DTraderHeaderWallets","notifications","platform","is_app_disabled","is_route_modal_on","addNotificationMessage","client_notifications","removeNotificationMessage","removeUpdateNotification","key","document","addEventListener","removeEventListener","platforms","RealAccountSignup","SetAccountCurrencyModal","NewVersionNotification","onUpdate","addUpdateNotification","new_version_available","withRouter","is_dark_mode_on","history","useHistory","location","useLocation","pathname","TradersHubIcon","traders_hub_v2","onClick","push","Icon","icon","size","Text","Localize","i18n_default_text","is_virtual","is_set_currency_modal_visible","is_visible","openRealAccountSignup","setCurrency","toggleSetCurrencyModal","toggleModal","has_set_currency","useHasSetCurrency","Modal","has_close_icon","is_open","small","title","localize","Body","Footer","Button","has_effect","text","primary","_Fragment","secondary","setTimeout","removeUpdateListener","addUpdateListener","useHasActiveRealAccount","active_accounts","some","account","account_list","has_active_real_account"],"sourceRoot":""}