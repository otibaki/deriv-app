{"version":3,"file":"js/core.4727.23e3202d7d0a9e25edac.js","mappings":"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","sources":["webpack:///../../api/src/hooks/useGetAccountStatus.ts","webpack:///../../api/src/hooks/useResidenceList.ts","webpack:///../../api/src/usePaginatedFetch.ts","webpack:///../../api/src/hooks/useAccountLimits.ts","webpack:///../../api/src/hooks/useAccountStatus.ts","webpack:///../../api/src/hooks/useAccountTypes.ts","webpack:///../../api/src/hooks/useBalance.ts","webpack:///../../api/src/hooks/useCurrencyConfig.ts","webpack:///../../api/src/utils/display-money.ts","webpack:///../../api/src/hooks/useDerivAccountsList.ts","webpack:///../../api/src/hooks/useActiveAccount.ts","webpack:///../../api/src/hooks/useWalletAccountsList.ts","webpack:///../../api/src/hooks/useActiveWalletAccount.ts","webpack:///../../api/src/hooks/useActiveLinkedToTradingAccount.ts","webpack:///../../api/src/hooks/useTradingAccountsList.ts","webpack:///../../api/src/hooks/useActiveTradingAccount.ts","webpack:///../../api/src/hooks/useActiveWalletBalance.ts","webpack:///../../api/src/hooks/useExchangeRates.ts","webpack:///../../api/src/hooks/useCtraderAccountsList.ts","webpack:///../../api/src/hooks/useDxtradeAccountsList.ts","webpack:///../../api/src/hooks/useMT5AccountsList.ts","webpack:///../../api/src/hooks/useCFDAccountsList.ts","webpack:///../../api/src/hooks/useAllAccountsList.ts","webpack:///../../api/src/hooks/useAvailableWallets.ts","webpack:///../../api/src/hooks/useAllWalletAccounts.ts","webpack:///../../api/src/hooks/useAuthentication.ts","webpack:///../../api/src/hooks/useLandingCompany.ts","webpack:///../../api/src/hooks/useAccesiblePlatforms.ts","webpack:///../../api/src/hooks/useAvailableMT5Accounts.ts","webpack:///../../api/src/hooks/useCashierValidation.ts","webpack:///../../api/src/hooks/useCloseDerivAccount.ts","webpack:///../../api/src/hooks/useCFDCompareAccounts.tsx","webpack:///../../api/src/hooks/useCancelCryptoTransaction.ts","webpack:///../../api/src/hooks/useCashierFiatAddress.ts","webpack:///../../api/src/hooks/useCryptoEstimations.ts","webpack:///../../api/src/hooks/useCountryConfig.ts","webpack:///../../api/src/hooks/useCreateNewRealAccount.ts","webpack:///../../api/src/hooks/useCreateWallet.ts","webpack:///../../api/src/hooks/useCryptoTransactions.ts","webpack:///../../api/src/hooks/useCryptoWithdrawal.ts","webpack:///../../api/src/hooks/useCtraderServiceToken.ts","webpack:///../../api/src/hooks/useDepositCryptoAddress.ts","webpack:///../../api/src/utils/file-utils.ts","webpack:///../../api/src/hooks/useDocumentUpload.ts","webpack:///../../api/src/hooks/useDxtradeServiceToken.ts","webpack:///../../api/src/hooks/useDynamicLeverage.ts","webpack:///../../api/src/hooks/useExchangeRateSubscription.ts","webpack:///../../api/src/hooks/useGetExchangeRate.ts","webpack:///../../api/src/hooks/useIdentityDocumentVerificationAdd.ts","webpack:///../../api/src/hooks/useIsEuRegion.ts","webpack:///../../api/src/hooks/usePOI.ts","webpack:///../../api/src/hooks/useJurisdictionStatus.ts","webpack:///../../api/src/hooks/useMT5Deposit.ts","webpack:///../../api/src/constants/countries.ts","webpack:///../../api/src/hooks/useOnfidoServiceToken.ts","webpack:///../../api/src/constants/onfido.ts","webpack:///../../api/src/hooks/useOnfidoNotificationEvent.ts","webpack:///../../api/src/hooks/useOnfido.ts","webpack:///../../api/src/hooks/useOtherCFDPlatformsDeposit.ts","webpack:///../../api/src/hooks/usePOA.ts","webpack:///../../api/src/hooks/useSendbirdServiceToken.ts","webpack:///../../api/src/hooks/useServerTime.ts","webpack:///../../api/src/hooks/useSortedMT5Accounts.ts","webpack:///../../api/src/hooks/useMobileCarouselWalletsList.ts","webpack:///../../api/src/hooks/useStatesList.ts","webpack:///../../api/src/hooks/useTradingPlatformInvestorPasswordChange.ts","webpack:///../../api/src/hooks/useCreateMT5Account.ts","webpack:///../../api/src/hooks/useCreateOtherCFDAccount.ts","webpack:///../../api/src/hooks/useTradingPlatformInvestorPasswordReset.ts","webpack:///../../api/src/hooks/useTradingPlatformPasswordChange.ts","webpack:///../../api/src/hooks/useTransactions.ts","webpack:///../../api/src/hooks/useInfiniteTransactions.ts","webpack:///../../api/src/hooks/useTransferBetweenAccounts.ts","webpack:///../../api/src/hooks/useVerifyEmail.ts","webpack:///../../api/src/hooks/useTradingPlatformPasswordReset.ts","webpack:///../../api/src/hooks/useResetVirtualBalance.ts","webpack:///../../api/src/hooks/useIsDIELEnabled.ts","webpack:///../../api/src/hooks/useKycAuthStatus.ts","webpack:///../../api/src/useInfiniteQuery.ts","webpack:///../../hooks/src/useWalletsList.ts","webpack:///../../hooks/src/useActiveWallet.ts","webpack:///../../hooks/src/useAvailableWallets.ts","webpack:///../../hooks/src/useCFDAllAccounts.ts","webpack:///../../hooks/src/useCFDDemoAccounts.ts","webpack:///../../hooks/src/useCFDRealAccounts.ts","webpack:///../../hooks/src/useCFDAccounts.ts","webpack:///../../hooks/src/useCashierLocked.ts","webpack:///../../hooks/src/useContentFlag.ts","webpack:///../../hooks/src/useCurrentAccountDetails.ts","webpack:///../../hooks/src/useNeedAuthentication.ts","webpack:///../../hooks/src/useNeedFinancialAssessment.ts","webpack:///../../hooks/src/useDepositLocked.ts","webpack:///../../hooks/src/useDuplicateDOBPhone.ts","webpack:///../../hooks/src/useExchangeRate.ts","webpack:///../../hooks/src/useExistingCFDAccounts.ts","webpack:///../../hooks/src/useFeatureFlags.ts","webpack:///../../hooks/src/useFiatAccountList.ts","webpack:///../../hooks/src/useGetPasskeysList.ts","webpack:///../../hooks/src/useSettings.ts","webpack:///../../hooks/src/usePhoneVerificationAnalytics.ts","webpack:///../../hooks/src/useRequestPhoneNumberOTP.tsx","webpack:///../../hooks/src/useHasCryptoCurrency.ts","webpack:///../../hooks/src/useHasFiatCurrency.ts","webpack:///../../hooks/src/useHasP2PSupportedCurrencies.ts","webpack:///../../hooks/src/useHasUSDCurrency.ts","webpack:///../../hooks/src/useInputDecimalFormatter.ts","webpack:///../../hooks/src/useInputATMFormatter.ts","webpack:///../../hooks/src/useIsAccountStatusPresent.ts","webpack:///../../hooks/src/useIsClientHighRiskForMT5.ts","webpack:///../../hooks/src/useIsSystemMaintenance.ts","webpack:///../../hooks/src/useLandingCompanyDetails.ts","webpack:///../../hooks/src/useLocalStorageData.ts","webpack:///../../hooks/src/useMT5SVGEligibleToMigrate.ts","webpack:///../../hooks/src/useNeedPOI.ts","webpack:///../../hooks/src/useP2PAdvertInfo.ts","webpack:///../../hooks/src/useP2PAdvertList.ts","webpack:///../../hooks/src/useP2PAdvertiserPaymentMethods.ts","webpack:///../../hooks/src/useP2POrderList.ts","webpack:///../../hooks/src/useP2PCompletedOrdersNotification.ts","webpack:///../../hooks/src/useP2PCountryList.ts","webpack:///../../hooks/src/useP2PExchangeRate.ts","webpack:///../../hooks/src/useP2PPaymentMethods.ts","webpack:///../../hooks/src/usePlatformDemoAccount.ts","webpack:///../../hooks/src/usePlatformRealAccounts.ts","webpack:///../../hooks/src/usePlatformAccounts.ts","webpack:///../../hooks/src/useRealSTPAccount.ts","webpack:///../../hooks/src/useRegisterPasskey.ts","webpack:///../../hooks/src/useSendOTPVerificationCode.tsx","webpack:///../../hooks/src/useRemovePasskey.ts","webpack:///../../hooks/src/useRenamePasskey.ts","webpack:///../../hooks/src/useStoreHasAccountDeposited.ts","webpack:///../../hooks/src/useTotalAssetCurrency.ts","webpack:///../../hooks/src/useTotalAccountBalance.ts","webpack:///../../hooks/src/useTransferBetweenAccounts.ts","webpack:///../../hooks/src/useWalletTransactions.ts","webpack:///../../hooks/src/useWalletTransfer.ts","webpack:///../../hooks/src/useIsSelectedMT5AccountCreated.ts","webpack:///../../hooks/src/useGetStatus.ts","webpack:///../../hooks/src/useIsPhoneNumberVerified.ts","webpack:///../../hooks/src/usePhoneNumberVerificationSetTimer.tsx","webpack:///../../hooks/src/usePhoneNumberVerificationSessionTimer.ts","webpack:///../../hooks/src/useGetPhoneNumberList.ts","webpack:///../../hooks/src/useTradingPlatformStatus.ts","webpack:///../../hooks/src/useGetWithdrawalLimitsDetails.ts","webpack:///../../hooks/src/useSilentLoginAndLogout.ts","webpack:///../../hooks/src/useAccountTransferVisible.ts","webpack:///../../hooks/src/useAuthorize.ts","webpack:///../../hooks/src/useCountdown.ts","webpack:///../../hooks/src/useCryptoConfig.ts","webpack:///../../hooks/src/useCryptoTransactions.ts","webpack:///../../hooks/src/useCurrencyConfig.ts","webpack:///../../hooks/src/useCurrentCurrencyConfig.ts","webpack:///../../hooks/src/useDepositCryptoAddress.ts","webpack:///../../hooks/src/useDepositFiatAddress.ts","webpack:///../../hooks/src/useFileUploader.ts","webpack:///../../hooks/src/useGetMFAccountStatus.ts","webpack:///../../hooks/src/useHasActiveRealAccount.ts","webpack:///../../hooks/src/useHasMaltaInvestAccount.ts","webpack:///../../hooks/src/useHasSetCurrency.ts","webpack:///../../hooks/src/useHasSvgAccount.ts","webpack:///../../hooks/src/useIsP2PEnabled.ts","webpack:///../../hooks/src/useIsRealAccountNeededForCashier.ts","webpack:///../../hooks/src/useMFAccountStatus.ts","webpack:///../../hooks/src/useNotificationEvent.ts","webpack:///../../hooks/src/useOnrampVisible.ts","webpack:///../../hooks/src/useP2PNotificationCount.ts","webpack:///../../hooks/src/useP2PSettings.ts","webpack:///../../hooks/src/usePaymentAgentList.ts","webpack:///../../hooks/src/usePaymentAgentTransferVisible.ts","webpack:///../../hooks/src/useResidenceList.ts","webpack:///../../hooks/src/useResidenceSelfDeclaration.ts","webpack:///../../hooks/src/useServiceToken.ts","webpack:///../../hooks/src/useStatesList.ts","webpack:///../../hooks/src/useStoreLinkedWalletsAccounts.ts","webpack:///../../hooks/src/useStoreWalletAccountsList.ts","webpack:///../../hooks/src/useTinValidations.ts","webpack:///../../hooks/src/useVerifyEmail.ts","webpack:///../../stores/src/mockStore.ts"],"sourcesContent":["import { useMemo } from 'react';\nimport useQuery from '../useQuery';\n\n/** A custom hook to retrieves the account status for the current user. */\nconst useGetAccountStatus = () => {\n    const { data: get_account_status_data, ...rest } = useQuery('get_account_status');\n\n    // Add additional information to the account status response.\n    const modified_account_status = useMemo(() => {\n        if (!get_account_status_data?.get_account_status) return;\n\n        const { prompt_client_to_authenticate, p2p_status } = get_account_status_data.get_account_status;\n\n        return {\n            ...get_account_status_data.get_account_status,\n            /** Indicates whether the client should be prompted to authenticate their account. */\n            should_prompt_client_to_authenticate: Boolean(prompt_client_to_authenticate),\n            /** Indicates whether the client is a P2P user. */\n            is_p2p_user: Boolean(p2p_status !== 'none' && p2p_status !== 'perm_ban'),\n        };\n    }, [get_account_status_data?.get_account_status]);\n\n    return {\n        /** The account status response. */\n        data: modified_account_status,\n        ...rest,\n    };\n};\n\nexport default useGetAccountStatus;\n","import { useMemo } from 'react';\n\nimport useQuery from '../useQuery';\n\n/** A custom hook that gets the residence list. */\nconst useResidenceList = () => {\n    const { data, ...residence_list_rest } = useQuery('residence_list');\n\n    /** Modify the residence list data. */\n    const modified_residence_list = useMemo(() => {\n        if (!data || !data.residence_list) return [];\n\n        return data.residence_list.map(residence => ({\n            ...residence,\n        }));\n    }, [data]);\n\n    return {\n        /** The residence list */\n        data: modified_residence_list,\n        ...residence_list_rest,\n    };\n};\n\nexport default useResidenceList;\n","import { useCallback, useState } from 'react';\n\nimport type {\n    TSocketAcceptableProps,\n    TSocketPaginateableEndpointNames,\n    TSocketRequestPayload,\n    TSocketRequestQueryOptions,\n} from '../types';\n\nimport useQuery from './useQuery';\n\nconst usePaginatedFetch = <T extends TSocketPaginateableEndpointNames>(\n    name: T,\n    ...props: TSocketAcceptableProps<T, true>\n) => {\n    const prop = props?.[0];\n    const payload = prop && 'payload' in prop ? (prop.payload as TSocketRequestPayload<T>) : undefined;\n    const options = prop && 'options' in prop ? (prop.options as TSocketRequestQueryOptions<T>) : undefined;\n\n    const limit: number = payload?.payload?.limit || 10;\n    const [offset, setOffset] = useState<number>(payload?.payload?.offset || 0);\n\n    // @ts-expect-error It's safe to ignore the TS error here since the\n    // exact type of the payload is not determined at this point.\n    const { remove, ...rest } = useQuery(name, {\n        payload: { ...payload, offset, limit },\n        options: { ...options, keepPreviousData: !!offset },\n    });\n\n    const loadMore = useCallback(() => setOffset(prev => prev + limit), [limit]);\n\n    const reset = useCallback(() => {\n        remove();\n        setOffset(0);\n    }, [remove]);\n\n    return {\n        ...rest,\n        remove,\n        loadMore,\n        reset,\n    };\n};\n\nexport default usePaginatedFetch;\n","import useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\n\n/** A custom hook to get account limits */\nconst useAccountLimits = () => {\n    const { isSuccess } = useAuthorize();\n    const { data, ...rest } = useQuery('get_limits', { options: { enabled: isSuccess } });\n\n    return {\n        /** Account limits response */\n        data: data?.get_limits,\n        ...rest,\n    };\n};\n\nexport default useAccountLimits;\n","import { useMemo } from 'react';\nimport useGetAccountStatus from './useGetAccountStatus';\n\n/** A custom hook to check the account status for the current user. */\nconst useAccountStatus = () => {\n    const { data: get_account_status_data, ...rest } = useGetAccountStatus();\n\n    // Add additional information to the account status response.\n    const modified_account_status = useMemo(() => {\n        if (!get_account_status_data?.status) return;\n\n        const status = new Set(get_account_status_data?.status);\n\n        return {\n            /** Account status. */\n            status: get_account_status_data?.status,\n            /** client's address is verified by third party services. */\n            is_address_verified: status.has('address_verified'),\n            /** client is allowed to upload documents. */\n            is_allow_document_upload: status.has('allow_document_upload'),\n            /** client is age-verified. */\n            is_age_verification: status.has('age_verification'),\n            /** client is fully authenticated. */\n            is_authenticated: status.has('authenticated'),\n            /** cashier is locked. */\n            is_cashier_locked: status.has('cashier_locked'),\n            /** client has updated tax related information. */\n            is_crs_tin_information: status.has('crs_tin_information'),\n            /** deposit is not allowed. */\n            is_deposit_locked: status.has('deposit_locked'),\n            /** account is disabled. */\n            is_disabled: status.has('disabled'),\n            /** client's submitted proof-of-identity documents have expired. */\n            is_document_expired: status.has('document_expired'),\n            /** client's submitted proof-of-identity documents are expiring within a month. */\n            is_document_expiring_soon: status.has('document_expiring_soon'),\n            /** Deriv X password is not set. */\n            is_dxtrade_password_not_set: status.has('dxtrade_password_not_set'),\n            /** client should complete their financial assessment. */\n            is_financial_assessment_not_complete: status.has('financial_assessment_not_complete'),\n            /** client has not completed financial assessment. */\n            is_financial_information_not_complete: status.has('financial_information_not_complete'),\n            /** client has accepted financial risk disclosure. */\n            is_financial_risk_approval: status.has('financial_risk_approval'),\n            /** client has not set financial limits on their account. Applies to UK and Malta clients. */\n            is_max_turnover_limit_not_set: status.has('max_turnover_limit_not_set'),\n            /** MT5 password is not set. */\n            is_mt5_password_not_set: status.has('mt5_password_not_set'),\n            /** MT5 deposits allowed, but withdrawal is not allowed. */\n            is_mt5_withdrawal_locked: status.has('mt5_withdrawal_locked'),\n            /** user must approve the Affiliate's Code of Conduct Agreement. */\n            is_needs_affiliate_coc_approval: status.has('needs_affiliate_coc_approval'),\n            /** trading is disabled. */\n            is_no_trading: status.has('no_trading'),\n            /** client cannot trade or withdraw but can deposit. */\n            is_no_withdrawal_or_trading: status.has('no_withdrawal_or_trading'),\n            /** p2p is blocked for the current payment agent client. */\n            is_p2p_blocked_for_pa: status.has('p2p_blocked_for_pa'),\n            /** withdrawal through payment agent is allowed. */\n            is_pa_withdrawal_explicitly_allowed: status.has('pa_withdrawal_explicitly_allowed'),\n            /** this client must reset their password. */\n            is_password_reset_required: status.has('password_reset_required'),\n            /** this client has opted for a professional account. */\n            is_professional: status.has('professional'),\n            /** this client has requested for a professional account. */\n            is_professional_requested: status.has('professional_requested'),\n            /** this client's request for a professional account has been rejected. */\n            is_professional_rejected: status.has('professional_rejected'),\n            /** this client is using social signup. */\n            is_social_signup: status.has('social_signup'),\n            /** client has not completed the trading experience questionnaire. */\n            is_trading_experience_not_complete: status.has('trading_experience_not_complete'),\n            /** client cannot deposit or buy contracts, but can withdraw or sell contracts. */\n            is_unwelcome: status.has('unwelcome'),\n            /** deposits allowed but withdrawals are not allowed. */\n            is_withdrawal_locked: status.has('withdrawal_locked'),\n            /** this prevent a client from changing the account currency after deposit attempt. */\n            is_deposit_attempt: status.has('deposit_attempt'),\n            /** client POI documents name mismatch. */\n            is_poi_name_mismatch: status.has('poi_name_mismatch'),\n            /** the client can resubmit POA documents. */\n            is_allow_poa_resubmission: status.has('allow_poa_resubmission'),\n            /** the client can resubmit POI documents. */\n            is_allow_poi_resubmission: status.has('allow_poi_resubmission'),\n            /** the client has been sharing payment methods. */\n            is_shared_payment_method: status.has('shared_payment_method'),\n            /** client is not allowed to edit personal profile details. */\n            is_personal_details_locked: status.has('personal_details_locked'),\n            /** it block any transfer between two accounts. */\n            is_transfers_blocked: status.has('transfers_blocked'),\n            /** the DF deposit will be blocked until the client gets age verified. */\n            is_df_deposit_requires_poi: status.has('df_deposit_requires_poi'),\n            /** the client has been fully authenticated by IDV. */\n            is_authenticated_with_idv_photoid: status.has('authenticated_with_idv_photoid'),\n            /** the client used to be fully authenticated by IDV but it was taken away due to compliance criteria. */\n            is_idv_revoked: status.has('idv_revoked'),\n        };\n    }, [get_account_status_data?.status]);\n\n    return {\n        /** The account status response. */\n        data: modified_account_status,\n        ...rest,\n    };\n};\n\nexport default useAccountStatus;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\n\n/** A custom hook to get available account types for a specific landing company. */\nconst useAccountTypes = (landing_company?: string) => {\n    const { data, ...rest } = useQuery('get_account_types', {\n        payload: { company: landing_company },\n        options: { enabled: Boolean(landing_company) },\n    });\n\n    // Add additional information to the account types response.\n    const modified_account_types = useMemo(() => {\n        if (!data?.get_account_types) return;\n\n        return {\n            ...data.get_account_types,\n            /** Landing company for the account types */\n            landing_company,\n        };\n    }, [data?.get_account_types, landing_company]);\n\n    return {\n        /** The account types response. */\n        data: modified_account_types,\n        ...rest,\n    };\n};\n\nexport default useAccountTypes;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\n\n/** A custom hook that gets the balance for all the user accounts. */\nconst useBalance = () => {\n    const { isSuccess } = useAuthorize();\n    const { data: balance_data, ...rest } = useQuery('balance', {\n        payload: { account: 'all' },\n        options: {\n            enabled: isSuccess,\n        },\n    });\n\n    // Add additional information to the balance data.\n    const modified_balance = useMemo(() => ({ ...balance_data?.balance }), [balance_data?.balance]);\n\n    return {\n        /** The balance response. */\n        data: modified_balance,\n        ...rest,\n    };\n};\n\nexport default useBalance;\n","import { useCallback, useMemo } from 'react';\nimport useQuery from '../useQuery';\n\n/** A custom hook to get the currency config information from `website_status` endpoint and `crypto_config` endpoint. */\nconst useCurrencyConfig = () => {\n    const { data: website_status_data, ...rest } = useQuery('website_status');\n    const { data: crypto_config_data } = useQuery('crypto_config');\n\n    // Add additional information to the currency config.\n    const modified_currencies_config = useMemo(() => {\n        if (!website_status_data?.website_status?.currencies_config) return undefined;\n\n        const website_status_currencies_config = website_status_data.website_status.currencies_config;\n\n        return Object.keys(website_status_currencies_config).map(currency => {\n            const currency_config = website_status_currencies_config[currency];\n\n            return {\n                ...currency_config,\n                /** determine if the currency is a `crypto` currency */\n                is_crypto: currency_config?.type === 'crypto',\n                /** determine if the currency is a `fiat` currency */\n                is_fiat: currency_config?.type === 'fiat',\n                /** determine if the currency is `Australian Dollar` */\n                is_AUD: currency === 'AUD',\n                /** determine if the currency is `US Dollar` */\n                is_USD: currency === 'USD',\n                /** determine if the currency is `Euro` */\n                is_EUR: currency === 'EUR',\n                /** determine if the currency is `Pound Sterling` */\n                is_GBP: currency === 'GBP',\n                /** determine if the currency is `Bitcoin` */\n                is_BTC: currency === 'BTC',\n                /** determine if the currency is `Ethereum` */\n                is_ETH: currency === 'ETH',\n                /** determine if the currency is `Litecoin` */\n                is_LTC: currency === 'LTC',\n                /** determine if the currency is `Multi-Collateral DAI` */\n                is_DAI: currency === 'DAI',\n                /** determine if the currency is `IDK` */\n                is_IDK: currency === 'IDK',\n                /** determine if the currency is `Paxos Standard` */\n                is_PAX: currency === 'PAX',\n                /** determine if the currency is `Binary Coin` */\n                is_USB: currency === 'USB',\n                /** determine if the currency is `Tether Omni` */\n                is_USDT: currency === 'UST',\n                /** determine if the currency is `True USD` */\n                is_TUSD: currency === 'TUSD',\n                /** determine if the currency is `Binance USD` */\n                is_BUSD: currency === 'BUSD',\n                /** determine if the currency is `STATIS Euro` */\n                is_EURS: currency === 'EURS',\n                /** determine if the currency is `Tether ERC20` */\n                is_eUSDT: currency === 'eUSDT',\n                /** determine if the currency is `Tether TRC20` */\n                is_tUSDT: currency === 'tUSDT',\n                /** determine if the currency is `USD Coin` */\n                is_USDC: currency === 'USDC',\n                /** determine if the currency is `USDK` */\n                is_USDK: currency === 'USDK',\n                /** Currency code */\n                code: currency,\n                /** Currency display code */\n                display_code: currency === 'UST' ? 'USDT' : currency,\n            };\n        });\n    }, [website_status_data?.website_status?.currencies_config]);\n\n    // Add additional information to the crypto config.\n    const modified_crypto_config = useMemo(() => {\n        return modified_currencies_config?.map(currency_config => ({\n            ...currency_config,\n            ...crypto_config_data?.crypto_config?.currencies_config[currency_config.code],\n        }));\n    }, [crypto_config_data?.crypto_config?.currencies_config, modified_currencies_config]);\n\n    // Transform the currency config array into a record object.\n    const transformed_currencies_config = useMemo(() => {\n        return modified_crypto_config?.reduce<Record<string, typeof modified_crypto_config[number]>>(\n            (previous, current) => ({ ...previous, [current.code]: current }),\n            {}\n        );\n    }, [modified_crypto_config]);\n\n    const getConfig = useCallback(\n        (currency: string) => transformed_currencies_config?.[currency],\n        [transformed_currencies_config]\n    );\n\n    return {\n        /** Available currencies and their information */\n        data: transformed_currencies_config,\n        /** Returns the currency config object for the given currency */\n        getConfig,\n        ...rest,\n    };\n};\n\nexport default useCurrencyConfig;\n","import { useAuthorize } from '../hooks';\n\ntype TCurrency = NonNullable<ReturnType<typeof useAuthorize>['data']['currency']>;\ntype TPreferredLanguage = ReturnType<typeof useAuthorize>['data']['preferred_language'];\n\nexport const displayMoney = (\n    amount: number,\n    currency: TCurrency,\n    options?: {\n        fractional_digits?: number;\n        preferred_language?: TPreferredLanguage;\n    }\n) => {\n    try {\n        return `${Intl.NumberFormat(options?.preferred_language || 'en-US', {\n            minimumFractionDigits: options?.fractional_digits || 2,\n            maximumFractionDigits: options?.fractional_digits || 2,\n            minimumIntegerDigits: 1,\n        }).format(amount)} ${currency}`;\n    } catch (error) {\n        return `${amount} ${currency}`;\n    }\n};\n","import { useMemo } from 'react';\nimport useAuthorize from './useAuthorize';\nimport useBalance from './useBalance';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport { displayMoney } from '../utils';\n\n/** A custom hook that returns the list of accounts for the current user. */\nconst useDerivAccountsList = () => {\n    const { data: authorize_data, ...rest } = useAuthorize();\n    const { data: balance_data } = useBalance();\n    const { getConfig } = useCurrencyConfig();\n\n    // Add additional information to the authorize response.\n    const modified_accounts = useMemo(() => {\n        return authorize_data.account_list?.map(account => {\n            return {\n                ...account,\n                /** Creation time of the account. */\n                created_at: account.created_at ? new Date(account.created_at) : undefined,\n                /** Account's currency config information */\n                currency_config: account.currency ? getConfig(account.currency) : undefined,\n                /** Date till client has excluded him/herself from the website, only present if client is self excluded. */\n                excluded_until: account.excluded_until ? new Date(account.excluded_until) : undefined,\n                /** Indicating whether the wallet is the currently active account. */\n                is_active: account.loginid === authorize_data.loginid,\n                /** indicating whether the account is marked as disabled or not. */\n                is_disabled: Boolean(account.is_disabled),\n                /** indicating whether the account is a trading account. */\n                is_trading: account.account_category === 'trading',\n                /** indicating whether the account is a virtual-money account. */\n                is_virtual: Boolean(account.is_virtual),\n                /** indicating whether the account is a wallet account. */\n                is_wallet: account.account_category === 'wallet',\n                /** The account ID of specified account. */\n                loginid: `${account.loginid}`,\n                /** The platform of the account */\n                platform: 'deriv' as const,\n                /** To indicate whether the account is MF or not */\n                is_mf: account.loginid?.startsWith('MF'),\n            } as const;\n        });\n    }, [authorize_data.account_list, authorize_data.loginid, getConfig]);\n\n    // Add balance to each account\n    const modified_accounts_with_balance = useMemo(\n        () =>\n            modified_accounts?.map(account => {\n                const balance = balance_data?.accounts?.[account.loginid]?.balance || 0;\n\n                return {\n                    ...account,\n                    /** The balance of the account. */\n                    balance,\n                    /** The balance of the account in currency format. */\n                    display_balance: displayMoney(balance, account.currency_config?.display_code || 'USD', {\n                        fractional_digits: account.currency_config?.fractional_digits,\n                        preferred_language: authorize_data?.preferred_language,\n                    }),\n                };\n            }),\n        [balance_data?.accounts, modified_accounts, authorize_data?.preferred_language]\n    );\n\n    return {\n        /** The list of accounts for the current user. */\n        data: modified_accounts_with_balance,\n        ...rest,\n    };\n};\n\nexport default useDerivAccountsList;\n","import { useMemo } from 'react';\nimport useDerivAccountsList from './useDerivAccountsList';\n\n/** A custom hook that returns the account object for the current active account. */\nconst useActiveAccount = () => {\n    const { data, ...rest } = useDerivAccountsList();\n    const active_account = useMemo(() => data?.find(account => account.is_active), [data]);\n\n    return {\n        /** User's current active account. */\n        data: active_account,\n        ...rest,\n    };\n};\n\nexport default useActiveAccount;\n","import { useMemo } from 'react';\nimport useDerivAccountsList from './useDerivAccountsList';\n\n/** A custom hook that gets the list of all wallet accounts for the current user. */\nconst useWalletAccountsList = () => {\n    const { data: account_list_data, ...rest } = useDerivAccountsList();\n\n    // Filter out non-wallet accounts.\n    const filtered_accounts = useMemo(\n        () => account_list_data?.filter(account => account.is_wallet),\n        [account_list_data]\n    );\n\n    // Add additional information to each wallet account.\n    const modified_accounts = useMemo(() => {\n        return filtered_accounts?.map(wallet => {\n            const wallet_currency_type = wallet.is_virtual ? 'Demo' : wallet.currency || '';\n            const dtrade_loginid = wallet.linked_to?.find(account => account.platform === 'dtrade')?.loginid;\n\n            return {\n                ...wallet,\n                /** Returns the wallet's currency type. ex: `Demo`, `USD`, etc. */\n                wallet_currency_type,\n                /** Landing company shortcode the account belongs to. */\n                landing_company_name: wallet.landing_company_name?.replace('maltainvest', 'malta'),\n                /** Indicating whether the wallet is a maltainvest wallet. */\n                is_malta_wallet: wallet.landing_company_name === 'maltainvest',\n                /** The DTrade account ID of this wallet */\n                dtrade_loginid,\n                /** Returns if the wallet is a crypto wallet. */\n                is_crypto: wallet.currency_config?.is_crypto,\n            } as const;\n        });\n    }, [filtered_accounts]);\n\n    // Sort wallet accounts alphabetically by fiat, crypto, then virtual.\n    const sorted_accounts = useMemo(() => {\n        if (!modified_accounts) return;\n\n        return [...modified_accounts].sort((a, b) => {\n            if (a.is_virtual !== b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if (a.currency_config?.is_crypto !== b.currency_config?.is_crypto) {\n                return a.currency_config?.is_crypto ? 1 : -1;\n            }\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        });\n    }, [modified_accounts]);\n\n    return {\n        /** The list of wallet accounts for the current user. */\n        data: sorted_accounts,\n        ...rest,\n    };\n};\n\nexport default useWalletAccountsList;\n","import { useMemo } from 'react';\nimport useWalletAccountsList from './useWalletAccountsList';\n\n/** A custom hook that returns the wallet object for the current active wallet. */\nconst useActiveWalletAccount = () => {\n    const { data, ...rest } = useWalletAccountsList();\n    const active_wallet = useMemo(() => data?.find(wallet => wallet.is_active), [data]);\n\n    return {\n        /** User's current active wallet. */\n        data: active_wallet,\n        ...rest,\n    };\n};\n\nexport default useActiveWalletAccount;\n","import { useMemo } from 'react';\nimport useDerivAccountsList from './useDerivAccountsList';\nimport useActiveWalletAccount from './useActiveWalletAccount';\n\n/** A custom hook that gets the active linked trading account for the current user. */\nconst useActiveLinkedToTradingAccount = () => {\n    const { data: account_list_data } = useDerivAccountsList();\n    const { data: wallet_account_data } = useActiveWalletAccount();\n\n    const linkedDtradeLoginId = wallet_account_data?.linked_to?.find(\n        linked => linked.loginid && linked?.platform === 'dtrade'\n    )?.loginid;\n\n    const matchingTradingAccount = account_list_data?.filter(account => account.loginid === linkedDtradeLoginId)[0];\n\n    const modified_account = useMemo(() => {\n        if (!account_list_data || !wallet_account_data) return undefined;\n        return { ...matchingTradingAccount };\n    }, [account_list_data, matchingTradingAccount, wallet_account_data]);\n\n    return {\n        /** The active linked trading account for the current user. */\n        data: modified_account,\n    };\n};\n\nexport default useActiveLinkedToTradingAccount;\n","import { useMemo } from 'react';\nimport useDerivAccountsList from './useDerivAccountsList';\nimport useCurrencyConfig from './useCurrencyConfig';\n\n/** A custom hook that gets the list of all trading accounts for the current user. */\nconst useTradingAccountsList = () => {\n    const { data: account_list_data, ...rest } = useDerivAccountsList();\n    const { getConfig } = useCurrencyConfig();\n\n    // Filter out non-trading accounts.\n    const filtered_accounts = useMemo(\n        () => account_list_data?.filter(account => account.is_trading),\n        [account_list_data]\n    );\n\n    // Add additional information to each trading account.\n    const modified_accounts = useMemo(() => {\n        return filtered_accounts?.map(trading => ({\n            ...trading,\n            first_real_loginid: filtered_accounts?.find(account => account.account_type === 'real')?.loginid[0],\n            demo_loginid: filtered_accounts?.find(account => account.account_type === 'demo')?.loginid,\n        }));\n    }, [filtered_accounts]);\n\n    const fiat_account =\n        modified_accounts?.find(account => getConfig(account.currency ?? '')?.is_fiat)?.currency ?? 'USD';\n\n    return {\n        /** The list of trading accounts for the current user. */\n        data: modified_accounts,\n        /** The currency of the fiat account. */\n        fiat_account,\n        ...rest,\n    };\n};\n\nexport default useTradingAccountsList;\n","import { useMemo } from 'react';\nimport useTradingAccountsList from './useTradingAccountsList';\n\n/** A custom hook that returns the trading object for the current active trading. */\nconst useActiveTradingAccount = () => {\n    const { data, ...rest } = useTradingAccountsList();\n    const active_trading = useMemo(() => data?.find(trading => trading.is_active), [data]);\n\n    return {\n        /** User's current active trading. */\n        data: active_trading,\n        ...rest,\n    };\n};\n\nexport default useActiveTradingAccount;\n","import { useEffect } from 'react';\nimport useAuthorize from './useAuthorize';\nimport useSubscription from '../useSubscription';\nimport { displayMoney } from '../utils';\nimport useActiveWalletAccount from './useActiveWalletAccount';\n\n/**\n * Hook to display live, subscribed balance.\n * Use when you have only one wallet on screen.\n */\nconst useActiveWalletBalance = () => {\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { data: account } = useAuthorize();\n\n    const { subscribe, data: balanceData, unsubscribe, ...rest } = useSubscription('balance');\n\n    const balance = balanceData?.balance?.balance || 0;\n    const currencyCode = balanceData?.balance?.currency || 'USD';\n\n    useEffect(() => {\n        subscribe();\n\n        return () => unsubscribe();\n    }, [subscribe]);\n\n    const displayBalance = displayMoney(balance, currencyCode, {\n        fractional_digits: activeWallet?.currency_config?.fractional_digits,\n        preferred_language: account?.preferred_language,\n    });\n\n    return {\n        data: balanceData,\n        displayBalance,\n        ...rest,\n    };\n};\n\nexport default useActiveWalletBalance;\n","import { useRef, useState } from 'react';\nimport { TSocketRequestPayload, TSocketResponseData } from '../../types';\nimport { hashObject } from '../utils';\nimport { useAPIContext } from '../APIProvider';\n\ntype TCurrencyPayload = Exclude<\n    NonNullable<TSocketRequestPayload<'exchange_rates'>>['payload']['target_currency'],\n    undefined\n>;\ntype TCurrencyRateData = NonNullable<TSocketResponseData<'exchange_rates'>['exchange_rates']>['rates'];\ntype TCurrencyExchangeSubscribeFunction<T> = { base_currency: T; target_currencies: T[] };\n\nconst useExchangeRates = <T extends TCurrencyPayload>() => {\n    const { subscribe: _subscribe, unsubscribe: _unsubscribe } = useAPIContext();\n    const exchangeRatesSubscriptions = useRef<string[]>([]);\n    const [data, setData] = useState<Record<TCurrencyPayload, TCurrencyRateData>>();\n\n    const subscribe = async ({ base_currency, target_currencies }: TCurrencyExchangeSubscribeFunction<T>) => {\n        await Promise.all(\n            target_currencies.map(async c => {\n                const { id, subscription } = await _subscribe('exchange_rates', {\n                    payload: { base_currency, target_currency: c },\n                });\n                if (!exchangeRatesSubscriptions.current.includes(id)) {\n                    exchangeRatesSubscriptions.current.push(id);\n                    subscription.subscribe((response: TSocketResponseData<'exchange_rates'>) => {\n                        const rates = response.exchange_rates?.rates;\n                        if (rates) {\n                            setData(prev => {\n                                const currentData = { ...(prev ?? {}) };\n                                if (currentData) {\n                                    currentData[base_currency] = { ...currentData[base_currency], ...rates };\n                                    return currentData;\n                                }\n                                return { [base_currency]: rates };\n                            });\n                        }\n                    });\n                }\n            })\n        );\n    };\n\n    const unsubscribe = async (payload: TCurrencyExchangeSubscribeFunction<T>) => {\n        if (payload) {\n            const id = await hashObject({ name: 'exchange_rates', payload });\n            exchangeRatesSubscriptions.current = exchangeRatesSubscriptions.current.filter(s => s !== id);\n            _unsubscribe(id);\n            setData(prev => {\n                const currData = { ...(prev ?? {}) };\n                delete currData[payload.base_currency];\n                return currData;\n            });\n            return;\n        }\n        exchangeRatesSubscriptions.current.forEach(s => _unsubscribe(s));\n    };\n\n    const getExchangeRate = (base: string, target: string) => {\n        if (data) {\n            return data?.[base]?.[target] ?? 1;\n        }\n        return 1;\n    };\n\n    return { data, subscribe, unsubscribe, getExchangeRate };\n};\n\nexport default useExchangeRates;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport { displayMoney } from '../utils';\nimport useExchangeRates from './useExchangeRates';\nimport useTradingAccountsList from './useTradingAccountsList';\n\n/** A custom hook that gets the list of created cTrader accounts. */\nconst useCtraderAccountsList = () => {\n    const { data: authorize_data, isSuccess } = useAuthorize();\n    const { data: ctrader_accounts, ...rest } = useQuery('trading_platform_accounts', {\n        payload: { platform: 'ctrader' },\n        options: { enabled: isSuccess },\n    });\n    const { getConfig } = useCurrencyConfig();\n    const { fiat_account } = useTradingAccountsList();\n    const { getExchangeRate } = useExchangeRates();\n\n    /** Adding neccesary properties to cTrader accounts */\n    const modified_ctrader_accounts = useMemo(\n        () =>\n            ctrader_accounts?.trading_platform_accounts?.map(account => {\n                const balance = account.balance ?? 0;\n                return {\n                    ...account,\n                    /** Account's currency config information */\n                    currency_config: account.currency ? getConfig(account.currency) : undefined,\n                    /** The id of the cTrader account */\n                    id: account.account_id,\n                    /** indicating whether the account is a virtual-money account. */\n                    is_virtual: account.account_type === 'demo',\n                    /** Landing company shortcode the account belongs to. */\n                    landing_company_name: account.landing_company_short,\n                    /** The platform of the account */\n                    platform: 'ctrader' as const,\n                    /** Formatted display balance */\n                    formatted_balance: displayMoney(account.balance || 0, account.currency || 'USD', {\n                        preferred_language: authorize_data?.preferred_language,\n                    }),\n                    /** Converted balance from the exchange rate */\n                    converted_balance: getExchangeRate(fiat_account, account.currency ?? 'USD') * balance,\n                };\n            }),\n        [\n            authorize_data?.preferred_language,\n            fiat_account,\n            getConfig,\n            getExchangeRate,\n            ctrader_accounts?.trading_platform_accounts,\n        ]\n    );\n    return {\n        /** List of all created cTrader accounts */\n        data: modified_ctrader_accounts,\n        ...rest,\n    };\n};\n\nexport default useCtraderAccountsList;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport { displayMoney } from '../utils';\nimport useTradingAccountsList from './useTradingAccountsList';\nimport useExchangeRates from './useExchangeRates';\n\n/** A custom hook that gets the list of created Deriv X accounts. */\nconst useDxtradeAccountsList = () => {\n    const { data: authorize_data, isSuccess } = useAuthorize();\n    const { data: dxtrade_accounts, ...rest } = useQuery('trading_platform_accounts', {\n        payload: { platform: 'dxtrade' },\n        options: { enabled: isSuccess },\n    });\n    const { getConfig } = useCurrencyConfig();\n    const { getExchangeRate } = useExchangeRates();\n    const { fiat_account } = useTradingAccountsList();\n\n    /** Adding necessary properties to Deriv X accounts */\n    const modified_dxtrade_accounts = useMemo(\n        () =>\n            dxtrade_accounts?.trading_platform_accounts?.map(account => {\n                const balance = account.balance ?? 0;\n                return {\n                    ...account,\n                    /** Account's currency config information */\n                    currency_config: account.currency ? getConfig(account.currency) : undefined,\n                    /** The balance of the account in currency format. */\n                    display_balance: displayMoney(account?.balance || 0, account?.currency || 'USD', {\n                        preferred_language: authorize_data?.preferred_language,\n                    }),\n                    /** indicating whether the account is a virtual-money account. */\n                    is_virtual: account.account_type === 'demo',\n                    /** Landing company shortcode the account belongs to. */\n                    landing_company_name: account.landing_company_short,\n                    /** The platform of the account */\n                    platform: 'dxtrade' as const,\n                    /** Converted balance from the exchange rate */\n                    converted_balance: getExchangeRate(fiat_account, account.currency ?? 'USD') * balance,\n                };\n            }),\n        [\n            authorize_data?.preferred_language,\n            dxtrade_accounts?.trading_platform_accounts,\n            fiat_account,\n            getConfig,\n            getExchangeRate,\n        ]\n    );\n\n    return {\n        /** List of all created Deriv X accounts */\n        data: modified_dxtrade_accounts,\n        ...rest,\n    };\n};\n\nexport default useDxtradeAccountsList;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport { displayMoney } from '../utils';\nimport useTradingAccountsList from './useTradingAccountsList';\nimport useExchangeRates from './useExchangeRates';\n\n/** A custom hook that gets the list created MT5 accounts of the user. */\nconst useMT5AccountsList = () => {\n    const { data: authorize_data, isSuccess } = useAuthorize();\n    const { getConfig } = useCurrencyConfig();\n    const { fiat_account } = useTradingAccountsList();\n    const { getExchangeRate } = useExchangeRates();\n\n    const { data: mt5_accounts, ...mt5_accounts_rest } = useQuery('mt5_login_list', {\n        options: { enabled: isSuccess },\n    });\n\n    /**\n     * @description The list of created MT5 accounts\n     */\n    const modified_mt5_accounts = useMemo(() => {\n        return mt5_accounts?.mt5_login_list?.map(account => {\n            const balance = account.balance ?? 0;\n            return {\n                ...account,\n                /** Account's currency config information */\n                currency_config: account.currency ? getConfig(account.currency) : undefined,\n                /** The formatted display login of the account */\n                display_login: account.login?.replace(/^(MT[DR]?)/, ''),\n                /** Landing company shortcode the account belongs to. */\n                landing_company_name: account.landing_company_short,\n                /** The id of the account */\n                loginid: account.login,\n                /** The balance of the account in currency format. */\n                display_balance: displayMoney(account.balance || 0, account.currency || 'USD', {\n                    preferred_language: authorize_data?.preferred_language,\n                }),\n                /** indicating whether the account is a virtual-money account. */\n                is_virtual: account.account_type === 'demo',\n                /** The platform of the account */\n                platform: 'mt5' as const,\n                /** Converted balance from the exchange rate */\n                converted_balance: getExchangeRate(fiat_account, account.currency ?? 'USD') * balance,\n            };\n        });\n    }, [authorize_data?.preferred_language, fiat_account, getConfig, getExchangeRate, mt5_accounts?.mt5_login_list]);\n\n    return {\n        /** The list of created MT5 accounts */\n        data: modified_mt5_accounts,\n        ...mt5_accounts_rest,\n    };\n};\n\nexport default useMT5AccountsList;\n","import { useMemo } from 'react';\n\nimport useCtraderAccountsList from './useCtraderAccountsList';\nimport useDxtradeAccountsList from './useDxtradeAccountsList';\nimport useMT5AccountsList from './useMT5AccountsList';\n\n/** A custom hook that gets the list all created CFD accounts of the user. */\nconst useCFDAccountsList = () => {\n    const {\n        data: mt5_accounts,\n        isError: isMT5AccountsListError,\n        isLoading: isMT5AccountsListLoading,\n        isSuccess: isMT5AccountsListSuccess,\n    } = useMT5AccountsList();\n    const {\n        data: dxtrade_accounts,\n        isError: isDxtradeAccountsListError,\n        isLoading: isDxtradeAccountsListLoading,\n        isSuccess: isDxtradeAccountsListSuccess,\n    } = useDxtradeAccountsList();\n    const {\n        data: ctrader_accounts,\n        isError: isCtraderAccountsListError,\n        isLoading: CtraderAccountsListLoading,\n        isSuccess: isCtraderAccountsListSuccess,\n    } = useCtraderAccountsList();\n\n    const data = useMemo(() => {\n        if (!mt5_accounts || !dxtrade_accounts || !ctrader_accounts) return;\n\n        return {\n            mt5: mt5_accounts,\n            dxtrade: dxtrade_accounts,\n            ctrader: ctrader_accounts,\n        };\n    }, [mt5_accounts, dxtrade_accounts, ctrader_accounts]);\n\n    const isError = isMT5AccountsListError || isDxtradeAccountsListError || isCtraderAccountsListError;\n\n    const isLoading = isMT5AccountsListLoading || isDxtradeAccountsListLoading || CtraderAccountsListLoading;\n\n    const isSuccess = isMT5AccountsListSuccess && isDxtradeAccountsListSuccess && isCtraderAccountsListSuccess;\n\n    return {\n        data,\n        isError,\n        isLoading,\n        isSuccess,\n    };\n};\n\nexport default useCFDAccountsList;\n","import { useMemo } from 'react';\nimport useDerivAccountsList from './useDerivAccountsList';\nimport useCFDAccountsList from './useCFDAccountsList';\n\n/** A custom hook to get all user accounts, including external apps accounts */\nconst useAllAccountsList = () => {\n    const {\n        data: accountsList,\n        isError: isAccountsListError,\n        isLoading: isAccountsListLoading,\n    } = useDerivAccountsList();\n    const {\n        data: cfdsList,\n        isError: isCFDAccountsListError,\n        isLoading: isCFDAccountsListLoading,\n    } = useCFDAccountsList();\n\n    const accounts = useMemo(\n        () => ({\n            wallets: accountsList?.filter(account => account.is_wallet),\n            dtrade: accountsList?.filter(account => account.is_trading),\n            ...cfdsList,\n        }),\n        [accountsList, cfdsList]\n    );\n    const isError = isAccountsListError || isCFDAccountsListError;\n    const isLoading = isAccountsListLoading || isCFDAccountsListLoading;\n\n    return {\n        data: accounts,\n        isError,\n        isLoading,\n    };\n};\n\nexport default useAllAccountsList;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\n\n/** A custom hook that gets the list of available wallets. */\nconst useAvailableWallets = () => {\n    const { isSuccess } = useAuthorize();\n    const { data, ...rest } = useQuery('available_accounts', {\n        payload: {\n            categories: ['wallet'],\n        },\n        options: {\n            enabled: isSuccess,\n        },\n    });\n\n    const modifiedData = useMemo(() => {\n        if (!data?.available_accounts?.wallets) return;\n\n        return data.available_accounts.wallets;\n    }, [data]);\n\n    return {\n        /** List of available wallet accounts to create */\n        data: modifiedData,\n        ...rest,\n    };\n};\n\nexport default useAvailableWallets;\n","import { useCallback, useMemo } from 'react';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport useWalletAccountsList from './useWalletAccountsList';\nimport useAvailableWallets from './useAvailableWallets';\n\n/** A custom hook that gets the list of added and non-added wallet accounts. */\nconst useAllWalletAccounts = () => {\n    const { data: nonAddedWallets, ...rest } = useAvailableWallets();\n    const { data: addedWallets } = useWalletAccountsList();\n    const { getConfig } = useCurrencyConfig();\n\n    /** Get all the added and non-added wallets account */\n    const modifiedWallets = useMemo(() => {\n        const nonVirtualWallets = addedWallets?.filter(wallet => !wallet.is_virtual);\n\n        /** Modify added wallets list with adding `is_added` and `is_crypto` flag */\n        const modifiedAddedWallets = nonVirtualWallets?.map(wallet => ({\n            currency: wallet.currency,\n            landing_company_name: wallet.landing_company_name,\n            is_added: true,\n            is_crypto: wallet.currency ? getConfig(wallet.currency)?.is_crypto : false,\n        }));\n\n        /** Modify non-added wallets list with adding `is_added` and `is_crypto` flag */\n        const modifiedNonAddedWallets = nonAddedWallets?.map(wallet => ({\n            currency: wallet.currency,\n            landing_company_name: wallet.landing_company,\n            is_added: false,\n            is_crypto: wallet.account_type === 'crypto',\n        }));\n\n        return [...(modifiedAddedWallets || []), ...(modifiedNonAddedWallets || [])];\n    }, [nonAddedWallets, addedWallets, getConfig]);\n\n    /** Function to sort wallet based on currency */\n    const sortWalletsByCurrency = useCallback(\n        (a: typeof modifiedWallets[number], b: typeof modifiedWallets[number]) => {\n            if (a.is_crypto !== b.is_crypto) return a.is_crypto ? 1 : -1;\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        },\n        []\n    );\n\n    /** Sort the wallets by fiat, crypto, then virtual */\n    const sortedWallets = useMemo(() => {\n        if (!modifiedWallets) return;\n\n        // Sort wallets by non-added wallets then added wallets\n        modifiedWallets.sort((a, b) => {\n            if (a.is_added !== b.is_added) return a.is_added ? 1 : -1;\n\n            return 0;\n        });\n\n        // Sort the added wallets alphabetically by fiat, crypto, then virtual (if any)\n        modifiedWallets.sort((a, b) => {\n            if (!a.is_added || !b.is_added) return 0;\n            return sortWalletsByCurrency(a, b);\n        });\n\n        // Sort the non-added wallets alphabetically by fiat, crypto, then virtual (if any)\n        modifiedWallets.sort((a, b) => {\n            if (a.is_added || b.is_added) return 0;\n            return sortWalletsByCurrency(a, b);\n        });\n\n        return [...modifiedWallets];\n    }, [modifiedWallets, sortWalletsByCurrency]);\n\n    return {\n        /** Sorted wallets accounts */\n        data: sortedWallets,\n        ...rest,\n    };\n};\n\nexport default useAllWalletAccounts;\n","import { useMemo } from 'react';\nimport useGetAccountStatus from './useGetAccountStatus';\n\n/** A custom hook to get the verification status (basically any poi, poa, poinc, poo) of the current user. */\nconst useAuthentication = () => {\n    const { data: get_account_status_data, ...rest } = useGetAccountStatus();\n\n    const modified_account_status = useMemo(() => {\n        if (!get_account_status_data) return;\n\n        const needs_verification = new Set(get_account_status_data.authentication?.needs_verification);\n        const account_status = new Set(get_account_status_data?.status);\n\n        return {\n            ...get_account_status_data.authentication,\n            /** client has been authenticated with IDV photo ID feature */\n            is_authenticated_with_idv_photoid: account_status.has('is_authenticated_with_idv_photoid'),\n            /** client is required to verify their document (proof of address) */\n            is_poa_needed: needs_verification.has('document'),\n            /** client is required to verify their identity */\n            is_poi_needed: needs_verification.has('identity'),\n            /** client has been age-verified */\n            is_age_verified: account_status.has('age_verification'),\n            /** client is prevented from verifying from idv */\n            is_idv_disallowed: account_status.has('idv_disallowed'),\n            /** client IDV is revoked */\n            is_idv_revoked: account_status.has('idv_revoked'),\n            /** client is allowed to perform POI and POA (allow uploading documents) */\n            is_allow_document_upload: account_status.has('allow_document_upload'),\n            /** client can resubmit POI documents */\n            is_poi_resubmission_allowed: account_status.has('allow_poi_resubmission'),\n            /** client can resubmit POA documents */\n            is_poa_resubmission_allowed: account_status.has('allow_poa_resubmission'),\n            /** client's name in POI documents does not match */\n            is_poi_name_mismatch: account_status.has('poi_name_mismatch'),\n            /** client's name in POA documents does not match */\n            is_poa_address_mismatch: account_status.has('poa_address_mismatch'),\n            /** client has attempted POA before */\n            has_poa_been_attempted: get_account_status_data?.authentication?.document?.status !== 'none',\n            /** client has attempted POI before */\n            has_poi_been_attempted: get_account_status_data?.authentication?.identity?.status !== 'none',\n            /** client's poi verification status */\n            poi_status: get_account_status_data?.authentication?.identity?.status,\n            /** client's poa verification status */\n            poa_status: get_account_status_data?.authentication?.document?.status,\n            /** client's risk classification: `low`, `standard`, `high`.  */\n            risk_classification: get_account_status_data?.risk_classification,\n        };\n    }, [get_account_status_data]);\n\n    return {\n        data: modified_account_status,\n        ...rest,\n    };\n};\n\nexport default useAuthentication;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useSettings from './useSettings';\n\n/** A custom hook that returns the available landing companies of the user's country. */\nconst useLandingCompany = () => {\n    const { data: settings_data } = useSettings();\n    const { data, ...rest } = useQuery('landing_company', {\n        payload: { landing_company: settings_data?.country_code || '' },\n        options: { enabled: Boolean(settings_data?.country_code) },\n    });\n\n    // Add additional information to the landing company response.\n    const modified_landing_company = useMemo(() => {\n        if (!data?.landing_company) return;\n\n        return { ...data.landing_company };\n    }, [data?.landing_company]);\n\n    return {\n        /** The landing company response. */\n        data: modified_landing_company,\n        ...rest,\n    };\n};\n\nexport default useLandingCompany;\n","import { useMemo } from 'react';\nimport useLandingCompany from './useLandingCompany';\n\n/**\n * A custom hook that provides flags to determine the accessibility status of cTrader and Dxtrade based on the current country of residence.\n */\nconst useAccesiblePlatforms = () => {\n    const { data: landing_company, ...rest } = useLandingCompany();\n\n    const modified_accesible_platform = useMemo(() => {\n        if (!landing_company) return;\n\n        /** check if ctrader jurisdiction is offered in the landing_company response  */\n        const is_ctrader_available = landing_company?.ctrader?.all?.standard === 'svg';\n        /** check if dxtrade is in the landing_company response */\n        const is_dxtrade_available = landing_company?.dxtrade_all_company;\n        /** check if MT5 is in the landing_company response */\n        const is_mt5_available =\n            landing_company?.mt_financial_company ||\n            landing_company?.mt_gaming_company ||\n            landing_company?.mt_all_company;\n\n        return {\n            /** is ctrader accessible for this country of residence */\n            is_ctrader_available: !!is_ctrader_available,\n            /** is dxtrade accessible for this country of residence */\n            is_dxtrade_available: !!is_dxtrade_available,\n            /** is mt5 accessible for this country of residence */\n            is_mt5_available: !!is_mt5_available,\n        };\n    }, [landing_company]);\n\n    return {\n        data: modified_accesible_platform,\n        ...rest,\n    };\n};\n\nexport default useAccesiblePlatforms;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\n\nconst market_type_to_leverage_mapper: Record<string, number> = {\n    gaming: 500,\n    financial: 1000,\n    all: 100,\n};\n\n/** A custom hook to get the list of available MT5 accounts. */\nconst useAvailableMT5Accounts = () => {\n    const { isSuccess } = useAuthorize();\n    const { data: mt5_available_accounts, ...rest } = useQuery('trading_platform_available_accounts', {\n        payload: { platform: 'mt5' },\n        options: { enabled: isSuccess },\n    });\n\n    const modified_mt5_available_accounts = useMemo(\n        () =>\n            mt5_available_accounts?.trading_platform_available_accounts?.map(account => {\n                return {\n                    ...account,\n                    /** The market type for the account */\n                    market_type: account.market_type === 'gaming' ? 'synthetic' : account.market_type,\n                    /** The platform for the account */\n                    platform: 'mt5',\n                    /** Leverage for the account */\n                    leverage:\n                        market_type_to_leverage_mapper[\n                            account.market_type as keyof typeof market_type_to_leverage_mapper\n                        ],\n                } as const;\n            }),\n        [mt5_available_accounts?.trading_platform_available_accounts]\n    );\n\n    return {\n        /** The available MT5 accounts */\n        data: modified_mt5_available_accounts,\n        ...rest,\n    };\n};\n\nexport default useAvailableMT5Accounts;\n","import { useMemo } from 'react';\nimport useGetAccountStatus from './useGetAccountStatus';\n\n/** A custom hook to check the cashier validations for the cashier locked scenarios. */\nconst useCashierValidation = () => {\n    const { data: get_account_status_data, ...rest } = useGetAccountStatus();\n\n    const modified_cashier_validation = useMemo(() => {\n        if (!get_account_status_data?.cashier_validation) return;\n\n        const cashier_validation = new Set(get_account_status_data?.cashier_validation);\n\n        return {\n            transfer_blocked: cashier_validation.has('transfer_blocked'),\n            no_residence: cashier_validation.has('no_residence'),\n            unwelcome_status: cashier_validation.has('unwelcome_status'),\n            self_exclusion: cashier_validation.has('SelfExclusion'),\n            no_withdrawal_or_trading_status: cashier_validation.has('no_withdrawal_or_trading_status'),\n            only_pa_withdrawals_allowed_status: cashier_validation.has('only_pa_withdrawals_allowed_status'),\n            withdraw_service_unavailable_for_pa: cashier_validation.has('WithdrawServiceUnavailableForPA'),\n            withdrawal_locked_status: cashier_validation.has('withdrawal_locked_status'),\n            documents_expired: cashier_validation.has('documents_expired'),\n            cashier_locked_status: cashier_validation.has('cashier_locked_status'),\n            disabled_status: cashier_validation.has('disabled_status'),\n            financial_assessment_required: cashier_validation.has('FinancialAssessmentRequired'),\n            ask_currency: cashier_validation.has('ASK_CURRENCY'),\n            ask_authenticate: cashier_validation.has('ASK_AUTHENTICATE'),\n            ask_financial_risk_approval: cashier_validation.has('ASK_FINANCIAL_RISK_APPROVAL'),\n            ask_tin_information: cashier_validation.has('ASK_TIN_INFORMATION'),\n            ask_self_exclusion_max_turnover_set: cashier_validation.has('ASK_SELF_EXCLUSION_MAX_TURNOVER_SET'),\n            ask_fix_details: cashier_validation.has('ASK_FIX_DETAILS'),\n            pa_commision_withdrawal_limit: cashier_validation.has('PACommisionWithdrawalLimit'),\n        };\n    }, [get_account_status_data?.cashier_validation]);\n\n    return {\n        /** The cashier validation response. */\n        data: modified_cashier_validation,\n        ...rest,\n    };\n};\n\nexport default useCashierValidation;\n","import useMutation from '../useMutation';\n\n/**\n * A custom hook that calls the `account_closure` api. This call allows clients to close all their accounts (including virtual-money account)\n */\nconst useCloseDerivAccount = () => {\n    const response = useMutation('account_closure');\n    return response;\n};\n\nexport default useCloseDerivAccount;\n","import { useMemo } from 'react';\nimport useActiveWalletAccount from './useActiveWalletAccount';\nimport useAvailableMT5Accounts from './useAvailableMT5Accounts';\nimport useLandingCompany from './useLandingCompany';\nimport useMT5AccountsList from './useMT5AccountsList';\n\n// Remove the hardcoded values and use the values from the API once it's ready\nexport const MARKET_TYPE = {\n    ALL: 'all',\n    FINANCIAL: 'financial',\n    SYNTHETIC: 'synthetic',\n} as const;\n\n// Remove the hardcoded values and use the values from the API once it's ready\nexport const CFD_PLATFORMS = {\n    CFDS: 'CFDs',\n    CTRADER: 'ctrader',\n    DXTRADE: 'dxtrade',\n    MT5: 'mt5',\n} as const;\n\n// Remove the hardcoded values and use the values from the API once it's ready\nexport const JURISDICTION = {\n    BVI: 'bvi',\n    LABUAN: 'labuan',\n    MALTAINVEST: 'maltainvest',\n    SVG: 'svg',\n    VANUATU: 'vanuatu',\n} as const;\n\n// Remove the hardcoded values and use the values from the API once it's ready\nconst dxtradeAccount = {\n    leverage: 0,\n    market_type: MARKET_TYPE.ALL,\n    name: 'Deriv X',\n    platform: CFD_PLATFORMS.DXTRADE,\n    requirements: {\n        after_first_deposit: {\n            financial_assessment: [''],\n        },\n        compliance: {\n            mt5: [''],\n            tax_information: [''],\n        },\n        signup: [''],\n    },\n    shortcode: JURISDICTION.SVG,\n};\n\n// Remove the hardcoded values and use the values from the API once it's ready\nconst ctraderAccount = {\n    leverage: 0,\n    market_type: MARKET_TYPE.ALL,\n    name: 'cTrader',\n    platform: CFD_PLATFORMS.CTRADER,\n    requirements: {\n        after_first_deposit: {\n            financial_assessment: [''],\n        },\n        compliance: {\n            mt5: [''],\n            tax_information: [''],\n        },\n        signup: [''],\n    },\n    shortcode: JURISDICTION.SVG,\n};\n\n/** A custom hook that gets compare accounts values. */\nconst useCFDCompareAccounts = () => {\n    const { data: activeWallet } = useActiveWalletAccount();\n    const { is_virtual: isDemo } = activeWallet || {};\n\n    const { data: allAvailableMt5Accounts } = useAvailableMT5Accounts();\n    const { data: addedAccounts, ...rest } = useMT5AccountsList();\n\n    const modifiedMt5Data = useMemo(() => {\n        if (!allAvailableMt5Accounts || !addedAccounts) return;\n\n        return allAvailableMt5Accounts?.map(availableAccount => {\n            const createdAccount = addedAccounts?.find(account => {\n                return (\n                    availableAccount.market_type === account.market_type &&\n                    availableAccount.shortcode === account.landing_company_short\n                );\n            });\n            if (createdAccount)\n                return {\n                    ...availableAccount,\n\n                    /** Determine if the account is added or not */\n                    is_added: true,\n                } as const;\n\n            return {\n                ...availableAccount,\n\n                /** Determine if the account is added or not */\n                is_added: false,\n            } as const;\n        });\n    }, [addedAccounts, allAvailableMt5Accounts]);\n\n    // Sort the data by market_type to make sure the order is 'synthetic', 'financial', 'all'\n    const sortedMt5Accounts = useMemo(() => {\n        const marketTypeOrder = ['synthetic', 'financial', 'all'];\n\n        if (!modifiedMt5Data) return;\n\n        const sortedData = marketTypeOrder.reduce((acc, marketType) => {\n            const accounts = modifiedMt5Data.filter(account => account.market_type === marketType);\n            if (!accounts.length) return acc;\n            return [...acc, ...accounts];\n        }, [] as typeof modifiedMt5Data);\n\n        return sortedData;\n    }, [modifiedMt5Data]);\n\n    const { data: landingCompany } = useLandingCompany();\n\n    const hasDxtradeAccountAvailable = landingCompany?.dxtrade_all_company;\n    const hasCTraderAccountAvailable = landingCompany?.ctrader?.all?.standard === JURISDICTION.SVG;\n\n    const demoAvailableAccounts = useMemo(() => {\n        if (!sortedMt5Accounts) return;\n        return sortedMt5Accounts.filter(account => account.shortcode === JURISDICTION.SVG);\n    }, [sortedMt5Accounts]);\n\n    const modifiedData = useMemo(() => {\n        return {\n            ctraderAccount: hasCTraderAccountAvailable ? ctraderAccount : undefined,\n            dxtradeAccount: hasDxtradeAccountAvailable ? dxtradeAccount : undefined,\n            mt5Accounts: isDemo ? demoAvailableAccounts : sortedMt5Accounts,\n        };\n    }, [demoAvailableAccounts, hasCTraderAccountAvailable, hasDxtradeAccountAvailable, isDemo, sortedMt5Accounts]);\n\n    return {\n        data: modifiedData,\n        hasCTraderAccountAvailable,\n        hasDxtradeAccountAvailable,\n        ...rest,\n    };\n};\n\nexport default useCFDCompareAccounts;\n","import useMutation from '../useMutation';\n\n/** A custom hooks for cancelling crypto transaction  */\nconst useCancelCryptoTransaction = () => {\n    const { data, mutate, ...rest } = useMutation('cashier_withdrawal_cancel');\n\n    return {\n        /** The cancel crypto transaction response */\n        data: data?.cashier_withdrawal_cancel,\n        /** Function to cancel crypto transaction */\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useCancelCryptoTransaction;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TCashierParam = NonNullable<\n    Parameters<ReturnType<typeof useMutation<'cashier'>>['mutate']>\n>[0]['payload']['cashier'];\n\ntype TParams = Omit<\n    NonNullable<Parameters<ReturnType<typeof useMutation<'cashier'>>['mutate']>>[0]['payload'],\n    'cashier' | 'provider'\n>;\n\n/** A custom hook to get the deposit and withdrawal fiat address. */\nconst useCashierFiatAddress = () => {\n    const { data, mutate: _mutate, ...rest } = useMutation('cashier');\n    const iframe_url = typeof data?.cashier === 'string' ? `${data?.cashier}&DarkMode=off` : undefined;\n\n    const mutate = useCallback(\n        (cashier: TCashierParam, payload?: TParams) =>\n            _mutate({ payload: { cashier, provider: 'doughflow', ...payload } }),\n        [_mutate]\n    );\n\n    return {\n        /** The deposit/withdrawal fiat iframe */\n        data: iframe_url,\n        /** Function to get deposit/withdrawal fiat address */\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useCashierFiatAddress;\n","import { useEffect, useRef, useState } from 'react';\nimport { epochToMoment, toMoment } from '@deriv/utils';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { CryptoEstimations } from '@deriv/api-types';\nimport { TSocketError } from '../../types';\nimport useSubscription from '../useSubscription';\n\n/** A custom hook that returns the crypto_estimations fee for given currency code along with count_down and an unique_id */\nconst useCryptoEstimations = () => {\n    const { subscribe, data, error: subscription_error, unsubscribe } = useSubscription('crypto_estimations');\n    const [crypto_estimations_fee_details, setCryptoEstimationsFeeDetails] = useState<\n        CryptoEstimations['k']['withdrawal_fee']\n    >({});\n    const [crypto_estimations_fee_details_latest, setCryptoEstimationsFeeDetailsLatest] = useState<\n        CryptoEstimations['k']['withdrawal_fee']\n    >({});\n    const [currency_code, setCurrencyCode] = useState<string>('BTC');\n    const [error, setError] = useState<TSocketError<'crypto_estimations'>['error']>();\n    const [count_down, setCountDown] = useState<number>(0);\n    const [server_time, setServerTime] = useState<string>('');\n    const timer = useRef<NodeJS.Timeout | null>(null);\n\n    useEffect(() => {\n        if (data?.crypto_estimations?.[currency_code].withdrawal_fee?.expiry_time) {\n            setCryptoEstimationsFeeDetailsLatest(data?.crypto_estimations?.[currency_code].withdrawal_fee ?? {});\n        }\n    }, [currency_code, data]);\n\n    useEffect(() => {\n        if (subscription_error) setError(subscription_error as unknown as TSocketError<'crypto_estimations'>['error']);\n    }, [subscription_error]);\n\n    useEffect(() => {\n        if (crypto_estimations_fee_details_latest?.expiry_time && count_down === 0) {\n            setCryptoEstimationsFeeDetails(crypto_estimations_fee_details_latest);\n            const currentTime = toMoment();\n            setServerTime(`${currentTime.utc().format('HH:mm:ss')} GMT`);\n            const expiryTime =\n                epochToMoment(crypto_estimations_fee_details_latest?.expiry_time ?? 0).diff(currentTime, 'seconds') - 1;\n            setCountDown(expiryTime);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [count_down, crypto_estimations_fee_details_latest?.expiry_time]);\n\n    useEffect(() => {\n        timer.current = setTimeout(() => {\n            if (count_down === 1) {\n                clearTimeout(timer.current as NodeJS.Timeout);\n                setCountDown(prevTime => prevTime - 1);\n            } else if (count_down > 0) {\n                setCountDown(prevTime => prevTime - 1);\n            }\n        }, 1000);\n\n        return () => {\n            if (timer) {\n                clearInterval(timer.current as NodeJS.Timeout);\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [count_down]);\n\n    return {\n        count_down,\n        crypto_estimations_fee: crypto_estimations_fee_details?.value ?? 0,\n        crypto_estimations_fee_unique_id: crypto_estimations_fee_details?.unique_id ?? '',\n        crypto_estimations_fee_expiry_time: crypto_estimations_fee_details?.expiry_time ?? 0,\n        error,\n        getCryptoEstimations: subscribe,\n        setCurrencyCode,\n        server_time,\n        unsubscribeCryptoEstimations: unsubscribe,\n    };\n};\n\nexport default useCryptoEstimations;\n","import { useCallback, useMemo } from 'react';\nimport useQuery from '../useQuery';\n\n/** A custom hook to get the country config information from `residence_list` endpoint. */\nconst useCountryConfig = () => {\n    const { data: residence_list_data, ...rest } = useQuery('residence_list');\n\n    // Add additional information to the country config.\n    const modified_residence_list = useMemo(\n        () =>\n            residence_list_data?.residence_list?.map(country_config => {\n                return {\n                    ...country_config,\n                    /** Determine if the country is disabled */\n                    is_disabled: country_config.disabled !== undefined,\n                    /** 2-letter country code */\n                    code: `${country_config.value}`.toUpperCase(),\n                    /** Country name */\n                    name: `${country_config.text}`,\n                    /** Determine if the IDV service is supported for the country */\n                    is_idv_supported: country_config.identity?.services?.idv?.is_country_supported === 1,\n                    /** Determine if the Onfido service is supported for the country */\n                    is_onfido_supported: country_config.identity?.services?.onfido?.is_country_supported === 1,\n                };\n            }),\n        [residence_list_data?.residence_list]\n    );\n\n    // Transform the country config array into a record object.\n    const transformed_residence_list = useMemo(() => {\n        return modified_residence_list?.reduce<Record<string, typeof modified_residence_list[number]>>(\n            (previous, current) => ({ ...previous, [current.code]: current }),\n            {}\n        );\n    }, [modified_residence_list]);\n\n    const getConfig = useCallback(\n        (currency: string) => transformed_residence_list?.[currency as string],\n        [transformed_residence_list]\n    );\n\n    return {\n        /** Available countries and their information */\n        data: transformed_residence_list,\n        /** Returns the country config object for the given country code */\n        getConfig,\n        ...rest,\n    };\n};\n\nexport default useCountryConfig;\n","import { useMemo } from 'react';\nimport useMutation from '../useMutation';\nimport useInvalidateQuery from '../useInvalidateQuery';\n\n/** A custom hook that creates a new real trading account. */\nconst useCreateNewRealAccount = () => {\n    const invalidate = useInvalidateQuery();\n    const { data, ...rest } = useMutation('new_account_real', {\n        onSuccess: () => {\n            invalidate('authorize');\n        },\n    });\n\n    // Add additional information to the new real trading account response.\n    const modified_data = useMemo(() => {\n        if (!data?.new_account_real) return;\n\n        return { ...data?.new_account_real };\n    }, [data]);\n\n    return {\n        /** The response and the mutation of the new account real API request */\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useCreateNewRealAccount;\n","import { useMemo } from 'react';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useMutation from '../useMutation';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport { displayMoney } from '../utils';\n\n/** A custom hook to create new wallet account */\nconst useCreateWallet = () => {\n    const invalidate = useInvalidateQuery();\n    const { getConfig } = useCurrencyConfig();\n    const {\n        data,\n        mutate: _mutate,\n        ...rest\n    } = useMutation('new_account_wallet', {\n        onSuccess: () => {\n            invalidate('authorize');\n            invalidate('available_accounts');\n        },\n    });\n\n    const mutate = (params: Parameters<typeof _mutate>[0]['payload']) => {\n        return _mutate({ payload: params });\n    };\n\n    const modified_data = useMemo(() => {\n        if (!data?.new_account_wallet) return;\n        const currencyConfig = getConfig(data?.new_account_wallet.currency || 'USD');\n        return {\n            ...data.new_account_wallet,\n            /** The balance of the account in currency format. */\n            display_balance: displayMoney(0, currencyConfig?.display_code || 'USD', {\n                fractional_digits: currencyConfig?.fractional_digits,\n            }),\n        };\n    }, [data?.new_account_wallet, getConfig]);\n\n    return {\n        /** New account information */\n        data: modified_data,\n        /** A function to create new wallet */\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useCreateWallet;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { getTruncatedString } from '@deriv/utils';\nimport useSubscription from '../useSubscription';\nimport useActiveAccount from './useActiveAccount';\nimport useAuthorize from './useAuthorize';\nimport { displayMoney } from '../utils';\n\ntype TTransaction = NonNullable<\n    NonNullable<ReturnType<typeof useSubscription<'cashier_payments'>>['data']>['cashier_payments']\n>['crypto'][number];\n\ntype TStatus = TTransaction['status_code'];\n\ntype TDepositStatus = 'PENDING' | 'CONFIRMED' | 'ERROR';\n\ntype TWithdrawalStatus = Exclude<TStatus, TDepositStatus>;\n\n// Since BE sends the `status_code` for both `deposit` and `withdrawal` in the same field,\n// Here we modify the BE type to make `status_code` type more specific to the `transaction_type` field.\ntype TModifiedTransaction = Omit<TTransaction, 'status_code' | 'transaction_type'> &\n    (\n        | { transaction_type: 'deposit'; status_code: TDepositStatus }\n        | { transaction_type: 'withdrawal'; status_code: TWithdrawalStatus }\n    );\n\nconst getFormattedConfirmations = (transaction: TModifiedTransaction) => {\n    switch (transaction.status_code) {\n        case 'CONFIRMED':\n            return 'Confirmed';\n        case 'ERROR':\n            return 'NA';\n        default:\n            return transaction.confirmations ?? 'Pending';\n    }\n};\n\nconst getStatusName = (status_code: TModifiedTransaction['status_code']) => {\n    switch (status_code) {\n        case 'CONFIRMED':\n        case 'SENT':\n            return 'Successful';\n        case 'ERROR':\n        case 'REJECTED':\n        case 'REVERTED':\n            return 'Unsuccessful';\n        case 'PENDING':\n        case 'PERFORMING_BLOCKCHAIN_TXN':\n        case 'PROCESSING':\n        case 'REVERTING':\n        case 'VERIFIED':\n            return 'In process';\n        case 'CANCELLED':\n            return 'Cancelled';\n        case 'LOCKED':\n            return 'In review';\n        default:\n            return '';\n    }\n};\n\nconst getStatusDescription = (\n    transaction_type: TModifiedTransaction['transaction_type'],\n    status_code: TModifiedTransaction['status_code']\n) => {\n    switch (status_code) {\n        // deposit-specific:\n        case 'CONFIRMED':\n            return 'Your deposit is successful.';\n        case 'PENDING':\n            return \"We've received your request and are waiting for more blockchain confirmations.\";\n        // withdrawal-specific:\n        case 'CANCELLED':\n            return \"You've cancelled your withdrawal request.\";\n        case 'LOCKED':\n            return \"We're reviewing your withdrawal request. You may still cancel this transaction if you wish.\\nOnce we start processing, you won't be able to cancel.\";\n        case 'PERFORMING_BLOCKCHAIN_TXN':\n            return \"We're sending your request to the blockchain.\";\n        case 'PROCESSING':\n            return \"We're awaiting confirmation from the blockchain.\";\n        case 'REJECTED':\n        case 'REVERTED':\n            return \"Your withdrawal is unsuccessful. We've sent you an email with more information.\";\n        case 'REVERTING':\n        case 'VERIFIED':\n            return \"We're processing your withdrawal.\";\n        case 'SENT':\n            return 'Your withdrawal is successful.';\n        // both:\n        case 'ERROR':\n            return `Your ${transaction_type} is unsuccessful due to an error on the blockchain. Please contact ${\n                transaction_type === 'deposit' ? 'your crypto wallet service provider' : 'us via live chat'\n            } for more info.`;\n        default:\n            return '';\n    }\n};\n\n/** A custom hook that returns the list of pending crypto transactions for the current user. */\nconst useCryptoTransactions = () => {\n    const { subscribe, data, ...rest } = useSubscription('cashier_payments');\n    const [transactions, setTransactions] = useState<TModifiedTransaction[]>();\n\n    const {\n        data: { preferred_language },\n    } = useAuthorize();\n\n    const { data: account } = useActiveAccount();\n    const display_code = account?.currency_config?.display_code || 'USD';\n    const fractional_digits = account?.currency_config?.fractional_digits || 2;\n\n    // Reset transactions data\n    const resetData = useCallback(() => setTransactions(undefined), []);\n\n    useEffect(() => {\n        setTransactions(old_transactions => {\n            const new_transactions = data?.cashier_payments?.crypto as TModifiedTransaction[] | undefined;\n\n            if (!new_transactions) return old_transactions;\n\n            if (!old_transactions) return new_transactions;\n\n            const updated_transactions = [...old_transactions];\n\n            // For each new transaction, check if it exists in the old transactions.\n            new_transactions.forEach(new_transaction => {\n                // Find the index of the new transaction in the old transactions if exists.\n                const index = updated_transactions.findIndex(\n                    old_transaction => old_transaction.id === new_transaction.id\n                );\n\n                // If the new transaction does not exist in the old transactions, add it, otherwise update it.\n                if (index === -1) {\n                    updated_transactions.push(new_transaction);\n                } else {\n                    updated_transactions[index] = new_transaction;\n                }\n            });\n\n            return updated_transactions;\n        });\n    }, [data?.cashier_payments?.crypto]);\n\n    // Add additional information to each transaction.\n    const modified_transactions = useMemo(() => {\n        if (!transactions || !transactions.length) return undefined;\n\n        return transactions.map(transaction => ({\n            ...transaction,\n            /** Description of a transaction status */\n            description: getStatusDescription(transaction.transaction_type, transaction.status_code),\n            /** Formatted amount */\n            formatted_amount: displayMoney(transaction.amount || 0, display_code, {\n                fractional_digits,\n                preferred_language,\n            }),\n            /** Formatted transaction hash */\n            formatted_transaction_hash: transaction.transaction_hash\n                ? getTruncatedString(transaction.transaction_hash, { type: 'middle' })\n                : 'Pending',\n            /** Formatted address hash */\n            formatted_address_hash: transaction.address_hash\n                ? getTruncatedString(transaction.address_hash, { type: 'middle' })\n                : 'NA',\n            /** Formatted confirmations status */\n            formatted_confirmations: getFormattedConfirmations(transaction),\n            /** Determine if the transaction is a deposit or not. */\n            is_deposit: transaction.transaction_type === 'deposit',\n            /** Determine if the transaction is a withdrawal or not. */\n            is_withdrawal: transaction.transaction_type === 'withdrawal',\n            /** Status name */\n            status_name: getStatusName(transaction.status_code),\n        }));\n    }, [display_code, fractional_digits, preferred_language, transactions]);\n\n    // Sort transactions by submit time.\n    const sorted_transactions = useMemo(\n        () => modified_transactions?.sort((a, b) => b.submit_date - a.submit_date),\n        [modified_transactions]\n    );\n    // Get the last transaction if exists.\n    const last_transaction = modified_transactions?.[0];\n\n    return {\n        /** List of user transactions sorted by submit time. */\n        data: sorted_transactions,\n        /** Returns the last transaction if exists. */\n        last_transaction,\n        /** Reset transactions data */\n        resetData,\n        subscribe,\n        ...rest,\n    };\n};\n\nexport default useCryptoTransactions;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = Omit<\n    NonNullable<Parameters<ReturnType<typeof useMutation<'cashier'>>['mutate']>>[0]['payload'],\n    'cashier' | 'provider' | 'type'\n>;\n\n/** A custom hook that used for crypto withdrawal */\nconst useCryptoWithdrawal = () => {\n    const { mutate: _mutate, mutateAsync: _mutateAsync, ...rest } = useMutation('cashier');\n\n    const mutate = useCallback(\n        (payload: TPayload) =>\n            _mutate({ payload: { cashier: 'withdraw', provider: 'crypto', type: 'api', ...payload } }),\n        [_mutate]\n    );\n    const mutateAsync = useCallback(\n        (payload: TPayload) =>\n            _mutateAsync({ payload: { cashier: 'withdraw', provider: 'crypto', type: 'api', ...payload } }),\n        [_mutateAsync]\n    );\n\n    return {\n        /** Function to request for crypto withdrawal */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useCryptoWithdrawal;\n","import useQuery from '../useQuery';\nimport useActiveAccount from './useActiveAccount';\n\n/** A custom hook that get Service Token for CTrader Platform. */\nconst useCtraderServiceToken = () => {\n    const { data: account } = useActiveAccount();\n    const { data: ctrader_token, ...rest } = useQuery('service_token', {\n        payload: { service: 'ctrader', server: account?.is_virtual ? 'demo' : 'real' },\n    });\n\n    return {\n        /** return the ctrader account token */\n        data: ctrader_token?.service_token?.ctrader?.token,\n        ...rest,\n    };\n};\n\nexport default useCtraderServiceToken;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\n/** A custom hook to get the deposit crypto address. */\nconst useDepositCryptoAddress = () => {\n    const { data, mutate: _mutate, ...rest } = useMutation('cashier');\n    const deposit_address = typeof data?.cashier !== 'string' ? data?.cashier?.deposit?.address : undefined;\n\n    const mutate = useCallback(\n        () => _mutate({ payload: { cashier: 'deposit', provider: 'crypto', type: 'api' } }),\n        [_mutate]\n    );\n\n    return {\n        ...rest,\n        mutate,\n        data: deposit_address,\n    };\n};\n\nexport default useDepositCryptoAddress;\n","const DEFAULT_IMAGE_WIDTH = 2560;\nconst DEFAULT_IMAGE_QUALITY = 0.9;\nconst WORD_SIZE = 4;\n\ntype TCompressImageOption = {\n    maxWidth?: number;\n    quality?: number;\n};\n\ntype TBase64Image = {\n    filename: string;\n    src: string;\n};\n\ntype TCompressImage = TBase64Image & {\n    options?: TCompressImageOption;\n};\n\nexport type TFileObject = {\n    filename: File['name'];\n    buffer: FileReader['result'];\n    fileSize: File['size'];\n};\n\n/**\n * Compress an image and return it as a Blob.\n * @param {TCompressImage} params - The parameters for image compression.\n * @param {string} params.src - The source image URL or data URI.\n * @param {string} params.filename - The desired filename for the compressed image.\n * @param {Object} [params.options] - Options for image compression.\n * @param {number} [params.options.maxWidth=DEFAULT_IMAGE_WIDTH] - The maximum width for the compressed image.\n * @param {number} [params.options.quality=DEFAULT_IMAGE_QUALITY] - The image quality (0 to 1) for compression.\n * @returns {Promise<Blob>} A Promise that resolves with the compressed image as a Blob.\n */\nexport const compressImage = ({ src, filename, options }: TCompressImage): Promise<Blob> => {\n    const { maxWidth = DEFAULT_IMAGE_WIDTH, quality = DEFAULT_IMAGE_QUALITY } = options || {};\n\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n        image.src = src;\n        image.onload = () => {\n            const canvas = document.createElement('canvas');\n            const canvas_context = canvas.getContext('2d');\n            if (!canvas_context || !(canvas_context instanceof CanvasRenderingContext2D)) {\n                return reject(new Error('Failed to get 2D context'));\n            }\n\n            if (image.naturalWidth > maxWidth) {\n                const width = DEFAULT_IMAGE_WIDTH;\n                const scaleFactor = width / image.naturalWidth;\n                canvas.width = width;\n                canvas.height = image.naturalHeight * scaleFactor;\n            } else {\n                canvas.width = image.naturalWidth;\n                canvas.height = image.naturalHeight;\n            }\n\n            canvas_context.fillStyle = 'transparent';\n            canvas_context.fillRect(0, 0, canvas.width, canvas.height);\n            canvas_context.save();\n            canvas_context.drawImage(image, 0, 0, canvas.width, canvas.height);\n\n            canvas.toBlob(\n                blob => {\n                    if (!blob) return;\n                    const modified_filename = filename.replace(/\\.[^/.]+$/, '.jpg');\n                    const file = new Blob([blob], { type: 'image/jpeg' });\n                    file.lastModifiedDate = Date.now();\n                    file.name = modified_filename;\n                    resolve(file);\n                },\n                'image/jpeg',\n                quality\n            );\n        };\n    });\n};\n\n/**\n * Convert a File to a Base64 encoded image representation.\n * @param {File} file - The File object to convert to Base64.\n * @returns {Promise<TBase64Image>} A Promise that resolves with an object containing the Base64 image data and the filename.\n */\nexport const convertToBase64 = (file: File): Promise<TBase64Image> => {\n    return new Promise(resolve => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onloadend = () => {\n            resolve({\n                src: reader.result?.toString() || '',\n                filename: file.name,\n            });\n        };\n    });\n};\n\n/**\n * Check if a given filename has a supported image format extension.\n *\n * @param {string} filename - The filename to check for a supported image format.\n * @returns {boolean} True if the filename has a supported image format extension, false otherwise.\n */\nexport const isSupportedImageFormat = (filename: string) => /\\.(png|jpg|jpeg|gif|pdf)$/gi.test(filename ?? '');\n\n/**\n * Convert image to base64 and cmpress an image file if it is a supported image format.\n *\n * @param {File} file - The File object to compress.\n * @returns {Promise<Blob>} A Promise that resolves with the compressed image as a Blob.\n */\nexport const compressImageFile = (file: File) => {\n    return new Promise<Blob>(resolve => {\n        if (isSupportedImageFormat(file.type)) {\n            convertToBase64(file).then(img => {\n                compressImage(img).then(resolve);\n            });\n        } else {\n            resolve(file);\n        }\n    });\n};\n\n/**\n * Get Uint8Array from number\n *\n * @param {num} number - The number to convert to Uint8Array.\n * @returns {Uint8Array} Uint8Array\n */\nexport function numToUint8Array(num: number) {\n    const typedArray = new Uint8Array(WORD_SIZE);\n    const dv = new DataView(typedArray.buffer);\n    dv.setUint32(0, num);\n    return typedArray;\n}\n\n/**\n * Turn binary into array of chunks\n *\n * @param {binary} Uint8Array - Uint8Array to be chunked.\n * @returns {Uint8Array[]} Array of Uint8Array chunks\n */\nexport const generateChunks = (binary: Uint8Array, { chunkSize = 16384 /* 16KB */ }) => {\n    const chunks = [];\n    for (let i = 0; i < binary.length; i++) {\n        const item = binary[i];\n        if (i % chunkSize === 0) {\n            chunks.push([item]);\n        } else {\n            chunks[chunks.length - 1].push(item);\n        }\n    }\n    return chunks.map(b => new Uint8Array(b)).concat(new Uint8Array([]));\n};\n\n/**\n * Read a file and return it as modified object with a buffer of the file contents.\n * @param {Blob} file - The file to read.\n * @returns {Promise<TFileObject>} A Promise that resolves with the file as a TFileObject.\n *\n */\nexport const readFile = (file: Blob) => {\n    const fr = new FileReader();\n    return new Promise<\n        | TFileObject\n        | {\n              message: string;\n          }\n    >(resolve => {\n        fr.onload = () => {\n            const fileMetadata = {\n                filename: file.name,\n                buffer: fr.result,\n                fileSize: file.size,\n            };\n            resolve(fileMetadata);\n        };\n\n        fr.onerror = () => {\n            resolve({\n                message: `Unable to read file ${file.name}`,\n            });\n        };\n\n        // Reading file\n        fr.readAsArrayBuffer(file);\n    });\n};\n","import { useCallback, useMemo, useState } from 'react';\nimport useMutation from '../useMutation';\nimport { compressImageFile, generateChunks, numToUint8Array, readFile } from '../utils';\nimport md5 from 'md5';\nimport { getActiveWebsocket } from '../APIProvider';\n\ntype TDocumentUploadPayload = Parameters<ReturnType<typeof useMutation<'document_upload'>>['mutate']>[0]['payload'];\ntype TUploadPayload = Omit<TDocumentUploadPayload, 'document_format' | 'expected_checksum' | 'file_size'> & {\n    file?: File;\n};\n\n/** A custom hook to handle document file uploads to our backend. */\nconst useDocumentUpload = () => {\n    const {\n        data,\n        isLoading: _isLoading,\n        isSuccess: _isSuccess,\n        mutateAsync,\n        status,\n        ...rest\n    } = useMutation('document_upload');\n    const [isDocumentUploaded, setIsDocumentUploaded] = useState(false);\n    const activeWebSocket = getActiveWebsocket();\n\n    const isLoading = _isLoading || (!isDocumentUploaded && status === 'success');\n    const isSuccess = _isSuccess && isDocumentUploaded;\n\n    const upload = useCallback(\n        async (payload: TUploadPayload) => {\n            if (!payload?.file) return Promise.reject(new Error('No file selected'));\n            const file = payload.file;\n            delete payload.file;\n            const fileBlob = await compressImageFile(file);\n            const modifiedFile = await readFile(fileBlob);\n            // @ts-expect-error type mismatch\n            const fileBuffer = new Uint8Array(modifiedFile.buffer);\n            const checksum = md5(Array.from(fileBuffer));\n\n            const updatedPayload = {\n                ...payload,\n                document_format: file.type\n                    .split('/')[1]\n                    .toLocaleUpperCase() as TDocumentUploadPayload['document_format'],\n                expected_checksum: checksum,\n                file_size: fileBuffer.length,\n                passthrough: {\n                    document_upload: true,\n                },\n            };\n            setIsDocumentUploaded(false);\n            await mutateAsync({ payload: updatedPayload }).then(async res => {\n                const chunks = generateChunks(fileBuffer, {});\n                const id = numToUint8Array(res?.document_upload?.upload_id || 0);\n                const type = numToUint8Array(res?.document_upload?.call_type || 0);\n\n                chunks.forEach(chunk => {\n                    const size = numToUint8Array(chunk.length);\n                    const payload = new Uint8Array([...type, ...id, ...size, ...chunk]);\n                    activeWebSocket?.send(payload);\n                });\n                setIsDocumentUploaded(true);\n            });\n        },\n        [activeWebSocket, mutateAsync]\n    );\n\n    const modified_response = useMemo(() => ({ ...data?.document_upload }), [data?.document_upload]);\n\n    return {\n        /** The upload response */\n        data: modified_response,\n        /** Function to upload the document */\n        upload,\n        /** Mutation status */\n        status,\n        /** Whether the mutation is loading */\n        isLoading,\n        /** Whether the mutation is successful */\n        isSuccess,\n        ...rest,\n    };\n};\n\nexport default useDocumentUpload;\n","import useQuery from '../useQuery';\nimport useActiveAccount from './useActiveAccount';\n\n/** A custom hook that get Service Token for Deriv X Platform. */\nconst useDxtradeServiceToken = () => {\n    const { data: account } = useActiveAccount();\n    const { data: dxtrade_token, ...rest } = useQuery('service_token', {\n        payload: { service: 'dxtrade', server: account?.is_virtual ? 'demo' : 'real' },\n    });\n\n    return {\n        /** return the Deriv X account token */\n        data: dxtrade_token?.service_token?.dxtrade?.token,\n        ...rest,\n    };\n};\n\nexport default useDxtradeServiceToken;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\n\n/** A custom hook that gets dynamic leverage values. */\nconst useDynamicLeverage = (platform: 'mt5' | 'dxtrade' | 'ctrader') => {\n    const { data, ...rest } = useQuery('trading_platform_leverage', {\n        payload: { platform },\n    });\n\n    // Add additional information to the dynamic leverage response.\n    const modified_data = useMemo(() => {\n        if (!data?.trading_platform_leverage) return;\n\n        return { ...data?.trading_platform_leverage };\n    }, [data]);\n\n    return {\n        data: modified_data?.leverage,\n        ...rest,\n    };\n};\n\nexport default useDynamicLeverage;\n","import { useCallback } from 'react';\nimport useSubscription from '../useSubscription';\n\ntype TPayload = WithRequiredProperty<\n    NonNullable<Parameters<ReturnType<typeof useSubscription<'exchange_rates'>>['subscribe']>>[0]['payload'],\n    'target_currency'\n>;\n\n/** A custom hook that gets exchange rates from base currency to target currency */\nconst useExchangeRateSubscription = () => {\n    const { data, subscribe: _subscribe, ...rest } = useSubscription('exchange_rates');\n\n    const subscribe = useCallback(\n        (payload: TPayload) => {\n            _subscribe({ payload });\n        },\n        [_subscribe]\n    );\n\n    return {\n        /** The exchange rates response */\n        data: data?.exchange_rates,\n        /** Function to subscribe to exchange rates */\n        subscribe,\n        ...rest,\n    };\n};\n\nexport default useExchangeRateSubscription;\n","import useQuery from '../useQuery';\n\ntype TProps = Required<Parameters<typeof useQuery<'exchange_rates'>>[1]>['payload'];\n\nconst useGetExchangeRate = ({ base_currency, loginid, target_currency }: TProps) => {\n    const { data, ...rest } = useQuery('exchange_rates', { payload: { base_currency, loginid, target_currency } });\n\n    return {\n        /** The exchange rates response */\n        data: data?.exchange_rates,\n        ...rest,\n    };\n};\n\nexport default useGetExchangeRate;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TIdentityVerificationDocumentAddPayload = Parameters<\n    ReturnType<typeof useMutation<'identity_verification_document_add'>>['mutate']\n>[0]['payload'];\n\n/** A custom hook to submit IDV details for POI verification.\n *\n * Use cases:\n * - To submit IDV verification for verification flow in Wallets.\n */\nconst useIdentityDocumentVerificationAdd = () => {\n    const { mutate: _mutate, ...rest } = useMutation('identity_verification_document_add');\n\n    const submitIDVDocuments = useCallback(\n        (payload: TIdentityVerificationDocumentAddPayload) =>\n            _mutate({\n                payload,\n            }),\n        [_mutate]\n    );\n\n    return {\n        /** Call this function upon IDV submission.\n         *\n         * @param payload - The payload to pass in which these fields are required:\n         * - document_number: The document number passed in by the user\n         * - document_type: The type of document in which the document_number is based on. Examples are either drivers_license, passport, ssnit, etc depending on the issuing country.\n         *                  These document types can often be retrieved from the `useResidenceList` hook\n         * - issuing_country: The country in which the documents are issued and supported.\n         */\n        submitIDVDocuments,\n        /** The original mutate function returned by useMutation */\n        _mutate,\n        ...rest,\n    };\n};\n\nexport default useIdentityDocumentVerificationAdd;\n","import { useMemo } from 'react';\nimport useLandingCompany from './useLandingCompany';\n\n/** * A hook to determine if region is Eu using the useLandingCompany hook */\nconst useIsEuRegion = () => {\n    /** Retrieve landing company data*/\n    const { data: landing_company, ...rest } = useLandingCompany();\n\n    const isEuRegion = useMemo(() => {\n        if (!landing_company) return false;\n\n        /** Regular expressions for EU shortcodes and excluded residence */\n        const eu_shortcode_regex = /^maltainvest$/;\n        const eu_excluded_regex = /^mt$/;\n\n        /** Destructure landing company response */\n        const { gaming_company, financial_company, mt_gaming_company, mt_all_company, id: residence } = landing_company;\n        const financial_shortcode = financial_company?.shortcode;\n        const gaming_shortcode = gaming_company?.shortcode;\n        const mt_gaming_shortcode = mt_gaming_company?.financial?.shortcode || mt_all_company?.swap_free?.shortcode;\n\n        /** Determine if the region falls in the EU using destructured data */\n        const is_financial_maltainvest = financial_shortcode === 'maltainvest';\n        const shortcodes = financial_shortcode || gaming_shortcode || mt_gaming_shortcode;\n        const is_financial_eu_and_not_gaming_svg =\n            eu_shortcode_regex.test(financial_shortcode as unknown as string) && gaming_shortcode !== 'svg';\n        const is_gaming_eu = eu_shortcode_regex.test(gaming_shortcode as string);\n        const is_residence_eu = eu_excluded_regex.test(residence as string);\n\n        /** is region Eu based on shortcode */\n        const is_eu_based_on_shortcodes = shortcodes && (is_financial_eu_and_not_gaming_svg || is_gaming_eu);\n        /** is region Eu based on residence */\n        const is_eu_based_on_residence = !shortcodes && is_residence_eu;\n\n        return is_financial_maltainvest || is_eu_based_on_shortcodes || is_eu_based_on_residence;\n    }, [landing_company]);\n\n    // New method to test, if this works will remove the legacy method above\n    const isEUCountry = useMemo(() => {\n        if (!landing_company) return;\n\n        const { gaming_company, financial_company } = landing_company;\n        const isEuRegion = !gaming_company && financial_company?.shortcode === 'maltainvest';\n\n        return isEuRegion;\n    }, [landing_company]);\n\n    return {\n        /** A boolean flag indicating if the region is within the EU */\n        data: isEuRegion,\n        isEUCountry,\n        /** Additional properties inherited from the useLandingCompany hook */\n        ...rest,\n    };\n};\n\nexport default useIsEuRegion;\n","import { useMemo } from 'react';\nimport useAuthentication from './useAuthentication';\nimport useResidenceList from './useResidenceList';\nimport useSettings from './useSettings';\n\n/** A custom hook to get the proof of identity verification info of the current user. */\nconst usePOI = () => {\n    const { data: authentication_data, isSuccess: isAuthenticationSuccess, ...rest } = useAuthentication();\n    const { data: residence_list_data, isSuccess: isResidenceListSuccess } = useResidenceList();\n    const { data: get_settings_data, isSuccess: isGetSettingsSuccess } = useSettings();\n\n    const previous_service = useMemo(() => {\n        const latest_poi_attempt = authentication_data?.attempts?.latest;\n        return latest_poi_attempt?.service;\n    }, [authentication_data?.attempts?.latest]);\n\n    /**\n     * @description Get the previous POI attempts details (if any)\n     */\n    const previous_poi = useMemo(() => {\n        if (!previous_service) {\n            return null;\n        }\n\n        const services = authentication_data?.identity?.services;\n        if (services && services.manual) {\n            return {\n                service: previous_service,\n                status: services.manual.status,\n            };\n        }\n\n        const current_service = services?.[previous_service as 'idv' | 'onfido'];\n        return {\n            service: previous_service,\n            status: current_service?.status,\n            reported_properties: current_service?.reported_properties,\n            last_rejected: current_service?.last_rejected,\n            submissions_left: current_service?.submissions_left || 0,\n        };\n    }, [previous_service, authentication_data?.identity?.services]);\n\n    /**\n     * @description Get the current step based on a few checks. Returns configuration for document validation as well.\n     */\n    const current_poi = useMemo(() => {\n        const user_country_code = get_settings_data?.citizen || get_settings_data?.country_code;\n        const matching_residence_data = residence_list_data?.find(r => r.value === user_country_code);\n        const is_idv_supported = matching_residence_data?.identity?.services?.idv?.is_country_supported;\n        const is_onfido_supported = matching_residence_data?.identity?.services?.onfido?.is_country_supported;\n        const services = authentication_data?.identity?.services;\n        const idv_submission_left = services?.idv?.submissions_left ?? 0;\n        const onfido_submission_left = services?.onfido?.submissions_left ?? 0;\n        if (is_idv_supported && idv_submission_left && !authentication_data?.is_idv_disallowed) {\n            return {\n                country_code: user_country_code,\n                service: 'idv',\n                status: services?.idv?.status,\n                submission_left: idv_submission_left,\n                document_supported: matching_residence_data?.identity?.services?.idv?.documents_supported,\n            };\n        } else if (is_onfido_supported && onfido_submission_left) {\n            return {\n                country_code: user_country_code,\n                service: 'onfido',\n                status: services?.onfido?.status,\n                submission_left: onfido_submission_left,\n                document_supported: matching_residence_data?.identity?.services?.onfido?.documents_supported,\n            };\n        }\n        return {\n            country_code: user_country_code,\n            service: 'manual',\n            status: services?.manual?.status,\n        };\n    }, [\n        get_settings_data?.citizen,\n        get_settings_data?.country_code,\n        residence_list_data,\n        authentication_data?.identity?.services,\n        authentication_data?.is_idv_disallowed,\n    ]);\n\n    const modified_verification_data = useMemo(() => {\n        if (!authentication_data) return;\n\n        return {\n            ...authentication_data?.identity,\n            previous: previous_poi,\n            current: current_poi,\n            is_pending: authentication_data?.identity?.status === 'pending',\n            is_rejected: authentication_data?.identity?.status === 'rejected',\n            is_expired: authentication_data?.identity?.status === 'expired',\n            is_suspected: authentication_data?.identity?.status === 'suspected',\n            is_verified: authentication_data?.identity?.status === 'verified',\n        };\n    }, [authentication_data, current_poi, previous_poi]);\n\n    return {\n        data: modified_verification_data,\n        isSuccess: isAuthenticationSuccess && isGetSettingsSuccess && isResidenceListSuccess,\n        ...rest,\n    };\n};\n\nexport default usePOI;\n","import { useCallback, useMemo } from 'react';\nimport useAuthentication from './useAuthentication';\nimport usePOI from './usePOI';\nimport useMT5AccountsList from './useMT5AccountsList';\n\ntype TAccount = NonNullable<ReturnType<typeof useMT5AccountsList>['data']>[number];\ntype TServices = NonNullable<NonNullable<ReturnType<typeof usePOI>['data']>['services']>;\ntype TServiceStatus = NonNullable<NonNullable<ReturnType<typeof usePOI>['data']>['status']>;\n\n/**\n * Hook that calculates/checks the verification status for a landing company/jurisdiction.\n *\n * Some jurisdictions such as Labuan requires checks for other statuses such as `is_authenticated_with_idv_photoid` status from `get_account_status` endpoint.\n * This hook verifies these checks internally and returns the appropriate verification status for a landing company/jurisdiction.\n *\n * Use cases:\n * - To show the verification badge for a MT5 account with a certain landing company/jurisdiction\n *\n */\nconst useJurisdictionStatus = () => {\n    const { data: authenticationStatus, isSuccess: isSuccessAuthenticationStatus } = useAuthentication();\n    const { data: poiStatus } = usePOI();\n\n    const isSuccess = useMemo(() => {\n        return isSuccessAuthenticationStatus && poiStatus?.current?.service;\n    }, [isSuccessAuthenticationStatus, poiStatus]);\n\n    const getVerificationStatus = useCallback(\n        (jurisdiction: TAccount['landing_company_short'], mt5_account_status: TAccount['status']) => {\n            const isPOIServiceStatus = (...statuses: TServiceStatus[]) => {\n                const current_service = poiStatus?.current?.service as keyof TServices;\n                const service = poiStatus?.services?.[current_service];\n                if (service?.status) {\n                    return statuses.includes(service.status);\n                }\n            };\n\n            const pendingStatus = ['verification_pending'];\n            const isStatusPending = pendingStatus.includes(mt5_account_status ?? '');\n\n            const status = {\n                is_failed: false,\n                is_not_applicable: false,\n                is_pending: false,\n                is_verified: false,\n            };\n            switch (jurisdiction) {\n                case 'bvi':\n                    if (\n                        isPOIServiceStatus('expired', 'rejected', 'suspected') ||\n                        authenticationStatus?.is_idv_revoked ||\n                        mt5_account_status === 'proof_failed'\n                    ) {\n                        status.is_failed = true;\n                    } else if (isPOIServiceStatus('pending') || isStatusPending) {\n                        status.is_pending = true;\n                    } else if (isPOIServiceStatus('verified')) {\n                        status.is_verified = true;\n                    }\n                    break;\n                case 'labuan':\n                    if (\n                        isPOIServiceStatus('expired', 'rejected', 'suspected') ||\n                        authenticationStatus?.is_idv_revoked ||\n                        // NOTE: BE plans to rename this to `authenticated_with_idv`\n                        authenticationStatus?.is_authenticated_with_idv_photoid ||\n                        mt5_account_status === 'proof_failed'\n                    ) {\n                        status.is_failed = true;\n                    } else if (isPOIServiceStatus('pending') || isStatusPending) {\n                        status.is_pending = true;\n                    } else if (isPOIServiceStatus('verified')) {\n                        status.is_verified = true;\n                    }\n                    break;\n                case 'svg':\n                    status.is_not_applicable = true;\n                    break;\n                default:\n                    // for other jurisdictions, MT5 account status already checks for POA status in BE\n                    if (mt5_account_status === 'proof_failed') {\n                        status.is_failed = true;\n                    } else if (isStatusPending) {\n                        status.is_pending = true;\n                    } else if (isPOIServiceStatus('verified')) {\n                        status.is_verified = true;\n                    }\n            }\n\n            return status;\n        },\n        [poiStatus, authenticationStatus?.is_idv_revoked, authenticationStatus?.is_authenticated_with_idv_photoid]\n    );\n\n    return {\n        /**\n         * Function to get verification status\n         * @param jurisdiction - the jurisdiction/landing company, i.e. 'svg', 'bvi', 'labuan', 'vanuatu'\n         * @param mt5_account_status - the status of the MT5 account, usually retrieved from MT5 accounts list item\n         * @returns The following statuses:\n         * - `is_failed`: The verification status for the landing company/jurisdiction has currently failed either due to expiration, rejection, suspicion status or other factors\n         * - `is_pending`: The verification status for the landing company/jurisdiction is currently pending verification\n         * - `is_not_applicable`: The landing company/jurisdiction is not applicable for verification. This status is only applied for `SVG` landing company/jurisdiction\n         * - `is_verified`: The verification status for the landing company/jurisdiction is currently verified\n         *  */\n        getVerificationStatus,\n        /** checks if the hook has completed verification checks for the landing company/jurisdiction */\n        isSuccess,\n    };\n};\n\nexport default useJurisdictionStatus;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\nimport useInvalidateQuery from '../useInvalidateQuery';\n\ntype TPayload = Parameters<ReturnType<typeof useMutation<'mt5_deposit'>>['mutate']>[0]['payload'];\n\n/** A custom hook for top-up of MT5 Accounts */\nconst useMT5Deposit = () => {\n    const invalidate = useInvalidateQuery();\n\n    const {\n        mutate: _mutate,\n        mutateAsync: _mutateAsync,\n        ...rest\n    } = useMutation('mt5_deposit', {\n        onSuccess: () => {\n            invalidate('mt5_login_list');\n        },\n    });\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n    const mutateAsync = useCallback((payload: TPayload) => _mutateAsync({ payload }), [_mutateAsync]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useMT5Deposit;\n","export const ALPHA_2_TO_ALPHA_3: Record<string, string> = {\n    AF: 'AFG',\n    AX: 'ALA',\n    AL: 'ALB',\n    DZ: 'DZA',\n    AS: 'ASM',\n    AD: 'AND',\n    AO: 'AGO',\n    AI: 'AIA',\n    AQ: 'ATA',\n    AG: 'ATG',\n    AR: 'ARG',\n    AM: 'ARM',\n    AW: 'ABW',\n    AU: 'AUS',\n    AT: 'AUT',\n    AZ: 'AZE',\n    BS: 'BHS',\n    BH: 'BHR',\n    BD: 'BGD',\n    BB: 'BRB',\n    BY: 'BLR',\n    BE: 'BEL',\n    BZ: 'BLZ',\n    BJ: 'BEN',\n    BM: 'BMU',\n    BT: 'BTN',\n    BO: 'BOL',\n    BQ: 'BES',\n    BA: 'BIH',\n    BW: 'BWA',\n    BV: 'BVT',\n    BR: 'BRA',\n    VG: 'VGB',\n    IO: 'IOT',\n    BN: 'BRN',\n    BG: 'BGR',\n    BF: 'BFA',\n    BI: 'BDI',\n    KH: 'KHM',\n    CM: 'CMR',\n    CA: 'CAN',\n    CV: 'CPV',\n    KY: 'CYM',\n    CF: 'CAF',\n    TD: 'TCD',\n    CL: 'CHL',\n    CN: 'CHN',\n    HK: 'HKG',\n    MO: 'MAC',\n    CX: 'CXR',\n    CC: 'CCK',\n    CO: 'COL',\n    KM: 'COM',\n    CG: 'COG',\n    CD: 'COD',\n    CK: 'COK',\n    CR: 'CRI',\n    CI: 'CIV',\n    HR: 'HRV',\n    CU: 'CUB',\n    CW: 'CUW',\n    CY: 'CYP',\n    CZ: 'CZE',\n    DK: 'DNK',\n    DJ: 'DJI',\n    DM: 'DMA',\n    DO: 'DOM',\n    EC: 'ECU',\n    EG: 'EGY',\n    SV: 'SLV',\n    GQ: 'GNQ',\n    ER: 'ERI',\n    EE: 'EST',\n    ET: 'ETH',\n    FK: 'FLK',\n    FO: 'FRO',\n    FJ: 'FJI',\n    FI: 'FIN',\n    FR: 'FRA',\n    GF: 'GUF',\n    PF: 'PYF',\n    TF: 'ATF',\n    GA: 'GAB',\n    GM: 'GMB',\n    GE: 'GEO',\n    DE: 'DEU',\n    GH: 'GHA',\n    GI: 'GIB',\n    GR: 'GRC',\n    GL: 'GRL',\n    GD: 'GRD',\n    GP: 'GLP',\n    GU: 'GUM',\n    GT: 'GTM',\n    GG: 'GGY',\n    GN: 'GIN',\n    GW: 'GNB',\n    GY: 'GUY',\n    HT: 'HTI',\n    HM: 'HMD',\n    VA: 'VAT',\n    HN: 'HND',\n    HU: 'HUN',\n    IS: 'ISL',\n    IN: 'IND',\n    ID: 'IDN',\n    IR: 'IRN',\n    IQ: 'IRQ',\n    IE: 'IRL',\n    IM: 'IMN',\n    IL: 'ISR',\n    IT: 'ITA',\n    JM: 'JAM',\n    JP: 'JPN',\n    JE: 'JEY',\n    JO: 'JOR',\n    KZ: 'KAZ',\n    KE: 'KEN',\n    KI: 'KIR',\n    KP: 'PRK',\n    KR: 'KOR',\n    KW: 'KWT',\n    KG: 'KGZ',\n    LA: 'LAO',\n    LV: 'LVA',\n    LB: 'LBN',\n    LS: 'LSO',\n    LR: 'LBR',\n    LY: 'LBY',\n    LI: 'LIE',\n    LT: 'LTU',\n    LU: 'LUX',\n    MK: 'MKD',\n    MG: 'MDG',\n    MW: 'MWI',\n    MY: 'MYS',\n    MV: 'MDV',\n    ML: 'MLI',\n    MT: 'MLT',\n    MH: 'MHL',\n    MQ: 'MTQ',\n    MR: 'MRT',\n    MU: 'MUS',\n    YT: 'MYT',\n    MX: 'MEX',\n    FM: 'FSM',\n    MD: 'MDA',\n    MC: 'MCO',\n    MN: 'MNG',\n    ME: 'MNE',\n    MS: 'MSR',\n    MA: 'MAR',\n    MZ: 'MOZ',\n    MM: 'MMR',\n    NA: 'NAM',\n    NR: 'NRU',\n    NP: 'NPL',\n    NL: 'NLD',\n    AN: 'ANT',\n    NC: 'NCL',\n    NZ: 'NZL',\n    NI: 'NIC',\n    NE: 'NER',\n    NG: 'NGA',\n    NU: 'NIU',\n    NF: 'NFK',\n    MP: 'MNP',\n    NO: 'NOR',\n    OM: 'OMN',\n    PK: 'PAK',\n    PW: 'PLW',\n    PS: 'PSE',\n    PA: 'PAN',\n    PG: 'PNG',\n    PY: 'PRY',\n    PE: 'PER',\n    PH: 'PHL',\n    PN: 'PCN',\n    PL: 'POL',\n    PT: 'PRT',\n    PR: 'PRI',\n    QA: 'QAT',\n    RE: 'REU',\n    RO: 'ROU',\n    RU: 'RUS',\n    RW: 'RWA',\n    BL: 'BLM',\n    SH: 'SHN',\n    KN: 'KNA',\n    LC: 'LCA',\n    MF: 'MAF',\n    PM: 'SPM',\n    VC: 'VCT',\n    WS: 'WSM',\n    SM: 'SMR',\n    ST: 'STP',\n    SA: 'SAU',\n    SN: 'SEN',\n    RS: 'SRB',\n    SC: 'SYC',\n    SL: 'SLE',\n    SG: 'SGP',\n    SX: 'SXM',\n    SK: 'SVK',\n    SI: 'SVN',\n    SB: 'SLB',\n    SO: 'SOM',\n    ZA: 'ZAF',\n    GS: 'SGS',\n    SS: 'SSD',\n    ES: 'ESP',\n    LK: 'LKA',\n    SD: 'SDN',\n    SR: 'SUR',\n    SJ: 'SJM',\n    SZ: 'SWZ',\n    SE: 'SWE',\n    CH: 'CHE',\n    SY: 'SYR',\n    TW: 'TWN',\n    TJ: 'TJK',\n    TZ: 'TZA',\n    TH: 'THA',\n    TL: 'TLS',\n    TG: 'TGO',\n    TK: 'TKL',\n    TO: 'TON',\n    TT: 'TTO',\n    TN: 'TUN',\n    TR: 'TUR',\n    TM: 'TKM',\n    TC: 'TCA',\n    TV: 'TUV',\n    UG: 'UGA',\n    UA: 'UKR',\n    AE: 'ARE',\n    GB: 'GBR',\n    US: 'USA',\n    UM: 'UMI',\n    UY: 'URY',\n    UZ: 'UZB',\n    VU: 'VUT',\n    VE: 'VEN',\n    VN: 'VNM',\n    VI: 'VIR',\n    WF: 'WLF',\n    EH: 'ESH',\n    YE: 'YEM',\n    ZM: 'ZMB',\n    ZW: 'ZWE',\n    XK: 'XKX',\n};\n\nexport const ALPHA_3_TO_ALPHA_2: Record<string, string> = {\n    AFG: 'AF',\n    ALA: 'AX',\n    ALB: 'AL',\n    DZA: 'DZ',\n    ASM: 'AS',\n    AND: 'AD',\n    AGO: 'AO',\n    AIA: 'AI',\n    ATA: 'AQ',\n    ATG: 'AG',\n    ARG: 'AR',\n    ARM: 'AM',\n    ABW: 'AW',\n    AUS: 'AU',\n    AUT: 'AT',\n    AZE: 'AZ',\n    BHS: 'BS',\n    BHR: 'BH',\n    BGD: 'BD',\n    BRB: 'BB',\n    BLR: 'BY',\n    BEL: 'BE',\n    BLZ: 'BZ',\n    BEN: 'BJ',\n    BMU: 'BM',\n    BTN: 'BT',\n    BOL: 'BO',\n    BES: 'BQ',\n    BIH: 'BA',\n    BWA: 'BW',\n    BVT: 'BV',\n    BRA: 'BR',\n    VGB: 'VG',\n    IOT: 'IO',\n    BRN: 'BN',\n    BGR: 'BG',\n    BFA: 'BF',\n    BDI: 'BI',\n    KHM: 'KH',\n    CMR: 'CM',\n    CAN: 'CA',\n    CPV: 'CV',\n    CYM: 'KY',\n    CAF: 'CF',\n    TCD: 'TD',\n    CHL: 'CL',\n    CHN: 'CN',\n    HKG: 'HK',\n    MAC: 'MO',\n    CXR: 'CX',\n    CCK: 'CC',\n    COL: 'CO',\n    COM: 'KM',\n    COG: 'CG',\n    COD: 'CD',\n    COK: 'CK',\n    CRI: 'CR',\n    CIV: 'CI',\n    HRV: 'HR',\n    CUB: 'CU',\n    CUW: 'CW',\n    CYP: 'CY',\n    CZE: 'CZ',\n    DNK: 'DK',\n    DJI: 'DJ',\n    DMA: 'DM',\n    DOM: 'DO',\n    ECU: 'EC',\n    EGY: 'EG',\n    SLV: 'SV',\n    GNQ: 'GQ',\n    ERI: 'ER',\n    EST: 'EE',\n    ETH: 'ET',\n    FLK: 'FK',\n    FRO: 'FO',\n    FJI: 'FJ',\n    FIN: 'FI',\n    FRA: 'FR',\n    GUF: 'GF',\n    PYF: 'PF',\n    ATF: 'TF',\n    GAB: 'GA',\n    GMB: 'GM',\n    GEO: 'GE',\n    DEU: 'DE',\n    GHA: 'GH',\n    GIB: 'GI',\n    GRC: 'GR',\n    GRL: 'GL',\n    GRD: 'GD',\n    GLP: 'GP',\n    GUM: 'GU',\n    GTM: 'GT',\n    GGY: 'GG',\n    GIN: 'GN',\n    GNB: 'GW',\n    GUY: 'GY',\n    HTI: 'HT',\n    HMD: 'HM',\n    VAT: 'VA',\n    HND: 'HN',\n    HUN: 'HU',\n    ISL: 'IS',\n    IND: 'IN',\n    IDN: 'ID',\n    IRN: 'IR',\n    IRQ: 'IQ',\n    IRL: 'IE',\n    IMN: 'IM',\n    ISR: 'IL',\n    ITA: 'IT',\n    JAM: 'JM',\n    JPN: 'JP',\n    JEY: 'JE',\n    JOR: 'JO',\n    KAZ: 'KZ',\n    KEN: 'KE',\n    KIR: 'KI',\n    PRK: 'KP',\n    KOR: 'KR',\n    KWT: 'KW',\n    KGZ: 'KG',\n    LAO: 'LA',\n    LVA: 'LV',\n    LBN: 'LB',\n    LSO: 'LS',\n    LBR: 'LR',\n    LBY: 'LY',\n    LIE: 'LI',\n    LTU: 'LT',\n    LUX: 'LU',\n    MKD: 'MK',\n    MDG: 'MG',\n    MWI: 'MW',\n    MYS: 'MY',\n    MDV: 'MV',\n    MLI: 'ML',\n    MLT: 'MT',\n    MHL: 'MH',\n    MTQ: 'MQ',\n    MRT: 'MR',\n    MUS: 'MU',\n    MYT: 'YT',\n    MEX: 'MX',\n    FSM: 'FM',\n    MDA: 'MD',\n    MCO: 'MC',\n    MNG: 'MN',\n    MNE: 'ME',\n    MSR: 'MS',\n    MAR: 'MA',\n    MOZ: 'MZ',\n    MMR: 'MM',\n    NAM: 'NA',\n    NRU: 'NR',\n    NPL: 'NP',\n    NLD: 'NL',\n    ANT: 'AN',\n    NCL: 'NC',\n    NZL: 'NZ',\n    NIC: 'NI',\n    NER: 'NE',\n    NGA: 'NG',\n    NIU: 'NU',\n    NFK: 'NF',\n    MNP: 'MP',\n    NOR: 'NO',\n    OMN: 'OM',\n    PAK: 'PK',\n    PLW: 'PW',\n    PSE: 'PS',\n    PAN: 'PA',\n    PNG: 'PG',\n    PRY: 'PY',\n    PER: 'PE',\n    PHL: 'PH',\n    PCN: 'PN',\n    POL: 'PL',\n    PRT: 'PT',\n    PRI: 'PR',\n    QAT: 'QA',\n    REU: 'RE',\n    ROU: 'RO',\n    RUS: 'RU',\n    RWA: 'RW',\n    BLM: 'BL',\n    SHN: 'SH',\n    KNA: 'KN',\n    LCA: 'LC',\n    MAF: 'MF',\n    SPM: 'PM',\n    VCT: 'VC',\n    WSM: 'WS',\n    SMR: 'SM',\n    STP: 'ST',\n    SAU: 'SA',\n    SEN: 'SN',\n    SRB: 'RS',\n    SYC: 'SC',\n    SLE: 'SL',\n    SGP: 'SG',\n    SXM: 'SX',\n    SVK: 'SK',\n    SVN: 'SI',\n    SLB: 'SB',\n    SOM: 'SO',\n    ZAF: 'ZA',\n    SGS: 'GS',\n    SSD: 'SS',\n    ESP: 'ES',\n    LKA: 'LK',\n    SDN: 'SD',\n    SUR: 'SR',\n    SJM: 'SJ',\n    SWZ: 'SZ',\n    SWE: 'SE',\n    CHE: 'CH',\n    SYR: 'SY',\n    TWN: 'TW',\n    TJK: 'TJ',\n    TZA: 'TZ',\n    THA: 'TH',\n    TLS: 'TL',\n    TGO: 'TG',\n    TKL: 'TK',\n    TON: 'TO',\n    TTO: 'TT',\n    TUN: 'TN',\n    TUR: 'TR',\n    TKM: 'TM',\n    TCA: 'TC',\n    TUV: 'TV',\n    UGA: 'UG',\n    UKR: 'UA',\n    ARE: 'AE',\n    GBR: 'GB',\n    USA: 'US',\n    UMI: 'UM',\n    URY: 'UY',\n    UZB: 'UZ',\n    VUT: 'VU',\n    VEN: 'VE',\n    VNM: 'VN',\n    VIR: 'VI',\n    WLF: 'WF',\n    ESH: 'EH',\n    YEM: 'YE',\n    ZMB: 'ZM',\n    ZWE: 'ZW',\n    XKX: 'XK',\n};\n","import { ALPHA_3_TO_ALPHA_2 } from '../constants';\nimport useQuery from '../useQuery';\nimport useSettings from './useSettings';\n\n// TODO: Merge service token hooks into a single service token hook call\n/** A custom hook that get Service Token for Onfido.\n * @param [country] - The country code to be used to retrieve the Onfido service token.\n * For example:\n * ```\n * const { data: { token } } = useOnfidoServiceToken()\n * ```\n */\n\nconst useOnfidoServiceToken = (country?: string) => {\n    const { data: settings } = useSettings();\n    const country_code = country ?? settings.country_code ?? '';\n    const countryCode = country_code.length >= 3 ? ALPHA_3_TO_ALPHA_2[country_code] : country_code;\n    const { data: onfido_token_data, ...rest } = useQuery('service_token', {\n        payload: {\n            service: 'onfido',\n            country: countryCode,\n        },\n        options: {\n            retry: 3,\n            enabled: !!countryCode,\n        },\n    });\n\n    return {\n        /** return the onfido account token */\n        data: {\n            ...onfido_token_data?.service_token?.onfido,\n        },\n        ...rest,\n    };\n};\n\nexport default useOnfidoServiceToken;\n","import React from 'react';\n\nexport const ROOT_CLASS = 'manual-poi-details';\n\nexport const DOCUMENT_TYPES = {\n    NATIONAL_IDENTITY_CARD: 'national_identity_card',\n    NIMC_SLIP: 'nimc_slip',\n    PASSPORT: 'passport',\n    DRIVING_LICENCE: 'driving_licence',\n    BIRTH_CERTIFICATE: 'birth_certificate',\n    SELFIE_WITH_ID: 'selfie_with_id',\n    OTHER: 'other',\n};\n\nconst PAGE_TYPE = {\n    FRONT: 'front',\n    BACK: 'back',\n    PHOTO: 'photo',\n};\n\nexport const SELFIE_DOCUMENT = {\n    document_type: DOCUMENT_TYPES.SELFIE_WITH_ID,\n    pageType: PAGE_TYPE.PHOTO,\n    name: 'selfie_with_id',\n    icon: 'IcSelfie',\n    info: 'Upload your selfie.',\n};\n\nexport const date_field = {\n    name: 'expiry_date',\n    label: 'Expiry date',\n    type: 'date',\n    required: true,\n};\n\nexport const ONFIDO_PHRASES = {\n    country_select: {\n        alert_dropdown: {\n            country_not_found: 'Country not found',\n        },\n        alert: {\n            another_doc:\n                'Documents from that country are not currently supported — <fallback>try another document type</fallback>',\n        },\n        button_primary: 'Submit document',\n        search: {\n            accessibility: 'Select country',\n            input_placeholder: 'e.g. United States',\n            label: 'Search for country',\n        },\n        title: 'Select issuing country',\n    },\n    cross_device_checklist: {\n        button_primary: 'Submit verification',\n        info: 'Tips',\n        list_item_doc_multiple: 'Documents uploaded',\n        list_item_doc_one: 'Document uploaded',\n        list_item_selfie: 'Selfie uploaded',\n        subtitle: \"We're now ready to verify your identity\",\n        title: \"Great, that's everything we need\",\n    },\n    cross_device_error_desktop: {\n        subtitle: 'The link only works on mobile devices',\n        title: \"Something's gone wrong\",\n    },\n    cross_device_error_restart: {\n        subtitle: \"You'll need to restart your verification on your computer\",\n        title: \"Something's gone wrong\",\n    },\n    cross_device_intro: {\n        button_primary: 'Get secure link',\n        list_accessibility: 'Steps required to continue verification on your mobile',\n        list_item_finish: 'Check back here to finish the submission',\n        list_item_open_link: 'Open the link and complete the tasks',\n        list_item_send_phone: 'Send a secure link to your phone',\n        subtitle: \"Here's how to do it:\",\n        title: 'Continue on your phone',\n    },\n    cross_device_return: {\n        body: 'Your computer may take a few seconds to update',\n        subtitle: 'You can now return to your computer to continue',\n        title: 'Uploads successful',\n    },\n    doc_confirmation: {\n        alert: {\n            blur_detail: 'Make sure everything is clear',\n            blur_title: 'Blurry photo detected',\n            crop_detail: 'Make sure full document is visible',\n            crop_title: 'Cut-off image detected',\n            glare_detail: 'Move away from direct light',\n            glare_title: 'Glare detected',\n            no_doc_detail: 'Make sure all of the document is in the photo',\n            no_doc_title: 'No document detected',\n        },\n        body_id: 'Make sure your card details are clear to read, with no blur or glare',\n        body_image_medium: 'It’ll take longer to verify you if we can’t read it',\n        body_image_poor: 'To smoothly verify you, we need a better photo',\n        body_license: 'Make sure your license details are clear to read, with no blur or glare',\n        body_passport: 'Make sure your passport details are clear to read, with no blur or glare',\n        body_permit: 'Make sure your permit details are clear to read, with no blur or glare',\n        body_tax_letter: 'Make sure details are clear to read, with no blur or glare',\n        button_close: 'Close',\n        button_primary_redo: 'Redo',\n        button_primary_upload: 'Confirm',\n        button_primary_upload_anyway: 'Upload anyway',\n        button_secondary_redo: 'Redo',\n        button_zoom: 'Enlarge image',\n        image_accessibility: 'Photo of your document',\n        title: 'Check your image',\n    },\n    doc_select: {\n        button_id: 'Identity card',\n        button_id_detail: 'Front and back',\n        button_license: \"Driver's license\",\n        button_license_detail: 'Front and back',\n        button_passport: 'Passport',\n        button_passport_detail: 'Face photo page',\n        button_permit: 'Residence permit',\n        button_permit_detail: 'Front and back',\n        extra_no_mobile: 'Sorry, no mobile phone bills',\n        list_accessibility: 'Documents you can use to verify your identity',\n        subtitle: 'It must be an official photo ID',\n        subtitle_poa: 'These are the documents most likely to show your current home address',\n        title: 'Choose document',\n        title_poa: 'Select a %{country} document',\n    },\n    doc_submit: {\n        button_link_upload: 'or upload photo – no scans or photocopies',\n        button_primary: 'Continue on phone',\n        subtitle: 'Take a photo with your phone',\n        title_id_back: 'Submit identity card (back)',\n        title_id_front: 'Submit identity card (front)',\n        title_license_back: 'Submit license (back)',\n        title_license_front: 'Submit license (front)',\n        title_passport: 'Submit passport photo page',\n        title_permit_back: 'Submit residence permit (back)',\n        title_permit_front: 'Submit residence permit (front)',\n    },\n    error_unsupported_browser: {\n        subtitle_android: 'Restart the process on the latest version of Google Chrome',\n        subtitle_ios: 'Restart the process on the latest version of Safari',\n        title_android: 'Unsupported browser',\n        title_ios: 'Unsupported browser',\n    },\n    generic: {\n        accessibility: {\n            close_sdk_screen: 'Close identity verification screen',\n            dismiss_alert: 'Dismiss alert',\n        },\n        back: 'back',\n        close: 'close',\n        errors: {\n            interrupted_flow_error: {\n                instruction: 'Restart process on a different device',\n                message: 'Camera not detected',\n            },\n            invalid_size: {\n                instruction: 'Must be under 10MB.',\n                message: 'File size exceeded.',\n            },\n            invalid_type: {\n                instruction: 'Try using another file type.',\n                message: 'File not uploaded.',\n            },\n            lazy_loading: {\n                message: 'An error occurred while loading the component',\n            },\n            multiple_faces: {\n                instruction: 'Only your face can be in the selfie',\n                message: 'Multiple faces found',\n            },\n            no_face: {\n                instruction: 'Your face is needed in the selfie',\n                message: 'No face found',\n            },\n            request_error: {\n                instruction: 'Please try again',\n                message: 'Connection lost',\n            },\n            sms_failed: {\n                instruction: 'Copy the link to your phone',\n                message: \"Something's gone wrong\",\n            },\n            sms_overuse: {\n                instruction: 'Copy the link to your phone',\n                message: 'Too many failed attempts',\n            },\n            unsupported_file: {\n                instruction: 'Try using a JPG or PNG file',\n                message: 'File type not supported',\n            },\n        },\n        lazy_load_placeholder: 'Loading...',\n        loading: 'Loading',\n    },\n    get_link: {\n        alert_wrong_number: 'Check that your number is correct',\n        button_copied: 'Copied',\n        button_copy: 'Copy',\n        button_submit: 'Send link',\n        info_qr_how: 'How to scan a QR code',\n        info_qr_how_list_item_camera: 'Point your phone’s camera at the QR code',\n        info_qr_how_list_item_download:\n            'If it doesn’t work, download a QR code scanner from Google Play or the App Store',\n        link_divider: 'or',\n        link_qr: 'Scan QR code',\n        link_sms: 'Get link via SMS',\n        link_url: 'Copy link',\n        loader_sending: 'Sending',\n        number_field_input_placeholder: 'Enter mobile number',\n        number_field_label: 'Enter your mobile number:',\n        subtitle_qr: 'Scan the QR code with your phone',\n        subtitle_sms: 'Send this one-time link to your phone',\n        subtitle_url: 'Open the link on your mobile',\n        title: 'Get your secure link',\n        url_field_label: 'Copy the link to your mobile browser',\n    },\n    linked_computer: {\n        button_primary: 'Continue',\n        info: 'Make sure§',\n        list_item_desktop_open: '2. Your desktop window stays open',\n        list_item_sent_by_you: '1. This link was sent by you',\n        subtitle: 'Continue with the verification',\n        title: 'Linked to your computer',\n    },\n    mobilePhrases: {\n        photo_upload: {\n            body_id_back: 'Take a photo of the back of your card',\n            body_id_front: 'Take a photo of the front of your card',\n            body_license_back: 'Take a photo of the back of your license',\n            body_license_front: 'Take a photo of the front of your license',\n            body_passport: 'Take a photo of your passport photo page',\n            body_selfie: 'Take a selfie showing your face',\n        },\n        selfie_capture: {\n            alert: {\n                camera_inactive: {\n                    detail: 'Take a photo using the <fallback>basic camera mode</fallback> instead',\n                },\n                camera_not_working: {\n                    detail: 'Take a photo using the <fallback>basic camera mode</fallback> instead',\n                },\n            },\n        },\n        upload_guide: {\n            button_primary: 'Take a photo',\n            title: 'Passport photo page',\n        },\n    },\n    outro: {\n        body: 'Thank you',\n        title: 'Verification complete',\n    },\n    permission_recovery: {\n        button_primary: 'Refresh',\n        info: 'Recovery',\n        list_header_cam: 'Follow these steps to recover camera access:',\n        list_item_action_cam: 'Refresh this page to restart the identity verification process',\n        list_item_how_to_cam: 'Grant access to your camera from your browser settings',\n        subtitle_cam: 'Recover camera access to continue face verification',\n        title_cam: 'Camera access is denied',\n    },\n    permission: {\n        body_cam: 'We cannot verify you without using your camera',\n        button_primary_cam: 'Enable camera',\n        subtitle_cam: 'When prompted, you must enable camera access to continue',\n        title_cam: 'Allow camera access',\n    },\n    photo_upload: {\n        body_bank_statement: 'Provide the whole document page for best results',\n        body_benefits_letter: 'Provide the whole document page for best results',\n        body_bill: 'Provide the whole document page for best results',\n        body_government_letter: 'Provide the whole document page for best results',\n        body_id_back: 'Upload back of card from your computer',\n        body_id_front: 'Upload front of card from your computer',\n        body_license_back: 'Upload back of license from your computer',\n        body_license_front: 'Upload front of license from your computer',\n        body_passport: 'Upload passport photo page from your computer',\n        body_selfie: 'Upload a selfie from your computer',\n        body_tax_letter: 'Provide the whole document page for best results',\n        button_take_photo: 'Take photo',\n        button_upload: 'Upload',\n        title_selfie: 'Selfie',\n    },\n    selfie_capture: {\n        alert: {\n            camera_inactive: {\n                detail: 'Check that it is connected and functional. You can also <fallback>continue verification on your phone</fallback>',\n                detail_no_fallback: 'Make sure your device has a working camera',\n                title: 'Camera not working?',\n            },\n            camera_not_working: {\n                detail: 'It may be disconnected. <fallback>Try using your phone instead</fallback>.',\n                detail_no_fallback: \"Make sure your device's camera works\",\n                title: 'Camera not working',\n            },\n            timeout: {\n                detail: \"Remember to press stop when you're done. <fallback>Redo video actions</fallback>\",\n                title: 'Looks like you took too long',\n            },\n        },\n        button_accessibility: 'Take a photo',\n        frame_accessibility: 'View from camera',\n        title: 'Take a selfie',\n    },\n    selfie_confirmation: {\n        image_accessibility: 'Photo of your face',\n        subtitle: 'Make sure your selfie clearly shows your face',\n        title: 'Check selfie',\n    },\n    selfie_intro: {\n        button_primary: 'Continue',\n        list_accessibility: 'Tips to take a good selfie',\n        list_item_face_forward: 'Face forward and make sure your eyes are clearly visible',\n        list_item_no_glasses: 'Remove your glasses, if necessary',\n        subtitle: \"We'll compare it with your document\",\n        title: 'Take a selfie',\n    },\n    sms_sent: {\n        info: 'Tips',\n        info_link_expire: 'Your link will expire in one hour',\n        info_link_window: 'Keep this window open while using your mobile',\n        link: 'Resend link',\n        subtitle: \"We've sent a secure link to %{number}\",\n        subtitle_minutes: 'It may take a few minutes to arrive',\n        title: 'Check your mobile',\n    },\n    switch_phone: {\n        info: 'Tips',\n        info_link_expire: 'Your mobile link will expire in one hour',\n        info_link_refresh: \"Don't refresh this page\",\n        info_link_window: 'Keep this window open while using your mobile',\n        link: 'Cancel',\n        subtitle: \"Once you've finished we'll take you to the next step\",\n        title: 'Connected to your mobile',\n    },\n    upload_guide: {\n        button_primary: 'Upload photo',\n        image_detail_blur_alt: 'Example of a blurry document',\n        image_detail_blur_label: 'All details must be clear — nothing blurry',\n        image_detail_cutoff_alt: 'Example of a cut-off document',\n        image_detail_cutoff_label: 'Show all details — including the bottom 2 lines',\n        image_detail_glare_alt: 'Example of a document with glare',\n        image_detail_glare_label: 'Move away from direct light — no glare',\n        image_detail_good_alt: 'Document example',\n        image_detail_good_label: 'The photo should clearly show your document',\n        subtitle: 'Scans and photocopies are not accepted',\n        title: 'Upload passport photo page',\n    },\n};\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\n/** A custom hook to send notification event to backend about Onfido successful documents uploaded */\nconst useOnfidoNotificationEvent = () => {\n    const { mutate: _mutate, ...rest } = useMutation('notification_event');\n\n    const mutate = useCallback(\n        (documentIds: string[]) =>\n            _mutate({\n                payload: {\n                    category: 'authentication',\n                    event: 'poi_documents_uploaded',\n                    args: {\n                        documents: documentIds,\n                    },\n                },\n            }),\n        [_mutate]\n    );\n\n    return {\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useOnfidoNotificationEvent;\n","import { useCallback, useRef, useMemo, useEffect, useState } from 'react';\nimport { LocalStorageUtils } from '@deriv-com/utils';\nimport useOnfidoServiceToken from './useOnfidoServiceToken';\nimport { ALPHA_2_TO_ALPHA_3, ONFIDO_PHRASES } from '../constants';\nimport useSettings from './useSettings';\nimport useResidenceList from './useResidenceList';\nimport type { SdkHandle, SdkResponse } from '../types/onfido';\nimport useOnfidoNotificationEvent from './useOnfidoNotificationEvent';\nimport { v4 as uuidv4 } from 'uuid';\n\n/** A custom hook to initialize Onfido SDK.\n * To initialize Onfido, ensure that an empty container is present.\n * Call the hook and use `onfidoContainerId` to mark the empty container where the Onfido UI is to be mounted.\n *  @param [country] - The country code to be used to retrieve the Onfido service token.\n *  @param [selectedDocument] - Type of document to be passed to bypass the document selection screen\n * For example:\n * ```\n * const { data: { onfidoContainerId } } = useOnfido()\n * ...\n * return (\n *    <>\n *       ...\n *       <div id={onfidoContainerId}></div>\n *       ...\n *    </>\n * )\n * ```\n */\nconst useOnfido = (country?: string, selectedDocument?: string) => {\n    // use to check that we do not re-attempt to reload the onfido script while its still loading\n    const [isOnfidoLoading, setIsOnfidoLoading] = useState(false);\n    const [isOnfidoInitialized, setIsOnfidoInitialized] = useState(false);\n    const [onfidoInitializationError, setOnfidoInitializationError] = useState<Error | null>(null);\n    const [hasSubmitted, setHasSubmitted] = useState(false);\n\n    /**\n     * A reference to the Onfido SDK\n     */\n    const onfidoRef = useRef<SdkHandle | null>(null);\n    /**\n     * A generated ID which should be assigned to a container where the Onfido UI is to be mounted.\n     * For example:\n     * ```\n     * const { data: { onfidoContainerId } } = useOnfido()\n     * ...\n     * return (\n     *    <>\n     *       ...\n     *       <div id={onfidoContainerId}></div>\n     *       ...\n     *    </>\n     * )\n     * ```\n     */\n    const onfidoContainerId = useMemo(() => uuidv4(), []);\n\n    // settings for retrieving country code\n    const { data: settings } = useSettings();\n    // residence list for retrieving supported documents for onfido for the user's country\n    const { data: residenceList } = useResidenceList();\n    const countryCode = useMemo(() => {\n        return country ?? settings?.country_code ?? '';\n    }, [country, settings?.country_code]);\n    // onfido service token to be passed in Onfido SDK\n    const {\n        data: { token },\n        error: serviceTokenError,\n        isLoading: isServiceTokenLoading,\n    } = useOnfidoServiceToken(countryCode);\n    // notification event for onfido once user submits documents\n    const { mutate: submitDocuments } = useOnfidoNotificationEvent();\n\n    const supportedDocuments = useMemo(() => {\n        if (countryCode && residenceList.length) {\n            // TODO: Replace these logic with data from useKycAuthStatus hook.\n            const onfidoResidence = residenceList.find(residence => residence?.value === countryCode)?.identity\n                ?.services?.onfido;\n            if (selectedDocument && onfidoResidence?.documents_supported) {\n                return [onfidoResidence?.documents_supported[selectedDocument]?.display_name];\n            }\n            if (onfidoResidence && onfidoResidence.is_country_supported) {\n                return Object.keys(onfidoResidence.documents_supported ?? {}).map(\n                    (document: string) => onfidoResidence.documents_supported?.[document].display_name\n                );\n            }\n        }\n        return [];\n    }, [residenceList, countryCode, selectedDocument]);\n\n    const onComplete = useCallback(\n        (data: Omit<SdkResponse, 'data'> & { data?: { id?: string } }) => {\n            const document_ids = Object.keys(data).map(key => data[key as keyof SdkResponse]?.id ?? '');\n            submitDocuments(document_ids);\n            setHasSubmitted(true);\n        },\n        [submitDocuments]\n    );\n\n    const initOnfido = useCallback(async () => {\n        const localizeLanguage = LocalStorageUtils.getValue<string>('i18n_language');\n        const i18NLanguage = localizeLanguage || 'en';\n\n        const onfidoCountryCode =\n            countryCode.length !== 3 ? ALPHA_2_TO_ALPHA_3[countryCode.toUpperCase()] : countryCode;\n        try {\n            onfidoRef.current = await window.Onfido.init({\n                containerId: onfidoContainerId,\n                language: {\n                    locale: i18NLanguage.toLowerCase(),\n                    phrases: ONFIDO_PHRASES,\n                    mobilePhrases: ONFIDO_PHRASES,\n                },\n                token,\n                useModal: false,\n                useMemoryHistory: true,\n                onComplete,\n                steps: [\n                    {\n                        type: 'document',\n                        options: {\n                            documentTypes: {\n                                passport: supportedDocuments.some(doc => /Passport/g.test(doc ?? '')),\n                                driving_licence: supportedDocuments.some(doc => /Driving Licence/g.test(doc ?? ''))\n                                    ? {\n                                          country: onfidoCountryCode,\n                                      }\n                                    : false,\n                                national_identity_card: supportedDocuments.some(doc =>\n                                    /National Identity Card/g.test(doc ?? '')\n                                )\n                                    ? {\n                                          country: onfidoCountryCode,\n                                      }\n                                    : false,\n                            },\n                            hideCountrySelection: true,\n                        },\n                    },\n                    'face',\n                ],\n            });\n            setIsOnfidoInitialized(true);\n        } catch (error) {\n            if (error instanceof Error) {\n                setOnfidoInitializationError(error);\n            }\n            setIsOnfidoInitialized(false);\n        }\n    }, [countryCode, onComplete, onfidoContainerId, supportedDocuments, token]);\n\n    const loadOnfidoSdkScript = useCallback(() => {\n        const hasOnfidoScriptNode = !!document.getElementById('onfido_sdk');\n        // check if the onfido sdk script has been loaded, and if its still loading the onfido script, don't re-attempt to load the script again\n        if (hasOnfidoScriptNode) {\n            if (!isOnfidoLoading) initOnfido();\n        } else {\n            setIsOnfidoLoading(true);\n            const scriptNode = document.createElement('script');\n            const linkNode = document.createElement('link');\n            // [TODO] - Need to lock version of onfido sdk - Current version in CDN is 13.8.4\n            scriptNode.id = 'onfido_sdk';\n            scriptNode.src = 'https://assets.onfido.com/web-sdk-releases/13.8.4/onfido.min.js';\n            linkNode.href = 'https://assets.onfido.com/web-sdk-releases/13.8.4/style.css';\n            linkNode.rel = 'stylesheet';\n\n            document.body.appendChild(scriptNode);\n            document.body.appendChild(linkNode);\n\n            scriptNode.addEventListener('load', () => {\n                initOnfido();\n                setIsOnfidoLoading(false);\n            });\n        }\n    }, [initOnfido, isOnfidoLoading]);\n\n    useEffect(() => {\n        if (token && supportedDocuments.length && countryCode) {\n            loadOnfidoSdkScript();\n        }\n    }, [token, supportedDocuments, countryCode, loadOnfidoSdkScript]);\n\n    return {\n        data: {\n            onfidoRef,\n            onfidoContainerId,\n            hasSubmitted,\n        },\n        isOnfidoInitialized,\n        isServiceTokenLoading,\n        serviceTokenError,\n        onfidoInitializationError,\n    };\n};\n\nexport default useOnfido;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\nimport useInvalidateQuery from '../useInvalidateQuery';\n\ntype TPayload = Parameters<ReturnType<typeof useMutation<'trading_platform_deposit'>>['mutate']>[0]['payload'];\n\n/** A custom hook for top-up of Other CFD Accounts */\nconst useOtherCFDPlatformsDeposit = () => {\n    const invalidate = useInvalidateQuery();\n\n    const {\n        mutate: _mutate,\n        mutateAsync: _mutateAsync,\n        ...rest\n    } = useMutation('trading_platform_deposit', {\n        onSuccess: () => {\n            invalidate('trading_platform_accounts');\n        },\n    });\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n    const mutateAsync = useCallback((payload: TPayload) => _mutateAsync({ payload }), [_mutateAsync]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useOtherCFDPlatformsDeposit;\n","import { useMemo } from 'react';\nimport useAuthentication from './useAuthentication';\n\n/** A custom hook to get the proof of address (poa) verification info of the current user  */\nconst usePOA = () => {\n    const { data: authentication_data, ...rest } = useAuthentication();\n\n    const modified_authentication_data = useMemo(() => {\n        if (!authentication_data?.document) return;\n\n        return {\n            ...authentication_data.document,\n            has_attempted_poa: authentication_data?.document.status !== 'none',\n            is_pending: authentication_data?.document.status === 'pending',\n            is_rejected: authentication_data?.document.status === 'rejected',\n            is_expired: authentication_data?.document.status === 'expired',\n            is_suspected: authentication_data?.document.status === 'suspected',\n            is_verified: authentication_data?.document.status === 'verified',\n            is_need_submission: !['pending', 'verified'].includes(authentication_data?.document.status || ''),\n        };\n    }, [authentication_data]);\n\n    return {\n        data: modified_authentication_data,\n        ...rest,\n    };\n};\n\nexport default usePOA;\n","import useQuery from '../useQuery';\nimport useSettings from './useSettings';\n\nconst SEVEN_DAYS_MILLISECONDS = 604800000;\n\n/** A custom hook that get Service Token for Sendbird. */\nconst useSendbirdServiceToken = () => {\n    const { isSuccess } = useSettings();\n    const { data: sendbird_token_data, ...rest } = useQuery('service_token', {\n        payload: {\n            service: 'sendbird',\n        },\n        options: {\n            enabled: isSuccess,\n            staleTime: SEVEN_DAYS_MILLISECONDS, // Sendbird tokens expire 7 days by default\n        },\n    });\n\n    return {\n        /** return the sendbird service token */\n        data: {\n            ...sendbird_token_data?.service_token?.sendbird,\n        },\n        ...rest,\n    };\n};\n\nexport default useSendbirdServiceToken;\n","import React from 'react';\nimport useQuery from '../useQuery';\nimport { toMoment } from '@deriv/utils';\n\n/**\n * Hook that returns the current server time fetched using `time` endpoint\n */\nconst useServerTime = () => {\n    const { data, ...rest } = useQuery('time');\n\n    const modified_data = React.useMemo(() => {\n        if (!data) return;\n\n        const server_time_moment = toMoment(data.time);\n        return {\n            ...data,\n            /** Returns the server time in UTC format */\n            server_time_utc: server_time_moment.utc().valueOf(),\n            /** Returns the server time in an instance of Moment */\n            server_time_moment,\n        };\n    }, [data]);\n\n    return {\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useServerTime;\n","import { useMemo } from 'react';\nimport useMT5AccountsList from './useMT5AccountsList';\nimport useAvailableMT5Accounts from './useAvailableMT5Accounts';\nimport useIsEuRegion from './useIsEuRegion';\nimport useActiveAccount from './useActiveAccount';\n\n/** A custom hook to get the sorted added and non-added MT5 accounts. */\nconst useSortedMT5Accounts = (regulation?: string) => {\n    const { data: all_available_mt5_accounts } = useAvailableMT5Accounts();\n    const { isEUCountry } = useIsEuRegion();\n    const { data: mt5_accounts, ...rest } = useMT5AccountsList();\n    const { data: activeAccount } = useActiveAccount();\n\n    const isEU = regulation === 'EU' || isEUCountry;\n\n    const modified_data = useMemo(() => {\n        if (!all_available_mt5_accounts || !mt5_accounts) return;\n\n        const filtered_available_accounts = isEU\n            ? all_available_mt5_accounts.filter(account => account.shortcode === 'maltainvest')\n            : all_available_mt5_accounts;\n\n        const filtered_mt5_accounts = mt5_accounts.filter(\n            account =>\n                account.is_virtual === activeAccount?.is_virtual &&\n                (isEU\n                    ? account.landing_company_short === 'maltainvest'\n                    : account.landing_company_short !== 'maltainvest')\n        );\n\n        return filtered_available_accounts?.map(available_account => {\n            const created_account = filtered_mt5_accounts?.find(account => {\n                return (\n                    available_account.market_type === account.market_type &&\n                    available_account.shortcode === account.landing_company_short\n                );\n            });\n\n            if (created_account)\n                return {\n                    ...created_account,\n                    /** Determine if the account is added or not */\n                    is_added: true,\n                } as const;\n\n            return {\n                ...available_account,\n                /** Determine if the account is added or not */\n                is_added: false,\n            } as const;\n        });\n    }, [activeAccount?.is_virtual, all_available_mt5_accounts, isEU, mt5_accounts]);\n\n    // // Reduce out the added and non added accounts to make sure only one of each market_type is shown for not added\n    const filtered_data = useMemo(() => {\n        if (!modified_data) return;\n\n        const added_accounts = modified_data.filter(account => account.is_added);\n        const non_added_accounts = modified_data.filter(account => !account.is_added);\n\n        const filtered_non_added_accounts = non_added_accounts.reduce((acc, account) => {\n            const existing_account = acc.find(acc_account => acc_account.market_type === account.market_type);\n            const added_account = added_accounts.find(acc_account => acc_account.market_type === account.market_type);\n            if (existing_account || added_account) return acc;\n\n            return [...acc, account];\n        }, [] as typeof non_added_accounts);\n\n        return [...added_accounts, ...filtered_non_added_accounts];\n    }, [modified_data]);\n\n    // Sort the data by market_type to make sure the order is 'synthetic', 'financial', 'all'\n    const sorted_data = useMemo(() => {\n        const market_type_order = ['synthetic', 'financial', 'all'];\n\n        if (!filtered_data) return;\n\n        const sorted_data = market_type_order.reduce((acc, market_type) => {\n            const accounts = filtered_data.filter(account => account.market_type === market_type);\n            if (!accounts.length) return acc;\n            return [...acc, ...accounts];\n        }, [] as typeof filtered_data);\n\n        return sorted_data;\n    }, [filtered_data]);\n\n    const areAllAccountsCreated = sorted_data?.length === all_available_mt5_accounts?.length;\n\n    return {\n        data: sorted_data,\n        /** Determine if all the accounts are created */\n        areAllAccountsCreated,\n        ...rest,\n    };\n};\n\nexport default useSortedMT5Accounts;\n","import { useState, useEffect } from 'react';\nimport useWalletAccountsList from './useWalletAccountsList';\nimport useCurrencyConfig from './useCurrencyConfig';\n\n/** A custom hook that gets the list of all wallet accounts for the current user. */\nconst useMobileCarouselWalletsList = () => {\n    const { data: walletAccountsList, isLoading } = useWalletAccountsList();\n    const { isLoading: isCurrencyConfigLoading } = useCurrencyConfig();\n\n    const [staleWalletAccountsList, setStaleWalletAccountslist] = useState(walletAccountsList);\n    const [staleIsLoading, setStaleIsLoading] = useState(true);\n\n    useEffect(() => {\n        if (!isLoading && !isCurrencyConfigLoading) {\n            setStaleIsLoading(false);\n            setStaleWalletAccountslist(walletAccountsList);\n        }\n\n        // due to quirky nature of underlying hooks chain, need this complex list of conditions\n        if (\n            !isLoading &&\n            !isCurrencyConfigLoading &&\n            walletAccountsList &&\n            staleWalletAccountsList &&\n            staleWalletAccountsList?.length !== walletAccountsList?.length &&\n            walletAccountsList?.length > staleWalletAccountsList?.length\n        ) {\n            setStaleIsLoading(false);\n            setStaleWalletAccountslist(walletAccountsList);\n        }\n    }, [isLoading, isCurrencyConfigLoading, walletAccountsList]);\n\n    return {\n        /** The list of wallet accounts for the current user. */\n        data: staleWalletAccountsList,\n        isLoading: staleIsLoading,\n    };\n};\n\nexport default useMobileCarouselWalletsList;\n","import { useMemo } from 'react';\nimport useQuery from '../useQuery';\nimport useSettings from './useSettings';\nimport { TSocketRequestQueryOptions } from '../../types';\n\n/** Custom hook to get states list for a particular country. */\ntype TStatesList = Exclude<NonNullable<ReturnType<typeof useSettings>['data']['residence' | 'country']>, undefined>;\n\nconst useStatesList = (country: TStatesList, options?: TSocketRequestQueryOptions<'states_list'>) => {\n    const { data, ...rest } = useQuery('states_list', {\n        // @ts-expect-error The `states_list` type from `@deriv/api-types` is not correct.\n        // The type should be `string`, but it's an alias to string type.\n        payload: { states_list: country },\n        options,\n    });\n\n    const modified_states_list = useMemo(() => [...(data?.states_list ?? [])], [data?.states_list]);\n\n    return {\n        /** The states list for the given country. */\n        data: modified_states_list,\n        ...rest,\n    };\n};\n\nexport default useStatesList;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = Parameters<\n    ReturnType<typeof useMutation<'trading_platform_investor_password_change'>>['mutate']\n>[0]['payload'];\n\n/** A custom hook that change the Trading Platform Investor Password. */\nconst useTradingPlatformInvestorPasswordChange = () => {\n    const {\n        mutate: _mutate,\n        mutateAsync: _mutateAsync,\n        ...rest\n    } = useMutation('trading_platform_investor_password_change');\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n    const mutateAsync = useCallback((payload: TPayload) => _mutateAsync({ payload }), [_mutateAsync]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useTradingPlatformInvestorPasswordChange;\n","import { useMemo } from 'react';\nimport useMutation from '../useMutation';\nimport useInvalidateQuery from '../useInvalidateQuery';\n\n/** A custom hook to create MT5 accounts. */\nconst useCreateMT5Account = () => {\n    const invalidate = useInvalidateQuery();\n    const { data, ...rest } = useMutation('mt5_new_account', {\n        onSuccess: () => {\n            invalidate('mt5_login_list');\n        },\n    });\n\n    // Add additional information to the create MT5 account response.\n    const modified_data = useMemo(() => {\n        if (!data?.mt5_new_account) return undefined;\n\n        return { ...data?.mt5_new_account };\n    }, [data]);\n\n    return {\n        /** The response and the mutation of the create MT5 account API request */\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useCreateMT5Account;\n","import { useMemo } from 'react';\nimport useMutation from '../useMutation';\nimport useInvalidateQuery from '../useInvalidateQuery';\n\n/** A custom hook to create third party CFD accounts. */\nconst useCreateOtherCFDAccount = () => {\n    const invalidate = useInvalidateQuery();\n    const { data, ...rest } = useMutation('trading_platform_new_account', {\n        onSuccess: () => {\n            invalidate('trading_platform_accounts');\n        },\n    });\n\n    // Add additional information to the create Other CFD account response.\n    const modified_data = useMemo(() => {\n        if (!data) return undefined;\n\n        return { ...data };\n    }, [data]);\n\n    return {\n        /** The response and the mutation of the create third party CFDs API request */\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useCreateOtherCFDAccount;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = Parameters<\n    ReturnType<typeof useMutation<'trading_platform_investor_password_reset'>>['mutate']\n>[0]['payload'];\n\n/** A custom hook that reset the Trading Platform Investor Password. */\nconst useTradingPlatformInvestorPasswordReset = () => {\n    const { mutate: _mutate, ...rest } = useMutation('trading_platform_investor_password_reset');\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useTradingPlatformInvestorPasswordReset;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = Parameters<ReturnType<typeof useMutation<'trading_platform_password_change'>>['mutate']>[0]['payload'];\ntype TPayloadAsync = Parameters<\n    ReturnType<typeof useMutation<'trading_platform_password_change'>>['mutateAsync']\n>[0]['payload'];\n\n/** A custom hook that change the Trading Platform Password. */\nconst useTradingPlatformPasswordChange = () => {\n    const { mutate: _mutate, mutateAsync: _mutateAsync, ...rest } = useMutation('trading_platform_password_change');\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n    const mutateAsync = useCallback((payload: TPayloadAsync) => _mutateAsync({ payload }), [_mutateAsync]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useTradingPlatformPasswordChange;\n","import { useEffect, useMemo, useState } from 'react';\nimport { TSocketRequestPayload } from '../../types';\nimport useAuthorize from './useAuthorize';\nimport useQuery from '../useQuery';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useActiveAccount from './useActiveAccount';\nimport { displayMoney } from '../utils';\n\ntype TFilter = NonNullable<TSocketRequestPayload<'statement'>['payload']>['action_type'];\n\n/** A custom hook to get the summary of account transactions */\nconst useTransactions = () => {\n    const {\n        data: { preferred_language },\n        isFetching,\n        isSuccess,\n    } = useAuthorize();\n\n    const { data: account } = useActiveAccount();\n    const display_code = account?.currency_config?.display_code || 'USD';\n    const fractional_digits = account?.currency_config?.fractional_digits || 2;\n\n    const [filter, setFilter] = useState<TFilter>();\n    const { data, remove, ...rest } = useQuery('statement', {\n        options: {\n            enabled: !isFetching && isSuccess,\n            getNextPageParam: (lastPage, pages) => {\n                if (!lastPage?.statement?.count) return;\n\n                return pages.length;\n            },\n        },\n        payload: {\n            action_type: filter,\n            // TODO: remove this once backend adds `to` and `from` for Deriv X transfers\n            description: 1,\n        },\n    });\n\n    const invalidate = useInvalidateQuery();\n    useEffect(() => {\n        invalidate('statement');\n    }, [filter, invalidate]);\n\n    useEffect(() => {\n        return remove;\n    }, [remove]);\n\n    // Modify the data.\n    const modified_data = useMemo(() => {\n        if (!data?.statement?.transactions?.length) return;\n\n        return data?.statement?.transactions?.map(transaction => ({\n            ...transaction,\n            /** The transaction amount in currency format. */\n            display_amount: displayMoney(transaction?.amount || 0, display_code, {\n                fractional_digits,\n                preferred_language,\n            }),\n            /** The balance of account after the transaction in currency format. */\n            display_balance_after: displayMoney(transaction?.balance_after || 0, display_code, {\n                fractional_digits,\n                preferred_language,\n            }),\n        }));\n    }, [data?.statement?.transactions, display_code, fractional_digits, preferred_language]);\n\n    return {\n        /** List of account transactions */\n        data: modified_data,\n        /** Filter the transactions by type */\n        setFilter,\n        ...rest,\n    };\n};\n\nexport default useTransactions;\n","import { useEffect, useMemo, useState } from 'react';\nimport useInfiniteQuery from '../useInfiniteQuery';\nimport { TSocketRequestPayload } from '../../types';\nimport useAuthorize from './useAuthorize';\nimport useInvalidateQuery from '../useInvalidateQuery';\nimport useActiveAccount from './useActiveAccount';\nimport { displayMoney } from '../utils';\n\ntype TFilter = NonNullable<TSocketRequestPayload<'statement'>['payload']>['action_type'];\n\n/** A custom hook to get the summary of account transactions */\nconst useInfiniteTransactions = () => {\n    const {\n        data: { preferred_language },\n        isFetching,\n        isSuccess,\n    } = useAuthorize();\n\n    const { data: account } = useActiveAccount();\n    const display_code = account?.currency_config?.display_code || 'USD';\n    const fractional_digits = account?.currency_config?.fractional_digits || 2;\n\n    const [filter, setFilter] = useState<TFilter>();\n    const { data, fetchNextPage, remove, ...rest } = useInfiniteQuery('statement', {\n        options: {\n            enabled: !isFetching && isSuccess,\n            getNextPageParam: (lastPage, pages) => {\n                if (!lastPage?.statement?.count) return;\n\n                return pages.length;\n            },\n        },\n        payload: {\n            action_type: filter,\n            // TODO: remove this once backend adds `to` and `from` for Deriv X transfers\n            description: 1,\n        },\n    });\n\n    const invalidate = useInvalidateQuery();\n    useEffect(() => {\n        invalidate('statement');\n    }, [filter, invalidate]);\n\n    useEffect(() => {\n        return remove;\n    }, [remove]);\n\n    // Flatten the data array.\n    const flatten_data = useMemo(() => {\n        if (!data?.pages?.length) return;\n\n        return data?.pages?.flatMap(page => page?.statement?.transactions);\n    }, [data?.pages]);\n\n    // Modify the data.\n    const modified_data = useMemo(() => {\n        if (!flatten_data?.length) return;\n\n        return flatten_data?.map(transaction => ({\n            ...transaction,\n            /** The transaction amount in currency format. */\n            display_amount: displayMoney(transaction?.amount || 0, display_code, {\n                fractional_digits,\n                preferred_language,\n            }),\n            /** The balance of account after the transaction in currency format. */\n            display_balance_after: displayMoney(transaction?.balance_after || 0, display_code, {\n                fractional_digits,\n                preferred_language,\n            }),\n        }));\n    }, [flatten_data, preferred_language, fractional_digits, display_code]);\n\n    return {\n        /** List of account transactions */\n        data: modified_data,\n        /** Fetch the next page of transactions */\n        fetchNextPage,\n        /** Filter the transactions by type */\n        setFilter,\n        ...rest,\n    };\n};\n\nexport default useInfiniteTransactions;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = NonNullable<\n    NonNullable<Parameters<ReturnType<typeof useMutation<'transfer_between_accounts'>>['mutate']>[0]>['payload']\n>;\n\n/** A custom hook used to transfer money between client accounts */\nconst useTransferBetweenAccounts = () => {\n    const { mutate: _mutate, mutateAsync: _mutateAsync, ...rest } = useMutation('transfer_between_accounts');\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n    const mutateAsync = useCallback((payload: TPayload) => _mutateAsync({ payload }), [_mutateAsync]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useTransferBetweenAccounts;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = Parameters<ReturnType<typeof useMutation<'verify_email'>>['mutate']>[0]['payload'];\n\n/** A custom hook for verifying email address */\nconst useVerifyEmail = () => {\n    const { mutate: _mutate, ...rest } = useMutation('verify_email');\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useVerifyEmail;\n","import { useCallback } from 'react';\nimport useMutation from '../useMutation';\n\ntype TPayload = Parameters<ReturnType<typeof useMutation<'trading_platform_password_reset'>>['mutate']>[0]['payload'];\ntype TPayloadAsync = Parameters<\n    ReturnType<typeof useMutation<'trading_platform_password_reset'>>['mutateAsync']\n>[0]['payload'];\n\n/** A custom hook that reset the Trading Platform Password. */\nconst useTradingPlatformPasswordReset = () => {\n    const { mutate: _mutate, mutateAsync: _mutateAsync, ...rest } = useMutation('trading_platform_password_reset');\n\n    const mutate = useCallback((payload: TPayload) => _mutate({ payload }), [_mutate]);\n    const mutateAsync = useCallback((payload: TPayloadAsync) => _mutateAsync({ payload }), [_mutateAsync]);\n\n    return {\n        /** The mutation function that accepts a payload and sends it to the server */\n        mutate,\n        mutateAsync,\n        ...rest,\n    };\n};\n\nexport default useTradingPlatformPasswordReset;\n","import useMutation from '../useMutation';\nimport useInvalidateQuery from '../useInvalidateQuery';\n\n/** A  custom hook for resetting the virtual balance */\nconst useResetVirtualBalance = () => {\n    const invalidate = useInvalidateQuery();\n\n    const { mutate, ...rest } = useMutation('topup_virtual', {\n        onSuccess: () => {\n            invalidate('balance');\n        },\n    });\n\n    return {\n        /** The mutation function for resetting the virtual balance */\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useResetVirtualBalance;\n","import { useMemo } from 'react';\nimport useLandingCompany from './useLandingCompany';\n\n/**\n * @returns {boolean} isDIELEnabled\n * description: A custom hook to check if the DIEL landing company is enabled\n */\nconst useIsDIELEnabled = () => {\n    const { data, ...rest } = useLandingCompany();\n\n    const modifiedData = useMemo(() => {\n        if (!data) return;\n\n        const { financial_company, gaming_company } = data;\n\n        const isDIELEnabled = financial_company?.shortcode === 'maltainvest' && gaming_company?.shortcode === 'svg';\n\n        return isDIELEnabled;\n    }, [data]);\n\n    return {\n        /**\n         * Initially known as LOW_RISK, this is a landing company that is a combination of\n         * financial_company: { shortcode: 'maltainvest' }\n         * gaming_company: { shortcode: 'svg' }\n         */\n        data: modifiedData,\n        ...rest,\n    };\n};\n\nexport default useIsDIELEnabled;\n","import { TSocketRequestPayload } from '../../types';\nimport useQuery from '../useQuery';\nimport useAuthorize from './useAuthorize';\n\ntype TKycAuthStatusPayload = TSocketRequestPayload<'kyc_auth_status'>['payload'];\n\n/** Custom hook that returns Proof of Identity (POI) and Proof of Address (POA) authentication status details. */\nconst useKycAuthStatus = (payload: TKycAuthStatusPayload) => {\n    const { isSuccess } = useAuthorize();\n    const { data, ...kyc_auth_status_rest } = useQuery('kyc_auth_status', {\n        payload,\n        options: { enabled: isSuccess },\n    });\n    return {\n        /** The KYC auth status */\n        kyc_auth_status: data?.kyc_auth_status,\n        ...kyc_auth_status_rest,\n    };\n};\n\nexport default useKycAuthStatus;\n","import { useInfiniteQuery as _useInfiniteQuery } from '@tanstack/react-query';\n\nimport type {\n    TSocketAcceptableProps,\n    TSocketError,\n    TSocketPaginatateableRequestCleaned,\n    TSocketPaginateableEndpointNames,\n    TSocketRequestInfiniteQueryOptions,\n    TSocketRequestPayload,\n    TSocketResponseData,\n} from '../types';\n\nimport useAPI from './useAPI';\nimport { getQueryKeys } from './utils';\n\nconst useInfiniteQuery = <T extends TSocketPaginateableEndpointNames>(\n    name: T,\n    ...props: TSocketAcceptableProps<T, true, 'useInfiniteQuery'>\n) => {\n    const prop = props?.[0];\n    const payload = prop && 'payload' in prop ? (prop.payload as TSocketPaginatateableRequestCleaned<T>) : undefined;\n    const options = prop && 'options' in prop ? (prop.options as TSocketRequestInfiniteQueryOptions<T>) : undefined;\n    const { send } = useAPI();\n\n    const initial_offset = payload?.offset || 0;\n    const limit = payload?.limit || 50;\n\n    return _useInfiniteQuery<TSocketResponseData<T>, TSocketError<T>>(\n        getQueryKeys(name, payload),\n\n        ({ pageParam = 0 }) =>\n            send(name, {\n                ...payload,\n                limit,\n                offset: pageParam * limit + initial_offset,\n            } as unknown as TSocketRequestPayload<T>),\n        {\n            ...options,\n            getNextPageParam: options?.getNextPageParam ? options.getNextPageParam : (_lastPage, pages) => pages.length,\n        }\n    );\n};\n\nexport default useInfiniteQuery;\n","import { useMemo } from 'react';\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\nimport useAuthorize from './useAuthorize';\nimport useCurrencyConfig from './useCurrencyConfig';\n\nconst currency_to_icon_mapper: Record<string, Record<'light' | 'dark', string>> = {\n    Demo: {\n        dark: 'IcWalletDerivDemoDark',\n        light: 'IcWalletDerivDemoLight',\n    },\n    USD: {\n        dark: 'IcWalletCurrencyUsd',\n        light: 'IcWalletCurrencyUsd',\n    },\n    EUR: {\n        dark: 'IcWalletCurrencyEur',\n        light: 'IcWalletCurrencyEur',\n    },\n    AUD: {\n        dark: 'IcWalletCurrencyAud',\n        light: 'IcWalletCurrencyAud',\n    },\n    GBP: {\n        dark: 'IcWalletCurrencyGbp',\n        light: 'IcWalletCurrencyGbp',\n    },\n    BTC: {\n        dark: 'IcWalletBitcoinDark',\n        light: 'IcWalletBitcoinLight',\n    },\n    ETH: {\n        dark: 'IcWalletEthereumDark',\n        light: 'IcWalletEthereumLight',\n    },\n    USDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    eUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    tUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    UST: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    LTC: {\n        dark: 'IcWalletLiteCoinDark',\n        light: 'IcWalletLiteCoinLight',\n    },\n    USDC: {\n        dark: 'IcWalletUsdCoinDark',\n        light: 'IcWalletUsdCoinLight',\n    },\n};\n\n/** A custom hook to get the list of wallets for the current user. */\nconst useWalletsList = () => {\n    const { ui, client } = useStore();\n    const { is_dark_mode_on } = ui;\n    const { is_authorize } = client;\n    const { getConfig } = useCurrencyConfig();\n\n    const { data: authorize_data, isSuccess, ...rest } = useAuthorize();\n    const { data: balance_data } = useFetch('balance', {\n        payload: { account: 'all' },\n        options: { enabled: is_authorize && isSuccess },\n    });\n\n    // Filter out non-wallet accounts.\n    const wallets = useMemo(\n        () => authorize_data?.account_list?.filter(account => account.account_category === 'wallet'),\n        [authorize_data?.account_list]\n    );\n\n    // Add balance to each wallet.\n    const wallets_with_balance = useMemo(\n        () =>\n            wallets?.map(wallet => ({\n                ...wallet,\n                /** Wallet balance */\n                balance: balance_data?.balance?.accounts?.[wallet.loginid || '']?.balance || 0,\n            })),\n        [balance_data?.balance?.accounts, wallets]\n    );\n\n    // Add additional information to each wallet.\n    const modified_wallets = useMemo(() => {\n        return wallets_with_balance?.map(wallet => {\n            const wallet_currency_type = wallet.is_virtual === 1 ? 'Demo' : wallet.currency || '';\n            const wallet_gradient_class_name = `${wallet_currency_type.toLowerCase()}-bg${\n                is_dark_mode_on ? '--dark' : ''\n            }`;\n            const wallet_icon = currency_to_icon_mapper[wallet_currency_type];\n\n            return {\n                ...wallet,\n                /** Indicating whether the wallet is the currently selected wallet. */\n                is_selected: wallet.loginid === authorize_data?.loginid,\n                /** Indicating whether the wallet is a virtual-money wallet. */\n                is_demo: wallet.is_virtual === 1,\n                /** Returns the wallet's currency type. ex: `Demo`, `USD`, etc. */\n                wallet_currency_type,\n                /** Landing company shortcode the account belongs to. */\n                landing_company_name: wallet.landing_company_name?.replace('maltainvest', 'malta'),\n                /** Indicating whether the wallet is a maltainvest wallet. */\n                is_malta_wallet: wallet.landing_company_name === 'malta',\n                /** The gradient class name for the wallet header background. */\n                gradient_header_class: `wallet-header__${wallet_gradient_class_name}`,\n                /** The gradient class name for the wallet card background. */\n                gradient_card_class: `wallet-card__${wallet_gradient_class_name}`,\n                /** Wallet's currency config information */\n                currency_config: wallet.currency ? getConfig(wallet.currency) : undefined,\n                /** Local asset name for the wallet icon. ex: `IcWalletCurrencyUsd` for `USD`  */\n                icon: is_dark_mode_on ? wallet_icon.dark : wallet_icon.light,\n            } as const;\n        });\n    }, [getConfig, is_dark_mode_on, authorize_data?.loginid, wallets_with_balance]);\n\n    // Sort wallets alphabetically by fiat, crypto, then virtual.\n    const sorted_wallets = useMemo(() => {\n        if (!modified_wallets) return [];\n\n        return [...modified_wallets].sort((a, b) => {\n            if (a.is_virtual !== b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if (a.currency_config?.is_crypto !== b.currency_config?.is_crypto) {\n                return a.currency_config?.is_crypto ? 1 : -1;\n            }\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        });\n    }, [modified_wallets]);\n\n    return {\n        /** List of wallets for current user. */\n        data: sorted_wallets,\n        /** Indicating whether the user has a wallet */\n        has_wallet: sorted_wallets && sorted_wallets.length > 0,\n        ...rest,\n    };\n};\n\nexport default useWalletsList;\n","import { useMemo } from 'react';\nimport useWalletsList from './useWalletsList';\n\n/** A custom hook that returns the wallet object for the current active wallet. */\nconst useActiveWallet = () => {\n    const { data } = useWalletsList();\n    const active_wallet = useMemo(() => data?.find(wallet => wallet.is_selected), [data]);\n\n    /** User's current active wallet. */\n    return active_wallet;\n};\n\nexport default useActiveWallet;\n","import React from 'react';\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\nimport useWalletsList from './useWalletsList';\nimport useAuthorize from './useAuthorize';\n\nconst useAvailableWallets = () => {\n    const { client, ui } = useStore();\n    const { is_dark_mode_on } = ui;\n    const { is_crypto } = client;\n    const { data } = useAuthorize();\n\n    const { data: account_type_data, ...rest } = useFetch('get_account_types', {\n        payload: { company: data?.landing_company_name === 'virtual' ? 'svg' : data?.landing_company_name },\n        options: { enabled: Boolean(data?.landing_company_name) },\n    });\n\n    const { data: added_wallets } = useWalletsList();\n\n    const sortedWallets = React.useMemo(() => {\n        if (!account_type_data) return null;\n        const { crypto, doughflow } = account_type_data?.get_account_types?.wallet || {};\n        const crypto_currencies = crypto?.currencies;\n        const fiat_currencies = doughflow?.currencies;\n\n        if (!crypto_currencies || !fiat_currencies) return null;\n        const available_currencies = [...fiat_currencies, ...crypto_currencies];\n        const non_virtual_wallets = added_wallets?.filter(wallet => !wallet.is_virtual);\n\n        const modified_wallets = non_virtual_wallets?.map(wallet => ({\n            currency: wallet.currency,\n            landing_company_name: wallet.landing_company_name,\n            is_added: true,\n            gradient_card_class: wallet.gradient_card_class,\n        }));\n\n        const available_wallets = available_currencies\n            .filter(currency => !modified_wallets?.some(wallet => wallet.currency === currency))\n            .map(currency => ({\n                currency,\n                landing_company_name: data?.landing_company_name === 'virtual' ? 'svg' : data?.landing_company_name,\n                is_added: false,\n                gradient_card_class: `wallet-card__${currency.toLowerCase()}-bg${is_dark_mode_on ? '--dark' : ''}`,\n            }));\n\n        // Sort the unadded wallets alphabetically by fiat, crypto, then virtual\n        available_wallets?.sort((a, b) => {\n            if (is_crypto(a.currency) !== is_crypto(b.currency)) {\n                return is_crypto(a.currency) ? 1 : -1;\n            }\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        });\n\n        // Sort the added wallets alphabetically by fiat, crypto, then virtual (if any)\n        if (Array.isArray(modified_wallets)) {\n            modified_wallets?.sort((a, b) => {\n                if (is_crypto(a.currency) !== is_crypto(b.currency)) {\n                    return is_crypto(a.currency) ? 1 : -1;\n                }\n\n                return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n            });\n            return [...available_wallets, ...modified_wallets];\n        }\n\n        return [...available_wallets];\n    }, [added_wallets, account_type_data, data?.landing_company_name, is_dark_mode_on, is_crypto]);\n\n    return {\n        ...rest,\n        data: sortedWallets,\n    };\n};\n\nexport default useAvailableWallets;\n","import { useStore } from '@deriv/stores';\n\n/** @deprecated Use `useMT5AccountsList` for MT5 accounts and `useDxtradeAccountsList` for Other CFD accounts from `@deriv/api` instead. */\nconst useCFDAllAccounts = () => {\n    const { client } = useStore();\n    const { dxtrade_accounts_list, mt5_login_list, ctrader_accounts_list } = client;\n\n    let cfd_accounts: typeof mt5_login_list = [];\n    if (Array.isArray(mt5_login_list)) {\n        cfd_accounts = [...cfd_accounts, ...mt5_login_list];\n    }\n    if (Array.isArray(dxtrade_accounts_list)) {\n        cfd_accounts = [...cfd_accounts, ...dxtrade_accounts_list];\n    }\n    if (Array.isArray(ctrader_accounts_list)) {\n        cfd_accounts = [...cfd_accounts, ...ctrader_accounts_list];\n    }\n\n    return cfd_accounts;\n};\n\nexport default useCFDAllAccounts;\n","import useCFDAllAccounts from './useCFDAllAccounts';\n\n/**\n *  we can use this hook to get the CFD demo accounts.\n *  it loops through the all of user's CFD accounts, finds and returns demo accounts\n */\nconst useCFDDemoAccounts = () => {\n    const cfd_accounts = useCFDAllAccounts();\n\n    const cfd_demo_accounts = cfd_accounts.filter(account => account.account_type === 'demo');\n\n    return cfd_demo_accounts;\n};\n\nexport default useCFDDemoAccounts;\n","import { useStore } from '@deriv/stores';\nimport useCFDAllAccounts from './useCFDAllAccounts';\n\n/**\n * we can use this hook to get the real CFD accounts for both Eu and Non-Eu regions.\n * it loops through the all of user's CFD accounts, finds and returns real accounts\n */\nconst useCFDRealAccounts = () => {\n    const { traders_hub } = useStore();\n    const { is_eu_user } = traders_hub;\n    const cfd_accounts = useCFDAllAccounts();\n\n    const cfd_real_accounts = cfd_accounts.filter(account => {\n        const is_demo = account.account_type === 'demo';\n        const is_maltainvest = account.landing_company_short === 'maltainvest';\n\n        if (is_demo) return false;\n        if (!is_eu_user) return !is_maltainvest;\n\n        return is_maltainvest;\n    });\n\n    return cfd_real_accounts;\n};\n\nexport default useCFDRealAccounts;\n","import useCFDAllAccounts from './useCFDAllAccounts';\nimport useCFDDemoAccounts from './useCFDDemoAccounts';\nimport useCFDRealAccounts from './useCFDRealAccounts';\n\n/**\n * this is a wrapper hook for useCFDDemoAccounts and useCFDRealAccounts\n * and it returns different cfd account types which are demo, real, and all\n */\n\nconst useCFDAccounts = () => {\n    const all_cfd_accounts = useCFDAllAccounts();\n    const cfd_demo_accounts = useCFDDemoAccounts();\n    const cfd_real_accounts = useCFDRealAccounts();\n\n    return {\n        all: all_cfd_accounts,\n        demo: cfd_demo_accounts,\n        real: cfd_real_accounts,\n    };\n};\n\nexport default useCFDAccounts;\n","import { useStore } from '@deriv/stores';\n\nconst useCashierLocked = () => {\n    const { client } = useStore();\n    const { account_status } = client;\n\n    const is_cashier_locked = account_status?.status?.some(status => status === 'cashier_locked') || false;\n\n    return is_cashier_locked;\n};\n\nexport default useCashierLocked;\n","import { ContentFlag } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\n\nconst useContentFlag = () => {\n    const { traders_hub } = useStore();\n    const content_flag = traders_hub?.content_flag;\n\n    return {\n        is_low_risk_cr_non_eu: content_flag === ContentFlag.LOW_RISK_CR_NON_EU,\n        is_low_risk_cr_eu: content_flag === ContentFlag.LOW_RISK_CR_EU,\n        is_high_risk_cr: content_flag === ContentFlag.HIGH_RISK_CR,\n        is_cr_demo: content_flag === ContentFlag.CR_DEMO,\n        is_eu_demo: content_flag === ContentFlag.EU_DEMO,\n        is_eu_real: content_flag === ContentFlag.EU_REAL,\n    };\n};\n\nexport default useContentFlag;\n","import { useStore } from '@deriv/stores';\n\nconst useCurrentAccountDetails = () => {\n    const { client } = useStore();\n    const { account_list, loginid } = client;\n\n    return account_list.find(account => loginid === account.loginid);\n};\n\nexport default useCurrentAccountDetails;\n","import { useStore } from '@deriv/stores';\n\nconst useNeedAuthentication = () => {\n    const { client, traders_hub } = useStore();\n    const { is_authentication_needed } = client;\n    const { is_low_risk_cr_eu_real } = traders_hub;\n    const is_need_authentication = is_authentication_needed && is_low_risk_cr_eu_real;\n\n    return is_need_authentication;\n};\n\nexport default useNeedAuthentication;\n","import { useStore } from '@deriv/stores';\n\nconst useNeedFinancialAssessment = () => {\n    const { client } = useStore();\n    const { is_financial_account, is_financial_information_incomplete, is_trading_experience_incomplete } = client;\n    const is_need_financial_assessment =\n        is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete);\n\n    return is_need_financial_assessment;\n};\n\nexport default useNeedFinancialAssessment;\n","import { useStore } from '@deriv/stores';\nimport useNeedAuthentication from './useNeedAuthentication';\nimport useNeedFinancialAssessment from './useNeedFinancialAssessment';\nimport useIsTNCNeeded from './useIsTNCNeeded';\n\nconst useDepositLocked = () => {\n    const { client } = useStore();\n    const {\n        is_deposit_lock,\n        is_trading_experience_incomplete,\n        landing_company_shortcode,\n        is_account_to_be_closed_by_residence,\n    } = client;\n    const is_need_authentication = useNeedAuthentication();\n    const is_tnc_needed = useIsTNCNeeded();\n    const is_need_financial_assessment = useNeedFinancialAssessment();\n    const is_malta_invest = landing_company_shortcode === 'maltainvest';\n    const is_trading_experience_incomplete_or_need_financial_assessment = is_malta_invest\n        ? is_trading_experience_incomplete\n        : is_need_financial_assessment;\n\n    const is_deposit_locked =\n        is_deposit_lock ||\n        is_need_authentication ||\n        is_tnc_needed ||\n        is_trading_experience_incomplete_or_need_financial_assessment ||\n        is_account_to_be_closed_by_residence;\n\n    return is_deposit_locked;\n};\n\nexport default useDepositLocked;\n","import { useStore } from '@deriv/stores';\n\nconst useDuplicateDOBPhone = () => {\n    const { client } = useStore();\n    const { is_duplicate_dob_phone } = client;\n\n    return is_duplicate_dob_phone;\n};\n\nexport default useDuplicateDOBPhone;\n","import { useStore } from '@deriv/stores';\n\nexport const useExchangeRate = () => {\n    const { client } = useStore();\n    const {\n        exchange_rates,\n        subscribeToExchangeRate,\n        getExchangeRate,\n        unsubscribeFromExchangeRate,\n        unsubscribeFromAllExchangeRates,\n    } = client;\n\n    return {\n        handleSubscription: subscribeToExchangeRate,\n        exchange_rates,\n        getExchangeRate,\n        unsubscribe: unsubscribeFromExchangeRate,\n        unsubscribeAll: unsubscribeFromAllExchangeRates,\n    };\n};\n\nexport default useExchangeRate;\n","import { useMemo } from 'react';\n\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nimport useActiveWallet from './useActiveWallet';\n\ntype TAccount = {\n    cfd_type?: 'mt5' | 'dxtrade';\n\n    market_type?: 'financial' | 'synthetic' | 'all';\n};\n\nconst getAccountIcon = ({ cfd_type, market_type }: TAccount) => {\n    switch (cfd_type) {\n        case 'mt5': {\n            switch (market_type) {\n                case 'financial':\n                    return 'IcRebrandingMt5FinancialDashboard';\n                case 'synthetic':\n                    return 'IcRebrandingMt5DerivedDashboard';\n                case 'all':\n                    return 'IcRebrandingMt5SwapFree';\n                default:\n                    return 'IcRebrandingDmt5Dashboard';\n            }\n        }\n        case 'dxtrade':\n            return 'IcRebrandingDerivX';\n        default:\n            return '';\n    }\n};\n\n/**\n * @description This hook is used to get the created CFD accounts of the user.\n */\nconst useExistingCFDAccounts = () => {\n    const { traders_hub } = useStore();\n    const { combined_cfd_mt5_accounts } = traders_hub;\n    const wallet = useActiveWallet();\n    const { data: mt5, ...mt5_rest } = useFetch('mt5_login_list');\n    const { data: dxtrade, ...dxtrade_rest } = useFetch('trading_platform_accounts', {\n        payload: { platform: 'dxtrade' },\n    });\n\n    /**\n     *\n     * @description This is the modified MT5 accounts that will be used in the CFD account creation.\n     */\n    const modified_mt5_accounts = useMemo(() => {\n        const getAccountInfo = (login?: string) => {\n            return {\n                platform: wallet?.linked_to?.find(linked => linked.loginid === login)?.platform,\n                icon: combined_cfd_mt5_accounts?.find(cfd => cfd.login === login)?.icon,\n                description: combined_cfd_mt5_accounts?.find(cfd => cfd.login === login)?.description,\n                name: combined_cfd_mt5_accounts?.find(cfd => cfd.login === login)?.name,\n                sub_title: combined_cfd_mt5_accounts?.find(cfd => cfd.login === login)?.sub_title,\n                action_type: 'multi-action',\n            };\n        };\n\n        return mt5?.mt5_login_list?.map(account => ({\n            ...account,\n            ...getAccountInfo(account.login),\n            loginid: account.login,\n            transfer_icon: getAccountIcon({ cfd_type: 'mt5', ...account }),\n        }));\n    }, [mt5?.mt5_login_list, wallet?.linked_to, combined_cfd_mt5_accounts]);\n\n    const modified_dxtrade_accounts = useMemo(\n        () =>\n            dxtrade?.trading_platform_accounts?.map(account => ({\n                ...account,\n                loginid: account.account_id,\n                transfer_icon: getAccountIcon({ cfd_type: 'dxtrade' }),\n            })),\n        [dxtrade?.trading_platform_accounts]\n    );\n    const data = useMemo(\n        () => ({\n            mt5_accounts: modified_mt5_accounts || [],\n            dxtrade_accounts: modified_dxtrade_accounts || [],\n        }),\n        [modified_mt5_accounts, modified_dxtrade_accounts]\n    );\n\n    return {\n        data,\n        isSuccess: [mt5_rest.isSuccess, dxtrade_rest.isSuccess].every(Boolean),\n    };\n};\n\nexport default useExistingCFDAccounts;\n","import { useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\n\nconst useFeatureFlags = () => {\n    const { feature_flags } = useStore();\n\n    const result = useMemo(() => {\n        const flags = feature_flags.data ?? {};\n\n        return Object.keys(flags).reduce(\n            (previous, current) => ({\n                ...previous,\n                // @ts-expect-error current key is always present in the object, Hence can ignore the TS error.\n                [`is_${current}_enabled`]: Boolean(flags[current]),\n            }),\n            {} as Record<`is_${keyof typeof flags}_enabled`, boolean>\n        );\n    }, [feature_flags.data]);\n\n    return result;\n};\nexport default useFeatureFlags;\n","import { useStore } from '@deriv/stores';\n\nconst useFiatAccountList = () => {\n    const { client } = useStore();\n    const { account_list, is_crypto } = client;\n\n    const fiat_account_list = account_list.filter(account => !account.is_virtual && !is_crypto(account.title || ''));\n\n    return fiat_account_list;\n};\n\nexport default useFiatAccountList;\n","import { useState } from 'react';\nimport { useStore } from '@deriv/stores';\n\ntype TError = { code?: string; name?: string; message: string };\n\nconst useGetPasskeysList = () => {\n    const { client } = useStore();\n    const { passkeys_list, fetchPasskeysList } = client;\n\n    const [is_passkeys_list_loading, setIsPasskeysListLoading] = useState(false);\n    const [passkeys_list_error, setPasskeysListError] = useState<TError | null>(null);\n\n    const refetchPasskeysList = async () => {\n        try {\n            setIsPasskeysListLoading(true);\n            await fetchPasskeysList();\n        } catch (e) {\n            setPasskeysListError(e as TError);\n        } finally {\n            setIsPasskeysListLoading(false);\n        }\n    };\n\n    return {\n        passkeys_list,\n        passkeys_list_error,\n        is_passkeys_list_loading,\n        refetchPasskeysList,\n    };\n};\n\nexport default useGetPasskeysList;\n","import { useInvalidateQuery, useMutation, useQuery } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\ntype TSetSettingsPayload = NonNullable<\n    NonNullable<NonNullable<Parameters<ReturnType<typeof useMutation<'set_settings'>>['mutate']>>[0]>['payload']\n>;\n\n/** A custom hook to get and update the user settings. */\nconst useSettings = () => {\n    const {\n        client: { is_authorize },\n    } = useStore();\n    const { data, ...rest } = useQuery('get_settings', { options: { enabled: is_authorize } });\n    const { mutate, ...mutate_rest } = useMutation('set_settings', { onSuccess: () => invalidate('get_settings') });\n    const invalidate = useInvalidateQuery();\n\n    const update = (payload: TSetSettingsPayload) => mutate({ payload });\n\n    return {\n        /** The settings response. */\n        data: data?.get_settings,\n        /** Function to update user settings */\n        update,\n        invalidate,\n        /** The mutation related information */\n        mutation: mutate_rest,\n        ...rest,\n    };\n};\n\nexport default useSettings;\n","import { Analytics, TEvents } from '@deriv-com/analytics';\nimport { useCallback } from 'react';\n\ntype TTrackPhoneVerificationEventsPayload = {\n    //@ts-expect-error will remove this error when Analytics package types are being updated\n    action: TEvents['ce_phone_verification_form']['action'];\n    cta_name?: string;\n    subform_name?: string;\n};\n\nconst usePhoneVerificationAnalytics = () => {\n    const trackPhoneVerificationEvents = useCallback(\n        (payload: TTrackPhoneVerificationEventsPayload) =>\n            //@ts-expect-error will remove this error when Analytics package types are being updated\n            Analytics.trackEvent('ce_phone_verification_form', { form_name: 'ce_phone_verification_form', ...payload }),\n        []\n    );\n\n    return { trackPhoneVerificationEvents };\n};\n\nexport default usePhoneVerificationAnalytics;\n","import React, { useState } from 'react';\nimport { useMutation } from '@deriv/api';\nimport { getCarriers, getUseRequestPhoneNumberOTPErrorMessage, VERIFICATION_SERVICES } from '@deriv/shared';\nimport useSettings from './useSettings';\nimport { useStore } from '@deriv/stores';\nimport usePhoneVerificationAnalytics from './usePhoneVerificationAnalytics';\n\ntype TFormatError = {\n    code: string;\n    message: string;\n};\n\n/** A hook for requesting OTP which is sent on whatsapp or sms platforms */\nconst useRequestPhoneNumberOTP = () => {\n    const {\n        data,\n        mutate,\n        error: email_otp_error,\n        isSuccess: is_email_verified,\n        ...rest\n    } = useMutation('phone_number_challenge');\n    const [error_message, setErrorMessage] = useState<React.ReactNode>('');\n    const [is_disabled_request_button, setIsDisabledRequestButton] = useState(false);\n    const [carrier, setCarrier] = useState('');\n    const { client } = useStore();\n    const { verification_code } = client;\n    const { phone_number_verification: phone_number_verification_code } = verification_code;\n    const {\n        mutation: { mutateAsync: updateSettings },\n    } = useSettings();\n    const { trackPhoneVerificationEvents } = usePhoneVerificationAnalytics();\n\n    React.useEffect(() => {\n        //@ts-expect-error will fix this later\n        if (email_otp_error) formatError(email_otp_error);\n    }, [email_otp_error]);\n\n    const getOtherCarrier = () => {\n        return carrier === VERIFICATION_SERVICES.SMS ? getCarriers().WHATSAPP : getCarriers().SMS;\n    };\n\n    const getCurrentCarrier = () => {\n        return carrier === VERIFICATION_SERVICES.SMS ? getCarriers().SMS : getCarriers().WHATSAPP;\n    };\n\n    const requestOnSMS = () => {\n        mutate({\n            payload: {\n                carrier: VERIFICATION_SERVICES.SMS,\n                email_code: phone_number_verification_code || '',\n            },\n        });\n        setCarrier(VERIFICATION_SERVICES.SMS);\n    };\n\n    const requestOnWhatsApp = () => {\n        mutate({\n            payload: {\n                carrier: VERIFICATION_SERVICES.WHATSAPP,\n                email_code: phone_number_verification_code || '',\n            },\n        });\n        setCarrier(VERIFICATION_SERVICES.WHATSAPP);\n    };\n\n    const sendEmailOTPVerification = (value: string) => {\n        mutate({ payload: { email_code: value } });\n    };\n\n    const setUsersPhoneNumber = async (value: { [key: string]: unknown }) => {\n        let error;\n        try {\n            await updateSettings({\n                payload: value,\n            });\n        } catch (err) {\n            trackPhoneVerificationEvents({\n                action: 'error',\n                subform_name: 'verify_phone_screen',\n                // @ts-expect-error will remove once solved\n                error_code: err.code,\n            });\n            formatError(err as TFormatError);\n            error = err;\n        }\n\n        return {\n            error,\n        };\n    };\n\n    const formatError = ({ code, message }: TFormatError) => {\n        const errorCases = {\n            // This boolean value is used to disable the request button: setIsDisabledRequestButton()\n            PhoneNumberTaken: true,\n            PhoneNumberVerificationSuspended: false,\n            InvalidPhone: false,\n        };\n\n        if (code in errorCases) {\n            setIsDisabledRequestButton(errorCases[code as keyof typeof errorCases]);\n            setErrorMessage(getUseRequestPhoneNumberOTPErrorMessage(code, getCurrentCarrier, getOtherCarrier));\n        } else {\n            setIsDisabledRequestButton(true);\n            setErrorMessage(message);\n        }\n    };\n\n    return {\n        data: data?.phone_number_challenge,\n        error_message,\n        email_otp_error,\n        is_email_verified,\n        requestOnWhatsApp,\n        requestOnSMS,\n        formatError,\n        setErrorMessage,\n        setUsersPhoneNumber,\n        sendEmailOTPVerification,\n        is_disabled_request_button,\n        setIsDisabledRequestButton,\n        getCurrentCarrier,\n        getOtherCarrier,\n        setCarrier,\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useRequestPhoneNumberOTP;\n","import { useStore } from '@deriv/stores';\n\nconst useHasCryptoCurrency = () => {\n    const { client } = useStore();\n    const { account_list, is_crypto } = client;\n\n    const has_crypto_currency = account_list.some(account => is_crypto(account.title || 'USD'));\n\n    return has_crypto_currency;\n};\n\nexport default useHasCryptoCurrency;\n","import { useStore } from '@deriv/stores';\nimport useCurrencyConfig from './useCurrencyConfig';\n\nconst useHasFiatCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n    const { getConfig } = useCurrencyConfig();\n\n    const has_fiat_currency = account_list.some(\n        account => account.title !== 'Real' && getConfig(account.title || '')?.is_fiat\n    );\n\n    return has_fiat_currency;\n};\n\nexport default useHasFiatCurrency;\n","import { useStore } from '@deriv/stores';\nimport useP2PSettings from './useP2PSettings';\n\nconst useHasP2PSupportedCurrencies = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n    const { p2p_settings, ...rest } = useP2PSettings();\n\n    const real_account_currencies_list = active_accounts\n        .filter(account => !account.is_virtual)\n        .map(account => account.currency?.toLowerCase());\n\n    const has_p2p_supported_currencies = Boolean(\n        p2p_settings?.supported_currencies?.some((currency: string) => real_account_currencies_list.includes(currency))\n    );\n\n    return {\n        ...rest,\n        data: has_p2p_supported_currencies,\n    };\n};\n\nexport default useHasP2PSupportedCurrencies;\n","import { useStore } from '@deriv/stores';\n\nconst useHasUSDCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n\n    const has_usd_currency = account_list.some(account => account.title === 'USD');\n\n    return has_usd_currency;\n};\n\nexport default useHasUSDCurrency;\n","import { useCallback, useEffect, useState } from 'react';\n\ntype TOptions = {\n    fraction_digits?: number;\n    with_sign?: boolean;\n};\n\nconst hasSign = (inputs: string[]) => {\n    const left = inputs[0];\n    const right = inputs.length > 1 ? inputs[1] : null;\n    const has_right = right !== null && right !== '';\n\n    // The field value is positive or negative sign or 0, So we return the new value without\n    // any calculations.\n    return ['-', '+', '0'].includes(left) && !has_right;\n};\n\nconst hasDecimalPoint = (inputs: string[], value: string) => {\n    const left = inputs[0];\n    const new_left = left.replaceAll(/[+-]/g, '');\n    const has_decimal = value.includes('.');\n\n    return new_left.startsWith('0') && new_left.length !== 1 && !has_decimal;\n};\n\nconst hasValidDecimalPlaces = (inputs: string[], fraction_digits: number) => {\n    const right = inputs.length > 1 ? inputs[1] : null;\n    const has_right = right !== null && right !== '';\n\n    return has_right && right.length > fraction_digits;\n};\n\nconst isNumber = (value: string) => !isNaN(Number(value));\nconst useInputDecimalFormatter = (initial?: number, options?: TOptions) => {\n    const [value, setValue] = useState('');\n    const { fraction_digits = 2, with_sign = false } = options || {};\n\n    const onChange = useCallback(\n        (e: DeepPartial<React.ChangeEvent<HTMLInputElement>> | React.ChangeEvent<HTMLInputElement>) => {\n            setValue(old_value => {\n                const new_value = e?.target?.value ?? '';\n                const isEmpty = new_value === '';\n\n                // The field has been cleared, So we return the new value.\n                if (isEmpty) return new_value;\n\n                const text = with_sign ? new_value : new_value.replaceAll(/[+-]/g, '');\n                const inputs = text.split('.');\n\n                if (hasSign(inputs)) return new_value;\n\n                const hasMoreDots = inputs.length > 2;\n\n                // The field contains more than one dot, So we return the old value as only one dot\n                // is allowed.\n                // The input value is not a valid number, So we return the old value.\n                if (hasMoreDots || !isNumber(new_value)) return old_value;\n\n                // The field starts with 0 but doesn't have decimal point, So we return the old value\n                // as the only valid input at this step is decimal point.\n                if (hasDecimalPoint(inputs, new_value)) return old_value;\n\n                // The field have a decimal point and decimal places are already as allowed fraction\n                // digits, So we remove the extra decimal digits from the right and return the new value.\n                if (hasValidDecimalPlaces(inputs, fraction_digits)) {\n                    const left = inputs[0];\n                    const right = inputs[1];\n                    const new_right = right.substring(0, fraction_digits);\n\n                    return `${left}.${new_right}`;\n                }\n\n                return new_value;\n            });\n        },\n        [fraction_digits, with_sign]\n    );\n\n    useEffect(() => {\n        if (initial) onChange({ target: { value: `${initial}` } });\n    }, [initial, onChange]);\n\n    return { value, onChange };\n};\n\nexport default useInputDecimalFormatter;\n","import { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { unFormatLocaleString } from '@deriv/utils';\nimport useInputDecimalFormatter from './useInputDecimalFormatter';\n\ntype TOptions = {\n    fraction_digits?: number;\n    locale?: Intl.LocalesArgument;\n};\n\nconst useInputATMFormatter = (initial?: number, options?: TOptions) => {\n    const is_pasting = useRef(false);\n    const { value, onChange: onChangeDecimal } = useInputDecimalFormatter(undefined, options);\n    const { locale, fraction_digits = 2 } = options || {};\n\n    const formatted_value = useMemo(\n        () => `${Number(value).toLocaleString(locale, { minimumFractionDigits: fraction_digits })}`,\n        [fraction_digits, locale, value]\n    );\n\n    const onChange = useCallback(\n        (e: DeepPartial<React.ChangeEvent<HTMLInputElement>> | React.ChangeEvent<HTMLInputElement>) => {\n            const new_value = e?.target?.value || '';\n            const unformatted = unFormatLocaleString(new_value, locale);\n            // @ts-expect-error shouldn't cast to number because we will lose the trailing zeros.\n            const shifted = Math.fround(unformatted * 10).toFixed(fraction_digits);\n            // @ts-expect-error shouldn't cast to number because we will lose the trailing zeros.\n            const un_shifted = Math.fround(unformatted / 10).toFixed(fraction_digits);\n            const unformatted_fraction = unformatted.split('.')?.[1]?.length || fraction_digits;\n\n            // If the user is pasting, we don't need to shift the decimal point,\n            // We just need to format the value.\n            if (is_pasting.current) {\n                is_pasting.current = false;\n                return onChangeDecimal({ target: { value: unformatted } });\n            }\n\n            // The new value has one more decimal places than the fraction_digits,\n            // so we need to shift the decimal point to the left.\n            if (unformatted_fraction - 1 === fraction_digits) {\n                return onChangeDecimal({ target: { value: shifted } });\n            }\n\n            // The new value has one less decimal places than the fraction_digits,\n            // so we need to shift the decimal point to the right.\n            if (unformatted_fraction + 1 === fraction_digits) {\n                return onChangeDecimal({ target: { value: un_shifted } });\n            }\n\n            // The new value has the same number of decimal places as the fraction_digits,\n            // so we don't need to shift the decimal point.\n            if (unformatted_fraction === fraction_digits) {\n                return onChangeDecimal({ target: { value: unformatted } });\n            }\n\n            // The new value has more decimal places than the fraction_digits,\n            // so we chop the extra decimal points.\n            if (unformatted_fraction - 1 > fraction_digits) {\n                return onChangeDecimal({ target: { value: unformatted } });\n            }\n\n            // The new value has less decimal places than the fraction_digits,\n            // so we add the missing extra decimal point.\n            if (unformatted_fraction + 1 < fraction_digits) {\n                return onChangeDecimal({ target: { value: unformatted } });\n            }\n\n            return onChangeDecimal({ target: { value: unformatted } });\n        },\n        [locale, fraction_digits, onChangeDecimal]\n    );\n\n    const onPaste: React.ClipboardEventHandler<HTMLInputElement> = useCallback(\n        e => (is_pasting.current = e.type === 'paste'),\n        []\n    );\n\n    useEffect(() => {\n        if (initial) {\n            is_pasting.current = true;\n            onChange({\n                target: {\n                    value: `${Number(initial).toLocaleString(locale, { minimumFractionDigits: fraction_digits })}`,\n                },\n            });\n        }\n    }, [fraction_digits, initial, locale, onChange]);\n\n    return { value: formatted_value, onChange, onPaste };\n};\n\nexport default useInputATMFormatter;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\n\nconst AccountStatusList = [\n    'address_verified',\n    'age_verification',\n    'allow_document_upload',\n    'allow_poa_resubmission',\n    'allow_poi_resubmission',\n    'authenticated',\n    'cashier_locked',\n    'crs_tin_information',\n    'deposit_attempt',\n    'deposit_locked',\n    'df_deposit_requires_poi',\n    'disabled',\n    'document_expired',\n    'document_expiring_soon',\n    'document_under_review',\n    'dxtrade_password_not_set',\n    'financial_assessment_not_complete',\n    'financial_information_not_complete',\n    'financial_risk_approval',\n    'idv_revoked',\n    'max_turnover_limit_not_set',\n    'mt5_password_not_set',\n    'mt5_withdrawal_locked',\n    'needs_affiliate_coc_approval',\n    'no_trading',\n    'no_withdrawal_or_trading',\n    'p2p_blocked_for_pa',\n    'pa_withdrawal_explicitly_allowed',\n    'password_reset_required',\n    'personal_details_locked',\n    'poi_name_mismatch',\n    'professional',\n    'professional_requested',\n    'professional_rejected',\n    'shared_payment_method',\n    'social_signup',\n    'transfers_blocked',\n    'trading_experience_not_complete',\n    'unwelcome',\n    'withdrawal_locked',\n] as const;\n\ntype TAccountStatus = typeof AccountStatusList[number];\n\n/**\n * Custom hook to check if a particular account status is present.\n * @name useIsAccountStatusPresent\n * @param status of the account to check\n * @returns boolean\n */\nconst useIsAccountStatusPresent = (status: TAccountStatus) => {\n    const {\n        client: { account_status },\n    } = useStore();\n\n    const status_list = account_status?.status;\n\n    return React.useMemo(() => status_list?.includes(status) ?? false, [status_list, status]);\n};\n\nexport default useIsAccountStatusPresent;\n","import { useStore } from '@deriv/stores';\n\n/**\n * Checks if a client is considered high risk for MT5 trading based on their available trading accounts.\n * @returns `true` if the client is high risk for MT5 trading, `false` otherwise.\n */\nconst useIsClientHighRiskForMT5 = () => {\n    const {\n        client: { trading_platform_available_accounts },\n    } = useStore();\n    const financial_available_accounts = trading_platform_available_accounts.filter(\n        available_account => available_account.market_type === 'financial'\n    );\n\n    const synthetic_available_accounts = trading_platform_available_accounts.filter(\n        available_account => available_account.market_type === 'gaming'\n    );\n\n    return (\n        financial_available_accounts.length === 1 &&\n        financial_available_accounts.every(acc => acc.shortcode === 'svg') &&\n        synthetic_available_accounts.length === 1 &&\n        synthetic_available_accounts.every(acc => acc.shortcode === 'svg')\n    );\n};\n\nexport default useIsClientHighRiskForMT5;\n","import { useStore } from '@deriv/stores';\n\nconst useIsSystemMaintenance = () => {\n    const { client } = useStore();\n    const { account_status } = client;\n\n    const is_system_maintenance =\n        account_status?.cashier_validation?.some(validation => validation === 'system_maintenance') || false;\n\n    return is_system_maintenance;\n};\n\nexport default useIsSystemMaintenance;\n","import { useQuery } from '@deriv/api';\nimport { useMemo } from 'react';\n\ntype TUseLandingCompanyDetailsPayload = Parameters<typeof useQuery<'landing_company_details'>>['1']['payload'];\n\n/** A custom hook that returns the available landing companies of the user's country. */\nconst useLandingCompanyDetails = (payload: TUseLandingCompanyDetailsPayload) => {\n    const { data, ...rest } = useQuery('landing_company_details', {\n        payload,\n        options: { enabled: Boolean(payload.landing_company_details) },\n    });\n\n    // Add additional information to the landing company response.\n    const modified_landing_company_details = useMemo(() => {\n        if (!data?.landing_company_details) return undefined;\n\n        return { ...data.landing_company_details };\n    }, [data?.landing_company_details]);\n\n    return {\n        /** The landing company response. */\n        data: modified_landing_company_details,\n        ...rest,\n    };\n};\n\nexport default useLandingCompanyDetails;\n","import React from 'react';\nimport { getLocalStorage } from '@deriv/utils';\n\n/**\n * Hook that manages a localStorage value as a React state.\n * @template T - The generic type of the localStorage value.\n * @param {string} key - The localStorage key.\n * @param {T} [fallback_value] - Optional fallback value if the key does not exist or has no value.\n * @returns - An array containing the current value, a function to update the value, and a function to clear the value.\n */\nconst useLocalStorageData = <T>(\n    key: string,\n    fallback_value?: T\n): [T | null, React.Dispatch<React.SetStateAction<T | null>>, VoidFunction] => {\n    const [data, setData] = React.useState<T | null>(getLocalStorage(key) ?? fallback_value ?? null);\n\n    React.useEffect(() => {\n        localStorage.setItem(key, JSON.stringify(data));\n    }, [key, data]);\n\n    const clearData = () => {\n        localStorage.removeItem(key);\n        setData(fallback_value ?? null);\n    };\n\n    return [data, setData, clearData];\n};\n\nexport default useLocalStorageData;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { Jurisdiction, getFormattedJurisdictionCode } from '@deriv/shared';\n\nconst useMT5SVGEligibleToMigrate = () => {\n    const { client, traders_hub } = useStore();\n    const { mt5_login_list } = client;\n    const { show_eu_related_content } = traders_hub;\n\n    const mt5_migration_config = React.useMemo(() => {\n        const svg_accounts_to_migrate = mt5_login_list.filter(\n            account => account.landing_company_short === Jurisdiction.SVG && !!account.eligible_to_migrate\n        );\n\n        const has_svg_accounts_to_migrate = !!svg_accounts_to_migrate.length && !show_eu_related_content;\n\n        const no_of_svg_accounts_to_migrate = svg_accounts_to_migrate.length;\n\n        const is_eligible_for_svg_to_bvi_migration = !!svg_accounts_to_migrate.filter(account =>\n            Object.values(account.eligible_to_migrate ?? {}).includes(Jurisdiction.BVI)\n        ).length;\n\n        const is_eligible_for_svg_to_vanuatu_migration = !!svg_accounts_to_migrate.filter(account =>\n            Object.values(account.eligible_to_migrate ?? {}).includes(Jurisdiction.VANUATU)\n        ).length;\n\n        const getEligibleAccountToMigrate = () => {\n            if (is_eligible_for_svg_to_bvi_migration) {\n                return Jurisdiction.BVI;\n            } else if (is_eligible_for_svg_to_vanuatu_migration) {\n                return Jurisdiction.VANUATU;\n            }\n        };\n        const eligible_account_to_migrate_label = getFormattedJurisdictionCode(getEligibleAccountToMigrate());\n\n        const eligible_svg_to_bvi_derived_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.synthetic === Jurisdiction.BVI\n        ).length;\n\n        const eligible_svg_to_bvi_financial_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.financial === Jurisdiction.BVI\n        ).length;\n\n        const eligible_svg_to_vanuatu_derived_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.synthetic === Jurisdiction.VANUATU\n        ).length;\n\n        const eligible_svg_to_vanuatu_financial_accounts = !!svg_accounts_to_migrate.filter(\n            account => account.eligible_to_migrate?.financial === Jurisdiction.VANUATU\n        ).length;\n\n        const has_derived_mt5_to_migrate =\n            eligible_svg_to_bvi_derived_accounts || eligible_svg_to_vanuatu_derived_accounts;\n        const has_financial_mt5_to_migrate =\n            eligible_svg_to_bvi_financial_accounts || eligible_svg_to_vanuatu_financial_accounts;\n        const has_derived_and_financial_mt5 = has_derived_mt5_to_migrate && has_financial_mt5_to_migrate;\n\n        return {\n            eligible_account_to_migrate_label,\n            eligible_svg_to_bvi_derived_accounts,\n            eligible_svg_to_bvi_financial_accounts,\n            eligible_svg_to_vanuatu_derived_accounts,\n            eligible_svg_to_vanuatu_financial_accounts,\n            getEligibleAccountToMigrate,\n            has_derived_and_financial_mt5,\n            has_derived_mt5_to_migrate,\n            has_svg_accounts_to_migrate,\n            no_of_svg_accounts_to_migrate,\n            svg_accounts_to_migrate,\n        };\n    }, [mt5_login_list, show_eu_related_content]);\n    return {\n        ...mt5_migration_config,\n    };\n};\n\nexport default useMT5SVGEligibleToMigrate;\n","import { useStore } from '@deriv/stores';\n\nconst useNeedPOI = () => {\n    const { client } = useStore();\n    const authentication = client.account_status?.authentication;\n\n    return authentication?.needs_verification.includes('identity');\n};\n\nexport default useNeedPOI;\n","import React from 'react';\nimport { useSubscription } from '@deriv/api';\n\n/**\n * @deprecated Please use `useAdvertInfo` from the `api` package instead.\n * This custom hook returns the advert info for a specific advert by calling 'p2p_advert_info' endpoint\n */\nconst useP2PAdvertInfo = (id: string) => {\n    const { subscribe, data, unsubscribe, ...rest } = useSubscription('p2p_advert_info');\n\n    React.useEffect(() => {\n        if (id) subscribe({ payload: { id } });\n\n        return () => unsubscribe();\n    }, [subscribe]);\n\n    const modified_data = React.useMemo(() => {\n        const p2p_advert_info = data?.p2p_advert_info;\n\n        if (!p2p_advert_info) return undefined;\n\n        return {\n            ...p2p_advert_info,\n            /** Determines whether the advert is a buy advert or not. */\n            is_buy: p2p_advert_info?.type === 'buy',\n            /** Determines whether the advert is a sell advert or not. */\n            is_sell: p2p_advert_info?.type === 'sell',\n        };\n    }, [data?.p2p_advert_info]);\n\n    return {\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useP2PAdvertInfo;\n","import React from 'react';\nimport { useInfiniteQuery } from '@deriv/api';\n\n/**\n * This custom hook returns available adverts for use with 'p2p_order_create' by calling 'p2p_advert_list' endpoint\n */\nconst useP2PAdvertList = (\n    payload?: NonNullable<Parameters<typeof useInfiniteQuery<'p2p_advert_list'>>[1]>['payload'],\n    config?: { enabled?: boolean }\n) => {\n    const { data, fetchNextPage, ...rest } = useInfiniteQuery('p2p_advert_list', {\n        payload: { ...payload, offset: payload?.offset || 0, limit: payload?.limit || 50 },\n        options: {\n            getNextPageParam: (lastPage, pages) => {\n                if (!lastPage?.p2p_advert_list?.list) return;\n\n                return pages.length;\n            },\n            enabled: config?.enabled === undefined || config.enabled,\n            refetchOnWindowFocus: false,\n        },\n    });\n\n    // Flatten the data array.\n    const flatten_data = React.useMemo(() => {\n        if (!data?.pages?.length) return;\n\n        return data?.pages?.flatMap(page => page?.p2p_advert_list?.list);\n    }, [data?.pages]);\n\n    // Add additional information to the 'p2p_advert_list' data\n    const modified_data = React.useMemo(() => {\n        if (!flatten_data?.length) return undefined;\n\n        return flatten_data.map(advert => ({\n            ...advert,\n            /** Determine if the rate is floating or fixed */\n            is_floating: advert?.rate_type === 'float',\n            /** The advert creation time in epoch. */\n            created_time: advert?.created_time ? new Date(advert.created_time) : undefined,\n        }));\n    }, [flatten_data]);\n\n    return {\n        /** The 'p2p_advert_list' response. */\n        data: modified_data,\n        loadMoreAdverts: fetchNextPage,\n        ...rest,\n    };\n};\n\nexport default useP2PAdvertList;\n","import { useCallback, useMemo } from 'react';\nimport { useFetch, useInvalidateQuery, useRequest } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\ntype TPayloads = NonNullable<\n    NonNullable<Parameters<ReturnType<typeof useRequest<'p2p_advertiser_payment_methods'>>['mutate']>[0]>['payload']\n>;\ntype TCreatePayload = NonNullable<TPayloads['create']>[0];\ntype TUpdatePayload = NonNullable<TPayloads['update']>[0];\n\nconst type_to_icon_mapper = {\n    bank: 'IcCashierBankTransfer',\n    other: 'IcCashierOther',\n    ewallet: 'IcCashierEwallet',\n};\n\n/** A custom hook to fetch, create, update, and delete p2p advertiser payment methods */\nconst useP2PAdvertiserPaymentMethods = () => {\n    const invalidate = useInvalidateQuery();\n    const { client } = useStore();\n    const { is_authorize } = client;\n    const { mutate, ...mutate_rest } = useRequest('p2p_advertiser_payment_methods', {\n        onSuccess: () => invalidate('p2p_advertiser_payment_methods'),\n    });\n    const { data, ...rest } = useFetch('p2p_advertiser_payment_methods', {\n        options: { enabled: is_authorize },\n    });\n\n    // Modify the response to add additional informations\n    const modified_data = useMemo(() => {\n        const p2p_advertiser_payment_methods = data?.p2p_advertiser_payment_methods;\n\n        if (!p2p_advertiser_payment_methods) return undefined;\n\n        return Object.keys(p2p_advertiser_payment_methods).map(key => {\n            const advertiser_payment_method = p2p_advertiser_payment_methods[key];\n\n            return {\n                ...advertiser_payment_method,\n                /** Icon for each payment method based on the type */\n                icon: type_to_icon_mapper[advertiser_payment_method.type],\n                /** The id of payment method */\n                id: key,\n            };\n        });\n    }, [data]);\n\n    const create = useCallback((values: TCreatePayload) => mutate({ payload: { create: [{ ...values }] } }), [mutate]);\n\n    const update = useCallback(\n        (id: string, values: TUpdatePayload) => mutate({ payload: { update: { [id]: { ...values } } } }),\n        [mutate]\n    );\n\n    const delete_payment_method = useCallback((id: number) => mutate({ payload: { delete: [id] } }), [mutate]);\n\n    return {\n        /** The list of p2p advertiser payment methods */\n        data: modified_data,\n        /** Sends a request to create new p2p advertiser payment method */\n        create,\n        /** Sends a request to update existing p2p advertiser payment method */\n        update,\n        /** Sends a request to delete existing p2p advertiser payment method */\n        delete: delete_payment_method,\n        ...rest,\n        mutation: mutate_rest,\n    };\n};\n\nexport default useP2PAdvertiserPaymentMethods;\n","import { useSubscription } from '@deriv/api';\n\n/** A custom hook to subscribe to p2p_order_list */\nconst useP2POrderList = () => {\n    const { data, ...rest } = useSubscription('p2p_order_list');\n\n    return {\n        /** List of p2p orders for the current user */\n        data,\n        ...rest,\n    };\n};\n\nexport default useP2POrderList;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { useGetAccountStatus } from '@deriv/api';\nimport useP2POrderList from './useP2POrderList';\n\nconst useP2PCompletedOrdersNotification = () => {\n    const { subscribe, data, unsubscribe, isSubscribed } = useP2POrderList();\n    const { data: getAccountStatusData } = useGetAccountStatus();\n    const { is_p2p_user } = getAccountStatusData || {};\n    const { client, notifications } = useStore();\n    const { is_authorize } = client;\n\n    React.useEffect(() => {\n        if (is_authorize && is_p2p_user) {\n            subscribe({\n                payload: {\n                    active: 0,\n                },\n            });\n        }\n        return () => {\n            isSubscribed && unsubscribe();\n        };\n    }, [isSubscribed, is_authorize, is_p2p_user, subscribe, unsubscribe]);\n\n    React.useEffect(() => {\n        if (data?.p2p_order_list?.list.length && data?.p2p_order_list?.list !== notifications.p2p_completed_orders) {\n            notifications.p2p_completed_orders = data.p2p_order_list.list;\n        }\n        // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n        else if (data?.p2p_order_info) {\n            if (notifications?.p2p_completed_orders) {\n                // replace order if order id is in the list\n                // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n                if (notifications?.p2p_completed_orders.some(order => order.id === data.p2p_order_info.id)) {\n                    const index = notifications?.p2p_completed_orders.findIndex(\n                        // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n                        order => order.id === data.p2p_order_info.id\n                    );\n                    // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n                    notifications?.p2p_completed_orders.splice(index, 1, data.p2p_order_info);\n                }\n                // add order if order id is not in the list\n                else {\n                    // @ts-expect-error `p2p_order_list` return individual `p2p_order_info` if order info updated\n                    notifications?.p2p_completed_orders.unshift(data.p2p_order_info);\n                }\n            }\n        }\n        notifications?.p2p_completed_orders?.sort((a, b) => {\n            return (b.completion_time || 0) - (a.completion_time || 0);\n        });\n    }, [data, notifications]);\n};\n\nexport default useP2PCompletedOrdersNotification;\n","import { useQuery } from '@deriv/api';\n\n/**\n * A custom hook that returns an object containing the list of countries available for P2P trading.\n *\n * For returning details of a specific country, the country code can be passed in the payload.\n * @example: useCountryList({ country: 'id' })\n *\n */\nconst useP2PCountryList = (payload?: NonNullable<Parameters<typeof useQuery<'p2p_country_list'>>[1]>['payload']) => {\n    const { data, ...rest } = useQuery('p2p_country_list', {\n        payload,\n        options: { refetchOnWindowFocus: false },\n    });\n\n    return {\n        p2p_country_list: data?.p2p_country_list,\n        ...rest,\n    };\n};\n\nexport default useP2PCountryList;\n","import React from 'react';\nimport useExchangeRate from './useExchangeRate';\n\nconst useP2PExchangeRate = (local_currency: string) => {\n    const { handleSubscription, exchange_rates } = useExchangeRate();\n\n    React.useEffect(() => {\n        handleSubscription('USD', local_currency);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [local_currency]);\n\n    const exchange_rate = exchange_rates?.USD?.[local_currency];\n\n    return exchange_rate;\n};\n\nexport default useP2PExchangeRate;\n","import React from 'react';\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst type_to_icon_mapper = {\n    bank: 'IcCashierBankTransfer',\n    other: 'IcCashierOther',\n    ewallet: 'IcCashierEwallet',\n};\n\n/**\n * @deprecated This hook is deprecated. Please use the one from the `api` package instead.\n * A custom hook that return the list of P2P available payment methods */\nconst useP2PPaymentMethods = () => {\n    const { client } = useStore();\n    const { is_authorize } = client;\n\n    const { data, ...rest } = useFetch('p2p_payment_methods', {\n        options: { enabled: is_authorize, refetchOnWindowFocus: false },\n    });\n\n    // Modify the data to add additional information.\n    const modified_data = React.useMemo(() => {\n        const p2p_payment_methods = data?.p2p_payment_methods;\n\n        if (!p2p_payment_methods) return undefined;\n\n        return Object.keys(p2p_payment_methods).map(key => {\n            const payment_method = p2p_payment_methods[key];\n            const fields = Object.keys(payment_method.fields).map(field_key => payment_method.fields[field_key]);\n\n            return {\n                ...payment_method,\n                /** Payment method field definitions. */\n                fields,\n                /** Icon for each payment method based on the type */\n                icon: type_to_icon_mapper[payment_method.type],\n                /** Payment method id */\n                id: key,\n            };\n        });\n    }, [data]);\n\n    return {\n        data: modified_data,\n        ...rest,\n    };\n};\n\nexport default useP2PPaymentMethods;\n","import { useStore } from '@deriv/stores';\n\n/**\n * we can use this hook to get the platform demo account.\n * it loops through the all of user's accounts, finds and returns demo account\n */\n\nconst usePlatformDemoAccount = () => {\n    const { client } = useStore();\n    const { accounts } = client;\n    const account_list = Object.keys(accounts).map(loginid => ({\n        ...accounts[loginid],\n        loginid,\n    }));\n\n    const platform_demo_account = account_list.find(account => account.is_virtual);\n\n    return platform_demo_account;\n};\n\nexport default usePlatformDemoAccount;\n","import { useStore } from '@deriv/stores';\n\n/**\n * we can use this hook to get all real accounts for both Eu and Non-Eu regions.\n * it loops through the accounts list and returns all real accounts\n */\n\nconst usePlatformRealAccounts = () => {\n    const { client, traders_hub } = useStore();\n    const { accounts } = client;\n    const { is_eu_user } = traders_hub;\n    const account_list = Object.keys(accounts).map(loginid => ({\n        ...accounts[loginid],\n        loginid,\n    }));\n\n    const platform_real_accounts = account_list.filter(account => {\n        const is_maltainvest =\n            'landing_company_shortcode' in account && account.landing_company_shortcode === 'maltainvest';\n\n        if (account.is_virtual) return false;\n        if (!is_eu_user) return !is_maltainvest;\n\n        return is_maltainvest;\n    });\n\n    return platform_real_accounts;\n};\n\nexport default usePlatformRealAccounts;\n","import usePlatformDemoAccount from './usePlatformDemoAccount';\nimport usePlatformRealAccounts from './usePlatformRealAccounts';\n\n/**\n * this is a wrapper hook for usePlatformDemoAccount and usePlatformRealAccounts\n * and it returns different platform accounts which are demo, and real\n */\nconst usePlatformAccounts = () => {\n    const platform_demo_account = usePlatformDemoAccount();\n    const platform_real_accounts = usePlatformRealAccounts();\n\n    return {\n        demo: platform_demo_account,\n        real: platform_real_accounts,\n    };\n};\n\nexport default usePlatformAccounts;\n","import { useStore } from '@deriv/stores';\n\nconst useRealSTPAccount = () => {\n    const { client } = useStore();\n    const { mt5_login_list } = client;\n    const has_real_stp_account = mt5_login_list.some(\n        item => item.account_type === 'real' && item.sub_account_type === 'financial_stp'\n    );\n\n    return has_real_stp_account;\n};\n\nexport default useRealSTPAccount;\n","import { useState } from 'react';\nimport { startRegistration } from '@simplewebauthn/browser';\nimport { PublicKeyCredentialCreationOptionsJSON } from '@simplewebauthn/typescript-types';\nimport { WS } from '@deriv/shared';\n\ntype TError = { code?: string; name?: string; message: string };\n\nconst useRegisterPasskey = ({ onSuccess }: { onSuccess: () => void }) => {\n    const [passkey_registration_error, setPasskeyRegistrationError] = useState<TError | null>(null);\n    const [public_key, setPublicKey] = useState<null | PublicKeyCredentialCreationOptionsJSON>(null);\n\n    const startPasskeyRegistration = async () => {\n        try {\n            const passkeys_register_options_response = await WS.send({ passkeys_register_options: 1 });\n            const public_key = passkeys_register_options_response?.passkeys_register_options?.publicKey;\n            setPublicKey(public_key);\n        } catch (e) {\n            setPasskeyRegistrationError(e as TError);\n        }\n    };\n\n    const createPasskey = async () => {\n        try {\n            if (public_key) {\n                const authenticator_response = await startRegistration(public_key);\n                const passkeys_register_response = await WS.send({\n                    passkeys_register: 1,\n                    publicKeyCredential: authenticator_response,\n                });\n                if (passkeys_register_response?.passkeys_register?.properties?.name) {\n                    onSuccess();\n                } else if (passkeys_register_response?.error) {\n                    setPasskeyRegistrationError(passkeys_register_response?.error);\n                }\n            }\n        } catch (e) {\n            setPasskeyRegistrationError(e as TError);\n        } finally {\n            setPublicKey(null);\n        }\n    };\n\n    return {\n        createPasskey,\n        passkey_registration_error,\n        startPasskeyRegistration,\n    };\n};\n\nexport default useRegisterPasskey;\n","import React, { useEffect, useState } from 'react';\nimport { useMutation } from '@deriv/api';\nimport { TSocketError } from '@deriv/api/types';\nimport useRequestPhoneNumberOTP from './useRequestPhoneNumberOTP';\nimport { useStore } from '@deriv/stores';\nimport useSettings from './useSettings';\nimport { emailOTPErrorMessage, phoneOTPErrorMessage } from '@deriv/shared';\nimport usePhoneVerificationAnalytics from './usePhoneVerificationAnalytics';\n\n/** A hook for verifying Phone Number OTP and Email OTP */\nconst useSendOTPVerificationCode = () => {\n    const [phone_otp_error_message, setPhoneOtpErrorMessage] = useState<React.ReactNode>('');\n    const [show_cool_down_period_modal, setShowCoolDownPeriodModal] = useState(false);\n    const { ui } = useStore();\n    const { setIsForcedToExitPnv } = ui;\n    const {\n        data,\n        mutate,\n        error: phone_otp_error,\n        isSuccess: is_phone_number_verified,\n        ...rest\n    } = useMutation('phone_number_verify');\n    const { data: account_settings, refetch } = useSettings();\n    const {\n        sendEmailOTPVerification,\n        email_otp_error,\n        is_email_verified,\n        getCurrentCarrier,\n        getOtherCarrier,\n        requestOnSMS,\n        requestOnWhatsApp,\n    } = useRequestPhoneNumberOTP();\n    const { trackPhoneVerificationEvents } = usePhoneVerificationAnalytics();\n    // @ts-expect-error will remove once solved\n    const challenge_attempts_remaining = account_settings?.phone_number_verification?.challenge_attempts_remaining;\n    // @ts-expect-error will remove once solved\n    const verify_attempts_remaining = account_settings?.phone_number_verification?.verify_attempts_remaining;\n\n    type OTPErrorCode =\n        | 'PhoneCodeExpired'\n        | 'InvalidOTP'\n        | 'EmailCodeExpired'\n        | 'InvalidToken'\n        | 'NoAttemptsLeft'\n        | 'PhoneNumberVerificationSuspended';\n\n    const formatOtpError = (error: TSocketError<'phone_number_verify' | 'phone_number_challenge'>['error']) => {\n        const errorHandlers: Record<OTPErrorCode, () => void> = {\n            PhoneCodeExpired: () =>\n                setPhoneOtpErrorMessage(phoneOTPErrorMessage('PhoneCodeExpired', verify_attempts_remaining)),\n            InvalidOTP: () => {\n                refetch();\n                if (verify_attempts_remaining - 1 === 0) {\n                    setIsForcedToExitPnv(true);\n                    setShowCoolDownPeriodModal(true);\n                    return;\n                }\n                setPhoneOtpErrorMessage(phoneOTPErrorMessage('InvalidOTP', verify_attempts_remaining));\n            },\n            EmailCodeExpired: () =>\n                setPhoneOtpErrorMessage(\n                    emailOTPErrorMessage(\n                        'EmailCodeExpired',\n                        getCurrentCarrier,\n                        getOtherCarrier,\n                        challenge_attempts_remaining\n                    )\n                ),\n            InvalidToken: () => {\n                refetch();\n                if (challenge_attempts_remaining - 1 === 0) {\n                    setIsForcedToExitPnv(true);\n                    setShowCoolDownPeriodModal(true);\n                    return;\n                }\n                setPhoneOtpErrorMessage(\n                    emailOTPErrorMessage(\n                        'InvalidToken',\n                        getCurrentCarrier,\n                        getOtherCarrier,\n                        challenge_attempts_remaining\n                    )\n                );\n            },\n            NoAttemptsLeft: () => {\n                refetch();\n                setIsForcedToExitPnv(true);\n                setShowCoolDownPeriodModal(true);\n            },\n            PhoneNumberVerificationSuspended: () =>\n                setPhoneOtpErrorMessage(\n                    emailOTPErrorMessage(\n                        'PhoneNumberVerificationSuspended',\n                        getCurrentCarrier,\n                        getOtherCarrier,\n                        challenge_attempts_remaining\n                    )\n                ),\n        };\n\n        const errorCode = error.code as OTPErrorCode;\n\n        if (errorCode in errorHandlers) {\n            errorHandlers[errorCode]();\n        } else {\n            setPhoneOtpErrorMessage(error.message);\n        }\n    };\n\n    // Usage in useEffect\n    useEffect(() => {\n        if (phone_otp_error) {\n            trackPhoneVerificationEvents({\n                action: 'error',\n                subform_name: 'verify_phone_otp_screen',\n                // @ts-expect-error will remove once solved\n                error_code: phone_otp_error.code,\n            });\n            // @ts-expect-error will remove once solved\n            formatOtpError(phone_otp_error);\n        } else if (email_otp_error) {\n            // @ts-expect-error will remove once solved\n            formatOtpError(email_otp_error);\n        }\n    }, [phone_otp_error, email_otp_error]);\n\n    const sendPhoneOTPVerification = (value: string) => {\n        mutate({ payload: { otp: value } });\n    };\n\n    return {\n        data,\n        sendPhoneOTPVerification,\n        sendEmailOTPVerification,\n        requestOnSMS,\n        requestOnWhatsApp,\n        email_otp_error,\n        phone_otp_error,\n        phone_otp_error_message,\n        setPhoneOtpErrorMessage,\n        show_cool_down_period_modal,\n        setShowCoolDownPeriodModal,\n        is_phone_number_verified,\n        is_email_verified,\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useSendOTPVerificationCode;\n","import { useState } from 'react';\nimport { WS } from '@deriv/shared';\n\ntype TError = { code?: string; name?: string; message: string };\n\nconst useRemovePasskey = ({ onSuccess }: { onSuccess: () => void }) => {\n    const [passkey_removing_error, setPasskeyRemovingError] = useState<TError | null>(null);\n\n    const removePasskey = async (id: number) => {\n        try {\n            const passkeys_revoke_response = await WS.send({\n                passkeys_revoke: 1,\n                id,\n            });\n\n            if (passkeys_revoke_response.passkeys_revoke) {\n                onSuccess();\n            } else if (passkeys_revoke_response.error) {\n                setPasskeyRemovingError(passkeys_revoke_response.error);\n            }\n        } catch (e) {\n            setPasskeyRemovingError(e as TError);\n        }\n    };\n\n    return {\n        removePasskey,\n        passkey_removing_error,\n    };\n};\n\nexport default useRemovePasskey;\n","import { useState } from 'react';\nimport { WS } from '@deriv/shared';\n\ntype TError = { code?: string; name?: string; message: string };\n\nconst useRenamePasskey = ({ onSuccess }: { onSuccess: () => void }) => {\n    const [passkey_renaming_error, setPasskeyRenamingError] = useState<TError | null>(null);\n\n    const renamePasskey = async (passkey_id: number, new_passkey_name = '') => {\n        try {\n            const passkeys_rename_response = await WS.send({\n                passkeys_rename: 1,\n                id: passkey_id,\n                name: new_passkey_name,\n            });\n            if (passkeys_rename_response.passkeys_rename) {\n                onSuccess();\n            } else if (passkeys_rename_response?.error) {\n                setPasskeyRenamingError(passkeys_rename_response?.error);\n            }\n        } catch (e) {\n            setPasskeyRenamingError(e as TError);\n        }\n    };\n\n    return {\n        renamePasskey,\n        passkey_renaming_error,\n    };\n};\n\nexport default useRenamePasskey;\n","import { useStore } from '@deriv/stores';\n\n/**\n * A custom hook to check whether the current account has deposited based on statement from the client store\n * This hook should be used in the component wrapped by observer\n */\nconst useStoreHasAccountDeposited = () => {\n    const { client } = useStore();\n    const { statement } = client;\n\n    const count = statement?.count ?? 0;\n    const transactions = statement?.transactions ?? [];\n    const hasDeposited = transactions.some(tx => tx.action_type === 'deposit');\n    const hasTransferred = transactions.some(tx => tx.action_type === 'transfer' && tx.amount && tx.amount > 0);\n    const isLoaded = statement?.count !== undefined && statement?.transactions !== undefined;\n\n    return { count, transactions, hasDeposited, hasTransferred, isLoaded };\n};\n\nexport default useStoreHasAccountDeposited;\n","import { useStore } from '@deriv/stores';\nimport usePlatformAccounts from './usePlatformAccounts';\n\nconst useRealTotalAssetCurrency = () => {\n    const { client, traders_hub } = useStore();\n    const { current_fiat_currency, is_crypto, currency, default_currency } = client;\n    const { is_eu_user } = traders_hub;\n    const { real: platform_real_accounts } = usePlatformAccounts();\n\n    if (!platform_real_accounts.length) return default_currency;\n\n    const non_crypto_accounts = platform_real_accounts.find(account => !is_crypto(account.currency || 'USD'));\n\n    if (non_crypto_accounts) return non_crypto_accounts?.currency || '';\n\n    const currency_if_is_crypto = is_eu_user\n        ? current_fiat_currency || default_currency\n        : platform_real_accounts[0].currency;\n\n    return is_crypto() ? currency_if_is_crypto : currency;\n};\n\nexport default useRealTotalAssetCurrency;\n","import useRealTotalAssetCurrency from './useTotalAssetCurrency';\nimport { useExchangeRate } from './useExchangeRate';\n/**\n * we can use this hook to get the total balance of the given accounts list.\n * it loops through the accounts list and adds the balance of each account\n * to the total balance, it also converts the balance to the currency of the\n * first account in the list\n */\ntype TUseTotalAccountBalance = {\n    balance?: number;\n    currency?: string;\n    account_type?: string;\n};\n\nconst useTotalAccountBalance = (accounts: TUseTotalAccountBalance[]) => {\n    const total_assets_real_currency = useRealTotalAssetCurrency();\n    const { handleSubscription, getExchangeRate } = useExchangeRate();\n\n    if (!accounts.length) return { balance: 0, currency: total_assets_real_currency };\n\n    const balance = accounts.reduce((total, account) => {\n        const new_base = account?.account_type === 'demo' ? 'USD' : total_assets_real_currency || '';\n        const new_target = account.currency || total_assets_real_currency || '';\n\n        if (new_base !== new_target) handleSubscription(new_base, new_target);\n\n        const new_rate = getExchangeRate(new_base, new_target);\n\n        return total + (account.balance || 0) / new_rate;\n    }, 0);\n\n    return {\n        balance,\n        currency: total_assets_real_currency,\n    };\n};\n\nexport default useTotalAccountBalance;\n","import { useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\nimport { useFetch, useQuery } from '@deriv/api';\nimport useActiveWallet from './useActiveWallet';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport useExistingCFDAccounts from './useExistingCFDAccounts';\nimport useWalletsList from './useWalletsList';\n\ntype TAccount = NonNullable<\n    NonNullable<ReturnType<typeof useQuery<'transfer_between_accounts'>>['data']>['accounts']\n>[number] & { account_category: 'wallet' | 'trading' };\n\nconst useTransferBetweenAccounts = () => {\n    const { ui } = useStore();\n    const { is_dark_mode_on } = ui;\n\n    const active_wallet = useActiveWallet();\n\n    const { data: wallets } = useWalletsList();\n\n    const { getConfig } = useCurrencyConfig();\n\n    const trading_apps_icon = is_dark_mode_on ? 'IcWalletOptionsDark' : 'IcWalletOptionsLight';\n\n    const {\n        data: { dxtrade_accounts, mt5_accounts },\n        isSuccess: is_cfd_accounts_loaded,\n    } = useExistingCFDAccounts();\n\n    const { data, ...rest } = useFetch('transfer_between_accounts', {\n        payload: { accounts: 'all' },\n        options: { enabled: is_cfd_accounts_loaded },\n    });\n\n    const modified_transfer_accounts = useMemo(() => {\n        const all_linked_cfd_accounts = [...dxtrade_accounts, ...mt5_accounts];\n\n        const getAccountType = (is_demo?: number, currency?: string): 'fiat' | 'crypto' | 'demo' => {\n            if (is_demo) return 'demo';\n            return getConfig(currency || '')?.is_crypto ? 'crypto' : 'fiat';\n        };\n\n        const accounts = (data?.accounts as TAccount[])?.map(account => {\n            return {\n                ...account,\n                active_wallet_icon: active_wallet?.icon,\n                balance: parseFloat(\n                    Number(account.balance).toFixed(getConfig(account.currency || '')?.fractional_digits)\n                ),\n                display_currency_code: getConfig(account.currency || '')?.display_code,\n                is_demo: Boolean(account?.demo_account),\n                shortcode: active_wallet?.landing_company_name,\n                type: getAccountType(account.demo_account, account.currency),\n            };\n        });\n\n        return {\n            trading_accounts:\n                accounts?.reduce(\n                    (trading_accounts, account) => {\n                        if (account.account_category === 'wallet') return trading_accounts;\n                        if (!account.loginid) return trading_accounts;\n\n                        const cfd_icon = all_linked_cfd_accounts.find(\n                            cfd_account => account.loginid && cfd_account.loginid?.includes(account.loginid)\n                        )?.transfer_icon;\n\n                        trading_accounts[account.loginid] = {\n                            ...account,\n                            gradient_class: active_wallet?.gradient_card_class,\n                            icon: account.account_category === 'trading' ? trading_apps_icon : cfd_icon,\n                            ...(account.account_type === 'mt5' && {\n                                mt5_market_type: mt5_accounts?.find(\n                                    mt5_account => account.loginid && mt5_account.loginid?.includes(account.loginid)\n                                )?.market_type,\n                            }),\n                        };\n\n                        return trading_accounts;\n                    },\n                    {} as Record<\n                        string,\n                        NonNullable<\n                            typeof accounts[number] & {\n                                gradient_class?: `wallet-card__${string}`;\n                                icon?: string;\n                                mt5_market_type?: 'all' | 'financial' | 'synthetic';\n                            }\n                        >\n                    >\n                ) || {},\n            wallet_accounts:\n                accounts?.reduce(\n                    (wallet_accounts, wallet) => {\n                        if (wallet.account_category !== 'wallet') return wallet_accounts;\n                        if (!wallet.loginid) return wallet_accounts;\n\n                        const available_wallet = wallets?.find(acc => acc.loginid === wallet.loginid);\n\n                        wallet_accounts[wallet.loginid] = {\n                            ...wallet,\n                            icon: available_wallet?.icon,\n                            gradient_class: available_wallet?.gradient_card_class,\n                        };\n\n                        return wallet_accounts;\n                    },\n                    {} as Record<\n                        string,\n                        NonNullable<\n                            typeof accounts[number] & {\n                                gradient_class?: `wallet-card__${string}`;\n                                icon?: string;\n                            }\n                        >\n                    >\n                ) || {},\n        };\n    }, [\n        active_wallet?.gradient_card_class,\n        active_wallet?.icon,\n        active_wallet?.landing_company_name,\n        data?.accounts,\n        dxtrade_accounts,\n        getConfig,\n        mt5_accounts,\n        trading_apps_icon,\n        wallets,\n    ]);\n\n    const modified_active_wallet = useMemo(() => {\n        return active_wallet?.loginid\n            ? {\n                  ...modified_transfer_accounts.wallet_accounts[active_wallet?.loginid],\n              }\n            : undefined;\n    }, [active_wallet?.loginid, modified_transfer_accounts.wallet_accounts]);\n\n    return {\n        ...rest,\n        active_wallet: modified_active_wallet,\n        trading_accounts: modified_transfer_accounts.trading_accounts,\n        wallet_accounts: modified_transfer_accounts.wallet_accounts,\n    };\n};\n\nexport default useTransferBetweenAccounts;\n","import { useCallback, useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\nimport { getWalletCurrencyIcon } from '@deriv/utils';\nimport useActiveWallet from './useActiveWallet';\nimport useCurrencyConfig from './useCurrencyConfig';\nimport usePlatformAccounts from './usePlatformAccounts';\nimport useWalletsList from './useWalletsList';\n\nconst trading_accounts_display_prefixes = {\n    standard: 'Deriv Apps',\n    mt5: 'MT5',\n    dxtrade: 'Deriv X',\n    binary: 'Binary',\n} as const;\n\nconst landing_company_display_shortcodes = {\n    svg: 'SVG',\n    malta: 'Malta',\n} as const;\n\nconst useWalletTransactions = (\n    action_type: '' | 'deposit' | 'withdrawal' | 'initial_fund' | 'reset_balance' | 'transfer'\n) => {\n    const {\n        client: { loginid, landing_company_shortcode: shortcode },\n        ui: { is_dark_mode_on },\n    } = useStore();\n    const { data: wallets } = useWalletsList();\n    const current_wallet = useActiveWallet();\n    let { demo: demo_platform_account } = usePlatformAccounts();\n    const { real: real_platform_accounts } = usePlatformAccounts();\n\n    // TODO remove these mocks when we're to switch to API data\n    demo_platform_account = {\n        account_category: 'trading',\n        account_type: 'standard',\n        currency: 'USD',\n        loginid: 'VRTCMOCK0001',\n        is_virtual: 1,\n        landing_company_shortcode: shortcode as 'svg' | 'maltainvest',\n        token: '',\n    };\n    real_platform_accounts.push({\n        account_category: 'trading',\n        account_type: 'standard',\n        currency: 'USD',\n        loginid: 'CRMOCK0001',\n        is_virtual: 0,\n        landing_company_shortcode: shortcode as 'svg' | 'maltainvest',\n        token: '',\n    });\n    if (wallets && current_wallet)\n        wallets.push({\n            account_type: 'crypto',\n            balance: 0,\n            currency: 'BTC',\n            gradient_header_class: 'wallet-header__btc-bg',\n            gradient_card_class: `wallet-card__btc-bg${is_dark_mode_on ? '--dark' : ''}`,\n            is_demo: !!current_wallet.is_virtual,\n            is_disabled: 0,\n            is_malta_wallet: false,\n            is_selected: false,\n            is_virtual: current_wallet.is_virtual,\n            landing_company_name: 'svg',\n            loginid: 'CRWMOCK00042',\n            currency_config: undefined,\n            icon: 'IcWalletCurrencyBtc',\n            wallet_currency_type: 'BTC',\n        });\n    const accounts = useMemo(\n        () => [demo_platform_account, ...real_platform_accounts],\n        [demo_platform_account, real_platform_accounts]\n    );\n    const { getConfig } = useCurrencyConfig();\n\n    const getTradingAccountName = useCallback(\n        (\n            account_type: 'standard' | 'mt5' | 'dxtrade' | 'binary',\n            is_virtual: boolean,\n            landing_company_shortcode: 'svg' | 'malta'\n        ) => {\n            return `${trading_accounts_display_prefixes[account_type]} ${\n                is_virtual ? 'Demo' : `(${landing_company_display_shortcodes[landing_company_shortcode]})`\n            } account`;\n        },\n        []\n    );\n\n    // TODO remove this mock when we're to switch to API data\n    const mock_transactions = current_wallet?.is_virtual\n        ? [\n              {\n                  action_type: 'transfer',\n                  amount: 5,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'VRTCMOCK0001',\n                  },\n                  app_id: {},\n                  balance_after: 9995,\n                  transaction_id: 17494415484,\n                  transaction_time: 1685942139,\n              },\n              {\n                  action_type: 'reset_balance',\n                  amount: 350,\n                  balance_after: 10000,\n                  transaction_id: 13693003421,\n                  transaction_time: 1685942138,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 200,\n                  from: {\n                      loginid: 'VRTCMOCK0001',\n                  },\n                  to: {\n                      loginid,\n                  },\n                  balance_after: 9650,\n                  transaction_id: 17494415483,\n                  transaction_time: 1685855740,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 550,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'VRTCMOCK0001',\n                  },\n                  app_id: {},\n                  balance_after: 9450,\n                  transaction_id: 17494415482,\n                  transaction_time: 1685855739,\n              },\n              {\n                  action_type: 'initial_fund',\n                  amount: 10000,\n                  balance_after: 10000,\n                  transaction_id: 13693011401,\n                  transaction_time: 1685855738,\n              },\n          ]\n        : [\n              {\n                  action_type: 'transfer',\n                  amount: 5,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'CRMOCK0001',\n                  },\n                  balance_after: 0,\n                  transaction_id: 17494117541,\n                  transaction_time: 1685942138,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 20,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'CRWMOCK00042',\n                  },\n                  balance_after: 5,\n                  transaction_id: 17494415489,\n                  transaction_time: 1685942137,\n              },\n              {\n                  action_type: 'deposit',\n                  amount: 25,\n                  balance_after: 25,\n                  transaction_id: 17494415481,\n                  transaction_time: 1685942136,\n              },\n              {\n                  action_type: 'withdrawal',\n                  amount: 750,\n                  balance_after: 0,\n                  transaction_id: 17494415480,\n                  transaction_time: 1685942135,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 100,\n                  from: {\n                      loginid: 'CRMOCK0001',\n                  },\n                  to: {\n                      loginid,\n                  },\n                  balance_after: 750,\n                  transaction_id: 17494415479,\n                  transaction_time: 1685855738,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 200,\n                  from: {\n                      loginid: 'CRWMOCK00042',\n                  },\n                  to: {\n                      loginid,\n                  },\n                  balance_after: 650,\n                  transaction_id: 17494117541,\n                  transaction_time: 1685855737,\n              },\n              {\n                  action_type: 'transfer',\n                  amount: 550,\n                  from: {\n                      loginid,\n                  },\n                  to: {\n                      loginid: 'CRMOCK0001',\n                  },\n                  balance_after: 450,\n                  transaction_id: 17494117540,\n                  transaction_time: 1685855736,\n              },\n              {\n                  action_type: 'deposit',\n                  amount: 1000,\n                  balance_after: 1000,\n                  transaction_id: 17494117539,\n                  transaction_time: 1685769338,\n              },\n          ];\n\n    // const { isLoading, isSuccess } = useFetch('statement', {\n    //     options: { keepPreviousData: true },\n    //     payload: { action_type: },\n    // });\n\n    // TODO: un-comment this code when we're to switch to API data\n    // const transactions = data?.statement?.transactions?.filter(\n    //     el =>\n    //         !!el.action_type &&\n    //         ['deposit', 'withdrawal', 'initial_fund', 'reset_balance', 'transfer'].includes(el.action_type)\n    // ) as TWalletTransaction[];\n\n    const transactions = useMemo(\n        () => mock_transactions.filter(el => !action_type || el.action_type === action_type),\n        [action_type, mock_transactions]\n    );\n\n    const getTransferAccountName = useCallback(\n        (other_account: Exclude<typeof accounts[number], undefined>) => {\n            if (other_account.account_category === 'wallet') {\n                const wallet = wallets?.find(el => el.loginid === other_account.loginid);\n                return `${wallet?.is_virtual ? 'Demo ' : ''}${wallet?.currency} ${'Wallet'}`;\n            }\n            return getTradingAccountName(\n                other_account.account_type as 'standard' | 'mt5' | 'dxtrade' | 'binary',\n                !!other_account.is_virtual,\n                other_account.landing_company_shortcode as 'svg' | 'malta'\n            );\n        },\n        [getTradingAccountName, wallets]\n    );\n\n    const modified_transactions = useMemo(\n        () =>\n            wallets && current_wallet\n                ? transactions\n                      .map(transaction => {\n                          if (\n                              transaction.amount === undefined ||\n                              transaction.balance_after === undefined ||\n                              transaction.action_type === undefined\n                          )\n                              return null;\n\n                          let account_category = 'wallet';\n                          let account_type = current_wallet.account_type;\n                          let account_name = `${current_wallet.is_virtual ? 'Demo ' : ''}${\n                              current_wallet.currency\n                          } ${'Wallet'}`;\n                          let account_currency = current_wallet.currency;\n                          let gradient_class = current_wallet.gradient_card_class;\n                          let icon = getWalletCurrencyIcon(\n                              current_wallet.is_virtual ? 'demo' : current_wallet.currency || 'USD',\n                              is_dark_mode_on\n                          );\n                          if (transaction.action_type === 'transfer') {\n                              const other_loginid =\n                                  transaction.to?.loginid === loginid\n                                      ? transaction.from?.loginid\n                                      : transaction.to?.loginid;\n                              if (!other_loginid) return null;\n                              const other_account = accounts.find(el => el?.loginid === other_loginid);\n                              if (!other_account?.currency || !other_account?.account_type) return null;\n                              account_category = other_account.account_category || 'wallet';\n                              account_currency = other_account.currency;\n                              account_name = getTransferAccountName(other_account);\n                              account_type = other_account.account_type;\n                              gradient_class = `wallet-card__${\n                                  other_account.is_virtual === 1 ? 'demo' : other_account?.currency?.toLowerCase()\n                              }-bg${is_dark_mode_on ? '--dark' : ''}`;\n                              icon = getWalletCurrencyIcon(\n                                  other_account.is_virtual ? 'demo' : other_account.currency || '',\n                                  is_dark_mode_on,\n                                  false\n                              );\n                          }\n                          const currency_config = getConfig(account_currency || '');\n                          const is_crypto = currency_config?.is_crypto;\n                          const icon_type = is_crypto || current_wallet.is_virtual ? 'crypto' : 'fiat';\n\n                          return {\n                              ...transaction,\n                              account_category,\n                              account_currency,\n                              account_name,\n                              account_type,\n                              gradient_class,\n                              icon,\n                              icon_type,\n                          };\n                      })\n                      .filter(<T>(value: T | null): value is T => value !== null)\n                : [],\n        [accounts, current_wallet, getConfig, getTransferAccountName, is_dark_mode_on, loginid, transactions, wallets]\n    );\n\n    return { transactions: modified_transactions, isLoading: false, isSuccess: true };\n};\n\nexport default useWalletTransactions;\n","import { useMemo, useState, useEffect } from 'react';\nimport useTransferBetweenAccounts from './useTransferBetweenAccounts';\n\nconst useWalletTransfer = () => {\n    const {\n        active_wallet,\n        trading_accounts,\n        wallet_accounts,\n        isLoading: is_accounts_loading,\n    } = useTransferBetweenAccounts();\n\n    const [from_account, setFromAccount] = useState<typeof active_wallet>();\n    const [to_account, setToAccount] = useState<typeof active_wallet>();\n\n    const to_account_list = useMemo(() => {\n        if (!from_account?.loginid) return { trading_accounts: {}, wallet_accounts: {} };\n        if (!active_wallet?.loginid) return { trading_accounts: {}, wallet_accounts: {} };\n\n        if (from_account?.loginid === active_wallet?.loginid) {\n            return {\n                trading_accounts,\n                wallet_accounts: Object.fromEntries(\n                    Object.entries(wallet_accounts).filter(\n                        ([key]) => active_wallet?.loginid && !key.includes(active_wallet?.loginid)\n                    )\n                ),\n            };\n        }\n        return { trading_accounts: {}, wallet_accounts: { [active_wallet?.loginid]: active_wallet } };\n    }, [active_wallet, from_account?.loginid, trading_accounts, wallet_accounts]);\n\n    //this useEffect populates from/to accounts with updated values, if they were updated in the background\n    useEffect(() => {\n        setFromAccount(acc => {\n            return acc?.loginid ? { ...trading_accounts, ...wallet_accounts }[acc?.loginid] : undefined;\n        });\n        setToAccount(acc => {\n            return acc?.loginid ? { ...trading_accounts, ...wallet_accounts }[acc?.loginid] : undefined;\n        });\n    }, [setFromAccount, setToAccount, trading_accounts, wallet_accounts]);\n\n    return {\n        active_wallet,\n        is_accounts_loading,\n        from_account,\n        to_account,\n        to_account_list,\n        transfer_accounts: { trading_accounts, wallet_accounts },\n        setFromAccount,\n        setToAccount,\n    };\n};\n\nexport default useWalletTransfer;\n","import React from 'react';\nimport { useStore } from '@deriv/stores';\nimport { MT5_ACCOUNT_STATUS } from '@deriv/shared';\n\nconst getStatusBadge = (status: string) => {\n    if (status === 'proof_failed') {\n        return MT5_ACCOUNT_STATUS.FAILED;\n    } else if (status === 'verification_pending') {\n        return MT5_ACCOUNT_STATUS.PENDING;\n    } else if (status === 'needs_verification') {\n        return MT5_ACCOUNT_STATUS.NEEDS_VERIFICATION;\n    }\n};\n\n/**\n * Custom React hook to check if the selected MT5 account has been created.\n *\n * @returns {Object} An object containing the following properties:\n *\n * - `is_selected_MT5_account_created` (boolean): Indicates whether the selected MT5 account has been created.\n * - `existing_account` (Object | null): If the selected account is created, contains the MT5 account details; otherwise `null`.\n * - `existing_account_status` (string | null): Status of the created account (e.g., 'failed', 'pending', 'needs_verification'), or `null` if no account is created.\n * - `available_account_to_create` (Object | null): The account available to create for the selected product. Will be `null` if an account is already created.\n */\n\nconst useIsSelectedMT5AccountCreated = () => {\n    const {\n        client,\n        modules: { cfd },\n        traders_hub: { selected_account_type },\n    } = useStore();\n    const { mt5_login_list, trading_platform_available_accounts, updateMT5AccountDetails } = client;\n\n    React.useEffect(() => {\n        async function fetchData() {\n            await updateMT5AccountDetails();\n        }\n        fetchData();\n    }, [updateMT5AccountDetails]);\n\n    const { jurisdiction_selected_shortcode, product } = cfd;\n    const created_account = mt5_login_list.filter(\n        account =>\n            account.landing_company_short === jurisdiction_selected_shortcode &&\n            account.product === product &&\n            account.account_type === selected_account_type\n    );\n    const selected_account = trading_platform_available_accounts.filter(\n        account =>\n            account.shortcode === jurisdiction_selected_shortcode &&\n            account.product === product &&\n            account.is_default_jurisdiction === 'true'\n    );\n\n    const is_selected_MT5_account_created = created_account && Object.keys(created_account).length > 0;\n\n    const existing_account = is_selected_MT5_account_created ? created_account[0] : null;\n    const existing_account_status = existing_account?.status ? getStatusBadge(existing_account?.status) : null;\n    const available_account_to_create = !is_selected_MT5_account_created ? selected_account[0] : null;\n    return {\n        is_selected_MT5_account_created,\n        existing_account,\n        existing_account_status,\n        available_account_to_create,\n    };\n};\n\nexport default useIsSelectedMT5AccountCreated;\n","import { useStore } from '@deriv/stores';\nimport useGetMFAccountStatus from './useGetMFAccountStatus';\nimport useIsSelectedMT5AccountCreated from './useIsSelectedMT5AccountCreated';\nimport { CFD_PLATFORMS } from '@deriv/shared';\n\n/** A custom hook to fetch the status badge value and client_kyc_status for MF account and MT5 account \nMF account status is fetched from useGetMFAccountStatus\nMT5 account status is fetched from useIsSelectedMT5AccountCreated\n*/\nconst useGetStatus = () => {\n    const { common } = useStore();\n    const { mf_account_status, kyc_status } = useGetMFAccountStatus();\n    const { is_selected_MT5_account_created, existing_account_status, existing_account, available_account_to_create } =\n        useIsSelectedMT5AccountCreated();\n    const { platform } = common;\n\n    if (platform === CFD_PLATFORMS.MT5) {\n        return {\n            status_badge: existing_account_status,\n            client_kyc_status: is_selected_MT5_account_created\n                ? existing_account?.client_kyc_status\n                : available_account_to_create?.client_kyc_status,\n        };\n    }\n    return {\n        status_badge: mf_account_status,\n        client_kyc_status: kyc_status,\n    };\n};\n\nexport default useGetStatus;\n","import { useStore } from '@deriv/stores';\n\nconst useIsPhoneNumberVerified = () => {\n    const { client } = useStore();\n    const { account_settings } = client;\n    const { phone_number_verification } = account_settings;\n    const is_phone_number_verified = !!phone_number_verification?.verified;\n\n    return {\n        is_phone_number_verified,\n    };\n};\n\nexport default useIsPhoneNumberVerified;\n","import React from 'react';\nimport dayjs from 'dayjs';\nimport { useIsMounted, WS } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport useIsPhoneNumberVerified from './useIsPhoneNumberVerified';\n\n/** A hook for calculating email verification otp and phone number otp timer */\nconst usePhoneNumberVerificationSetTimer = (is_from_request_phone_number_otp = false) => {\n    const { client, ui } = useStore();\n    const { account_settings } = client;\n    const { should_show_phone_number_otp } = ui;\n    const { phone_number_verification } = account_settings;\n    const [next_email_otp_request_timer, setNextEmailOtpRequestTimer] = React.useState<number | undefined>();\n    const [next_phone_otp_request_timer, setNextPhoneOtpRequestTimer] = React.useState<number | undefined>();\n    const [is_request_button_disabled, setIsRequestButtonDisabled] = React.useState(false);\n    const { is_phone_number_verified } = useIsPhoneNumberVerified();\n    const isMounted = useIsMounted();\n\n    React.useEffect(() => {\n        if (!is_phone_number_verified) {\n            if (isMounted()) setIsRequestButtonDisabled(true);\n            WS.send({ time: 1 }).then((response: { error?: Error; time: number }) => {\n                if (isMounted()) setIsRequestButtonDisabled(false);\n                if (response.error) return;\n\n                if (\n                    response.time &&\n                    !should_show_phone_number_otp &&\n                    !is_from_request_phone_number_otp &&\n                    phone_number_verification?.next_email_attempt\n                ) {\n                    const request_in_milliseconds = dayjs(phone_number_verification.next_email_attempt * 1000);\n                    const next_request = Math.round(request_in_milliseconds.diff(response.time * 1000) / 1000);\n\n                    if (isMounted())\n                        if (next_request > 0) {\n                            setNextEmailOtpRequestTimer(next_request);\n                        } else {\n                            setNextEmailOtpRequestTimer(0);\n                        }\n                } else if (response.time && phone_number_verification?.next_attempt) {\n                    const request_in_milliseconds = dayjs(phone_number_verification.next_attempt * 1000);\n                    const next_request = Math.round(request_in_milliseconds.diff(response.time * 1000) / 1000);\n\n                    if (isMounted())\n                        if (next_request > 0) {\n                            setNextPhoneOtpRequestTimer(next_request);\n                        } else {\n                            setNextPhoneOtpRequestTimer(0);\n                        }\n                }\n            });\n        }\n    }, [\n        is_phone_number_verified,\n        phone_number_verification?.next_email_attempt,\n        phone_number_verification?.next_attempt,\n        is_from_request_phone_number_otp,\n        should_show_phone_number_otp,\n    ]);\n\n    React.useEffect(() => {\n        let countdown: ReturnType<typeof setInterval>;\n        if (next_email_otp_request_timer && next_email_otp_request_timer > 0) {\n            countdown = setInterval(() => {\n                setNextEmailOtpRequestTimer(next_email_otp_request_timer - 1);\n            }, 1000);\n        }\n\n        return () => clearInterval(countdown);\n    }, [next_email_otp_request_timer]);\n\n    React.useEffect(() => {\n        let countdown: ReturnType<typeof setInterval>;\n        if (next_phone_otp_request_timer && next_phone_otp_request_timer > 0) {\n            countdown = setInterval(() => {\n                setNextPhoneOtpRequestTimer(next_phone_otp_request_timer - 1);\n            }, 1000);\n        }\n\n        return () => clearInterval(countdown);\n    }, [next_phone_otp_request_timer]);\n\n    return {\n        is_email_otp_timer_loading: typeof next_email_otp_request_timer !== 'number',\n        setNextEmailOtpRequestTimer,\n        setNextPhoneOtpRequestTimer,\n        is_phone_otp_timer_loading: typeof next_phone_otp_request_timer !== 'number',\n        next_email_otp_request_timer,\n        next_phone_otp_request_timer,\n        is_request_button_disabled,\n    };\n};\n\nexport default usePhoneNumberVerificationSetTimer;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useIsMounted, WS } from '@deriv/shared';\nimport dayjs from 'dayjs';\nimport useSettings from './useSettings';\n\nconst usePhoneNumberVerificationSessionTimer = () => {\n    const [session_timer, setSessionTimer] = useState<number | undefined>();\n    const [formatted_time, setFormattedTime] = useState('00:00');\n    const [should_show_session_timeout_modal, setShouldShowSessionTimeoutModal] = useState(false);\n    const { data: account_settings } = useSettings();\n    const isMounted = useIsMounted();\n\n    const formatTime = useCallback((totalSeconds: number) => {\n        if (totalSeconds <= 0) {\n            return setFormattedTime('00:00');\n        }\n\n        const minutes = Math.floor((totalSeconds % 3600) / 60);\n        const seconds = totalSeconds % 60;\n        const formatted_minutes = String(minutes).padStart(2, '0');\n        const formatted_seconds = String(seconds).padStart(2, '0');\n\n        setFormattedTime(`${formatted_minutes}:${formatted_seconds}`);\n    }, []);\n\n    useEffect(() => {\n        WS.send({ time: 1 }).then((response: { error?: Error; time: number }) => {\n            if (response.error) return;\n\n            //@ts-expect-error will remove this once GetSettings is updated\n            if (response.time && account_settings?.phone_number_verification?.session_timestamp) {\n                // request_in_miliseconds is to convert session_timestamp from get_settings * it with 1000 to make it into miliseconds and convert the time using dayjs package\n                const request_in_milliseconds = dayjs(\n                    //@ts-expect-error will remove this once GetSettings is updated\n                    account_settings?.phone_number_verification?.session_timestamp * 1000\n                );\n                // next_request is to compare request_in_miliseconds with server's response time\n                const next_request = Math.round(request_in_milliseconds.diff(response.time * 1000) / 1000);\n\n                if (isMounted()) {\n                    if (next_request >= 0) {\n                        setSessionTimer(next_request);\n                    }\n                }\n            }\n        });\n        //@ts-expect-error will remove this once GetSettings is updated\n    }, [account_settings?.phone_number_verification?.session_timestamp]);\n\n    useEffect(() => {\n        let countdown: ReturnType<typeof setInterval>;\n        if (typeof session_timer === 'number') {\n            formatTime(session_timer);\n            if (session_timer > 0) {\n                setShouldShowSessionTimeoutModal(false);\n                countdown = setInterval(() => {\n                    setSessionTimer(session_timer - 1);\n                }, 1000);\n            } else {\n                setShouldShowSessionTimeoutModal(true);\n            }\n        }\n        return () => clearInterval(countdown);\n    }, [session_timer, formatTime]);\n\n    return {\n        formatted_time,\n        should_show_session_timeout_modal,\n        setSessionTimer,\n        setShouldShowSessionTimeoutModal,\n    };\n};\n\nexport default usePhoneNumberVerificationSessionTimer;\n","import { useCallback } from 'react';\n\nimport { useQuery } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst useGetPhoneNumberList = () => {\n    const { client } = useStore();\n    const {\n        account_settings,\n        website_status: { clients_country },\n        is_authorize,\n    } = client;\n    const {\n        data,\n        isLoading: isPhoneSettingLoading,\n        refetch,\n    } = useQuery('phone_settings', {\n        options: { enabled: is_authorize },\n    });\n\n    const no_of_available_carriers = data?.phone_settings?.carriers && data?.phone_settings?.carriers.length;\n\n    const is_global_sms_available = data?.phone_settings?.carriers?.includes('sms');\n\n    const is_global_whatsapp_available = data?.phone_settings?.carriers?.includes('whatsapp');\n\n    const is_carriers_supported = data?.phone_settings?.carriers && data.phone_settings.carriers.length > 0;\n\n    const countries = data?.phone_settings?.countries?.sort((a, b) => a.display_name.localeCompare(b.display_name));\n\n    const getSelectedPhoneCode = useCallback(() => {\n        const country = countries?.find(c => c.country_code.toLowerCase() === clients_country);\n        return country?.calling_country_code;\n    }, [clients_country, countries]);\n\n    const getSelectedCountryList = useCallback(() => {\n        //@ts-expect-error calling_country_code is not defined in GetSettings\n        const phone_code = account_settings?.calling_country_code;\n        const country = phone_code\n            ? countries?.find(c => c.calling_country_code === phone_code)\n            : countries?.find(c => c.country_code.toLowerCase() === clients_country);\n        return country;\n    }, [clients_country, countries, account_settings]);\n\n    const getShortCodeSelected = useCallback(() => {\n        //@ts-expect-error calling_country_code is not defined in GetSettings\n        const phone_code = account_settings?.calling_country_code;\n        // Assuming you have access to the residency_list or a similar data structure\n        const country = countries?.find(country => country.calling_country_code === phone_code);\n        return country?.country_code || '';\n    }, [account_settings, countries]);\n\n    const formatted_countries_list = countries?.map(country => ({\n        name: country.display_name,\n        short_code: country.country_code,\n        phone_code: country.calling_country_code,\n        carriers: country.carriers,\n    }));\n\n    const legacy_core_countries_list = countries?.map(country => ({\n        text: `${country.display_name} (${country.calling_country_code})`,\n        value: country.calling_country_code,\n        id: `${country.calling_country_code}_${country.country_code}`,\n        carriers: country.carriers,\n        disabled: false,\n    }));\n\n    //@ts-expect-error will remove this once the account_settings is updated\n    const selected_phone_code = account_settings?.calling_country_code || getSelectedPhoneCode();\n\n    const selected_country_list = getSelectedCountryList();\n\n    const short_code_selected = getShortCodeSelected() || clients_country;\n\n    return {\n        updatePhoneSettings: refetch,\n        is_global_sms_available,\n        is_global_whatsapp_available,\n        no_of_available_carriers,\n        is_carriers_supported,\n        legacy_core_countries_list,\n        formatted_countries_list,\n        short_code_selected,\n        selected_phone_code,\n        selected_country_list,\n        isLoading: isPhoneSettingLoading,\n    };\n};\n\nexport default useGetPhoneNumberList;\n","import { useState, useEffect } from 'react';\nimport { WS } from '@deriv/shared';\n\nexport type TradingPlatformStatus = {\n    platform: 'mt5' | 'dxtrade' | 'ctrader';\n    status: 'active' | 'maintenance' | 'unavailable';\n};\n\n/** A custom hook that gets the list of statuses of ctrader dxtrade mt5 platform. */\nconst useTradingPlatformStatus = () => {\n    const [data, setData] = useState<TradingPlatformStatus[] | null>(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await WS.send({ trading_platform_status: 1 });\n            setData(response.trading_platform_status);\n        };\n\n        fetchData();\n    }, []);\n\n    const getPlatformStatus = (platform: TradingPlatformStatus['platform']) =>\n        data?.find(status => status.platform === platform)?.status;\n\n    return { data, getPlatformStatus };\n};\n\nexport default useTradingPlatformStatus;\n","import { getWithdrawalInfoMessage, getWithdrawalTitle } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\n\nconst useGetWithdrawalLimitsDetails = () => {\n    const { client } = useStore();\n    const { account_limits } = client;\n\n    const withdrawalTypes = [\n        'lifetime_limit',\n        'num_of_days_limit',\n        'withdrawal_since_inception_monetary',\n        'withdrawal_for_x_days_monetary',\n        'remainder',\n    ] as const;\n\n    const withdrawal_limit_details = withdrawalTypes\n        .map(type => ({\n            withdrawal_title: getWithdrawalTitle(type, account_limits.num_of_days),\n            withdrawal_info_message: getWithdrawalInfoMessage(type),\n            withdrawal_amount: account_limits[type],\n        }))\n        .filter(detail => detail.withdrawal_amount !== 99999999);\n\n    return { withdrawal_limit_details };\n};\n\nexport default useGetWithdrawalLimitsDetails;\n","import { useEffect } from 'react';\nimport Cookies from 'js-cookie';\n\nimport { requestOidcAuthentication } from '@deriv-com/auth-client';\n\n/**\n * Handles silent login and single logout logic for OAuth2.\n *\n * @param {{\n *   is_client_store_initialized: boolean; // Whether the client store has been initialized\n *   isOAuth2Enabled: boolean; // Whether OAuth2 feature is enabled\n *   oAuthLogout: () => Promise<void>; // Function to handle OAuth2 logout\n * }} params - The arguments required for silent login and logout management\n */\nconst useSilentLoginAndLogout = ({\n    is_client_store_initialized,\n    isOAuth2Enabled,\n    oAuthLogout,\n}: {\n    is_client_store_initialized: boolean;\n    isOAuth2Enabled: boolean;\n    oAuthLogout: () => Promise<void>;\n}) => {\n    const loggedState = Cookies.get('logged_state');\n\n    const clientAccounts = JSON.parse(localStorage.getItem('client.accounts') || '{}');\n    const isClientAccountsPopulated = Object.keys(clientAccounts).length > 0;\n    const isSilentLoginExcluded =\n        window.location.pathname.includes('callback') || window.location.pathname.includes('endpoint');\n\n    useEffect(() => {\n        if (\n            loggedState === 'true' &&\n            !isClientAccountsPopulated &&\n            isOAuth2Enabled &&\n            is_client_store_initialized &&\n            !isSilentLoginExcluded\n        ) {\n            // Perform silent login\n            requestOidcAuthentication({\n                redirectCallbackUri: `${window.location.origin}/callback`,\n            });\n        }\n\n        if (\n            loggedState === 'false' &&\n            is_client_store_initialized &&\n            isOAuth2Enabled &&\n            isClientAccountsPopulated &&\n            !window.location.pathname.includes('callback')\n        ) {\n            // Perform single logout\n            oAuthLogout();\n        }\n    }, [\n        loggedState,\n        isClientAccountsPopulated,\n        is_client_store_initialized,\n        isOAuth2Enabled,\n        oAuthLogout,\n        isSilentLoginExcluded,\n    ]);\n};\n\nexport default useSilentLoginAndLogout;\n","import { useStore } from '@deriv/stores';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\n\nconst useAccountTransferVisible = () => {\n    const { client } = useStore();\n    const { landing_company_shortcode, residence } = client;\n    const has_malta_invest_account = useHasMaltaInvestAccount();\n    const is_account_transfer_visible =\n        residence !== 'im' && (landing_company_shortcode !== 'malta' || has_malta_invest_account);\n\n    return is_account_transfer_visible;\n};\n\nexport default useAccountTransferVisible;\n","import { useMemo } from 'react';\nimport { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\n/** A custom hook that authorize the user with the given token. If no token is given, it will use the current token. */\nconst useAuthorize = (token?: string) => {\n    const { client } = useStore();\n    const { accounts, loginid = '' } = client;\n    const current_token = accounts[loginid || '']?.token;\n\n    const { data, ...rest } = useFetch('authorize', {\n        payload: { authorize: token ?? current_token },\n        options: { enabled: Boolean(token ?? current_token) },\n    });\n\n    // Add additional information to the authorize response.\n    const modified_authorize = useMemo(() => ({ ...data?.authorize }), [data?.authorize]);\n\n    return {\n        /** The authorize response. */\n        data: modified_authorize,\n        ...rest,\n    };\n};\n\nexport default useAuthorize;\n","import { useEffect, useState } from 'react';\n\nconst ONE_SECOND = 1000;\n\nexport type TCountdownOptions = {\n    from: number;\n    to?: number;\n    increment?: boolean;\n};\n\nconst useCountdown = ({ from, to = 0, increment = false }: TCountdownOptions) => {\n    const [count, setCount] = useState(from);\n    const [is_running, setIsRunning] = useState(false);\n\n    useEffect(() => {\n        let timer: NodeJS.Timeout;\n\n        if (is_running) {\n            timer = setTimeout(() => {\n                if (count === to) {\n                    pause();\n                } else {\n                    setCount(old => (increment ? old + 1 : old - 1));\n                }\n            }, ONE_SECOND);\n        }\n\n        return () => clearTimeout(timer);\n    }, [count, is_running, to, increment]);\n\n    const start = () => setIsRunning(true);\n\n    const pause = () => setIsRunning(false);\n\n    const reset = () => setCount(from);\n\n    const stop = () => {\n        pause();\n        reset();\n    };\n\n    return {\n        count,\n        is_running,\n        start,\n        pause,\n        reset,\n        stop,\n    };\n};\n\nexport default useCountdown;\n","import { useQuery } from '@deriv/api';\n\nconst useCryptoConfig = (currency: string) => {\n    const { data, ...rest } = useQuery('crypto_config', { payload: { currency_code: currency } });\n\n    const cryptoConfig = data?.crypto_config?.currencies_config[currency];\n\n    return {\n        /** Available cryptocurrencies config for authorized account*/\n        data: cryptoConfig,\n        ...rest,\n    };\n};\n\nexport default useCryptoConfig;\n","import { useEffect, useMemo, useState } from 'react';\nimport { useSubscription } from '@deriv/api';\n\ntype TTransaction = NonNullable<\n    NonNullable<ReturnType<typeof useSubscription<'cashier_payments'>>['data']>['cashier_payments']\n>['crypto'][number];\n\ntype TStatus = TTransaction['status_code'];\n\ntype TDepositStatus = 'PENDING' | 'CONFIRMED' | 'ERROR';\n\ntype TWithdrawalStatus = Exclude<TStatus, TDepositStatus>;\n\n// Since BE sends the `status_code` for both `deposit` and `withdrawal` in the same field,\n// Here we modify the BE type to make `status_code` type more specific to the `transaction_type` field.\nexport type TModifiedTransaction = Omit<TTransaction, 'status_code' | 'transaction_type'> &\n    (\n        | { transaction_type: 'deposit'; status_code: TDepositStatus }\n        | { transaction_type: 'withdrawal'; status_code: TWithdrawalStatus }\n    );\n\n/** A custom hook that returns the list of pending crypto transactions for the current user. */\nconst useCryptoTransactions = (allowToMakeSubscription = true) => {\n    const { subscribe, data, ...rest } = useSubscription('cashier_payments');\n    const [transactions, setTransactions] = useState<TModifiedTransaction[]>();\n\n    useEffect(() => {\n        allowToMakeSubscription && subscribe();\n    }, [subscribe, allowToMakeSubscription]);\n\n    useEffect(() => {\n        setTransactions(old_transactions => {\n            // Get the list of the crypto transactions.\n            const new_transactions = data?.cashier_payments?.crypto as TModifiedTransaction[] | undefined;\n\n            // If there are no new transactions, return the old transactions.\n            if (!new_transactions) return old_transactions;\n\n            // If there are no old transactions, return the new transactions.\n            if (!old_transactions) return new_transactions;\n\n            // Make a copy of the old transactions.\n            const updated_transactions = [...old_transactions];\n\n            // For each new transaction, check if it exists in the old transactions.\n            new_transactions.forEach(new_transaction => {\n                // Find the index of the new transaction in the old transactions if exists.\n                const index = updated_transactions.findIndex(\n                    old_transaction => old_transaction.id === new_transaction.id\n                );\n\n                // If the new transaction does not exist in the old transactions, add it, otherwise update it.\n                if (index === -1) {\n                    updated_transactions.push(new_transaction);\n                } else {\n                    updated_transactions[index] = new_transaction;\n                }\n            });\n\n            // Return the updated transactions.\n            return updated_transactions;\n        });\n    }, [data?.cashier_payments?.crypto]);\n\n    // Add additional information to each transaction.\n    const modified_transactions = useMemo(\n        () =>\n            transactions?.map(transaction => ({\n                ...transaction,\n                /** Determine if the transaction is a deposit or not. */\n                is_deposit: transaction.transaction_type === 'deposit',\n                /** Determine if the transaction is a withdrawal or not. */\n                is_withdrawal: transaction.transaction_type === 'withdrawal',\n            })),\n        [transactions]\n    );\n\n    // Sort transactions by submit time.\n    const sorted_transactions = useMemo(\n        () => modified_transactions?.sort((a, b) => b.submit_date - a.submit_date),\n        [modified_transactions]\n    );\n\n    // Determine if the user has any transactions or not.\n    const has_transactions = modified_transactions && modified_transactions.length > 0;\n\n    // Get the last transaction if exists.\n    const last_transaction = modified_transactions?.[0];\n\n    return {\n        /** List of user transactions sorted by submit time. */\n        data: sorted_transactions,\n        /** Returns the last transaction if exists. */\n        last_transaction,\n        /** Determine is the user has any transactions or not. */\n        has_transactions,\n        subscribe,\n        ...rest,\n    };\n};\n\nexport default useCryptoTransactions;\n","import { useCallback, useMemo } from 'react';\nimport { useFetch } from '@deriv/api';\n\ntype TPlatform = {\n    cashier: ('doughflow' | 'crypto')[];\n    ramp: string[] | [];\n};\n\n/** @deprecated Use `useCurrencyConfig` from `@deriv/api` package instead. */\nconst useCurrencyConfig = () => {\n    const { data: website_status_data, ...rest } = useFetch('website_status');\n\n    const currencies_config = useMemo(() => {\n        if (!website_status_data?.website_status?.currencies_config) return undefined;\n\n        const website_status_currencies_config = website_status_data.website_status.currencies_config;\n\n        const modified_currencies_config = Object.keys(website_status_currencies_config).map(currency => {\n            const currency_config = website_status_currencies_config[currency];\n\n            return {\n                ...currency_config,\n                /** determine if the currency is a `crypto` currency */\n                is_crypto: currency_config?.type === 'crypto',\n                /** determine if the currency is a `fiat` currency */\n                is_fiat: currency_config?.type === 'fiat',\n                /** determine if the currency is `Australian Dollar` */\n                is_AUD: currency === 'AUD',\n                /** determine if the currency is `US Dollar` */\n                is_USD: currency === 'USD',\n                /** determine if the currency is `Euro` */\n                is_EUR: currency === 'EUR',\n                /** determine if the currency is `Pound Sterling` */\n                is_GBP: currency === 'GBP',\n                /** determine if the currency is `Bitcoin` */\n                is_BTC: currency === 'BTC',\n                /** determine if the currency is `Ethereum` */\n                is_ETH: currency === 'ETH',\n                /** determine if the currency is `Litecoin` */\n                is_LTC: currency === 'LTC',\n                /** determine if the currency is `Multi-Collateral DAI` */\n                is_DAI: currency === 'DAI',\n                /** determine if the currency is `IDK` */\n                is_IDK: currency === 'IDK',\n                /** determine if the currency is `Paxos Standard` */\n                is_PAX: currency === 'PAX',\n                /** determine if the currency is `Binary Coin` */\n                is_USB: currency === 'USB',\n                /** determine if the currency is `Tether Omni` */\n                is_USDT: currency === 'UST',\n                /** determine if the currency is `True USD` */\n                is_TUSD: currency === 'TUSD',\n                /** determine if the currency is `Binance USD` */\n                is_BUSD: currency === 'BUSD',\n                /** determine if the currency is `STATIS Euro` */\n                is_EURS: currency === 'EURS',\n                /** determine if the currency is `Tether ERC20` */\n                is_eUSDT: currency === 'eUSDT',\n                /** determine if the currency is `Tether TRC20` */\n                is_tUSDT: currency === 'tUSDT',\n                /** determine if the currency is `USD Coin` */\n                is_USDC: currency === 'USDC',\n                /** determine if the currency is `USDK` */\n                is_USDK: currency === 'USDK',\n                /** Currency code */\n                code: currency,\n                /** Currency display code */\n                display_code: currency === 'UST' ? 'USDT' : currency,\n                /** Local asset name for the currency icon. ex: `IcCurrencyUsd` for `USD` */\n                icon: `IcCurrency${currency[0].toUpperCase() + currency.slice(1).toLowerCase()}`,\n                /** Platforms with providers */\n                //TODO: Remove `as TPlatform` after updating `@deriv/api-types` library\n                //@ts-expect-error need to update `@deriv/api-types` library to the latest version\n                platform: currency_config?.platform as TPlatform,\n            };\n        });\n\n        return modified_currencies_config.reduce<Record<string, typeof modified_currencies_config[number]>>(\n            (previous, current) => ({ ...previous, [current.code]: current }),\n            {}\n        );\n    }, [website_status_data?.website_status?.currencies_config]);\n\n    const getConfig = useCallback((currency: string) => currencies_config?.[currency], [currencies_config]);\n\n    return {\n        /** Returns the currency config object for the given currency */\n        getConfig,\n        /** Available currencies and their information */\n        currencies_config,\n        ...rest,\n    };\n};\n\nexport default useCurrencyConfig;\n","import { useStore } from '@deriv/stores';\nimport useCurrencyConfig from './useCurrencyConfig';\n\n/** A custom hook to get the currency config information for the user's current currency. */\nconst useCurrentCurrencyConfig = () => {\n    const { client } = useStore();\n    const { currency } = client;\n    const { getConfig } = useCurrencyConfig();\n    const currency_config = getConfig(currency);\n\n    // Safe to do null assertion here because the user's currency is always\n    // available in the currency config object so it can't be null.\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return currency_config!;\n};\n\nexport default useCurrentCurrencyConfig;\n","import { useCallback, useEffect } from 'react';\nimport { useRequest } from '@deriv/api';\n\nconst useDepositCryptoAddress = () => {\n    const { data, mutate, ...rest } = useRequest('cashier');\n    const deposit_address = typeof data?.cashier !== 'string' ? data?.cashier?.deposit?.address : undefined;\n\n    const send = useCallback(\n        () => mutate({ payload: { cashier: 'deposit', provider: 'crypto', type: 'api' } }),\n        [mutate]\n    );\n\n    useEffect(() => {\n        send();\n    }, [send]);\n\n    return {\n        ...rest,\n        resend: send,\n        data: deposit_address,\n    };\n};\n\nexport default useDepositCryptoAddress;\n","import { useCallback, useEffect } from 'react';\nimport { useRequest } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst useDepositFiatAddress = () => {\n    const { ui } = useStore();\n    const { is_dark_mode_on } = ui;\n    const { data, mutate, ...rest } = useRequest('cashier');\n    const dark_mode = is_dark_mode_on ? 'on' : 'off';\n    const urlObject = new URL(window.location.href);\n    const lang = urlObject.searchParams.get('lang')?.toLowerCase();\n\n    let deposit_iframe_url;\n    if (typeof data?.cashier === 'string') {\n        const cashierUrl = new URL(data.cashier);\n        cashierUrl.searchParams.set('DarkMode', dark_mode);\n        lang && cashierUrl.searchParams.set('Lang', lang);\n        deposit_iframe_url = cashierUrl.toString();\n    }\n\n    const send = useCallback(() => mutate({ payload: { cashier: 'deposit', provider: 'doughflow' } }), [mutate]);\n\n    useEffect(() => {\n        send();\n    }, [send]);\n\n    return {\n        ...rest,\n        resend: send,\n        data: deposit_iframe_url,\n    };\n};\n\nexport default useDepositFiatAddress;\n","import DocumentUploader from '@binary-com/binary-document-uploader';\nimport { useMutation } from '@deriv/api';\nimport { WS, compressImageFiles, readFiles } from '@deriv/shared';\nimport { useCallback, useMemo, useState } from 'react';\n\ntype TSettingsPayload = Partial<Parameters<ReturnType<typeof useMutation<'document_upload'>>['mutate']>[0]['payload']>;\n\ntype TFile =\n    | Partial<\n          TSettingsPayload & {\n              filename: File['name'];\n              buffer: FileReader['result'];\n              documentFormat: string;\n              file_size: File['size'];\n          }\n      >\n    | {\n          message: string;\n      };\n\ntype TUploaderResponse = {\n    [key: string]: unknown;\n    message?: string;\n    warning?: string;\n};\nconst fileReadErrorMessage = (filename: string) => {\n    return `Unable to read file ${filename}`;\n};\n\n/**\n * Custom hook to handle file uploading with the binary-document-uploader package\n */\nconst useFileUploader = () => {\n    const [error, setError] = useState<unknown>(null);\n    const uploader_instance = useMemo(() => new DocumentUploader({ connection: WS.getSocket() }), []);\n\n    const upload = useCallback(\n        async (files: File[], settings?: TSettingsPayload, onError?: () => void) => {\n            if (!files?.length) return Promise.reject(new Error('No files selected'));\n\n            return new Promise<{\n                message?: string;\n                warning?: string;\n                [key: string]: unknown;\n            }>((resolve, reject) => {\n                let is_any_file_error = false;\n                let file_error: string | null = null;\n\n                (async () => {\n                    try {\n                        const compressed_files: Blob[] = await compressImageFiles(files);\n                        const processed_files: TFile[] = await readFiles(\n                            compressed_files,\n                            fileReadErrorMessage,\n                            settings ?? {}\n                        );\n                        processed_files.forEach(file => {\n                            if (file && 'message' in file) {\n                                is_any_file_error = true;\n                                file_error = file.message;\n                                reject(file.message);\n                            }\n                        });\n                        if (is_any_file_error || !processed_files.length) {\n                            onError?.();\n                            return reject(new Error(file_error ?? 'Something went wrong!')); // don't start submitting files until all front-end validation checks pass\n                        }\n\n                        // send files\n                        const response: TUploaderResponse = await uploader_instance.upload(processed_files[0]);\n                        resolve(response);\n                    } catch (error: unknown) {\n                        setError(error);\n                        reject(error);\n                    }\n                })();\n            });\n        },\n        [uploader_instance]\n    );\n\n    return {\n        /**\n         * Error message from the file uploader\n         */\n        error,\n        /**\n         * Uploads a file to the server with the binary-document-uploader package after compressing and reading the file with meta data\n         */\n        upload,\n        /**\n         * Instance of the binary-document-uploader\n         */\n        uploader_instance,\n    };\n};\n\nexport default useFileUploader;\n","import { useEffect } from 'react';\nimport { useStore } from '@deriv/stores';\nimport { ACCOUNT_BADGE_STATUS } from '@deriv/shared';\n\nconst useGetMFAccountStatus = () => {\n    const { client } = useStore();\n    const { account_status, updateAccountStatus } = client || {};\n\n    useEffect(() => {\n        async function fetchData() {\n            await updateAccountStatus();\n        }\n        fetchData();\n    }, []);\n    const authentication = account_status?.authentication;\n    const poi_status = authentication?.identity?.status;\n    const onfido_status = authentication?.identity?.services?.onfido?.status;\n    const manual_status = authentication?.identity?.services?.manual?.status;\n    const poa_status = authentication?.document?.status;\n\n    const STATUS = {\n        NONE: 'none',\n        VERIFIED: 'verified',\n        PENDING: 'pending',\n        REJECTED: 'rejected',\n        EXPIRED: 'expired',\n        SUSPECTED: 'suspected',\n    } as const;\n    const failed_cases = [STATUS.REJECTED, STATUS.EXPIRED, STATUS.SUSPECTED];\n\n    //@ts-expect-error we can ignore this error since we are checking the status and returning true or false\n    const need_poa_resubmission = poa_status && failed_cases.includes(poa_status);\n    const poa_pending = poa_status === STATUS.PENDING;\n    const poa_not_submitted = poa_status === STATUS.NONE;\n\n    const poi_verified_by_onfido_or_manual = [onfido_status, manual_status].includes(STATUS.VERIFIED);\n    const poi_pending_by_onfido_or_manual =\n        [onfido_status, manual_status].includes(STATUS.PENDING) && !poi_verified_by_onfido_or_manual;\n\n    const poi_not_submitted_by_onfido_or_manual = [onfido_status, manual_status].every(\n        status => status === STATUS.NONE\n    );\n    const need_poi_submission = !poi_pending_by_onfido_or_manual && !poi_verified_by_onfido_or_manual;\n\n    const need_poi_resubmission = !poi_not_submitted_by_onfido_or_manual && need_poi_submission;\n    const is_verified = poi_status === STATUS.VERIFIED && poa_status === STATUS.VERIFIED;\n\n    const getMFAccountStatus = () => {\n        if (poa_status && onfido_status && manual_status) {\n            if (need_poi_resubmission || need_poa_resubmission) {\n                return ACCOUNT_BADGE_STATUS.FAILED;\n            } else if (poi_not_submitted_by_onfido_or_manual || poa_not_submitted) {\n                return ACCOUNT_BADGE_STATUS.NEEDS_VERIFICATION;\n            } else if (poi_pending_by_onfido_or_manual || poa_pending) {\n                return ACCOUNT_BADGE_STATUS.PENDING;\n            }\n            return null;\n        }\n        return null;\n    };\n    const getVerificationStatus = () => (!is_verified ? { poi_status, poa_status, valid_tin: 1, required_tin: 1 } : {});\n\n    return {\n        mf_account_status: getMFAccountStatus(),\n        kyc_status: getVerificationStatus(),\n    };\n};\n\nexport default useGetMFAccountStatus;\n","import { useStore } from '@deriv/stores';\n\nconst useHasActiveRealAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n\n    const has_active_real_account = active_accounts.some(account => account.is_virtual === 0);\n\n    return has_active_real_account;\n};\n\nexport default useHasActiveRealAccount;\n","import { useStore } from '@deriv/stores';\n\nconst useHasMaltaInvestAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n    const has_malta_invest_account = active_accounts.some(\n        account => account.landing_company_shortcode === 'maltainvest'\n    );\n\n    return has_malta_invest_account;\n};\n\nexport default useHasMaltaInvestAccount;\n","import { useStore } from '@deriv/stores';\nimport useHasActiveRealAccount from './useHasActiveRealAccount';\n\nconst useHasSetCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n    const has_active_real_account = useHasActiveRealAccount();\n\n    const has_real_account = account_list\n        .filter(account => !account.is_virtual)\n        .some(account => account.title !== 'Real' && account.title !== 'Investment');\n\n    const has_set_currency = has_real_account || !has_active_real_account;\n\n    return has_set_currency;\n};\n\nexport default useHasSetCurrency;\n","import { useStore } from '@deriv/stores';\n\nconst useHasSvgAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n    const has_svg_account = active_accounts.some(account => account.landing_company_shortcode === 'svg');\n\n    return has_svg_account;\n};\n\nexport default useHasSvgAccount;\n","import React from 'react';\nimport Cookies from 'js-cookie';\nimport { deriv_urls } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport useP2PSettings from './useP2PSettings';\n\nconst useIsP2PEnabled = () => {\n    const {\n        p2p_settings,\n        rest: { isLoading, isSubscribed },\n    } = useP2PSettings();\n    const { client, traders_hub } = useStore();\n    // Todo: to replace it with useAuthorize hook\n    const { currency, email, is_virtual, loginid, setIsP2PEnabled } = client;\n    const { is_low_risk_cr_eu_real } = traders_hub;\n\n    const is_p2p_supported_currency = Boolean(\n        p2p_settings?.supported_currencies?.includes(currency.toLocaleLowerCase())\n    );\n    const is_p2p_enabled = is_p2p_supported_currency && !is_virtual && !is_low_risk_cr_eu_real;\n\n    // Todo: should replace with the next line instead once BE is fixed.\n    // const is_p2p_enabled = data?.disabled === 0;\n\n    React.useEffect(() => {\n        setIsP2PEnabled(is_p2p_enabled);\n\n        if (email && loginid) {\n            const domain = /deriv\\.(com|me|be)/.test(window.location.hostname)\n                ? deriv_urls.DERIV_HOST_NAME\n                : window.location.hostname;\n\n            Cookies.set('is_p2p_disabled', (!is_p2p_enabled).toString(), { domain, secure: true, sameSite: 'none' });\n        }\n    }, [email, is_p2p_enabled, loginid, setIsP2PEnabled]);\n\n    return {\n        is_p2p_enabled,\n        is_p2p_enabled_loading: isLoading,\n        is_p2p_enabled_success: isSubscribed,\n    };\n};\n\nexport default useIsP2PEnabled;\n","import { useStore } from '@deriv/stores';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\nimport useHasSvgAccount from './useHasSvgAccount';\n\nconst useIsRealAccountNeededForCashier = () => {\n    const { traders_hub } = useStore();\n    const { is_eu_user, is_real } = traders_hub;\n\n    const has_svg_account = useHasSvgAccount();\n    const has_maltainvest_account = useHasMaltaInvestAccount();\n\n    const no_real_mf_account = has_svg_account && !has_maltainvest_account && is_eu_user;\n\n    const no_real_cr_account = !has_svg_account && has_maltainvest_account && !is_eu_user;\n\n    const is_real_account_needed = no_real_mf_account || no_real_cr_account;\n\n    const is_real_account_needed_for_cashier = is_real_account_needed && is_real;\n\n    return is_real_account_needed_for_cashier;\n};\n\nexport default useIsRealAccountNeededForCashier;\n","import { ACCOUNT_BADGE_STATUS } from '@deriv/shared';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\nimport useGetMFAccountStatus from './useGetMFAccountStatus';\nimport { useStore } from '@deriv/stores';\n\nconst useMFAccountStatus = () => {\n    const {\n        client: { is_eu },\n    } = useStore();\n    const has_malta_invest_account = useHasMaltaInvestAccount();\n    const { mf_account_status } = useGetMFAccountStatus();\n\n    const should_show_status_for_multipliers_account =\n        is_eu &&\n        has_malta_invest_account &&\n        mf_account_status &&\n        [ACCOUNT_BADGE_STATUS.PENDING, ACCOUNT_BADGE_STATUS.FAILED, ACCOUNT_BADGE_STATUS.NEEDS_VERIFICATION].includes(\n            mf_account_status\n        );\n    return should_show_status_for_multipliers_account ? mf_account_status : null;\n};\n\nexport default useMFAccountStatus;\n","import React from 'react';\nimport { useMutation } from '@deriv/api';\nimport { TSocketRequestPayload } from '@deriv/api/types';\n\ntype TNotificationEventPayload = TSocketRequestPayload<'notification_event'>['payload'];\n\n/**\n * Hook to send notification event to the server\n * @name useNotificationEvent\n * @returns response, mutation function and other properties from useRequest hook\n */\nconst useNotificationEvent = () => {\n    const { data, mutate, ...rest } = useMutation('notification_event');\n\n    /**\n     * Function to send notification event to the server\n     * @param payload - notification event payload\n     */\n    const send = React.useCallback((payload: TNotificationEventPayload) => mutate({ payload }), [mutate]);\n\n    return {\n        notification_event: data?.notification_event,\n        send,\n        ...rest,\n    };\n};\n\nexport default useNotificationEvent;\n","import { useStore } from '@deriv/stores';\n\nconst useOnrampVisible = () => {\n    const { client } = useStore();\n    const { website_status, currency, is_virtual } = client;\n\n    const is_onramp_visible =\n        !is_virtual &&\n        !!website_status?.currencies_config?.[currency] &&\n        //@ts-expect-error need to update `@deriv/api-types` library to the latest version\n        website_status?.currencies_config?.[currency].platform.ramp.length > 0;\n\n    return is_onramp_visible;\n};\n\nexport default useOnrampVisible;\n","import { useEffect, useState } from 'react';\nimport { useStore } from '@deriv/stores';\n\ntype TNotification = {\n    order_id: string;\n    is_seen: boolean;\n    is_active: boolean;\n};\n\ntype TClientData = {\n    is_cached: boolean;\n    notifications: TNotification[];\n};\n\ntype TP2PSettings = Record<string, TClientData>;\n\nconst useP2PNotificationCount = () => {\n    const [p2p_settings, setP2PSettings] = useState<TP2PSettings>(\n        JSON.parse(localStorage.getItem('p2p_settings') || '{}')\n    );\n    const { client } = useStore();\n    const { loginid } = client;\n    const notifications = loginid ? p2p_settings[loginid]?.notifications : null;\n\n    useEffect(() => {\n        const onStorageChanged = () => {\n            const data = localStorage.getItem('p2p_settings');\n\n            if (data) {\n                setP2PSettings(JSON.parse(data));\n            }\n        };\n\n        window.addEventListener('storage', onStorageChanged);\n\n        return () => {\n            window.removeEventListener('storage', onStorageChanged);\n        };\n    }, []);\n\n    const p2p_notification_count = notifications?.filter(notification => !notification.is_seen).length || 0;\n\n    return p2p_notification_count;\n};\n\nexport default useP2PNotificationCount;\n","import { useContext } from 'react';\nimport { P2PSettingsContext } from '@deriv/stores';\n\n/**\n * A custom hook to get the p2p_settings information from `p2p_settings` endpoint\n */\nconst useP2PSettings = () => {\n    const context = useContext(P2PSettingsContext);\n\n    if (!context) {\n        throw new Error('useP2PSettingsContext must be used within a P2PSettingsProvider');\n    }\n\n    return context;\n};\n\nexport default useP2PSettings;\n","import { useFetch } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\n\nconst usePaymentAgentList = (currency?: string) => {\n    const { client } = useStore();\n    const { residence } = client;\n\n    const { data, ...rest } = useFetch('paymentagent_list', {\n        payload: { paymentagent_list: residence, currency },\n        options: { enabled: Boolean(residence) },\n    });\n\n    return {\n        data: data?.paymentagent_list?.list,\n        ...rest,\n    };\n};\n\nexport default usePaymentAgentList;\n","import { useFetch } from '@deriv/api';\nimport { WS } from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport { useEffect, useState } from 'react';\n\nconst usePaymentAgentTransferVisible = () => {\n    const { client } = useStore();\n    const { is_authorize, is_logged_in } = client;\n    const [is_websocket_authorized, setIsWebSocketAuthorized] = useState(false);\n\n    useEffect(() => {\n        const checkAuthorize = async () => {\n            try {\n                const check_websocket_authorized = await WS.wait('authorize');\n                if (check_websocket_authorized) setIsWebSocketAuthorized(is_authorize && is_logged_in);\n            } catch (error) {\n                console.error('Error while authorizing:', error); // eslint-disable-line\n            }\n        };\n\n        checkAuthorize();\n    }, [is_authorize, is_logged_in]);\n\n    const { data, ...rest } = useFetch('get_settings', { options: { enabled: Boolean(is_websocket_authorized) } });\n    const is_payment_agent_transfer_visible = Boolean(data?.get_settings?.is_authenticated_payment_agent);\n\n    return {\n        data: is_payment_agent_transfer_visible,\n        ...rest,\n    };\n};\n\nexport default usePaymentAgentTransferVisible;\n","import { useQuery } from '@deriv/api';\nimport { TSocketRequestQueryOptions } from '@deriv/api/types';\n\n/** A custom hook that gets the residence list. */\nconst useResidenceList = (options?: TSocketRequestQueryOptions<'residence_list'>) => {\n    const { data, ...residence_list_rest } = useQuery('residence_list', {\n        options: {\n            staleTime: Infinity,\n            ...options,\n        },\n    });\n\n    return {\n        /** The residence list */\n        data: data?.residence_list ?? [],\n        ...residence_list_rest,\n    };\n};\n\nexport default useResidenceList;\n","import { useStore } from '@deriv/stores';\n\n/** A custom hook used for enabling residenceSelfDeclaration checkbox in terms of use section in real account signup */\nconst useResidenceSelfDeclaration = () => {\n    const { client } = useStore();\n    const { residence, residence_list } = client;\n    const is_residence_self_declaration_required = !!residence_list?.find(\n        residence_item => residence_item?.value === residence\n    )?.account_opening_self_declaration_required;\n\n    return { is_residence_self_declaration_required };\n};\n\nexport default useResidenceSelfDeclaration;\n","import { useQuery } from '@deriv/api';\nimport { TSocketRequestPayload } from '@deriv/api/types';\n\ntype TServiceTokenPayload = TSocketRequestPayload<'service_token'>['payload'];\n\n/**\n * Hook to get the service token for using 3rd party SDK\n * @name useServiceToken\n * @param payload to be sent while making the API call\n * @returns response and its status\n */\nconst useServiceToken = (payload: TServiceTokenPayload) => {\n    const { data, ...rest } = useQuery('service_token', {\n        payload,\n        options: { retry: 3, enabled: Boolean(payload) },\n    });\n\n    return {\n        service_token: data?.service_token,\n        ...rest,\n    };\n};\n\nexport default useServiceToken;\n","import { useQuery } from '@deriv/api';\nimport { TSocketRequestQueryOptions } from '@deriv/api/types';\n/**\n * Custom hook to get states list for a particular country.\n * @returns an object with the states list and the options to manage API response.\n */\nconst useStatesList = (country: string, options?: TSocketRequestQueryOptions<'states_list'>) => {\n    const { data, ...rest } = useQuery('states_list', {\n        // @ts-expect-error The `states_list` type from `@deriv/api-types` is not correct.\n        // The type should be `string`, but it's an alias to string type.\n        payload: { states_list: country },\n        options: {\n            enabled: !!country,\n            staleTime: Infinity,\n            ...options,\n        },\n    });\n\n    return { ...rest, data: data?.states_list ?? [] };\n};\n\nexport default useStatesList;\n","import { useMemo } from 'react';\nimport useStoreWalletAccountsList from './useStoreWalletAccountsList';\n\ntype TLinkedAccount = {\n    loginid?: string;\n    platform?: Exclude<'ctrader' | 'derivez' | 'dtrade' | 'dxtrade' | 'mt5', 'dwallet'>;\n};\n\ntype TReturnObjectType = {\n    [key in Exclude<TLinkedAccount['platform'], undefined>]: TLinkedAccount[];\n};\n\n/** A custom hook to get the list of linked accounts of all wallets */\nconst useStoreLinkedWalletsAccounts = () => {\n    const { data: wallets_list } = useStoreWalletAccountsList();\n\n    // define object with accounts\n    const linked_trading_accounts = useMemo(() => {\n        const linked_accounts: TReturnObjectType = {\n            ctrader: [],\n            derivez: [],\n            dtrade: [],\n            dxtrade: [],\n            mt5: [],\n        };\n\n        wallets_list?.forEach(account => {\n            const linked = account.linked_to as TLinkedAccount[];\n\n            linked?.forEach(linked_to_account => {\n                if (linked_to_account?.platform && linked_to_account?.loginid)\n                    linked_accounts[linked_to_account.platform].push(linked_to_account);\n            });\n        });\n\n        return linked_accounts;\n    }, [wallets_list]);\n\n    /** List of wallets for current user. */\n    return linked_trading_accounts;\n};\n\nexport default useStoreLinkedWalletsAccounts;\n","import { useMemo } from 'react';\nimport { useStore } from '@deriv/stores';\n\nconst currency_to_icon_mapper: Record<string, Record<'light' | 'dark', string>> = {\n    Demo: {\n        dark: 'IcWalletDerivDemoDark',\n        light: 'IcWalletDerivDemoLight',\n    },\n    USD: {\n        dark: 'IcWalletCurrencyUsd',\n        light: 'IcWalletCurrencyUsd',\n    },\n    EUR: {\n        dark: 'IcWalletCurrencyEur',\n        light: 'IcWalletCurrencyEur',\n    },\n    AUD: {\n        dark: 'IcWalletCurrencyAud',\n        light: 'IcWalletCurrencyAud',\n    },\n    GBP: {\n        dark: 'IcWalletCurrencyGbp',\n        light: 'IcWalletCurrencyGbp',\n    },\n    BTC: {\n        dark: 'IcWalletBitcoinDark',\n        light: 'IcWalletBitcoinLight',\n    },\n    ETH: {\n        dark: 'IcWalletEthereumDark',\n        light: 'IcWalletEthereumLight',\n    },\n    USDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    eUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    tUSDT: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    UST: {\n        dark: 'IcWalletTetherDark',\n        light: 'IcWalletTetherLight',\n    },\n    LTC: {\n        dark: 'IcWalletLiteCoinDark',\n        light: 'IcWalletLiteCoinLight',\n    },\n    USDC: {\n        dark: 'IcWalletUsdCoinDark',\n        light: 'IcWalletUsdCoinLight',\n    },\n    XRP: {\n        dark: 'IcWalletXrpDark',\n        light: 'IcWalletXrpLight',\n    },\n};\n\n/** A custom hook to get the list of wallets for the current user. */\nconst useStoreWalletAccountsList = () => {\n    const { client } = useStore();\n    const { accounts, is_crypto } = client;\n\n    // Add additional information to each wallet.\n    const wallets = useMemo(() => {\n        return Object.keys(accounts)\n            ?.filter(id => accounts?.[id].account_category === 'wallet')\n            ?.map(id => {\n                const wallet = accounts?.[id];\n\n                const loginid = id;\n                const currency = wallet.currency;\n                const is_disabled = Boolean(wallet.is_disabled);\n                const is_virtual = Boolean(wallet.is_virtual);\n\n                const fiat_or_crypto = is_crypto(currency) ? 'crypto' : 'fiat';\n                const icon_type = is_virtual ? 'demo' : fiat_or_crypto;\n                const landing_company_name = wallet.landing_company_name?.replace('maltainvest', 'malta');\n                const is_malta_wallet = landing_company_name === 'malta';\n                const dtrade_loginid = wallet?.linked_to?.find(account => account?.platform === 'dtrade')?.loginid;\n                const dtrade_balance = accounts?.[dtrade_loginid ?? '']?.balance;\n                const is_dtrader_account_disabled = Boolean(accounts?.[dtrade_loginid ?? '']?.is_disabled);\n\n                const wallet_currency_type = is_virtual ? 'Demo' : currency || '';\n                const icons = currency_to_icon_mapper[wallet_currency_type];\n\n                const gradients = {\n                    /** The gradient class name for the wallet header background. */\n                    header: {\n                        dark: `wallet-header__${wallet_currency_type.toLowerCase()}-bg--dark`,\n                        light: `wallet-header__${wallet_currency_type.toLowerCase()}-bg`,\n                    },\n                    /** The gradient class name for the wallet card background. */\n                    card: {\n                        dark: `wallet-card__${wallet_currency_type.toLowerCase()}-bg--dark`,\n                        light: `wallet-card__${wallet_currency_type.toLowerCase()}-bg`,\n                    },\n                };\n\n                return {\n                    ...wallet,\n                    dtrade_loginid,\n                    dtrade_balance,\n                    icons,\n                    icon_type,\n                    is_disabled,\n                    is_virtual,\n                    is_malta_wallet,\n                    landing_company_name,\n                    loginid,\n                    gradients,\n                    is_dtrader_account_disabled,\n                } as const;\n            });\n    }, [accounts, is_crypto]);\n\n    // Sort wallet accounts alphabetically by fiat, crypto, then virtual.\n    const sorted_wallets = useMemo(() => {\n        if (!wallets) return;\n\n        return [...wallets].sort((a, b) => {\n            if (a.is_virtual !== b.is_virtual) {\n                return a.is_virtual ? 1 : -1;\n            } else if (is_crypto(a.currency) !== is_crypto(b.currency)) {\n                return is_crypto(a.currency) ? 1 : -1;\n            }\n\n            return (a.currency || 'USD').localeCompare(b.currency || 'USD');\n        });\n    }, [is_crypto, wallets]);\n\n    return {\n        /** List of wallets for current user. */\n        data: sorted_wallets,\n        /** Indicating whether the user has a wallet */\n        has_wallet: sorted_wallets && sorted_wallets.length > 0,\n    };\n};\n\nexport default useStoreWalletAccountsList;\n","import { useMutation } from '@deriv/api';\nimport { useCallback } from 'react';\n\nconst useTinValidations = () => {\n    const { data, mutate: _mutate, ...rest } = useMutation('tin_validations');\n\n    const mutate = useCallback((tax_residence: string) => _mutate({ payload: { tax_residence } }), [_mutate]);\n\n    return {\n        tin_validation_config: data?.tin_validations ?? {},\n        mutate,\n        ...rest,\n    };\n};\n\nexport default useTinValidations;\n","import { useCallback, useState } from 'react';\nimport { useRequest } from '@deriv/api';\nimport { useStore } from '@deriv/stores';\nimport useCountdown from './useCountdown';\n\nconst RESEND_COUNTDOWN = 60;\n\nconst useVerifyEmail = (\n    type: Parameters<ReturnType<typeof useRequest<'verify_email'>>['mutate']>[0]['payload']['type']\n) => {\n    const WS = useRequest('verify_email');\n    const counter = useCountdown({ from: RESEND_COUNTDOWN });\n    const { client } = useStore();\n    const [sent_count, setSentCount] = useState(0);\n\n    const send = useCallback(\n        (email?: Parameters<ReturnType<typeof useRequest<'verify_email'>>['mutate']>[0]['payload']['verify_email']) => {\n            const request_email = email ?? client.email;\n            if (!request_email) return;\n            if (counter.is_running) return;\n\n            counter.reset();\n            counter.start();\n\n            setSentCount(count => count + 1);\n\n            WS.mutate({ payload: { verify_email: request_email, type } });\n        },\n        [WS, client.email, counter, type]\n    );\n\n    const sendPhoneNumberVerifyEmail = useCallback(() => {\n        WS.mutate({ payload: { verify_email: client.email, type } });\n    }, [WS, client.email, type]);\n\n    return {\n        WS,\n        is_loading: WS.isLoading,\n        error: WS.error,\n        data: WS.data,\n        counter: counter.count,\n        is_counter_running: counter.is_running,\n        sent_count,\n        has_been_sent: sent_count !== 0,\n        send,\n        sendPhoneNumberVerifyEmail,\n    };\n};\n\nexport default useVerifyEmail;\n","import merge from 'lodash.merge';\n\nimport type { TCoreStores, TStores } from '../types';\n\nconst mock = (): TStores & { is_mock: boolean } => {\n    const common_store_error = {\n        app_routing_history: [],\n        header: '',\n        message: '',\n        type: '',\n        redirect_label: '',\n        redirect_to: '',\n        should_clear_error_on_click: false,\n        should_show_refresh: false,\n        redirectOnClick: jest.fn(),\n    };\n    return {\n        is_mock: true,\n        client: {\n            account_settings: {},\n            account_type: 'virtual',\n            accounts: {},\n            active_account_landing_company: '',\n            trading_platform_available_accounts: [],\n            ctrader_trading_platform_available_accounts: [],\n            account_limits: {},\n            self_exclusion: {},\n            getSelfExclusion: jest.fn(),\n            account_status: {\n                p2p_poa_required: 1,\n                authentication: {\n                    attempts: {\n                        count: 1,\n                        history: [\n                            {\n                                country_code: 'id',\n                                id: '8919',\n                                service: 'manual',\n                                status: 'verified',\n                                timestamp: 1674633681,\n                            },\n                        ],\n                        latest: {\n                            country_code: 'id',\n                            id: '8919',\n                            service: 'manual',\n                            status: 'verified',\n                            timestamp: 1674633681,\n                        },\n                    },\n                    document: {\n                        status: 'verified',\n                    },\n\n                    identity: {\n                        services: {\n                            idv: {\n                                last_rejected: [],\n                                reported_properties: {},\n                                status: 'none',\n                                submissions_left: 3,\n                            },\n                            manual: {\n                                status: 'none',\n                            },\n                            onfido: {\n                                country_code: 'IDN',\n                                documents_supported: [\n                                    'Driving Licence',\n                                    'National Identity Card',\n                                    'Passport',\n                                    'Residence Permit',\n                                ],\n                                is_country_supported: 1,\n                                last_rejected: [],\n                                reported_properties: {},\n                                status: 'none',\n                                submissions_left: 3,\n                            },\n                        },\n                        status: 'verified',\n                    },\n                    income: {\n                        status: 'none',\n                    },\n                    needs_verification: [],\n                    ownership: {\n                        requests: [],\n                        status: 'none',\n                    },\n                },\n                currency_config: {\n                    USD: {\n                        is_deposit_suspended: 0,\n                        is_withdrawal_suspended: 0,\n                    },\n                },\n                p2p_status: 'none',\n                prompt_client_to_authenticate: 0,\n                risk_classification: 'low',\n                status: [\n                    'age_verification',\n                    'allow_document_upload',\n                    'authenticated',\n                    'dxtrade_password_not_set',\n                    'financial_information_not_complete',\n                    'idv_disallowed',\n                    'mt5_password_not_set',\n                    'trading_experience_not_complete',\n                ],\n            },\n            balance: '',\n            can_change_fiat_currency: false,\n            clients_country: '',\n            currency: '',\n            currencies_list: [{ text: '', value: '', has_tool_tip: false }],\n            current_currency_type: '',\n            current_fiat_currency: '',\n            current_landing_company: { support_professional_client: '' },\n            cfd_score: 0,\n            ctrader_accounts_list: [],\n            ctrader_total_balance: 0,\n            email_address: '',\n            setCFDScore: jest.fn(),\n            getLimits: jest.fn(),\n            has_active_real_account: false,\n            getTwoFAStatus: jest.fn(),\n            has_fiat: false,\n            has_logged_out: false,\n            has_cookie_account: false,\n            has_maltainvest_account: false,\n            has_restricted_mt5_account: false,\n            has_wallet: false,\n            initialized_broadcast: false,\n            is_trading_platform_available_account_loaded: false,\n            setIsTradingPlatformAvailableAccountLoaded: jest.fn(),\n            is_account_setting_loaded: false,\n            is_authorize: false,\n            is_deposit_lock: false,\n            is_duplicate_dob_phone: false,\n            is_dxtrade_allowed: false,\n            is_dxtrade_password_not_set: false,\n            is_eu: false,\n            is_eu_country: false,\n            has_residence: false,\n            is_financial_account: false,\n            is_financial_assessment_needed: false,\n            is_financial_information_incomplete: false,\n            is_low_risk: false,\n            is_identity_verification_needed: false,\n            is_client_store_initialized: false,\n            is_landing_company_loaded: false,\n            is_logged_in: false,\n            is_logging_in: false,\n            is_mt5_password_not_set: false,\n            is_mt5_account_list_updated: false,\n            is_p2p_enabled: false,\n            is_proof_of_ownership_enabled: false,\n            is_poa_expired: false,\n            is_populating_dxtrade_account_list: false,\n            is_populating_ctrader_account_list: false,\n            is_social_signup: false,\n            is_single_currency: false,\n            is_switching: false,\n            is_high_risk: false,\n            is_trading_experience_incomplete: false,\n            is_unwelcome: false,\n            is_virtual: false,\n            is_withdrawal_lock: false,\n            is_populating_account_list: false,\n            landing_company_shortcode: '',\n            local_currency_config: {\n                currency: '',\n                decimal_places: 0,\n            },\n            loginid: '',\n            pre_switch_broadcast: false,\n            residence: '',\n            is_svg: false,\n            responseMt5LoginList: jest.fn(),\n            responseTradingPlatformAccountsList: jest.fn(),\n            setFinancialAndTradingAssessment: jest.fn(),\n            standpoint: {\n                financial_company: '',\n                gaming_company: '',\n                maltainvest: false,\n                svg: false,\n            },\n            switchAccount: jest.fn(),\n            verification_code: {\n                payment_agent_withdraw: '',\n                payment_withdraw: '',\n                phone_number_verification: '',\n                request_email: '',\n                reset_password: '',\n                signup: '',\n                system_email_change: '',\n                trading_platform_dxtrade_password_reset: '',\n                trading_platform_mt5_password_reset: '',\n            },\n            email: '',\n            fetchStatesList: jest.fn(),\n            setVerificationCode: jest.fn(),\n            updateAccountStatus: jest.fn(),\n            updateMT5AccountDetails: jest.fn(),\n            is_authentication_needed: false,\n            authentication_status: {\n                document_status: '',\n                identity_status: '',\n            },\n            getToken: jest.fn(),\n            phone_settings: {\n                carriers: [],\n                countries: [\n                    {\n                        calling_country_code: '',\n                        carriers: [],\n                        country_code: '',\n                        display_name: '',\n                    },\n                ],\n            },\n            setPhoneSettings: jest.fn(),\n            mt5_login_list: [],\n            logout: jest.fn(),\n            should_allow_authentication: false,\n            should_allow_poinc_authentication: false,\n            active_accounts: [],\n            account_list: [],\n            available_crypto_currencies: [],\n            selectCurrency: jest.fn(),\n            setAccountStatus: jest.fn(),\n            setBalanceOtherAccounts: jest.fn(),\n            setInitialized: jest.fn(),\n            setIsClientStoreInitialized: jest.fn(),\n            setLogout: jest.fn(),\n            setP2pAdvertiserInfo: jest.fn(),\n            setPreSwitchAccount: jest.fn(),\n            social_identity_provider: '',\n            switched: false,\n            switch_broadcast: false,\n            switchEndSignal: jest.fn(),\n            isEligibleForMoreRealMt5: jest.fn(),\n            isEligibleForMoreDemoMt5Svg: jest.fn(),\n            updateMT5Status: jest.fn(),\n            fetchResidenceList: jest.fn(),\n            residence_list: [],\n            should_restrict_bvi_account_creation: false,\n            should_restrict_vanuatu_account_creation: false,\n            fetchAccountSettings: jest.fn(),\n            setAccountSettings: jest.fn(),\n            upgradeable_landing_companies: [],\n            is_populating_mt5_account_list: false,\n            landing_companies: {},\n            landing_company: {},\n            upgradeable_currencies: [],\n            getChangeableFields: jest.fn(),\n            is_mt5_allowed: false,\n            mt5_disabled_signup_types: {\n                real: false,\n                demo: false,\n            },\n            dxtrade_disabled_signup_types: {\n                real: false,\n                demo: false,\n            },\n            dxtrade_accounts_list_error: null,\n            //@ts-expect-error we only need partial values\n            website_status: {\n                dxtrade_status: {\n                    all: 0,\n                    demo: 0,\n                    real: 0,\n                },\n                mt5_status: {\n                    real: [],\n                    demo: [],\n                },\n            },\n            is_fully_authenticated: false,\n            states_list: [],\n            is_crypto: jest.fn(),\n            dxtrade_accounts_list: [],\n            default_currency: 'USD',\n            resetVirtualBalance: jest.fn(),\n            has_enabled_two_fa: false,\n            setTwoFAStatus: jest.fn(),\n            has_changed_two_fa: false,\n            setTwoFAChangedStatus: jest.fn(),\n            real_account_creation_unlock_date: '',\n            has_any_real_account: false,\n            setPrevAccountType: jest.fn(),\n            prev_account_type: 'demo',\n            setLoginInformation: jest.fn(),\n            init: jest.fn(),\n            setLoginId: jest.fn(),\n            resetLocalStorageValues: jest.fn(),\n            setIsAlreadyAttempted: jest.fn(),\n            is_already_attempted: false,\n            is_bot_allowed: false,\n            account_open_date: undefined,\n            setAccounts: jest.fn(),\n            updateMt5LoginList: jest.fn(),\n            should_show_eu_error: false,\n            is_options_blocked: false,\n            setIsP2PEnabled: jest.fn(),\n            real_account_signup_form_data: [],\n            real_account_signup_form_step: 0,\n            setRealAccountSignupFormData: jest.fn(),\n            setRealAccountSignupFormStep: jest.fn(),\n            wallet_migration_state: 'ineligible',\n            startWalletMigration: jest.fn(),\n            resetWalletMigration: jest.fn(),\n            is_wallet_migration_request_is_in_progress: false,\n            is_passkey_supported: false,\n            is_phone_number_verification_enabled: false,\n            passkeys_list: [],\n            should_show_passkey_notification: false,\n            setIsPasskeySupported: jest.fn(),\n            setIsPhoneNumberVerificationEnabled: jest.fn(),\n            setPasskeysStatusToCookie: jest.fn(),\n            setShouldShowPasskeyNotification: jest.fn(),\n            fetchShouldShowPasskeyNotification: jest.fn(),\n            fetchPasskeysList: jest.fn(),\n            exchange_rates: {},\n            getExchangeRate: jest.fn(),\n            subscribeToExchangeRate: jest.fn(),\n            unsubscribeFromExchangeRate: jest.fn(),\n            unsubscribeFromAllExchangeRates: jest.fn(),\n            virtual_account_loginid: '',\n            is_cr_account: false,\n            is_mf_account: false,\n            is_tradershub_tracking: false,\n            setTradersHubTracking: jest.fn(),\n            account_time_of_closure: undefined,\n            is_account_to_be_closed_by_residence: false,\n            statement: {},\n            should_show_trustpilot_notification: false,\n        },\n        common: {\n            error: common_store_error,\n            current_language: 'EN',\n            isCurrentLanguage: jest.fn(),\n            is_from_derivgo: false,\n            is_from_outside_cashier: false,\n            is_from_tradershub_os: false,\n            is_socket_opened: false,\n            has_error: false,\n            platform: '',\n            routeBackInApp: jest.fn(),\n            routeTo: jest.fn(),\n            changeCurrentLanguage: jest.fn(),\n            changeSelectedLanguage: jest.fn(),\n            resetServicesError: jest.fn(),\n            is_network_online: false,\n            network_status: {},\n            services_error: {},\n            server_time: new Date() as unknown as TCoreStores['common']['server_time'],\n            setError: jest.fn(),\n            setSelectedContractType: jest.fn(),\n            setServicesError: jest.fn(),\n            showError: jest.fn(),\n            is_language_changing: false,\n            setAppstorePlatform: jest.fn(),\n            app_routing_history: [],\n            getExchangeRate: jest.fn(),\n        },\n        ui: {\n            advanced_duration_unit: 't',\n            advanced_expiry_type: 'duration',\n            account_switcher_disabled_message: '',\n            app_contents_scroll_ref: {\n                current: null,\n            },\n            current_focus: null,\n            duration_t: 5,\n            getDurationFromUnit: jest.fn(),\n            is_account_settings_visible: false,\n            is_account_switcher_disabled: false,\n            is_advanced_duration: false,\n            is_history_tab_active: false,\n            is_loading: false,\n            is_cashier_visible: false,\n            is_redirected_from_email: false,\n            is_wallet_modal_visible: false,\n            is_chart_layout_default: false,\n            is_chart_countdown_visible: false,\n            is_closing_create_real_account_modal: false,\n            is_forced_to_exit_pnv: false,\n            is_phone_verification_completed: false,\n            is_dark_mode_on: false,\n            is_from_signup_account: false,\n            is_from_success_deposit_modal: false,\n            is_language_settings_modal_on: false,\n            is_desktop: false,\n            is_app_disabled: false,\n            has_only_forward_starting_contracts: false,\n            header_extension: null,\n            is_link_expired_modal_visible: false,\n            is_mobile: false,\n            is_tablet: false,\n            is_mobile_language_menu_open: false,\n            is_positions_drawer_on: false,\n            is_reports_visible: false,\n            is_verification_submitted: false,\n            is_reset_email_modal_visible: false,\n            is_reset_password_modal_visible: false,\n            is_route_modal_on: false,\n            is_services_error_visible: false,\n            should_show_phone_number_otp: false,\n            is_trading_assessment_for_existing_user_enabled: false,\n            is_wallets_onboarding_tour_guide_visible: false,\n            setIsForcedToExitPnv: jest.fn(),\n            setIsPhoneVerificationCompleted: jest.fn(),\n            setRedirectFromEmail: jest.fn(),\n            setShouldShowPhoneNumberOTP: jest.fn(),\n            disableApp: jest.fn(),\n            enableApp: jest.fn(),\n            setCurrentFocus: jest.fn(),\n            toggleAccountsDialog: jest.fn(),\n            toggleAccountSettings: jest.fn(),\n            toggleCashier: jest.fn(),\n            setDarkMode: jest.fn(),\n            setReportsTabIndex: jest.fn(),\n            has_real_account_signup_ended: false,\n            real_account_signup_target: '',\n            real_account_signup: {\n                active_modal_index: -1,\n                previous_currency: '',\n                current_currency: '',\n                success_message: '',\n                error_message: '',\n            },\n            resetRealAccountSignupParams: jest.fn(),\n            notification_messages_ui: jest.fn(),\n            onChangeUiStore: jest.fn(),\n            openPositionsDrawer: jest.fn(),\n            openRealAccountSignup: jest.fn(),\n            setChartCountdown: jest.fn(),\n            setIsWalletModalVisible: jest.fn(),\n            setHasOnlyForwardingContracts: jest.fn(),\n            setIsClosingCreateRealAccountModal: jest.fn(),\n            setIsFromSuccessDepositModal: jest.fn(),\n            setIsFromSignupAccount: jest.fn(),\n            setMobileLanguageMenuOpen: jest.fn(),\n            setRealAccountSignupEnd: jest.fn(),\n            setPromptHandler: jest.fn(),\n            setPurchaseState: jest.fn(),\n            setAppContentsScrollRef: jest.fn(),\n            shouldNavigateAfterChooseCrypto: jest.fn(),\n            simple_duration_unit: 't',\n            toggleHistoryTab: jest.fn(),\n            toggleLanguageSettingsModal: jest.fn(),\n            togglePositionsDrawer: jest.fn(),\n            toggleResetEmailModal: jest.fn(),\n            toggleResetPasswordModal: jest.fn(),\n            toggleLinkExpiredModal: jest.fn(),\n            toggleServicesErrorModal: jest.fn(),\n            toggleSetCurrencyModal: jest.fn(),\n            addToast: jest.fn(),\n            removeToast: jest.fn(),\n            resetPurchaseStates: jest.fn(),\n            reports_route_tab_index: 1,\n            should_show_cancellation_warning: false,\n            should_show_one_time_deposit_modal: false,\n            should_show_account_success_modal: false,\n            should_trigger_tour_guide: false,\n            toggleCancellationWarning: jest.fn(),\n            setShouldShowOneTimeDepositModal: jest.fn(),\n            toggleAccountSuccessModal: jest.fn(),\n            toggleReports: jest.fn(),\n            setSubSectionIndex: jest.fn(),\n            sub_section_index: 0,\n            toggleReadyToDepositModal: jest.fn(),\n            is_ready_to_deposit_modal_visible: false,\n            is_real_acc_signup_on: false,\n            is_need_real_account_for_cashier_modal_visible: false,\n            is_verification_modal_visible: false,\n            is_mf_verification_pending_modal_visible: false,\n            is_mt5_migration_modal_enabled: false,\n            is_mt5_migration_modal_open: false,\n            toggleNeedRealAccountForCashierModal: jest.fn(),\n            is_switch_to_deriv_account_modal_visible: false,\n            openSwitchToRealAccountModal: jest.fn(),\n            is_top_up_virtual_open: false,\n            is_top_up_virtual_in_progress: false,\n            is_top_up_virtual_success: false,\n            closeTopUpModal: jest.fn(),\n            closeSuccessTopUpModal: jest.fn(),\n            is_cfd_reset_password_modal_enabled: false,\n            setCFDPasswordResetModal: jest.fn(),\n            openDerivRealAccountNeededModal: jest.fn(),\n            populateHeaderExtensions: jest.fn(),\n            populateSettingsExtensions: jest.fn(),\n            purchase_states: [],\n            setShouldShowCooldownModal: jest.fn(),\n            setIsVerificationModalVisible: jest.fn(),\n            setIsVerificationSubmitted: jest.fn(),\n            setShouldTriggerTourGuide: jest.fn(),\n            populateFooterExtensions: jest.fn(),\n            openAccountNeededModal: jest.fn(),\n            is_accounts_switcher_on: false,\n            openTopUpModal: jest.fn(),\n            toggleShouldShowRealAccountsList: jest.fn(),\n            is_reset_trading_password_modal_visible: false,\n            setResetTradingPasswordModalOpen: jest.fn(),\n            setIsMFVericationPendingModal: jest.fn(),\n            setMT5MigrationModalEnabled: jest.fn(),\n            toggleMT5MigrationModal: jest.fn(),\n            vanilla_trade_type: 'VANILLALONGCALL',\n            is_additional_kyc_info_modal_open: false,\n            isUrlUnavailableModalVisible: false,\n            setAccountSwitcherDisabledMessage: jest.fn(),\n            toggleUrlUnavailableModal: jest.fn(),\n            is_set_currency_modal_visible: false,\n            should_show_deposit_now_or_later_modal: false,\n            setShouldShowDepositNowOrLaterModal: jest.fn(),\n            should_show_crypto_transaction_processing_modal: false,\n            setShouldShowCryptoTransactionProcessingModal: jest.fn(),\n            is_trading_disabled_by_residence_modal_visible: false,\n            setIsTradingDisabledByResidenceModal: jest.fn(),\n            should_show_same_dob_phone_modal: false,\n            setShouldShowSameDOBPhoneModal: jest.fn(),\n            field_ref_to_focus: null,\n            setFieldRefToFocus: jest.fn(),\n            setHashedValue: jest.fn(),\n            url_hashed_values: '',\n            is_tnc_update_modal_open: false,\n            toggleTncUpdateModal: jest.fn(),\n            setIsWalletsOnboardingTourGuideVisible: jest.fn(),\n        },\n        traders_hub: {\n            getAccount: jest.fn(),\n            closeModal: jest.fn(),\n            combined_cfd_mt5_accounts: [],\n            available_cfd_accounts: [],\n            content_flag: '',\n            CFDs_restricted_countries: false,\n            openModal: jest.fn(),\n            selected_account: {\n                login: '',\n                account_id: '',\n            },\n            is_eu_user: false,\n            is_demo: false,\n            is_onboarding_visited: false,\n            is_first_time_visit: true,\n            setIsOnboardingVisited: jest.fn(),\n            setIsFirstTimeVisit: jest.fn(),\n            is_real: false,\n            selectRegion: jest.fn(),\n            setSelectedAccount: jest.fn(),\n            is_low_risk_cr_eu_real: false,\n            is_real_wallets_upgrade_on: false,\n            is_verification_docs_list_modal_visible: false,\n            toggleWalletsUpgrade: jest.fn(),\n            show_eu_related_content: false,\n            platform_real_balance: {\n                currency: '',\n                balance: 0,\n            },\n            cfd_demo_balance: {\n                currency: '',\n                balance: 0,\n            },\n            platform_demo_balance: {\n                currency: '',\n                balance: 0,\n            },\n            cfd_real_balance: {\n                currency: '',\n                balance: 0,\n            },\n            closeAccountTransferModal: jest.fn(),\n            toggleRegulatorsCompareModal: jest.fn(),\n            is_demo_low_risk: false,\n            financial_restricted_countries: false,\n            selected_account_type: 'real',\n            no_CR_account: false,\n            no_MF_account: false,\n            modal_data: {\n                active_modal: '',\n                data: {},\n            },\n            setTogglePlatformType: jest.fn(),\n            toggleAccountTransferModal: jest.fn(),\n            selectAccountType: jest.fn(),\n            is_wallet_migration_failed: false,\n            setWalletsMigrationFailedPopup: jest.fn(),\n            selected_platform_type: '',\n            available_platforms: [],\n            selected_region: 'All',\n            getExistingAccounts: jest.fn(),\n            available_dxtrade_accounts: [],\n            active_modal_tab: 'Deposit',\n            setWalletModalActiveTab: jest.fn(),\n            active_modal_wallet_id: '',\n            setWalletModalActiveWalletID: jest.fn(),\n            available_ctrader_accounts: [],\n            has_any_real_account: false,\n            startTrade: jest.fn(),\n            showTopUpModal: jest.fn(),\n            is_regulators_compare_modal_visible: false,\n            is_cfd_restricted_country: false,\n            setIsCFDRestrictedCountry: jest.fn(),\n            is_financial_restricted_country: false,\n            setIsFinancialRestrictedCountry: jest.fn(),\n            is_setup_real_account_or_go_to_demo_modal_visible: false,\n            setIsSetupRealAccountOrGoToDemoModalVisible: jest.fn(),\n            setVerificationModalOpen: jest.fn(),\n            selected_jurisdiction_kyc_status: {},\n            setSelectedJurisdictionKYCStatus: jest.fn(),\n            getDefaultJurisdiction: jest.fn(),\n            getMT5AccountKYCStatus: jest.fn(),\n        },\n        notifications: {\n            addNotificationMessage: jest.fn(),\n            addNotificationMessageByKey: jest.fn(),\n            addTradeNotification: jest.fn(),\n            client_notifications: {},\n            is_notifications_empty: true,\n            is_notifications_visible: false,\n            filterNotificationMessages: jest.fn(),\n            handleCurrencyRemovalNotification: jest.fn(),\n            notifications: [],\n            p2p_advertiser_info: undefined,\n            p2p_completed_orders: [],\n            refreshNotifications: jest.fn(),\n            removeAllNotificationMessages: jest.fn(),\n            removeNotifications: jest.fn(),\n            removeNotificationByKey: jest.fn(),\n            removeNotificationMessage: jest.fn(),\n            removeNotificationMessageByKey: jest.fn(),\n            removeTradeNotifications: jest.fn(),\n            setP2POrderProps: jest.fn(),\n            showAccountSwitchToRealNotification: jest.fn(),\n            showPOAAddressMismatchSuccessNotification: jest.fn(),\n            showPOAAddressMismatchFailureNotification: jest.fn(),\n            setP2PRedirectTo: jest.fn(),\n            setShouldShowPopups: jest.fn(),\n            toggleNotificationsModal: jest.fn(),\n            trade_notifications: [],\n        },\n        portfolio: {\n            active_positions: [],\n            active_positions_count: 0,\n            all_positions: [],\n            barriers: [],\n            error: '',\n            getPositionById: jest.fn(),\n            is_active_empty: false,\n            is_loading: false,\n            is_accumulator: false,\n            is_multiplier: false,\n            is_turbos: false,\n            onBuyResponse: jest.fn(),\n            onHoverPosition: jest.fn(),\n            onClickCancel: jest.fn(),\n            onClickSell: jest.fn(),\n            onMount: jest.fn(),\n            onUnmount: jest.fn(),\n            open_accu_contract: null,\n            positions: [],\n            removePositionById: jest.fn(),\n            setContractType: jest.fn(),\n            setAddNotificationBannerCallback: jest.fn(),\n        },\n        contract_trade: {\n            accountSwitchListener: jest.fn(),\n            accu_barriers_timeout_id: null,\n            accumulator_barriers_data: {},\n            accumulator_contract_barriers_data: {},\n            addContract: jest.fn(),\n            chart_type: '',\n            clearAccumulatorBarriersData: jest.fn(),\n            clearError: jest.fn(),\n            contracts: [],\n            error_message: '',\n            filtered_contracts: [],\n            getContractById: jest.fn(),\n            granularity: 0,\n            has_crossed_accu_barriers: false,\n            has_error: false,\n            last_contract: {},\n            markers_array: [],\n            onUnmount: jest.fn(),\n            prev_chart_type: '',\n            prev_contract: {},\n            prev_granularity: null,\n            removeContract: jest.fn(),\n            savePreviousChartMode: jest.fn(),\n            setNewAccumulatorBarriersData: jest.fn(),\n            updateAccumulatorBarriersData: jest.fn(),\n            updateChartType: jest.fn(),\n            updateGranularity: jest.fn(),\n            updateProposal: jest.fn(),\n        },\n        modules: {\n            cfd: {\n                setMT5MigrationError: jest.fn(),\n                migrated_mt5_accounts: [],\n                mt5_migration_error: '',\n                enableCFDPasswordModal: jest.fn(),\n                is_sent_email_modal_enabled: false,\n                setSentEmailModalStatus: jest.fn(),\n                submitMt5Password: jest.fn(() => Promise.resolve()),\n                setJurisdictionSelectedShortcode: jest.fn(),\n                setAccountType: jest.fn(),\n                setMigratedMT5Accounts: jest.fn(),\n            },\n            positions: {\n                openContractTypeFilter: [],\n                closedContractTypeFilter: [],\n                timeFilter: '',\n                customTimeRangeFilter: '',\n                setClosedContractTypeFilter: jest.fn(),\n                setOpenContractTypeFilter: jest.fn(),\n                setTimeFilter: jest.fn(),\n                setCustomTimeRangeFilter: jest.fn(),\n            },\n            markets: {\n                favoriteIndicators: [],\n                favoriteSymbols: [],\n                removeFavoriteIndicator: jest.fn(),\n                removeFavoriteSymbol: jest.fn(),\n                setFavoriteIndicators: jest.fn(),\n                setFavoriteSymbols: jest.fn(),\n            },\n            trade: {\n                accumulator_range_list: [],\n                active_symbols: [],\n                amount: 0,\n                barrier_1: '',\n                barrier_2: '',\n                barrier_choices: [],\n                barrier_count: 1,\n                barrier_pipsize: 1,\n                basis: '',\n                basis_list: [],\n                cached_multiplier_cancellation_list: [],\n                cancellation_duration: '',\n                cancellation_range_list: [],\n                clearContractPurchaseToastBox: jest.fn(),\n                clearPurchaseInfo: jest.fn(),\n                clearV2ParamsInitialValues: jest.fn(),\n                contract_expiry_type: '',\n                contract_purchase_toast_box: {},\n                contract_start_type: '',\n                contract_type: '',\n                contract_types_list: {},\n                contract_types_list_v2: {},\n                currency: '',\n                duration: 0,\n                duration_min_max: {},\n                duration_unit: '',\n                duration_units_list: [],\n                expiry_date: null,\n                expiry_epoch: '',\n                expiry_time: null,\n                expiry_type: '',\n                form_components: [],\n                growth_rate: 0.01,\n                has_cancellation: false,\n                has_equals_only: false,\n                has_open_accu_contract: false,\n                has_stop_loss: false,\n                has_take_profit: false,\n                is_accumulator: false,\n                is_dtrader_v2: false,\n                is_dtrader_v2_mobile: false,\n                is_dtrader_v2_desktop: false,\n                is_equal: 0,\n                is_mobile_digit_view_selected: false,\n                is_multiplier: false,\n                is_purchase_enabled: false,\n                is_trade_enabled: true,\n                is_trade_enabled_v2: true,\n                is_trade_params_expanded: false,\n                is_touch: false,\n                is_turbos: false,\n                is_vanilla: false,\n                is_vanilla_fx: false,\n                last_digit: 5,\n                market_close_times: [],\n                market_open_times: [],\n                maximum_payout: 0,\n                maximum_ticks: 0,\n                multiplier: 0,\n                multiplier_range_list: [],\n                non_available_contract_types_list: {},\n                onChange: jest.fn(),\n                onChangeMultiple: jest.fn(),\n                onHoverPurchase: jest.fn(),\n                onPurchase: jest.fn(),\n                onPurchaseV2: jest.fn(),\n                onMount: jest.fn(),\n                onUnmount: jest.fn(),\n                previous_symbol: '',\n                proposal_info: {},\n                purchase_info: {},\n                payout_choices: [],\n                requestProposal: jest.fn(),\n                resetPreviousSymbol: jest.fn(),\n                setIsTradeParamsExpanded: jest.fn(),\n                setTradeTypeTab: jest.fn(),\n                setV2ParamsInitialValues: jest.fn(),\n                setPayoutPerPoint: jest.fn(),\n                setDefaultStake: jest.fn(),\n                stake_boundary: {},\n                start_date: 0,\n                stop_loss: 0,\n                symbol: '',\n                take_profit: 0,\n                tick_size_barrier_percentage: '',\n                ticks_history_stats: {\n                    ticks_stayed_in: [],\n                    last_tick_epoch: 0,\n                },\n                trade_type_tab: '',\n                trade_types: {},\n                validation_errors: {},\n                validation_params: {},\n                vanilla_trade_type: '',\n                v2_params_initial_values: {},\n            },\n        },\n        feature_flags: {\n            data: undefined,\n            update: jest.fn(),\n            unmount: jest.fn(),\n            cleanup: jest.fn(),\n        },\n        gtm: {\n            is_gtm_applicable: false,\n            visitorId: 'visitorId',\n            common_variables: {\n                language: 'en',\n                theme: 'dark',\n                platform: 'DBot',\n                loggedIn: false,\n            },\n            accountSwitcherListener: jest.fn(),\n            pushDataLayer: jest.fn(),\n            pushTransactionData: jest.fn(),\n            eventHandler: jest.fn(),\n            setLoginFlag: jest.fn(),\n        },\n        pushwoosh: {},\n        contract_replay: {\n            contract_store: {\n                accumulator_previous_spot_time: null,\n                barriers_array: [],\n                contract_config: {},\n                contract_info: {},\n                contract_update: {},\n                contract_update_history: [],\n                digits_info: {},\n                display_status: '',\n                getContractsArray: jest.fn(),\n                is_digit_contract: false,\n                is_ended: false,\n                marker: {\n                    contract_info: {},\n                    epoch_array: [],\n                    key: '',\n                    price_array: [],\n                    type: '',\n                },\n                markers_array: [],\n            },\n            chart_state: '',\n            chartStateChange: jest.fn(),\n            has_error: false,\n            is_chart_loading: true,\n            is_forward_starting: false,\n            is_market_closed: false,\n            is_sell_requested: false,\n            onClickCancel: jest.fn(),\n            onClickSell: jest.fn(),\n            onMount: jest.fn(),\n            onUnmount: jest.fn(),\n            removeErrorMessage: jest.fn(),\n            removeAccountSwitcherListener: jest.fn(),\n            setAccountSwitcherListener: jest.fn(),\n        },\n        chart_barrier_store: {} as TCoreStores['chart_barrier_store'],\n        active_symbols: {\n            active_symbols: [],\n            setActiveSymbols: jest.fn(),\n        },\n    };\n};\n\nconst mockStore = (override: DeepPartial<TStores>): TStores => merge(mock(), override);\n\nexport default mockStore;\n"],"names":["useGetAccountStatus","_useQuery","useQuery","data","get_account_status_data","rest","_objectWithoutProperties","_excluded","modified_account_status","useMemo","get_account_status","prompt_client_to_authenticate","p2p_status","_objectSpread","should_prompt_client_to_authenticate","Boolean","is_p2p_user","useResidenceList","residence_list_rest","modified_residence_list","residence_list","map","residence","name","_payload$payload","_payload$payload2","_len","arguments","length","props","Array","_key","prop","payload","undefined","options","limit","offset","setOffset","useState","keepPreviousData","remove","loadMore","useCallback","prev","reset","useAccountLimits","isSuccess","useAuthorize","enabled","get_limits","useAccountStatus","_useGetAccountStatus","status","Set","is_address_verified","has","is_allow_document_upload","is_age_verification","is_authenticated","is_cashier_locked","is_crs_tin_information","is_deposit_locked","is_disabled","is_document_expired","is_document_expiring_soon","is_dxtrade_password_not_set","is_financial_assessment_not_complete","is_financial_information_not_complete","is_financial_risk_approval","is_max_turnover_limit_not_set","is_mt5_password_not_set","is_mt5_withdrawal_locked","is_needs_affiliate_coc_approval","is_no_trading","is_no_withdrawal_or_trading","is_p2p_blocked_for_pa","is_pa_withdrawal_explicitly_allowed","is_password_reset_required","is_professional","is_professional_requested","is_professional_rejected","is_social_signup","is_trading_experience_not_complete","is_unwelcome","is_withdrawal_locked","is_deposit_attempt","is_poi_name_mismatch","is_allow_poa_resubmission","is_allow_poi_resubmission","is_shared_payment_method","is_personal_details_locked","is_transfers_blocked","is_df_deposit_requires_poi","is_authenticated_with_idv_photoid","is_idv_revoked","landing_company","company","modified_account_types","get_account_types","useBalance","account","balance_data","modified_balance","balance","useCurrencyConfig","_website_status_data$2","_crypto_config_data$c2","website_status_data","crypto_config_data","modified_currencies_config","_website_status_data$","website_status","currencies_config","website_status_currencies_config","Object","keys","currency","currency_config","is_crypto","type","is_fiat","is_AUD","is_USD","is_EUR","is_GBP","is_BTC","is_ETH","is_LTC","is_DAI","is_IDK","is_PAX","is_USB","is_USDT","is_TUSD","is_BUSD","is_EURS","is_eUSDT","is_tUSDT","is_USDC","is_USDK","code","display_code","modified_crypto_config","_crypto_config_data$c","crypto_config","transformed_currencies_config","reduce","previous","current","getConfig","displayMoney","amount","Intl","NumberFormat","preferred_language","minimumFractionDigits","fractional_digits","maximumFractionDigits","minimumIntegerDigits","format","error","useDerivAccountsList","_useAuthorize","authorize_data","modified_accounts","_authorize_data$accou","account_list","_account$loginid","created_at","Date","excluded_until","is_active","loginid","is_trading","account_category","is_virtual","is_wallet","platform","is_mf","startsWith","modified_accounts_with_balance","_balance_data$account","_account$currency_con","_account$currency_con2","accounts","display_balance","useActiveAccount","_useDerivAccountsList","find","useWalletAccountsList","account_list_data","filtered_accounts","filter","wallet","_wallet$linked_to","_wallet$landing_compa","_wallet$currency_conf","wallet_currency_type","dtrade_loginid","linked_to","landing_company_name","replace","is_malta_wallet","sort","a","b","_a$currency_config","_b$currency_config","_a$currency_config2","localeCompare","useActiveWalletAccount","_useWalletAccountsLis","useActiveLinkedToTradingAccount","_wallet_account_data$","wallet_account_data","linkedDtradeLoginId","linked","matchingTradingAccount","useTradingAccountsList","_modified_accounts$fi","_modified_accounts$fi2","trading","_filtered_accounts$fi","_filtered_accounts$fi2","first_real_loginid","account_type","demo_loginid","fiat_account","_getConfig","_account$currency","useActiveTradingAccount","_useTradingAccountsLi","useActiveWalletBalance","_balanceData$balance","_balanceData$balance2","_activeWallet$currenc","activeWallet","_useSubscription","useSubscription","subscribe","balanceData","unsubscribe","currencyCode","useEffect","displayBalance","useExchangeRates","_subscribe","_unsubscribe","useAPIContext","exchangeRatesSubscriptions","useRef","setData","async","base_currency","target_currencies","_ref","Promise","all","id","subscription","target_currency","c","includes","push","response","_response$exchange_ra","rates","exchange_rates","currentData","hashObject","s","currData","forEach","getExchangeRate","base","target","_data$base$target","_data$base","useCtraderAccountsList","ctrader_accounts","modified_ctrader_accounts","_ctrader_accounts$tra","trading_platform_accounts","_account$balance","account_id","landing_company_short","formatted_balance","converted_balance","useDxtradeAccountsList","dxtrade_accounts","modified_dxtrade_accounts","_dxtrade_accounts$tra","useMT5AccountsList","mt5_accounts","mt5_accounts_rest","modified_mt5_accounts","_mt5_accounts$mt5_log","mt5_login_list","_account$login","display_login","login","useCFDAccountsList","isError","isMT5AccountsListError","isLoading","isMT5AccountsListLoading","isMT5AccountsListSuccess","isDxtradeAccountsListError","isDxtradeAccountsListLoading","isDxtradeAccountsListSuccess","isCtraderAccountsListError","CtraderAccountsListLoading","isCtraderAccountsListSuccess","mt5","dxtrade","ctrader","useAllAccountsList","accountsList","isAccountsListError","isAccountsListLoading","cfdsList","isCFDAccountsListError","isCFDAccountsListLoading","wallets","dtrade","useAvailableWallets","categories","_data$available_accou","available_accounts","useAllWalletAccounts","_useAvailableWallets","nonAddedWallets","addedWallets","modifiedWallets","nonVirtualWallets","is_added","sortWalletsByCurrency","useAuthentication","_get_account_status_d","_get_account_status_d2","_get_account_status_d3","_get_account_status_d4","_get_account_status_d5","needs_verification","authentication","account_status","is_poa_needed","is_poi_needed","is_age_verified","is_idv_disallowed","is_poi_resubmission_allowed","is_poa_resubmission_allowed","is_poa_address_mismatch","has_poa_been_attempted","document","has_poi_been_attempted","identity","poi_status","poa_status","risk_classification","useLandingCompany","settings_data","useSettings","country_code","modified_landing_company","useAccesiblePlatforms","_useLandingCompany","_landing_company$ctra","is_ctrader_available","standard","is_dxtrade_available","dxtrade_all_company","is_mt5_available","mt_financial_company","mt_gaming_company","mt_all_company","market_type_to_leverage_mapper","gaming","financial","useAvailableMT5Accounts","mt5_available_accounts","modified_mt5_available_accounts","_mt5_available_accoun","trading_platform_available_accounts","market_type","leverage","useCashierValidation","cashier_validation","transfer_blocked","no_residence","unwelcome_status","self_exclusion","no_withdrawal_or_trading_status","only_pa_withdrawals_allowed_status","withdraw_service_unavailable_for_pa","withdrawal_locked_status","documents_expired","cashier_locked_status","disabled_status","financial_assessment_required","ask_currency","ask_authenticate","ask_financial_risk_approval","ask_tin_information","ask_self_exclusion_max_turnover_set","ask_fix_details","pa_commision_withdrawal_limit","useCloseDerivAccount","useMutation","MARKET_TYPE","JURISDICTION","dxtradeAccount","requirements","after_first_deposit","financial_assessment","compliance","tax_information","signup","shortcode","ctraderAccount","useCFDCompareAccounts","_landingCompany$ctrad","isDemo","allAvailableMt5Accounts","_useMT5AccountsList","addedAccounts","modifiedMt5Data","availableAccount","createdAccount","sortedMt5Accounts","acc","marketType","landingCompany","hasDxtradeAccountAvailable","hasCTraderAccountAvailable","demoAvailableAccounts","mt5Accounts","useCancelCryptoTransaction","_useMutation","mutate","cashier_withdrawal_cancel","useCashierFiatAddress","_mutate","iframe_url","cashier","provider","useCryptoEstimations","_crypto_estimations_f2","_crypto_estimations_f3","_crypto_estimations_f4","subscription_error","crypto_estimations_fee_details","setCryptoEstimationsFeeDetails","crypto_estimations_fee_details_latest","setCryptoEstimationsFeeDetailsLatest","currency_code","setCurrencyCode","setError","count_down","setCountDown","server_time","setServerTime","timer","_data$crypto_estimati","_data$crypto_estimati2","_data$crypto_estimati3","crypto_estimations","withdrawal_fee","expiry_time","_crypto_estimations_f","currentTime","toMoment","utc","expiryTime","epochToMoment","diff","setTimeout","clearTimeout","prevTime","clearInterval","crypto_estimations_fee","value","crypto_estimations_fee_unique_id","unique_id","crypto_estimations_fee_expiry_time","getCryptoEstimations","unsubscribeCryptoEstimations","useCountryConfig","residence_list_data","_residence_list_data$","country_config","_country_config$ident","_country_config$ident2","disabled","toUpperCase","text","is_idv_supported","services","idv","is_country_supported","is_onfido_supported","onfido","transformed_residence_list","useCreateNewRealAccount","invalidate","useInvalidateQuery","onSuccess","modified_data","new_account_real","useCreateWallet","new_account_wallet","currencyConfig","params","getFormattedConfirmations","transaction","_transaction$confirma","status_code","confirmations","getStatusName","getStatusDescription","transaction_type","useCryptoTransactions","_data$cashier_payment2","transactions","setTransactions","resetData","old_transactions","_data$cashier_payment","new_transactions","cashier_payments","crypto","updated_transactions","new_transaction","index","findIndex","old_transaction","modified_transactions","description","formatted_amount","formatted_transaction_hash","transaction_hash","getTruncatedString","formatted_address_hash","address_hash","formatted_confirmations","is_deposit","is_withdrawal","status_name","submit_date","last_transaction","useCryptoWithdrawal","mutateAsync","_mutateAsync","useCtraderServiceToken","_ctrader_token$servic","service","server","ctrader_token","service_token","token","useDepositCryptoAddress","_data$cashier","deposit_address","deposit","address","DEFAULT_IMAGE_WIDTH","DEFAULT_IMAGE_QUALITY","compressImageFile","file","resolve","filename","test","reader","FileReader","readAsDataURL","onloadend","_reader$result","src","result","toString","convertToBase64","then","img","maxWidth","quality","reject","image","Image","onload","canvas","createElement","canvas_context","getContext","CanvasRenderingContext2D","Error","naturalWidth","width","scaleFactor","height","naturalHeight","fillStyle","fillRect","save","drawImage","toBlob","blob","modified_filename","Blob","lastModifiedDate","now","compressImage","numToUint8Array","num","typedArray","Uint8Array","DataView","buffer","setUint32","useDocumentUpload","_isLoading","_isSuccess","isDocumentUploaded","setIsDocumentUploaded","activeWebSocket","getActiveWebsocket","upload","fileBlob","modifiedFile","fr","fileMetadata","fileSize","size","onerror","message","readAsArrayBuffer","readFile","fileBuffer","checksum","md5","from","updatedPayload","document_format","split","toLocaleUpperCase","expected_checksum","file_size","passthrough","document_upload","_res$document_upload","_res$document_upload2","chunks","generateChunks","binary","_ref2","chunkSize","i","item","concat","res","upload_id","call_type","chunk","send","modified_response","useDxtradeServiceToken","_dxtrade_token$servic","dxtrade_token","trading_platform_leverage","useExchangeRateSubscription","useIdentityDocumentVerificationAdd","submitIDVDocuments","useIsEuRegion","_mt_gaming_company$fi","_mt_all_company$swap_","eu_shortcode_regex","gaming_company","financial_company","financial_shortcode","gaming_shortcode","mt_gaming_shortcode","swap_free","is_financial_maltainvest","shortcodes","is_financial_eu_and_not_gaming_svg","is_gaming_eu","is_residence_eu","isEUCountry","usePOI","_authentication_data$2","_authentication_data$4","_authentication_data$6","_useAuthentication","authentication_data","isAuthenticationSuccess","isResidenceListSuccess","get_settings_data","isGetSettingsSuccess","previous_service","_authentication_data$","latest_poi_attempt","attempts","latest","previous_poi","_authentication_data$3","manual","current_service","reported_properties","last_rejected","submissions_left","current_poi","_matching_residence_d","_matching_residence_d2","_authentication_data$5","_services$idv$submiss","_services$idv","_services$onfido$subm","_services$onfido","_services$manual","user_country_code","citizen","matching_residence_data","r","idv_submission_left","onfido_submission_left","_services$idv2","_matching_residence_d3","_services$onfido2","_matching_residence_d4","submission_left","document_supported","documents_supported","modified_verification_data","_authentication_data$7","_authentication_data$8","_authentication_data$9","_authentication_data$10","_authentication_data$11","is_pending","is_rejected","is_expired","is_suspected","is_verified","useJurisdictionStatus","authenticationStatus","isSuccessAuthenticationStatus","poiStatus","_poiStatus$current","getVerificationStatus","jurisdiction","mt5_account_status","isPOIServiceStatus","_poiStatus$current2","_poiStatus$services","statuses","isStatusPending","is_failed","is_not_applicable","useMT5Deposit","ALPHA_2_TO_ALPHA_3","AF","AX","AL","DZ","AS","AD","AO","AI","AQ","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BQ","BA","BW","BV","BR","VG","IO","BN","BG","BF","BI","KH","CM","CA","CV","KY","CF","TD","CL","CN","HK","MO","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CW","CY","CZ","DK","DJ","DM","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MK","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","ME","MS","MA","MZ","MM","NA","NR","NP","NL","AN","NC","NZ","NI","NE","NG","NU","NF","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SX","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VI","WF","EH","YE","ZM","ZW","XK","ALPHA_3_TO_ALPHA_2","AFG","ALA","ALB","DZA","ASM","AND","AGO","AIA","ATA","ATG","ARG","ARM","ABW","AUS","AUT","AZE","BHS","BHR","BGD","BRB","BLR","BEL","BLZ","BEN","BMU","BTN","BOL","BES","BIH","BWA","BVT","BRA","VGB","IOT","BRN","BGR","BFA","BDI","KHM","CMR","CAN","CPV","CYM","CAF","TCD","CHL","CHN","HKG","MAC","CXR","CCK","COL","COM","COG","COD","COK","CRI","CIV","HRV","CUB","CUW","CYP","CZE","DNK","DJI","DMA","DOM","ECU","EGY","SLV","GNQ","ERI","EST","ETH","FLK","FRO","FJI","FIN","FRA","GUF","PYF","ATF","GAB","GMB","GEO","DEU","GHA","GIB","GRC","GRL","GRD","GLP","GUM","GTM","GGY","GIN","GNB","GUY","HTI","HMD","VAT","HND","HUN","ISL","IND","IDN","IRN","IRQ","IRL","IMN","ISR","ITA","JAM","JPN","JEY","JOR","KAZ","KEN","KIR","PRK","KOR","KWT","KGZ","LAO","LVA","LBN","LSO","LBR","LBY","LIE","LTU","LUX","MKD","MDG","MWI","MYS","MDV","MLI","MLT","MHL","MTQ","MRT","MUS","MYT","MEX","FSM","MDA","MCO","MNG","MNE","MSR","MAR","MOZ","MMR","NAM","NRU","NPL","NLD","ANT","NCL","NZL","NIC","NER","NGA","NIU","NFK","MNP","NOR","OMN","PAK","PLW","PSE","PAN","PNG","PRY","PER","PHL","PCN","POL","PRT","PRI","QAT","REU","ROU","RUS","RWA","BLM","SHN","KNA","LCA","MAF","SPM","VCT","WSM","SMR","STP","SAU","SEN","SRB","SYC","SLE","SGP","SXM","SVK","SVN","SLB","SOM","ZAF","SGS","SSD","ESP","LKA","SDN","SUR","SJM","SWZ","SWE","CHE","SYR","TWN","TJK","TZA","THA","TLS","TGO","TKL","TON","TTO","TUN","TUR","TKM","TCA","TUV","UGA","UKR","ARE","GBR","USA","UMI","URY","UZB","VUT","VEN","VNM","VIR","WLF","ESH","YEM","ZMB","ZWE","XKX","country","_onfido_token_data$se","settings","countryCode","retry","onfido_token_data","ONFIDO_PHRASES","country_select","alert_dropdown","country_not_found","alert","another_doc","button_primary","search","accessibility","input_placeholder","label","title","cross_device_checklist","info","list_item_doc_multiple","list_item_doc_one","list_item_selfie","subtitle","cross_device_error_desktop","cross_device_error_restart","cross_device_intro","list_accessibility","list_item_finish","list_item_open_link","list_item_send_phone","cross_device_return","body","doc_confirmation","blur_detail","blur_title","crop_detail","crop_title","glare_detail","glare_title","no_doc_detail","no_doc_title","body_id","body_image_medium","body_image_poor","body_license","body_passport","body_permit","body_tax_letter","button_close","button_primary_redo","button_primary_upload","button_primary_upload_anyway","button_secondary_redo","button_zoom","image_accessibility","doc_select","button_id","button_id_detail","button_license","button_license_detail","button_passport","button_passport_detail","button_permit","button_permit_detail","extra_no_mobile","subtitle_poa","title_poa","doc_submit","button_link_upload","title_id_back","title_id_front","title_license_back","title_license_front","title_passport","title_permit_back","title_permit_front","error_unsupported_browser","subtitle_android","subtitle_ios","title_android","title_ios","generic","close_sdk_screen","dismiss_alert","back","close","errors","interrupted_flow_error","instruction","invalid_size","invalid_type","lazy_loading","multiple_faces","no_face","request_error","sms_failed","sms_overuse","unsupported_file","lazy_load_placeholder","loading","get_link","alert_wrong_number","button_copied","button_copy","button_submit","info_qr_how","info_qr_how_list_item_camera","info_qr_how_list_item_download","link_divider","link_qr","link_sms","link_url","loader_sending","number_field_input_placeholder","number_field_label","subtitle_qr","subtitle_sms","subtitle_url","url_field_label","linked_computer","list_item_desktop_open","list_item_sent_by_you","mobilePhrases","photo_upload","body_id_back","body_id_front","body_license_back","body_license_front","body_selfie","selfie_capture","camera_inactive","detail","camera_not_working","upload_guide","outro","permission_recovery","list_header_cam","list_item_action_cam","list_item_how_to_cam","subtitle_cam","title_cam","permission","body_cam","button_primary_cam","body_bank_statement","body_benefits_letter","body_bill","body_government_letter","button_take_photo","button_upload","title_selfie","detail_no_fallback","timeout","button_accessibility","frame_accessibility","selfie_confirmation","selfie_intro","list_item_face_forward","list_item_no_glasses","sms_sent","info_link_expire","info_link_window","link","subtitle_minutes","switch_phone","info_link_refresh","image_detail_blur_alt","image_detail_blur_label","image_detail_cutoff_alt","image_detail_cutoff_label","image_detail_glare_alt","image_detail_glare_label","image_detail_good_alt","image_detail_good_label","useOnfidoNotificationEvent","documentIds","category","event","args","documents","useOnfido","selectedDocument","isOnfidoLoading","setIsOnfidoLoading","isOnfidoInitialized","setIsOnfidoInitialized","onfidoInitializationError","setOnfidoInitializationError","hasSubmitted","setHasSubmitted","onfidoRef","onfidoContainerId","uuidv4","residenceList","serviceTokenError","isServiceTokenLoading","useOnfidoServiceToken","submitDocuments","supportedDocuments","_residenceList$find","onfidoResidence","_onfidoResidence$docu","_onfidoResidence$docu2","display_name","_onfidoResidence$docu3","onComplete","document_ids","key","_data$id","_data","initOnfido","i18NLanguage","LocalStorageUtils","getValue","onfidoCountryCode","window","Onfido","init","containerId","language","locale","toLowerCase","phrases","useModal","useMemoryHistory","steps","documentTypes","passport","some","doc","driving_licence","national_identity_card","hideCountrySelection","loadOnfidoSdkScript","getElementById","scriptNode","linkNode","href","rel","appendChild","addEventListener","useOtherCFDPlatformsDeposit","usePOA","modified_authentication_data","has_attempted_poa","is_need_submission","useSendbirdServiceToken","_sendbird_token_data$","staleTime","sendbird_token_data","sendbird","useServerTime","React","server_time_moment","time","server_time_utc","valueOf","regulation","all_available_mt5_accounts","activeAccount","isEU","filtered_available_accounts","filtered_mt5_accounts","available_account","created_account","filtered_data","added_accounts","filtered_non_added_accounts","existing_account","acc_account","added_account","sorted_data","areAllAccountsCreated","useMobileCarouselWalletsList","walletAccountsList","isCurrencyConfigLoading","staleWalletAccountsList","setStaleWalletAccountslist","staleIsLoading","setStaleIsLoading","useStatesList","states_list","_data$states_list","useTradingPlatformInvestorPasswordChange","useCreateMT5Account","mt5_new_account","useCreateOtherCFDAccount","useTradingPlatformInvestorPasswordReset","useTradingPlatformPasswordChange","useTransactions","_data$statement3","isFetching","setFilter","getNextPageParam","lastPage","pages","_lastPage$statement","statement","count","action_type","_data$statement","_data$statement2","display_amount","display_balance_after","balance_after","useInfiniteTransactions","_useInfiniteQuery","useInfiniteQuery","fetchNextPage","flatten_data","_data$pages","_data$pages2","flatMap","page","_page$statement","useTransferBetweenAccounts","useVerifyEmail","useTradingPlatformPasswordReset","useResetVirtualBalance","useIsDIELEnabled","kyc_auth_status_rest","kyc_auth_status","useAPI","initial_offset","getQueryKeys","pageParam","_lastPage","currency_to_icon_mapper","Demo","dark","light","USD","EUR","AUD","GBP","BTC","USDT","eUSDT","tUSDT","UST","LTC","USDC","useWalletsList","_balance_data$balance2","ui","client","useStore","is_dark_mode_on","is_authorize","useFetch","wallets_with_balance","_balance_data$balance","modified_wallets","wallet_gradient_class_name","wallet_icon","is_selected","is_demo","gradient_header_class","gradient_card_class","icon","sorted_wallets","has_wallet","useActiveWallet","_useFetch","account_type_data","added_wallets","sortedWallets","_account_type_data$ge","doughflow","crypto_currencies","currencies","fiat_currencies","available_currencies","non_virtual_wallets","available_wallets","isArray","useCFDAllAccounts","dxtrade_accounts_list","ctrader_accounts_list","cfd_accounts","useCFDDemoAccounts","useCFDRealAccounts","traders_hub","is_eu_user","is_maltainvest","useCFDAccounts","demo","real","useCashierLocked","_account_status$statu","useContentFlag","content_flag","is_low_risk_cr_non_eu","ContentFlag","LOW_RISK_CR_NON_EU","is_low_risk_cr_eu","LOW_RISK_CR_EU","is_high_risk_cr","HIGH_RISK_CR","is_cr_demo","CR_DEMO","is_eu_demo","EU_DEMO","is_eu_real","EU_REAL","useCurrentAccountDetails","useNeedAuthentication","is_authentication_needed","is_low_risk_cr_eu_real","useNeedFinancialAssessment","is_financial_account","is_financial_information_incomplete","is_trading_experience_incomplete","useDepositLocked","is_deposit_lock","landing_company_shortcode","is_account_to_be_closed_by_residence","is_need_authentication","is_tnc_needed","useIsTNCNeeded","is_need_financial_assessment","useDuplicateDOBPhone","is_duplicate_dob_phone","useExchangeRate","subscribeToExchangeRate","unsubscribeFromExchangeRate","unsubscribeFromAllExchangeRates","handleSubscription","unsubscribeAll","getAccountIcon","cfd_type","useExistingCFDAccounts","combined_cfd_mt5_accounts","mt5_rest","_useFetch2","dxtrade_rest","_excluded2","_mt5$mt5_login_list","_combined_cfd_mt5_acc","cfd","_combined_cfd_mt5_acc2","_combined_cfd_mt5_acc3","sub_title","_combined_cfd_mt5_acc4","transfer_icon","_dxtrade$trading_plat","every","useFeatureFlags","feature_flags","_feature_flags$data","flags","useFiatAccountList","useGetPasskeysList","passkeys_list","fetchPasskeysList","is_passkeys_list_loading","setIsPasskeysListLoading","passkeys_list_error","setPasskeysListError","refetchPasskeysList","e","mutate_rest","get_settings","update","mutation","usePhoneVerificationAnalytics","trackPhoneVerificationEvents","Analytics","trackEvent","form_name","useRequestPhoneNumberOTP","email_otp_error","is_email_verified","error_message","setErrorMessage","is_disabled_request_button","setIsDisabledRequestButton","carrier","setCarrier","verification_code","phone_number_verification","phone_number_verification_code","updateSettings","formatError","getOtherCarrier","VERIFICATION_SERVICES","SMS","getCarriers","WHATSAPP","getCurrentCarrier","errorCases","PhoneNumberTaken","PhoneNumberVerificationSuspended","InvalidPhone","getUseRequestPhoneNumberOTPErrorMessage","phone_number_challenge","requestOnWhatsApp","email_code","requestOnSMS","setUsersPhoneNumber","err","action","subform_name","error_code","sendEmailOTPVerification","useHasCryptoCurrency","useHasFiatCurrency","useHasP2PSupportedCurrencies","_p2p_settings$support","active_accounts","_useP2PSettings","useP2PSettings","p2p_settings","real_account_currencies_list","has_p2p_supported_currencies","supported_currencies","useHasUSDCurrency","useInputDecimalFormatter","initial","setValue","fraction_digits","with_sign","onChange","old_value","_e$target$value","_e$target","new_value","inputs","replaceAll","left","right","has_right","hasSign","isNaN","Number","isNumber","hasDecimalPoint","new_left","has_decimal","hasValidDecimalPlaces","substring","useInputATMFormatter","is_pasting","onChangeDecimal","formatted_value","toLocaleString","_unformatted$split","unformatted","unFormatLocaleString","shifted","Math","fround","toFixed","un_shifted","unformatted_fraction","onPaste","status_list","_status_list$includes","useIsClientHighRiskForMT5","financial_available_accounts","synthetic_available_accounts","useIsSystemMaintenance","_account_status$cashi","validation","landing_company_details","modified_landing_company_details","useLocalStorageData","fallback_value","_getLocalStorage","getLocalStorage","localStorage","setItem","JSON","stringify","clearData","removeItem","useMT5SVGEligibleToMigrate","show_eu_related_content","svg_accounts_to_migrate","Jurisdiction","SVG","eligible_to_migrate","has_svg_accounts_to_migrate","no_of_svg_accounts_to_migrate","is_eligible_for_svg_to_bvi_migration","_account$eligible_to_","values","BVI","is_eligible_for_svg_to_vanuatu_migration","_account$eligible_to_2","VANUATU","getEligibleAccountToMigrate","eligible_account_to_migrate_label","getFormattedJurisdictionCode","eligible_svg_to_bvi_derived_accounts","_account$eligible_to_3","synthetic","eligible_svg_to_bvi_financial_accounts","_account$eligible_to_4","eligible_svg_to_vanuatu_derived_accounts","_account$eligible_to_5","eligible_svg_to_vanuatu_financial_accounts","_account$eligible_to_6","has_derived_mt5_to_migrate","has_derived_and_financial_mt5","useNeedPOI","_client$account_statu","p2p_advert_info","is_buy","is_sell","useP2PAdvertList","config","_lastPage$p2p_advert_","p2p_advert_list","list","refetchOnWindowFocus","_page$p2p_advert_list","advert","is_floating","rate_type","created_time","loadMoreAdverts","type_to_icon_mapper","bank","other","ewallet","useP2PAdvertiserPaymentMethods","_useRequest","useRequest","p2p_advertiser_payment_methods","advertiser_payment_method","create","delete","useP2POrderList","useP2PCompletedOrdersNotification","isSubscribed","getAccountStatusData","notifications","active","_data$p2p_order_list","_data$p2p_order_list2","_notifications$p2p_co","p2p_order_list","p2p_completed_orders","p2p_order_info","order","splice","unshift","completion_time","p2p_country_list","local_currency","_exchange_rates$USD","useP2PPaymentMethods","p2p_payment_methods","payment_method","fields","field_key","usePlatformDemoAccount","usePlatformRealAccounts","usePlatformAccounts","useRealSTPAccount","sub_account_type","passkey_registration_error","setPasskeyRegistrationError","public_key","setPublicKey","createPasskey","_passkeys_register_re","authenticator_response","startRegistration","passkeys_register_response","passkeys_register","publicKeyCredential","properties","startPasskeyRegistration","_passkeys_register_op","passkeys_register_options_response","passkeys_register_options","publicKey","useSendOTPVerificationCode","_account_settings$pho","_account_settings$pho2","phone_otp_error_message","setPhoneOtpErrorMessage","show_cool_down_period_modal","setShowCoolDownPeriodModal","setIsForcedToExitPnv","phone_otp_error","is_phone_number_verified","account_settings","refetch","challenge_attempts_remaining","verify_attempts_remaining","formatOtpError","errorHandlers","PhoneCodeExpired","phoneOTPErrorMessage","InvalidOTP","EmailCodeExpired","emailOTPErrorMessage","InvalidToken","NoAttemptsLeft","errorCode","sendPhoneOTPVerification","otp","passkey_removing_error","setPasskeyRemovingError","removePasskey","passkeys_revoke_response","passkeys_revoke","passkey_renaming_error","setPasskeyRenamingError","renamePasskey","passkey_id","new_passkey_name","passkeys_rename_response","passkeys_rename","useStoreHasAccountDeposited","_statement$count","_statement$transactio","hasDeposited","tx","hasTransferred","isLoaded","useRealTotalAssetCurrency","current_fiat_currency","default_currency","platform_real_accounts","non_crypto_accounts","currency_if_is_crypto","total_assets_real_currency","total","new_base","new_target","new_rate","active_wallet","trading_apps_icon","is_cfd_accounts_loaded","modified_transfer_accounts","_data$accounts","all_linked_cfd_accounts","_getConfig2","_getConfig3","active_wallet_icon","parseFloat","display_currency_code","demo_account","trading_accounts","_all_linked_cfd_accou","_mt5_accounts$find","cfd_icon","cfd_account","_cfd_account$loginid","gradient_class","mt5_market_type","mt5_account","_mt5_account$loginid","wallet_accounts","available_wallet","modified_active_wallet","trading_accounts_display_prefixes","landing_company_display_shortcodes","svg","malta","current_wallet","demo_platform_account","real_platform_accounts","getTradingAccountName","mock_transactions","to","app_id","transaction_id","transaction_time","el","getTransferAccountName","other_account","account_name","account_currency","getWalletCurrencyIcon","_transaction$to","_transaction$from","_transaction$to2","_other_account$curren","other_loginid","icon_type","useWalletTransfer","is_accounts_loading","from_account","setFromAccount","to_account","setToAccount","to_account_list","fromEntries","entries","transfer_accounts","useIsSelectedMT5AccountCreated","modules","selected_account_type","updateMT5AccountDetails","fetchData","jurisdiction_selected_shortcode","product","selected_account","is_default_jurisdiction","is_selected_MT5_account_created","existing_account_status","MT5_ACCOUNT_STATUS","FAILED","PENDING","NEEDS_VERIFICATION","available_account_to_create","useGetStatus","common","mf_account_status","kyc_status","useGetMFAccountStatus","CFD_PLATFORMS","MT5","status_badge","client_kyc_status","useIsPhoneNumberVerified","verified","is_from_request_phone_number_otp","should_show_phone_number_otp","next_email_otp_request_timer","setNextEmailOtpRequestTimer","next_phone_otp_request_timer","setNextPhoneOtpRequestTimer","is_request_button_disabled","setIsRequestButtonDisabled","isMounted","useIsMounted","next_email_attempt","request_in_milliseconds","dayjs","next_request","round","next_attempt","countdown","setInterval","is_email_otp_timer_loading","is_phone_otp_timer_loading","usePhoneNumberVerificationSessionTimer","_account_settings$pho3","session_timer","setSessionTimer","formatted_time","setFormattedTime","should_show_session_timeout_modal","setShouldShowSessionTimeoutModal","formatTime","totalSeconds","minutes","floor","seconds","formatted_minutes","String","padStart","formatted_seconds","session_timestamp","useGetPhoneNumberList","_data$phone_settings","_data$phone_settings2","_data$phone_settings3","_data$phone_settings4","_data$phone_settings5","_data$phone_settings6","clients_country","isPhoneSettingLoading","no_of_available_carriers","phone_settings","carriers","is_global_sms_available","is_global_whatsapp_available","is_carriers_supported","countries","getSelectedPhoneCode","calling_country_code","getSelectedCountryList","phone_code","getShortCodeSelected","formatted_countries_list","short_code","legacy_core_countries_list","selected_phone_code","selected_country_list","updatePhoneSettings","short_code_selected","useTradingPlatformStatus","trading_platform_status","getPlatformStatus","_data$find","useGetWithdrawalLimitsDetails","account_limits","withdrawal_limit_details","withdrawal_title","getWithdrawalTitle","num_of_days","withdrawal_info_message","getWithdrawalInfoMessage","withdrawal_amount","is_client_store_initialized","isOAuth2Enabled","oAuthLogout","loggedState","Cookies","clientAccounts","parse","getItem","isClientAccountsPopulated","isSilentLoginExcluded","location","pathname","requestOidcAuthentication","redirectCallbackUri","origin","useAccountTransferVisible","has_malta_invest_account","useHasMaltaInvestAccount","_accounts","current_token","authorize","modified_authorize","increment","setCount","is_running","setIsRunning","pause","old","start","stop","_data$crypto_config","allowToMakeSubscription","sorted_transactions","has_transactions","slice","useCurrentCurrencyConfig","resend","useDepositFiatAddress","_urlObject$searchPara","dark_mode","lang","URL","searchParams","get","deposit_iframe_url","cashierUrl","set","fileReadErrorMessage","useFileUploader","uploader_instance","DocumentUploader","connection","getSocket","files","onError","is_any_file_error","file_error","compressed_files","compressImageFiles","processed_files","readFiles","_file_error","_authentication$ident","_authentication$ident2","_authentication$ident3","_authentication$docum","updateAccountStatus","onfido_status","manual_status","STATUS","need_poa_resubmission","poa_pending","poa_not_submitted","poi_verified_by_onfido_or_manual","poi_pending_by_onfido_or_manual","poi_not_submitted_by_onfido_or_manual","ACCOUNT_BADGE_STATUS","valid_tin","required_tin","useHasActiveRealAccount","useHasSetCurrency","has_active_real_account","useHasSvgAccount","useIsP2PEnabled","email","setIsP2PEnabled","is_p2p_enabled","toLocaleLowerCase","domain","hostname","deriv_urls","DERIV_HOST_NAME","secure","sameSite","is_p2p_enabled_loading","is_p2p_enabled_success","useIsRealAccountNeededForCashier","is_real","has_svg_account","has_maltainvest_account","useMFAccountStatus","is_eu","useNotificationEvent","notification_event","useOnrampVisible","_website_status$curre","_website_status$curre2","ramp","useP2PNotificationCount","_p2p_settings$loginid","setP2PSettings","onStorageChanged","removeEventListener","notification","is_seen","context","useContext","P2PSettingsContext","_data$paymentagent_li","paymentagent_list","usePaymentAgentTransferVisible","_data$get_settings","is_logged_in","is_websocket_authorized","setIsWebSocketAuthorized","wait","console","checkAuthorize","is_authenticated_payment_agent","_data$residence_list","Infinity","useResidenceSelfDeclaration","_residence_list$find","is_residence_self_declaration_required","residence_item","account_opening_self_declaration_required","useStoreLinkedWalletsAccounts","wallets_list","useStoreWalletAccountsList","linked_accounts","derivez","linked_to_account","XRP","_Object$keys","_accounts2","fiat_or_crypto","dtrade_balance","is_dtrader_account_disabled","icons","gradients","header","card","useTinValidations","_data$tin_validations","tax_residence","tin_validation_config","tin_validations","counter","useCountdown","sent_count","setSentCount","request_email","verify_email","sendPhoneNumberVerifyEmail","is_loading","is_counter_running","has_been_sent","override","merge","mock","common_store_error","app_routing_history","redirect_label","redirect_to","should_clear_error_on_click","should_show_refresh","redirectOnClick","jest","fn","is_mock","active_account_landing_company","ctrader_trading_platform_available_accounts","getSelfExclusion","p2p_poa_required","history","timestamp","income","ownership","requests","is_deposit_suspended","is_withdrawal_suspended","can_change_fiat_currency","currencies_list","has_tool_tip","current_currency_type","current_landing_company","support_professional_client","cfd_score","ctrader_total_balance","email_address","setCFDScore","getLimits","getTwoFAStatus","has_fiat","has_logged_out","has_cookie_account","has_restricted_mt5_account","initialized_broadcast","is_trading_platform_available_account_loaded","setIsTradingPlatformAvailableAccountLoaded","is_account_setting_loaded","is_dxtrade_allowed","is_eu_country","has_residence","is_financial_assessment_needed","is_low_risk","is_identity_verification_needed","is_landing_company_loaded","is_logging_in","is_mt5_account_list_updated","is_proof_of_ownership_enabled","is_poa_expired","is_populating_dxtrade_account_list","is_populating_ctrader_account_list","is_single_currency","is_switching","is_high_risk","is_withdrawal_lock","is_populating_account_list","local_currency_config","decimal_places","pre_switch_broadcast","is_svg","responseMt5LoginList","responseTradingPlatformAccountsList","setFinancialAndTradingAssessment","standpoint","maltainvest","switchAccount","payment_agent_withdraw","payment_withdraw","reset_password","system_email_change","trading_platform_dxtrade_password_reset","trading_platform_mt5_password_reset","fetchStatesList","setVerificationCode","authentication_status","document_status","identity_status","getToken","setPhoneSettings","logout","should_allow_authentication","should_allow_poinc_authentication","available_crypto_currencies","selectCurrency","setAccountStatus","setBalanceOtherAccounts","setInitialized","setIsClientStoreInitialized","setLogout","setP2pAdvertiserInfo","setPreSwitchAccount","social_identity_provider","switched","switch_broadcast","switchEndSignal","isEligibleForMoreRealMt5","isEligibleForMoreDemoMt5Svg","updateMT5Status","fetchResidenceList","should_restrict_bvi_account_creation","should_restrict_vanuatu_account_creation","fetchAccountSettings","setAccountSettings","upgradeable_landing_companies","is_populating_mt5_account_list","landing_companies","upgradeable_currencies","getChangeableFields","is_mt5_allowed","mt5_disabled_signup_types","dxtrade_disabled_signup_types","dxtrade_accounts_list_error","dxtrade_status","mt5_status","is_fully_authenticated","resetVirtualBalance","has_enabled_two_fa","setTwoFAStatus","has_changed_two_fa","setTwoFAChangedStatus","real_account_creation_unlock_date","has_any_real_account","setPrevAccountType","prev_account_type","setLoginInformation","setLoginId","resetLocalStorageValues","setIsAlreadyAttempted","is_already_attempted","is_bot_allowed","account_open_date","setAccounts","updateMt5LoginList","should_show_eu_error","is_options_blocked","real_account_signup_form_data","real_account_signup_form_step","setRealAccountSignupFormData","setRealAccountSignupFormStep","wallet_migration_state","startWalletMigration","resetWalletMigration","is_wallet_migration_request_is_in_progress","is_passkey_supported","is_phone_number_verification_enabled","should_show_passkey_notification","setIsPasskeySupported","setIsPhoneNumberVerificationEnabled","setPasskeysStatusToCookie","setShouldShowPasskeyNotification","fetchShouldShowPasskeyNotification","virtual_account_loginid","is_cr_account","is_mf_account","is_tradershub_tracking","setTradersHubTracking","account_time_of_closure","should_show_trustpilot_notification","current_language","isCurrentLanguage","is_from_derivgo","is_from_outside_cashier","is_from_tradershub_os","is_socket_opened","has_error","routeBackInApp","routeTo","changeCurrentLanguage","changeSelectedLanguage","resetServicesError","is_network_online","network_status","services_error","setSelectedContractType","setServicesError","showError","is_language_changing","setAppstorePlatform","advanced_duration_unit","advanced_expiry_type","account_switcher_disabled_message","app_contents_scroll_ref","current_focus","duration_t","getDurationFromUnit","is_account_settings_visible","is_account_switcher_disabled","is_advanced_duration","is_history_tab_active","is_cashier_visible","is_redirected_from_email","is_wallet_modal_visible","is_chart_layout_default","is_chart_countdown_visible","is_closing_create_real_account_modal","is_forced_to_exit_pnv","is_phone_verification_completed","is_from_signup_account","is_from_success_deposit_modal","is_language_settings_modal_on","is_desktop","is_app_disabled","has_only_forward_starting_contracts","header_extension","is_link_expired_modal_visible","is_mobile","is_tablet","is_mobile_language_menu_open","is_positions_drawer_on","is_reports_visible","is_verification_submitted","is_reset_email_modal_visible","is_reset_password_modal_visible","is_route_modal_on","is_services_error_visible","is_trading_assessment_for_existing_user_enabled","is_wallets_onboarding_tour_guide_visible","setIsPhoneVerificationCompleted","setRedirectFromEmail","setShouldShowPhoneNumberOTP","disableApp","enableApp","setCurrentFocus","toggleAccountsDialog","toggleAccountSettings","toggleCashier","setDarkMode","setReportsTabIndex","has_real_account_signup_ended","real_account_signup_target","real_account_signup","active_modal_index","previous_currency","current_currency","success_message","resetRealAccountSignupParams","notification_messages_ui","onChangeUiStore","openPositionsDrawer","openRealAccountSignup","setChartCountdown","setIsWalletModalVisible","setHasOnlyForwardingContracts","setIsClosingCreateRealAccountModal","setIsFromSuccessDepositModal","setIsFromSignupAccount","setMobileLanguageMenuOpen","setRealAccountSignupEnd","setPromptHandler","setPurchaseState","setAppContentsScrollRef","shouldNavigateAfterChooseCrypto","simple_duration_unit","toggleHistoryTab","toggleLanguageSettingsModal","togglePositionsDrawer","toggleResetEmailModal","toggleResetPasswordModal","toggleLinkExpiredModal","toggleServicesErrorModal","toggleSetCurrencyModal","addToast","removeToast","resetPurchaseStates","reports_route_tab_index","should_show_cancellation_warning","should_show_one_time_deposit_modal","should_show_account_success_modal","should_trigger_tour_guide","toggleCancellationWarning","setShouldShowOneTimeDepositModal","toggleAccountSuccessModal","toggleReports","setSubSectionIndex","sub_section_index","toggleReadyToDepositModal","is_ready_to_deposit_modal_visible","is_real_acc_signup_on","is_need_real_account_for_cashier_modal_visible","is_verification_modal_visible","is_mf_verification_pending_modal_visible","is_mt5_migration_modal_enabled","is_mt5_migration_modal_open","toggleNeedRealAccountForCashierModal","is_switch_to_deriv_account_modal_visible","openSwitchToRealAccountModal","is_top_up_virtual_open","is_top_up_virtual_in_progress","is_top_up_virtual_success","closeTopUpModal","closeSuccessTopUpModal","is_cfd_reset_password_modal_enabled","setCFDPasswordResetModal","openDerivRealAccountNeededModal","populateHeaderExtensions","populateSettingsExtensions","purchase_states","setShouldShowCooldownModal","setIsVerificationModalVisible","setIsVerificationSubmitted","setShouldTriggerTourGuide","populateFooterExtensions","openAccountNeededModal","is_accounts_switcher_on","openTopUpModal","toggleShouldShowRealAccountsList","is_reset_trading_password_modal_visible","setResetTradingPasswordModalOpen","setIsMFVericationPendingModal","setMT5MigrationModalEnabled","toggleMT5MigrationModal","vanilla_trade_type","is_additional_kyc_info_modal_open","isUrlUnavailableModalVisible","setAccountSwitcherDisabledMessage","toggleUrlUnavailableModal","is_set_currency_modal_visible","should_show_deposit_now_or_later_modal","setShouldShowDepositNowOrLaterModal","should_show_crypto_transaction_processing_modal","setShouldShowCryptoTransactionProcessingModal","is_trading_disabled_by_residence_modal_visible","setIsTradingDisabledByResidenceModal","should_show_same_dob_phone_modal","setShouldShowSameDOBPhoneModal","field_ref_to_focus","setFieldRefToFocus","setHashedValue","url_hashed_values","is_tnc_update_modal_open","toggleTncUpdateModal","setIsWalletsOnboardingTourGuideVisible","getAccount","closeModal","available_cfd_accounts","CFDs_restricted_countries","openModal","is_onboarding_visited","is_first_time_visit","setIsOnboardingVisited","setIsFirstTimeVisit","selectRegion","setSelectedAccount","is_real_wallets_upgrade_on","is_verification_docs_list_modal_visible","toggleWalletsUpgrade","platform_real_balance","cfd_demo_balance","platform_demo_balance","cfd_real_balance","closeAccountTransferModal","toggleRegulatorsCompareModal","is_demo_low_risk","financial_restricted_countries","no_CR_account","no_MF_account","modal_data","active_modal","setTogglePlatformType","toggleAccountTransferModal","selectAccountType","is_wallet_migration_failed","setWalletsMigrationFailedPopup","selected_platform_type","available_platforms","selected_region","getExistingAccounts","available_dxtrade_accounts","active_modal_tab","setWalletModalActiveTab","active_modal_wallet_id","setWalletModalActiveWalletID","available_ctrader_accounts","startTrade","showTopUpModal","is_regulators_compare_modal_visible","is_cfd_restricted_country","setIsCFDRestrictedCountry","is_financial_restricted_country","setIsFinancialRestrictedCountry","is_setup_real_account_or_go_to_demo_modal_visible","setIsSetupRealAccountOrGoToDemoModalVisible","setVerificationModalOpen","selected_jurisdiction_kyc_status","setSelectedJurisdictionKYCStatus","getDefaultJurisdiction","getMT5AccountKYCStatus","addNotificationMessage","addNotificationMessageByKey","addTradeNotification","client_notifications","is_notifications_empty","is_notifications_visible","filterNotificationMessages","handleCurrencyRemovalNotification","p2p_advertiser_info","refreshNotifications","removeAllNotificationMessages","removeNotifications","removeNotificationByKey","removeNotificationMessage","removeNotificationMessageByKey","removeTradeNotifications","setP2POrderProps","showAccountSwitchToRealNotification","showPOAAddressMismatchSuccessNotification","showPOAAddressMismatchFailureNotification","setP2PRedirectTo","setShouldShowPopups","toggleNotificationsModal","trade_notifications","portfolio","active_positions","active_positions_count","all_positions","barriers","getPositionById","is_active_empty","is_accumulator","is_multiplier","is_turbos","onBuyResponse","onHoverPosition","onClickCancel","onClickSell","onMount","onUnmount","open_accu_contract","positions","removePositionById","setContractType","setAddNotificationBannerCallback","contract_trade","accountSwitchListener","accu_barriers_timeout_id","accumulator_barriers_data","accumulator_contract_barriers_data","addContract","chart_type","clearAccumulatorBarriersData","clearError","contracts","filtered_contracts","getContractById","granularity","has_crossed_accu_barriers","last_contract","markers_array","prev_chart_type","prev_contract","prev_granularity","removeContract","savePreviousChartMode","setNewAccumulatorBarriersData","updateAccumulatorBarriersData","updateChartType","updateGranularity","updateProposal","setMT5MigrationError","migrated_mt5_accounts","mt5_migration_error","enableCFDPasswordModal","is_sent_email_modal_enabled","setSentEmailModalStatus","submitMt5Password","setJurisdictionSelectedShortcode","setAccountType","setMigratedMT5Accounts","openContractTypeFilter","closedContractTypeFilter","timeFilter","customTimeRangeFilter","setClosedContractTypeFilter","setOpenContractTypeFilter","setTimeFilter","setCustomTimeRangeFilter","markets","favoriteIndicators","favoriteSymbols","removeFavoriteIndicator","removeFavoriteSymbol","setFavoriteIndicators","setFavoriteSymbols","trade","accumulator_range_list","active_symbols","barrier_1","barrier_2","barrier_choices","barrier_count","barrier_pipsize","basis","basis_list","cached_multiplier_cancellation_list","cancellation_duration","cancellation_range_list","clearContractPurchaseToastBox","clearPurchaseInfo","clearV2ParamsInitialValues","contract_expiry_type","contract_purchase_toast_box","contract_start_type","contract_type","contract_types_list","contract_types_list_v2","duration","duration_min_max","duration_unit","duration_units_list","expiry_date","expiry_epoch","expiry_type","form_components","growth_rate","has_cancellation","has_equals_only","has_open_accu_contract","has_stop_loss","has_take_profit","is_dtrader_v2","is_dtrader_v2_mobile","is_dtrader_v2_desktop","is_equal","is_mobile_digit_view_selected","is_purchase_enabled","is_trade_enabled","is_trade_enabled_v2","is_trade_params_expanded","is_touch","is_vanilla","is_vanilla_fx","last_digit","market_close_times","market_open_times","maximum_payout","maximum_ticks","multiplier","multiplier_range_list","non_available_contract_types_list","onChangeMultiple","onHoverPurchase","onPurchase","onPurchaseV2","previous_symbol","proposal_info","purchase_info","payout_choices","requestProposal","resetPreviousSymbol","setIsTradeParamsExpanded","setTradeTypeTab","setV2ParamsInitialValues","setPayoutPerPoint","setDefaultStake","stake_boundary","start_date","stop_loss","symbol","take_profit","tick_size_barrier_percentage","ticks_history_stats","ticks_stayed_in","last_tick_epoch","trade_type_tab","trade_types","validation_errors","validation_params","v2_params_initial_values","unmount","cleanup","gtm","is_gtm_applicable","visitorId","common_variables","theme","loggedIn","accountSwitcherListener","pushDataLayer","pushTransactionData","eventHandler","setLoginFlag","pushwoosh","contract_replay","contract_store","accumulator_previous_spot_time","barriers_array","contract_config","contract_info","contract_update","contract_update_history","digits_info","display_status","getContractsArray","is_digit_contract","is_ended","marker","epoch_array","price_array","chart_state","chartStateChange","is_chart_loading","is_forward_starting","is_market_closed","is_sell_requested","removeErrorMessage","removeAccountSwitcherListener","setAccountSwitcherListener","chart_barrier_store","setActiveSymbols"],"sourceRoot":""}