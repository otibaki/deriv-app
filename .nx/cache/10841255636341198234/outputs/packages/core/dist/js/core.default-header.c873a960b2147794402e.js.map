{"version":3,"file":"js/core.default-header.c873a960b2147794402e.js","mappings":"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","sources":["webpack:///./Assets/SvgComponents/header/deriv-logo-short.svg","webpack:///./App/Containers/Layout/header/default-header.tsx","webpack:///./App/Containers/Layout/header/deriv-short-logo.tsx","webpack:///./App/Containers/Layout/header/header-account-actions.tsx","webpack:///./App/Containers/Layout/header/traders-hub-home-button.tsx","webpack:///./App/Containers/SetAccountCurrencyModal/set-currency-modal.jsx","webpack:///./App/Containers/SetAccountCurrencyModal/index.js","webpack:///./App/Containers/new-version-notification.jsx","webpack:///../../hooks/src/useHasActiveRealAccount.ts","webpack:///../../hooks/src/useHasSetCurrency.ts"],"sourcesContent":["import React from \"react\";\nexport default ({\n  styles = {},\n  ...props\n}) => <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" {...props}><path d=\"M0 9.33A9.33 9.33 0 019.33 0h5.34A9.33 9.33 0 0124 9.33v5.34A9.33 9.33 0 0114.67 24H9.33A9.33 9.33 0 010 14.67V9.33z\" fill=\"#FF444F\" /><path d=\"M15.06 4.97l-.78 4.4H11.6c-2.51 0-4.9 2.02-5.34 4.53l-.19 1.06c-.44 2.51 1.23 4.54 3.74 4.54h2.24a4.11 4.11 0 003.89-3.3L18 4.5l-2.94.47zm-1.91 10.81c-.1.57-.6 1.03-1.17 1.03h-1.36c-1.13 0-1.88-.92-1.69-2.05l.12-.66a2.55 2.55 0 012.4-2.04h2.36l-.66 3.72z\" fill=\"#fff\" /></svg>;","import React from 'react';\nimport classNames from 'classnames';\nimport { getDecimalPlaces, platforms, routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { MenuLinks, PlatformSwitcher } from 'App/Components/Layout/Header';\nimport { AccountsInfoLoader } from 'App/Components/Layout/Header/Components/Preloader';\nimport NewVersionNotification from 'App/Containers/new-version-notification.jsx';\nimport RealAccountSignup from 'App/Containers/RealAccountSignup';\nimport SetAccountCurrencyModal from 'App/Containers/SetAccountCurrencyModal';\nimport ToggleMenuDrawer from 'App/Components/Layout/Header/toggle-menu-drawer.jsx';\nimport platform_config from 'App/Constants/platform-config';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport HeaderAccountActions from './header-account-actions';\nimport { useDevice } from '@deriv-com/ui';\nimport DerivShortLogo from './deriv-short-logo';\nimport TradersHubHomeButton from './traders-hub-home-button';\n\nconst DefaultHeader = observer(() => {\n    const { client, common, notifications, traders_hub, ui } = useStore();\n    const {\n        currency,\n        is_bot_allowed,\n        is_dxtrade_allowed,\n        is_logged_in,\n        is_logging_in,\n        is_mt5_allowed,\n        is_switching,\n        is_landing_company_loaded,\n    } = client;\n    const { app_routing_history, current_language, platform } = common;\n    const { addNotificationMessage, client_notifications, removeNotificationMessage } = notifications;\n    const { setTogglePlatformType } = traders_hub;\n    const {\n        header_extension,\n        is_app_disabled,\n        is_route_modal_on,\n        is_trading_assessment_for_existing_user_enabled,\n        is_real_acc_signup_on,\n    } = ui;\n\n    const history = useHistory();\n    const { isDesktop } = useDevice();\n    const location = useLocation();\n    const should_hide_platform_switcher = location.pathname === routes.traders_hub;\n\n    const addUpdateNotification = () => addNotificationMessage(client_notifications?.new_version_available);\n    const removeUpdateNotification = React.useCallback(\n        () => removeNotificationMessage({ key: 'new_version_available' }),\n        [removeNotificationMessage]\n    );\n\n    React.useEffect(() => {\n        document.addEventListener('IgnorePWAUpdate', removeUpdateNotification);\n        return () => document.removeEventListener('IgnorePWAUpdate', removeUpdateNotification);\n    }, [removeUpdateNotification]);\n\n    const onClickDeposit = () => history.push(routes.cashier_deposit);\n\n    const filterPlatformsForClients = payload =>\n        payload.filter(config => {\n            if (config.link_to === routes.mt5) {\n                return !is_logged_in || is_mt5_allowed;\n            }\n            if (config.link_to === routes.dxtrade) {\n                return is_dxtrade_allowed;\n            }\n            if (config.link_to === routes.bot || config.href === routes.smarttrader) {\n                return is_bot_allowed;\n            }\n            return true;\n        });\n\n    return (\n        <header\n            className={classNames('header', {\n                'header--is-disabled': is_app_disabled || is_route_modal_on,\n                'header--is-hidden': platforms[platform],\n            })}\n        >\n            <div className='header__menu-items'>\n                <div className='header__menu-left'>\n                    {!isDesktop ? (\n                        <React.Fragment>\n                            <ToggleMenuDrawer platform_config={filterPlatformsForClients(platform_config)} />\n                            {header_extension && is_logged_in && (\n                                <div className='header__menu-left-extensions'>{header_extension}</div>\n                            )}\n                            <DerivShortLogo />\n                        </React.Fragment>\n                    ) : (\n                        <React.Fragment>\n                            <DerivShortLogo />\n                            <div className='header__divider' />\n                            <TradersHubHomeButton />\n                            {!should_hide_platform_switcher && (\n                                <PlatformSwitcher\n                                    app_routing_history={app_routing_history}\n                                    is_landing_company_loaded={is_landing_company_loaded}\n                                    is_logged_in={is_logged_in}\n                                    is_logging_in={is_logging_in}\n                                    platform_config={filterPlatformsForClients(platform_config)}\n                                    setTogglePlatformType={setTogglePlatformType}\n                                    current_language={current_language}\n                                />\n                            )}\n                        </React.Fragment>\n                    )}\n                    <MenuLinks />\n                </div>\n                <div\n                    className={classNames('header__menu-right', {\n                        'header__menu-right--hidden': !isDesktop && is_logging_in,\n                    })}\n                >\n                    {(is_logging_in || is_switching) && (\n                        <div\n                            id='dt_core_header_acc-info-preloader'\n                            className={classNames('acc-info__preloader', {\n                                'acc-info__preloader--no-currency': !currency,\n                                'acc-info__preloader--is-crypto': getDecimalPlaces(currency) > 2,\n                            })}\n                        >\n                            <AccountsInfoLoader is_logged_in={is_logged_in} is_mobile={!isDesktop} speed={3} />\n                        </div>\n                    )}\n                    <HeaderAccountActions onClickDeposit={onClickDeposit} />\n                </div>\n            </div>\n            {/*\n                Prevent the modals that are part of Real Account signup to get triggered when the corresponding store value changes by\n                removing the parent element from DOM\n            */}\n            {!is_trading_assessment_for_existing_user_enabled && is_real_acc_signup_on && <RealAccountSignup />}\n            <SetAccountCurrencyModal />\n            <NewVersionNotification onUpdate={addUpdateNotification} />\n        </header>\n    );\n});\n\nexport default DefaultHeader;\n","import React from 'react';\nimport { StaticUrl } from '@deriv/components';\nimport DerivBrandShortLogo from 'Assets/SvgComponents/header/deriv-logo-short.svg';\n\nconst DerivShortLogo = () => {\n    return (\n        <div className='header__menu-left-logo'>\n            <StaticUrl href='/'>\n                <DerivBrandShortLogo />\n            </StaticUrl>\n        </div>\n    );\n};\n\nexport default DerivShortLogo;\n","import React from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport { AccountActions } from 'App/Components/Layout/Header';\n\ntype THeaderAccountActions = {\n    onClickDeposit: () => void;\n};\n\nconst HeaderAccountActions = observer(({ onClickDeposit }: THeaderAccountActions) => {\n    const { client, ui, notifications } = useStore();\n    const { account_type, balance, currency, is_eu, is_logged_in, is_virtual } = client;\n    const {\n        account_switcher_disabled_message,\n        disableApp,\n        enableApp,\n        is_account_switcher_disabled,\n        is_accounts_switcher_on,\n        openRealAccountSignup,\n        toggleAccountsDialog,\n    } = ui;\n    const { is_notifications_visible, notifications: notifications_array, toggleNotificationsModal } = notifications;\n    const filtered_notifications = notifications_array.filter(item => !item.only_toast_message);\n    return (\n        <div id='dt_core_header_acc-info-container' className='acc-info__container'>\n            <AccountActions\n                acc_switcher_disabled_message={account_switcher_disabled_message}\n                account_type={account_type}\n                balance={balance}\n                currency={currency}\n                disableApp={disableApp}\n                enableApp={enableApp}\n                is_acc_switcher_on={is_accounts_switcher_on}\n                is_acc_switcher_disabled={is_account_switcher_disabled}\n                is_eu={is_eu}\n                is_notifications_visible={is_notifications_visible}\n                is_logged_in={is_logged_in}\n                is_virtual={is_virtual}\n                onClickDeposit={onClickDeposit}\n                notifications_count={filtered_notifications.length}\n                toggleAccountsDialog={toggleAccountsDialog}\n                toggleNotifications={toggleNotificationsModal}\n                openRealAccountSignup={openRealAccountSignup}\n            />\n        </div>\n    );\n});\n\nexport default HeaderAccountActions;\n","import React from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport classNames from 'classnames';\nimport { Icon, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\n\nconst TradersHubHomeButton = observer(() => {\n    const { ui } = useStore();\n    const { is_dark_mode_on } = ui;\n    const history = useHistory();\n    const location = useLocation();\n    const { pathname } = location;\n\n    const TradersHubIcon = is_dark_mode_on ? 'IcAppstoreHomeDark' : 'IcAppstoreTradersHubHomeUpdated';\n\n    return (\n        <div\n            data-testid='dt_traders_hub_home_button'\n            className={classNames('traders-hub-header__tradershub', {\n                'traders-hub-header__tradershub--active':\n                    pathname === routes.traders_hub || pathname === routes.traders_hub_v2,\n            })}\n            onClick={() => history.push(routes.traders_hub)}\n        >\n            <div className='traders-hub-header__tradershub--home-logo'>\n                <Icon icon={TradersHubIcon} size={is_dark_mode_on ? 15 : 17} />\n            </div>\n            <Text className='traders-hub-header__tradershub--text'>\n                <Localize i18n_default_text=\"Trader's Hub\" />\n            </Text>\n        </div>\n    );\n});\n\nexport default TradersHubHomeButton;\n","import React from 'react';\nimport { Button, Modal } from '@deriv/components';\nimport { useHasSetCurrency } from '@deriv/hooks';\nimport { localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport 'Sass/set-currency-modal.scss';\n\nconst SetAccountCurrencyModal = observer(() => {\n    const { client, ui } = useStore();\n    const { is_virtual } = client;\n    const {\n        is_set_currency_modal_visible: is_visible,\n        openRealAccountSignup: setCurrency,\n        toggleSetCurrencyModal: toggleModal,\n    } = ui;\n    const has_set_currency = useHasSetCurrency();\n\n    return (\n        <Modal\n            id='dt_set_account_currency_modal'\n            has_close_icon={false}\n            is_open={is_visible}\n            small\n            toggleModal={toggleModal}\n            title={\n                !has_set_currency\n                    ? localize('No currency assigned to your account')\n                    : localize('You have an account that needs action')\n            }\n        >\n            <Modal.Body>\n                {localize('Please set a currency for your existing real account before creating another account.')}\n            </Modal.Body>\n            <Modal.Footer>\n                {!is_virtual ? (\n                    <>\n                        <Button has_effect text={localize('Cancel')} onClick={toggleModal} secondary />\n                        <Button\n                            has_effect\n                            text={localize('Set currency')}\n                            onClick={() => {\n                                toggleModal();\n                                // timeout is to ensure no jumpy animation when modals are overlapping enter/exit transitions\n                                setTimeout(() => {\n                                    setCurrency('set_currency');\n                                }, 250);\n                            }}\n                            primary\n                        />\n                    </>\n                ) : (\n                    <Button has_effect text={localize('OK')} onClick={toggleModal} primary />\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n});\n\nexport default SetAccountCurrencyModal;\n","import SetAccountCurrencyModal from './set-currency-modal.jsx';\n\nexport default SetAccountCurrencyModal;\n","import React from 'react';\n\n/**\n * Listens on emitted events to show notification on available updates.\n *  - IgnorePWAUpdate event will prevent notification\n *  - ListenPWAUpdate event is usefull to re-assign notify on update behavior\n * @param onUpdate\n * @return {null}\n * @constructor\n */\nconst NewVersionNotification = ({ onUpdate }) => {\n    React.useEffect(() => {\n        const removeUpdateListener = () => {\n            document.removeEventListener('UpdateAvailable', onUpdate);\n        };\n\n        const addUpdateListener = () => {\n            document.addEventListener('UpdateAvailable', onUpdate);\n        };\n\n        document.addEventListener('UpdateAvailable', onUpdate);\n        document.addEventListener('IgnorePWAUpdate', removeUpdateListener);\n        document.addEventListener('ListenPWAUpdate', addUpdateListener);\n\n        return () => {\n            document.removeEventListener('IgnorePWAUpdate', removeUpdateListener);\n            document.removeEventListener('ListenPWAUpdate', addUpdateListener);\n            document.removeEventListener('UpdateAvailable', onUpdate);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return null;\n};\n\nexport default NewVersionNotification;\n","import { useStore } from '@deriv/stores';\n\nconst useHasActiveRealAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n\n    const has_active_real_account = active_accounts.some(account => account.is_virtual === 0);\n\n    return has_active_real_account;\n};\n\nexport default useHasActiveRealAccount;\n","import { useStore } from '@deriv/stores';\nimport useHasActiveRealAccount from './useHasActiveRealAccount';\n\nconst useHasSetCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n    const has_active_real_account = useHasActiveRealAccount();\n\n    const has_real_account = account_list\n        .filter(account => !account.is_virtual)\n        .some(account => account.title !== 'Real' && account.title !== 'Investment');\n\n    const has_set_currency = has_real_account || !has_active_real_account;\n\n    return has_set_currency;\n};\n\nexport default useHasSetCurrency;\n"],"names":["_ref","styles","props","_objectWithoutProperties","_excluded","_jsxs","_objectSpread","xmlns","width","height","fill","children","_jsx","d","observer","client","common","notifications","traders_hub","ui","useStore","currency","is_bot_allowed","is_dxtrade_allowed","is_logged_in","is_logging_in","is_mt5_allowed","is_switching","is_landing_company_loaded","app_routing_history","current_language","platform","addNotificationMessage","client_notifications","removeNotificationMessage","setTogglePlatformType","header_extension","is_app_disabled","is_route_modal_on","is_trading_assessment_for_existing_user_enabled","is_real_acc_signup_on","history","useHistory","isDesktop","useDevice","should_hide_platform_switcher","useLocation","pathname","routes","removeUpdateNotification","React","key","document","addEventListener","removeEventListener","filterPlatformsForClients","payload","filter","config","link_to","mt5","dxtrade","bot","href","smarttrader","className","classNames","platforms","DerivShortLogo","TradersHubHomeButton","PlatformSwitcher","platform_config","ToggleMenuDrawer","MenuLinks","id","getDecimalPlaces","AccountsInfoLoader","is_mobile","speed","HeaderAccountActions","onClickDeposit","push","cashier_deposit","RealAccountSignup","SetAccountCurrencyModal","NewVersionNotification","onUpdate","addUpdateNotification","new_version_available","StaticUrl","DerivBrandShortLogo","account_type","balance","is_eu","is_virtual","account_switcher_disabled_message","disableApp","enableApp","is_account_switcher_disabled","is_accounts_switcher_on","openRealAccountSignup","toggleAccountsDialog","is_notifications_visible","notifications_array","toggleNotificationsModal","filtered_notifications","item","only_toast_message","AccountActions","acc_switcher_disabled_message","is_acc_switcher_on","is_acc_switcher_disabled","notifications_count","length","toggleNotifications","is_dark_mode_on","location","TradersHubIcon","traders_hub_v2","onClick","Icon","icon","size","Text","Localize","i18n_default_text","is_set_currency_modal_visible","is_visible","setCurrency","toggleSetCurrencyModal","toggleModal","has_set_currency","useHasSetCurrency","Modal","has_close_icon","is_open","small","title","localize","Body","Footer","Button","has_effect","text","primary","_Fragment","secondary","setTimeout","removeUpdateListener","addUpdateListener","useHasActiveRealAccount","active_accounts","some","account","account_list","has_active_real_account"],"sourceRoot":""}