{"version":3,"file":"js/core.account-info.e8729a17fdf9a20b55ae.js","mappings":"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","sources":["webpack:///./App/Containers/AccountSwitcher/account-switcher-account-list.jsx","webpack:///./App/Containers/AccountSwitcher/account-switcher-account-wrapper.jsx","webpack:///./App/Containers/AccountSwitcher/helpers/account-helper.js","webpack:///./App/Containers/AccountSwitcher/account-switcher.jsx","webpack:///./App/Containers/AccountSwitcher/index.js","webpack:///./App/Containers/AccountSwitcher/account-switcher-mobile.jsx","webpack:///./App/Components/Layout/Header/account-info-icon.tsx","webpack:///./App/Components/Layout/Header/display-account-type.tsx","webpack:///./App/Components/Layout/Header/account-info.jsx","webpack:///./App/Containers/RealAccountSignup/helpers/constants.js","webpack:///../../hooks/src/useHasActiveRealAccount.ts","webpack:///../../hooks/src/useHasSetCurrency.ts"],"sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Icon, Money, Button, Text } from '@deriv/components';\nimport { formatMoney, getCurrencyName, getCFDAccountDisplay, getCurrencyDisplayCode, isBot } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\n\nconst AccountList = ({\n    balance,\n    currency,\n    currency_icon,\n    display_type,\n    has_balance,\n    has_error,\n    has_reset_balance,\n    is_dark_mode_on,\n    is_disabled,\n    is_virtual,\n    is_eu,\n    product,\n    loginid,\n    market_type,\n    redirectAccount,\n    onClickResetVirtualBalance,\n    selected_loginid,\n    server,\n    shortcode,\n    sub_account_type,\n    platform,\n    should_show_server_name,\n}) => {\n    const currency_badge = currency ? currency_icon : 'IcCurrencyUnknown';\n    return (\n        <React.Fragment>\n            <div\n                id={`dt_${loginid}`}\n                className={classNames('acc-switcher__account', {\n                    'acc-switcher__account--selected': loginid === selected_loginid,\n                    'acc-switcher__account--disabled': is_disabled,\n                })}\n                onClick={() => {\n                    if (!is_disabled) redirectAccount();\n                }}\n            >\n                <span className='acc-switcher__id'>\n                    <Icon\n                        icon={is_virtual ? 'IcCurrencyVirtual' : currency_badge}\n                        className={'acc-switcher__id-icon'}\n                        size={24}\n                    />\n                    <span>\n                        {display_type === 'currency' ? (\n                            <CurrencyDisplay currency={currency} loginid={loginid} is_virtual={is_virtual} />\n                        ) : (\n                            <AccountDisplay\n                                is_eu={is_eu}\n                                market_type={market_type}\n                                server={server}\n                                sub_account_type={sub_account_type}\n                                has_error={has_error}\n                                platform={platform}\n                                product={product}\n                                is_dark_mode_on={is_dark_mode_on}\n                                shortcode={shortcode}\n                                should_show_server_name={should_show_server_name}\n                            />\n                        )}\n                        <div\n                            className={classNames('acc-switcher__loginid-text', {\n                                'acc-switcher__loginid-text--disabled': has_error,\n                            })}\n                        >\n                            {loginid}\n                        </div>\n                    </span>\n                    {has_reset_balance ? (\n                        <Button\n                            is_disabled={is_disabled}\n                            onClick={e => {\n                                e.stopPropagation();\n                                onClickResetVirtualBalance();\n                            }}\n                            className='acc-switcher__reset-account-btn'\n                            secondary\n                            small\n                        >\n                            {localize('Reset balance')}\n                        </Button>\n                    ) : (\n                        has_balance && (\n                            <Text\n                                size='xs'\n                                color='prominent'\n                                styles={{ fontWeight: 'inherit' }}\n                                className='acc-switcher__balance'\n                            >\n                                {currency && (\n                                    <Money\n                                        currency={getCurrencyDisplayCode(currency)}\n                                        amount={formatMoney(currency, balance, true)}\n                                        should_format={false}\n                                        show_currency\n                                    />\n                                )}\n                            </Text>\n                        )\n                    )}\n                </span>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst CurrencyDisplay = ({ currency, loginid, is_virtual }) => {\n    const account_type = loginid.replace(/\\d/g, '');\n\n    if (account_type === 'MF') {\n        return <Localize i18n_default_text='Multipliers' />;\n    }\n\n    if (is_virtual) {\n        return <Localize i18n_default_text='Demo' />;\n    }\n\n    if (!currency) {\n        return <Localize i18n_default_text='No currency assigned' />;\n    }\n\n    return getCurrencyName(currency);\n};\n\nconst AccountDisplay = ({\n    has_error,\n    market_type,\n    sub_account_type,\n    platform,\n    server,\n    product,\n    is_dark_mode_on,\n    is_eu,\n    shortcode,\n    should_show_server_name,\n}) => {\n    const account_title = getCFDAccountDisplay({ market_type, sub_account_type, platform, is_eu, shortcode, product });\n    // TODO: Remove once account with error has market_type and sub_account_type in details response\n    const getServerName = React.useCallback(account => {\n        if (account) {\n            const server_region = account.server_info?.geolocation?.region;\n            if (server_region) {\n                return `${server_region} ${\n                    account?.server_info?.geolocation?.sequence === 1 ? '' : account?.server_info?.geolocation?.sequence\n                }`;\n            }\n        }\n        return '';\n    }, []);\n    if (has_error)\n        return (\n            <div>\n                <Text color='disabled' size='xs'>\n                    <Localize i18n_default_text='Unavailable' />\n                </Text>\n                {server?.server_info?.geolocation &&\n                    should_show_server_name &&\n                    market_type === 'synthetic' &&\n                    shortcode === 'svg' && (\n                        <Text color='less-prominent' size='xxs' className='badge-server badge-server--disabled'>\n                            {getServerName(server)}\n                        </Text>\n                    )}\n            </div>\n        );\n\n    const is_bot = isBot();\n    return (\n        <div>\n            {/* TODO: Remove below condition once deriv x changes are completed */}\n            {platform === 'dxtrade' && account_title === localize('Derived') ? localize('Synthetic') : account_title}\n            {server?.server_info?.geolocation &&\n                should_show_server_name &&\n                market_type === 'synthetic' &&\n                shortcode === 'svg' && (\n                    <Text\n                        color={is_dark_mode_on ? 'general' : 'colored-background'}\n                        size='xxs'\n                        className={classNames('badge-server', {\n                            'badge-server-bot': is_bot,\n                        })}\n                    >\n                        {getServerName(server)}\n                    </Text>\n                )}\n        </div>\n    );\n};\n\nexport default AccountList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { ContentExpander } from '@deriv/components';\n\nconst AccountWrapper = ({ children, header, is_visible, toggleVisibility }) => (\n    <ContentExpander\n        className='acc-switcher'\n        title={header}\n        is_expanded={is_visible}\n        onToggle={toggleVisibility}\n        is_title_spaced\n    >\n        {children}\n    </ContentExpander>\n);\n\nAccountWrapper.propTypes = {\n    children: PropTypes.node,\n    header: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    is_visible: PropTypes.bool,\n    toggleVisibility: PropTypes.func,\n};\n\nexport default AccountWrapper;\n","import { isCryptocurrency } from '@deriv/shared';\n\nexport const getSortedAccountList = (account_list, accounts) => {\n    // sort accounts as follows:\n    // top is fiat, then crypto (each alphabetically by currency), then demo\n    return [...account_list].sort((a, b) => {\n        const a_currency = accounts[a.loginid].currency;\n        const b_currency = accounts[b.loginid].currency;\n        const a_is_crypto = isCryptocurrency(a_currency);\n        const b_is_crypto = isCryptocurrency(b_currency);\n        const a_is_fiat = !a_is_crypto;\n        const b_is_fiat = !b_is_crypto;\n        if (a.is_virtual || b.is_virtual) {\n            return a.is_virtual ? 1 : -1;\n        } else if ((a_is_crypto && b_is_crypto) || (a_is_fiat && b_is_fiat)) {\n            return a_currency < b_currency ? -1 : 1;\n        } else if (a_is_fiat && b_is_crypto) {\n            return -1;\n        }\n        return 1;\n    });\n};\n\nexport const getSortedCFDList = account_list => {\n    // for DXTrade, MT5, synthetic, financial, financial stp\n    return [...account_list].sort((a, b) => {\n        const a_is_demo = isDemo(a);\n        const b_is_demo = isDemo(b);\n\n        if (a_is_demo && !b_is_demo) {\n            return 1;\n        }\n        if (b_is_demo && !a_is_demo) {\n            return -1;\n        }\n        if (a.market_type === 'gaming' || a.market_type === 'synthetic') {\n            return -1;\n        }\n        if (a.sub_account_type === 'financial') {\n            return b.market_type === 'gaming' || b.market_type === 'synthetic' ? 1 : -1;\n        }\n        return 1;\n    });\n};\n\nexport const isDemo = account => account.account_type === 'demo';\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport {\n    Button,\n    DesktopWrapper,\n    MobileWrapper,\n    Div100vhContainer,\n    Icon,\n    Money,\n    Tabs,\n    ThemedScrollbars,\n    Text,\n    useOnClickOutside,\n    Loading,\n} from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { routes, formatMoney, ContentFlag } from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { useHasSetCurrency, useOauth2 } from '@deriv/hooks';\nimport { getAccountTitle } from 'App/Containers/RealAccountSignup/helpers/constants';\nimport { BinaryLink } from 'App/Components/Routes';\nimport AccountList from './account-switcher-account-list.jsx';\nimport AccountWrapper from './account-switcher-account-wrapper.jsx';\nimport { getSortedAccountList, getSortedCFDList, isDemo } from './helpers';\n\nconst AccountSwitcher = observer(({ history, is_mobile, is_visible }) => {\n    const { client, ui, traders_hub } = useStore();\n    const {\n        available_crypto_currencies,\n        loginid: account_loginid,\n        accounts,\n        account_type,\n        account_list,\n        currency,\n        is_eu,\n        is_landing_company_loaded,\n        is_low_risk,\n        is_high_risk,\n        is_logged_in,\n        is_virtual,\n        has_fiat,\n        mt5_login_list,\n        logout: logoutClient,\n        obj_total_balance,\n        switchAccount,\n        resetVirtualBalance,\n        has_active_real_account,\n        upgradeable_landing_companies,\n        real_account_creation_unlock_date,\n        has_any_real_account,\n        virtual_account_loginid,\n        has_maltainvest_account,\n    } = client;\n    const { show_eu_related_content, content_flag, selectRegion, setTogglePlatformType } = traders_hub;\n    const {\n        is_dark_mode_on,\n        is_positions_drawer_on,\n        openRealAccountSignup,\n        toggleAccountsDialog,\n        togglePositionsDrawer,\n        toggleSetCurrencyModal,\n        should_show_real_accounts_list,\n        setShouldShowCooldownModal,\n        setIsForcedToExitPnv,\n    } = ui;\n    const [active_tab_index, setActiveTabIndex] = React.useState(!is_virtual || should_show_real_accounts_list ? 0 : 1);\n    const [is_deriv_demo_visible, setDerivDemoVisible] = React.useState(true);\n    const [is_deriv_real_visible, setDerivRealVisible] = React.useState(true);\n    const [is_non_eu_regulator_visible, setNonEuRegulatorVisible] = React.useState(true);\n    const [is_eu_regulator_visible, setEuRegulatorVisible] = React.useState(true);\n\n    const wrapper_ref = React.useRef();\n    const scroll_ref = React.useRef(null);\n\n    const account_total_balance_currency = obj_total_balance.currency;\n\n    const vrtc_loginid = account_list.find(account => account.is_virtual)?.loginid;\n    const vrtc_currency = accounts[vrtc_loginid] ? accounts[vrtc_loginid].currency : 'USD';\n\n    const toggleVisibility = section => {\n        switch (section) {\n            case 'demo_deriv':\n                return setDerivDemoVisible(!is_deriv_demo_visible);\n            case 'real_deriv':\n                return setDerivRealVisible(!is_deriv_real_visible);\n            case 'non-eu-regulator':\n                return setNonEuRegulatorVisible(!is_non_eu_regulator_visible);\n            case 'eu-regulator':\n                return setEuRegulatorVisible(!is_eu_regulator_visible);\n            default:\n                return false;\n        }\n    };\n\n    const logoutHandler = async () => {\n        // for DBot we need to logout first and only after this redirect to TH\n        if (window.location.pathname.startsWith(routes.bot)) {\n            await logoutClient();\n            history.push(routes.traders_hub);\n        } else {\n            if (window.location.pathname.startsWith(routes.phone_verification)) {\n                setIsForcedToExitPnv(true);\n                // Add a small delay to ensure state is updated before navigation because adding await doesn't work here\n                await new Promise(resolve => setTimeout(resolve, 0));\n            }\n            history.push(routes.traders_hub);\n            await logoutClient();\n        }\n    };\n\n    const { oAuthLogout } = useOauth2({ handleLogout: logoutHandler });\n\n    const handleLogout = async () => {\n        closeAccountsDialog();\n        if (is_positions_drawer_on) {\n            togglePositionsDrawer(); // TODO: hide drawer inside logout, once it is a mobx action\n        }\n\n        await oAuthLogout();\n    };\n\n    const closeAccountsDialog = () => {\n        toggleAccountsDialog(false);\n    };\n\n    const validateClickOutside = event => is_visible && !event.target.classList.contains('acc-info');\n\n    useOnClickOutside(wrapper_ref, closeAccountsDialog, validateClickOutside);\n\n    const setAccountCurrency = () => {\n        closeAccountsDialog();\n        toggleSetCurrencyModal();\n    };\n\n    const doSwitch = async loginid => {\n        closeAccountsDialog();\n        if (account_loginid === loginid) return;\n        await switchAccount(loginid);\n    };\n\n    const resetBalance = async () => {\n        closeAccountsDialog();\n        resetVirtualBalance();\n    };\n\n    // Real accounts is always the first tab index based on design\n    const isRealAccountTab = active_tab_index === 0;\n    const isDemoAccountTab = active_tab_index === 1;\n\n    const getRealMT5 = () => {\n        if (is_landing_company_loaded) {\n            const low_risk_non_eu = content_flag === ContentFlag.LOW_RISK_CR_NON_EU;\n            if (low_risk_non_eu) {\n                return getSortedCFDList(mt5_login_list).filter(\n                    account => !isDemo(account) && account.landing_company_short !== 'maltainvest'\n                );\n            }\n            return getSortedCFDList(mt5_login_list).filter(account => !isDemo(account));\n        }\n        return [];\n    };\n\n    const canOpenMulti = () => {\n        if (available_crypto_currencies.length < 1 && !has_fiat) return true;\n        return !is_virtual;\n    };\n\n    // SVG clients can't upgrade.\n    const getRemainingRealAccounts = () => {\n        if (show_eu_related_content || is_virtual || !canOpenMulti() || is_low_risk) {\n            return upgradeable_landing_companies;\n        }\n        return [];\n    };\n\n    const hasSetCurrency = useHasSetCurrency();\n\n    const getTotalDemoAssets = () => {\n        const vrtc_balance = accounts[vrtc_loginid] ? accounts[vrtc_loginid].balance : 0;\n\n        return vrtc_balance;\n    };\n\n    const getTotalRealAssets = () => {\n        const traders_hub_total = obj_total_balance.amount_real;\n        return traders_hub_total;\n    };\n\n    if (!is_logged_in) return false;\n\n    const canResetBalance = account => {\n        const account_init_balance = 10000;\n        return account?.is_virtual && account?.balance !== account_init_balance;\n    };\n\n    const checkMultipleSvgAcc = () => {\n        const all_svg_acc = [];\n        getRealMT5().map(acc => {\n            if (acc.landing_company_short === 'svg' && acc.market_type === 'synthetic') {\n                if (all_svg_acc.length) {\n                    all_svg_acc.forEach(svg_acc => {\n                        if (svg_acc.server !== acc.server) all_svg_acc.push(acc);\n                        return all_svg_acc;\n                    });\n                } else {\n                    all_svg_acc.push(acc);\n                }\n            }\n        });\n        return all_svg_acc.length > 1;\n    };\n\n    const have_more_accounts = type =>\n        getSortedAccountList(account_list, accounts).filter(\n            account => !account.is_virtual && account.loginid.startsWith(type)\n        ).length > 1;\n\n    // all: 1 in mt5_status response means that server is suspended\n    const has_cr_account = account_list.find(acc => acc.loginid?.startsWith('CR'))?.loginid;\n\n    const demo_account = (\n        <div className='acc-switcher__list-wrapper'>\n            {vrtc_loginid && (\n                <AccountWrapper\n                    header={localize('Deriv account')}\n                    is_visible={is_deriv_demo_visible}\n                    toggleVisibility={() => {\n                        toggleVisibility('demo_deriv');\n                    }}\n                >\n                    <div className='acc-switcher__accounts'>\n                        {getSortedAccountList(account_list, accounts)\n                            .filter(account => account.is_virtual)\n                            .map(account => (\n                                <AccountList\n                                    is_dark_mode_on={is_dark_mode_on}\n                                    key={account.loginid}\n                                    balance={accounts[account.loginid].balance}\n                                    currency={accounts[account.loginid].currency}\n                                    currency_icon={`IcCurrency-${account.icon}`}\n                                    display_type={'currency'}\n                                    has_balance={'balance' in accounts[account.loginid]}\n                                    has_reset_balance={canResetBalance(accounts[account_loginid])}\n                                    is_disabled={account.is_disabled}\n                                    is_virtual={account.is_virtual}\n                                    loginid={account.loginid}\n                                    product={account.product}\n                                    redirectAccount={account.is_disabled ? undefined : () => doSwitch(account.loginid)}\n                                    onClickResetVirtualBalance={resetBalance}\n                                    selected_loginid={account_loginid}\n                                />\n                            ))}\n                    </div>\n                </AccountWrapper>\n            )}\n        </div>\n    );\n\n    const real_accounts = (\n        <div ref={scroll_ref} className='acc-switcher__list-wrapper'>\n            <React.Fragment>\n                {!is_eu || is_low_risk ? (\n                    <React.Fragment>\n                        <AccountWrapper\n                            className='acc-switcher__title'\n                            header={\n                                is_low_risk && has_maltainvest_account\n                                    ? localize(`Non-EU Deriv ${have_more_accounts('CR') ? 'accounts' : 'account'}`)\n                                    : localize(`Deriv ${have_more_accounts('CR') ? 'accounts' : 'account'}`)\n                            }\n                            is_visible={is_non_eu_regulator_visible}\n                            toggleVisibility={() => {\n                                toggleVisibility('real_deriv');\n                            }}\n                        >\n                            <div className='acc-switcher__accounts'>\n                                {getSortedAccountList(account_list, accounts)\n                                    .filter(account => !account.is_virtual && account.loginid.startsWith('CR'))\n                                    .map(account => {\n                                        return (\n                                            <AccountList\n                                                account_type={account_type}\n                                                is_dark_mode_on={is_dark_mode_on}\n                                                key={account.loginid}\n                                                balance={accounts[account.loginid].balance}\n                                                currency={accounts[account.loginid].currency}\n                                                currency_icon={`IcCurrency-${account.icon}`}\n                                                display_type={'currency'}\n                                                has_balance={'balance' in accounts[account.loginid]}\n                                                is_disabled={account.is_disabled}\n                                                is_virtual={account.is_virtual}\n                                                is_eu={is_eu}\n                                                loginid={account.loginid}\n                                                redirectAccount={\n                                                    account.is_disabled ? undefined : () => doSwitch(account.loginid)\n                                                }\n                                                selected_loginid={account_loginid}\n                                                should_show_server_name={checkMultipleSvgAcc()}\n                                            />\n                                        );\n                                    })}\n                            </div>\n                            {!has_cr_account &&\n                                getRemainingRealAccounts()\n                                    .filter(account => account === 'svg')\n                                    .map((account, index) => (\n                                        <div key={index} className='acc-switcher__new-account'>\n                                            <Icon icon='IcDeriv' size={24} />\n                                            <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                                {getAccountTitle(account)}\n                                            </Text>\n                                            <Button\n                                                id='dt_core_account-switcher_add-new-account'\n                                                onClick={() => {\n                                                    if (real_account_creation_unlock_date) {\n                                                        closeAccountsDialog();\n                                                        setShouldShowCooldownModal(true);\n                                                    } else {\n                                                        selectRegion('Non-EU');\n                                                        openRealAccountSignup('svg');\n                                                    }\n                                                }}\n                                                className='acc-switcher__new-account-btn'\n                                                secondary\n                                                small\n                                            >\n                                                {localize('Add')}\n                                            </Button>\n                                        </div>\n                                    ))}\n                        </AccountWrapper>\n                        <div className='acc-switcher__separator' />\n                    </React.Fragment>\n                ) : null}\n                {(!is_high_risk && has_maltainvest_account) || is_eu ? (\n                    <AccountWrapper\n                        header={\n                            is_low_risk && has_maltainvest_account\n                                ? localize(`EU Deriv ${have_more_accounts('MF') ? 'accounts' : 'account'}`)\n                                : localize(`Deriv ${have_more_accounts('MF') ? 'accounts' : 'account'}`)\n                        }\n                        is_visible={is_eu_regulator_visible}\n                        toggleVisibility={() => {\n                            toggleVisibility('real_deriv');\n                        }}\n                    >\n                        <div className='acc-switcher__accounts'>\n                            {getSortedAccountList(account_list, accounts)\n                                .filter(account => !account.is_virtual && account.loginid.startsWith('MF'))\n                                .map(account => {\n                                    return (\n                                        <AccountList\n                                            account_type={account_type}\n                                            is_dark_mode_on={is_dark_mode_on}\n                                            key={account.loginid}\n                                            balance={accounts[account.loginid].balance}\n                                            currency={accounts[account.loginid].currency}\n                                            currency_icon={`IcCurrency-${account.icon}`}\n                                            display_type={'currency'}\n                                            has_balance={'balance' in accounts[account.loginid]}\n                                            is_disabled={account.is_disabled}\n                                            is_virtual={account.is_virtual}\n                                            is_eu={is_eu}\n                                            loginid={account.loginid}\n                                            redirectAccount={\n                                                account.is_disabled ? undefined : () => doSwitch(account.loginid)\n                                            }\n                                            selected_loginid={account_loginid}\n                                            should_show_server_name={checkMultipleSvgAcc()}\n                                        />\n                                    );\n                                })}\n                        </div>\n                        {getRemainingRealAccounts()\n                            .filter(account => account === 'maltainvest')\n                            .map((account, index) => {\n                                return (\n                                    <div key={index} className='acc-switcher__new-account'>\n                                        <Icon icon='IcDeriv' size={24} />\n                                        <Text size='xs' color='general' className='acc-switcher__new-account-text'>\n                                            {getAccountTitle(account)}\n                                        </Text>\n                                        <Button\n                                            id='dt_core_account-switcher_add-new-account'\n                                            onClick={() => {\n                                                if (real_account_creation_unlock_date) {\n                                                    closeAccountsDialog();\n                                                    setShouldShowCooldownModal(true);\n                                                } else {\n                                                    selectRegion('EU');\n                                                    openRealAccountSignup('maltainvest');\n                                                }\n                                            }}\n                                            className='acc-switcher__new-account-btn'\n                                            secondary\n                                            small\n                                        >\n                                            {localize('Add')}\n                                        </Button>\n                                    </div>\n                                );\n                            })}\n                    </AccountWrapper>\n                ) : null}\n            </React.Fragment>\n        </div>\n    );\n\n    const first_real_login_id = account_list?.find(account => /^(CR|MF)/.test(account.loginid))?.loginid;\n\n    const TradersHubRedirect = () => {\n        const TradersHubLink = () => {\n            const handleRedirect = async () => {\n                if (!is_virtual && isDemoAccountTab) {\n                    await switchAccount(virtual_account_loginid);\n                } else if (is_virtual && isRealAccountTab) {\n                    await switchAccount(first_real_login_id);\n                }\n                toggleAccountsDialog(false);\n                history.push(routes.traders_hub);\n                setTogglePlatformType('cfd');\n            };\n\n            return (\n                <React.Fragment>\n                    <div className='acc-switcher__traders-hub'>\n                        <BinaryLink onClick={handleRedirect} className='acc-switcher__traders-hub--link'>\n                            <Text size='xs' align='center' className='acc-switcher__traders-hub--text'>\n                                <Localize i18n_default_text=\"Looking for CFD accounts? Go to Trader's Hub\" />\n                            </Text>\n                        </BinaryLink>\n                    </div>\n                    <div className='acc-switcher__separator' />\n                </React.Fragment>\n            );\n        };\n\n        if ((isRealAccountTab && has_any_real_account) || isDemoAccountTab) {\n            return <TradersHubLink />;\n        }\n\n        return null;\n    };\n\n    return (\n        <div className='acc-switcher__list' ref={wrapper_ref} data-testid='acc-switcher'>\n            {is_landing_company_loaded ? (\n                <React.Fragment>\n                    <Tabs\n                        active_index={active_tab_index}\n                        className='acc-switcher__list-tabs'\n                        onTabItemClick={index => setActiveTabIndex(index)}\n                        top\n                    >\n                        {/* TODO: De-couple and refactor demo and real accounts groups\n                        into a single reusable AccountListItem component */}\n                        <div label={localize('Real')} id='real_account_tab'>\n                            <DesktopWrapper>\n                                <ThemedScrollbars height='354px'>{real_accounts}</ThemedScrollbars>\n                            </DesktopWrapper>\n                            <MobileWrapper>\n                                <Div100vhContainer\n                                    className='acc-switcher__list-container'\n                                    max_autoheight_offset='234px'\n                                >\n                                    {real_accounts}\n                                </Div100vhContainer>\n                            </MobileWrapper>\n                        </div>\n                        <div label={localize('Demo')} id='dt_core_account-switcher_demo-tab'>\n                            <DesktopWrapper>\n                                <ThemedScrollbars height='354px'>{demo_account}</ThemedScrollbars>\n                            </DesktopWrapper>\n                            <MobileWrapper>\n                                <Div100vhContainer\n                                    className='acc-switcher__list-container'\n                                    max_autoheight_offset='234px'\n                                >\n                                    {demo_account}\n                                </Div100vhContainer>\n                            </MobileWrapper>\n                        </div>\n                    </Tabs>\n                    <div\n                        className={classNames('acc-switcher__separator', {\n                            'acc-switcher__separator--auto-margin': is_mobile,\n                        })}\n                    />\n                    <div className='acc-switcher__total'>\n                        <Text line_height='s' size='xs' weight='bold' color='prominent'>\n                            <Localize i18n_default_text='Total assets' />\n                        </Text>\n                        <Text size='xs' color='prominent' className='acc-switcher__balance'>\n                            <Money\n                                currency={isRealAccountTab ? account_total_balance_currency : vrtc_currency}\n                                amount={formatMoney(\n                                    isRealAccountTab ? account_total_balance_currency : vrtc_currency,\n                                    isRealAccountTab ? getTotalRealAssets() : getTotalDemoAssets(),\n                                    true\n                                )}\n                                show_currency\n                                should_format={false}\n                            />\n                        </Text>\n                    </div>\n                    <Text color='less-prominent' line_height='xs' size='xxxs' className='acc-switcher__total-subtitle'>\n                        {localize('Total assets in your Deriv accounts.')}\n                    </Text>\n                    <div className='acc-switcher__separator' />\n\n                    <TradersHubRedirect />\n\n                    <div className='acc-switcher__footer'>\n                        {isRealAccountTab && has_active_real_account && !is_virtual && (\n                            <Button\n                                className='acc-switcher__btn--traders_hub'\n                                secondary\n                                onClick={\n                                    has_any_real_account && (!hasSetCurrency || !currency)\n                                        ? setAccountCurrency\n                                        : () => openRealAccountSignup('manage')\n                                }\n                            >\n                                {localize('Manage accounts')}\n                            </Button>\n                        )}\n                        <div id='dt_logout_button' className='acc-switcher__logout' onClick={handleLogout}>\n                            <Text color='prominent' size='xs' align='left' className='acc-switcher__logout-text'>\n                                {localize('Log out')}\n                            </Text>\n                            <Icon icon='IcLogout' className='acc-switcher__logout-icon drawer__icon' />\n                        </div>\n                    </div>\n                </React.Fragment>\n            ) : (\n                <Loading is_fullscreen={false} />\n            )}\n        </div>\n    );\n});\n\nAccountSwitcher.propTypes = {\n    is_visible: PropTypes.bool,\n    history: PropTypes.object,\n};\n\nexport default withRouter(AccountSwitcher);\n","import AccountSwitcher from './account-switcher';\n\nexport default AccountSwitcher;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Div100vhContainer, Modal } from '@deriv/components';\nimport AccountSwitcher from 'App/Containers/AccountSwitcher';\n\nconst AccountSwitcherMobile = props => {\n    const { disableApp, enableApp, is_visible, is_upgrade_enabled, toggle } = props;\n    return (\n        <Modal\n            id='dt_account_switcher_modal'\n            className='accounts-switcher'\n            enableApp={enableApp}\n            is_open={is_visible}\n            is_vertical_top\n            disableApp={disableApp}\n            has_close_icon={false}\n            toggleModal={toggle}\n            height='auto'\n            width='calc(100vw - 32px)'\n        >\n            <Div100vhContainer\n                className={classNames('acc-switcher__wrapper', 'acc-switcher__wrapper--is-mobile')}\n                max_autoheight_offset='48px'\n            >\n                <AccountSwitcher is_mobile is_visible={true} toggle={toggle} is_upgrade_enabled={is_upgrade_enabled} />\n            </Div100vhContainer>\n        </Modal>\n    );\n};\n\nAccountSwitcherMobile.propTypes = {\n    children: PropTypes.any,\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_visible: PropTypes.bool,\n    is_upgrade_enabled: PropTypes.bool,\n    onClose: PropTypes.func,\n    title: PropTypes.string,\n    toggle: PropTypes.func,\n    visible: PropTypes.bool,\n    wrapperClassName: PropTypes.string,\n};\n\nexport default AccountSwitcherMobile;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\n\ntype TAccountInfoIcon = {\n    is_virtual?: boolean;\n    currency?: string;\n};\n\nconst AccountInfoIcon = ({ is_virtual, currency }: TAccountInfoIcon) => (\n    <Icon\n        data_testid='dt_icon'\n        icon={`IcCurrency-${is_virtual ? 'virtual' : currency ?? 'Unknown'}`}\n        className={`acc-info__id-icon acc-info__id-icon--${is_virtual ? 'virtual' : currency}`}\n        size={24}\n    />\n);\n\nexport default AccountInfoIcon;\n","import React from 'react';\nimport { Localize } from '@deriv/translations';\n\ntype TDisplayAccountType = {\n    account_type: string;\n    is_eu: boolean;\n};\n\nconst DisplayAccountType = ({ account_type, is_eu }: TDisplayAccountType) => {\n    if (account_type === 'financial') {\n        return <Localize i18n_default_text='Multipliers' />;\n    } else if (account_type === 'gaming') {\n        if (is_eu) {\n            return <Localize i18n_default_text='Options' />;\n        }\n        return <Localize i18n_default_text='Derived' />;\n    }\n    return null;\n};\n\nexport default DisplayAccountType;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { CSSTransition } from 'react-transition-group';\nimport { Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { getCurrencyDisplayCode } from '@deriv/shared';\nimport { useDevice } from '@deriv-com/ui';\nimport AccountSwitcher from 'App/Containers/AccountSwitcher';\nimport AccountSwitcherMobile from 'App/Containers/AccountSwitcher/account-switcher-mobile';\nimport AccountInfoWrapper from './account-info-wrapper';\nimport AccountInfoIcon from './account-info-icon';\nimport DisplayAccountType from './display-account-type';\n\nconst AccountInfo = ({\n    acc_switcher_disabled_message,\n    account_type = '',\n    balance,\n    currency,\n    disableApp,\n    enableApp,\n    is_dialog_on,\n    is_eu,\n    is_virtual,\n    toggleDialog,\n    is_disabled,\n    is_mobile,\n}) => {\n    const currency_lower = currency?.toLowerCase();\n    const { isDesktop } = useDevice();\n\n    return (\n        <div className='acc-info__wrapper'>\n            <div className='acc-info__separator' />\n            <AccountInfoWrapper\n                is_disabled={is_disabled}\n                disabled_message={acc_switcher_disabled_message}\n                is_mobile={is_mobile}\n            >\n                <div\n                    data-testid='dt_acc_info'\n                    id='dt_core_account-info_acc-info'\n                    className={classNames('acc-info', {\n                        'acc-info--show': is_dialog_on,\n                        'acc-info--is-virtual': is_virtual,\n                        'acc-info--is-disabled': is_disabled,\n                    })}\n                    onClick={is_disabled ? undefined : () => toggleDialog()}\n                >\n                    <span className='acc-info__id'>\n                        {isDesktop ? (\n                            <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                        ) : (\n                            (is_virtual || currency) && (\n                                <AccountInfoIcon is_virtual={is_virtual} currency={currency_lower} />\n                            )\n                        )}\n                    </span>\n                    {(typeof balance !== 'undefined' || !currency) && (\n                        <div className='acc-info__account-type-and-balance'>\n                            <p\n                                data-testid='dt_balance'\n                                className={classNames('acc-info__balance', {\n                                    'acc-info__balance--no-currency': !currency && !is_virtual,\n                                })}\n                            >\n                                {!currency ? (\n                                    <Localize i18n_default_text='No currency assigned' />\n                                ) : (\n                                    `${balance} ${getCurrencyDisplayCode(currency)}`\n                                )}\n                            </p>\n                            <Text size='xxxs' line_height='s'>\n                                <DisplayAccountType account_type={account_type} is_eu={is_eu} />\n                            </Text>\n                        </div>\n                    )}\n                    {is_disabled ? (\n                        <Icon data_testid='dt_lock_icon' icon='IcLock' />\n                    ) : (\n                        <Icon\n                            data_testid='dt_select_arrow'\n                            icon='IcChevronDownBold'\n                            className='acc-info__select-arrow'\n                        />\n                    )}\n                </div>\n            </AccountInfoWrapper>\n            {isDesktop ? (\n                <CSSTransition\n                    in={is_dialog_on}\n                    timeout={200}\n                    classNames={{\n                        enter: 'acc-switcher__wrapper--enter',\n                        enterDone: 'acc-switcher__wrapper--enter-done',\n                        exit: 'acc-switcher__wrapper--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <div className='acc-switcher__wrapper'>\n                        <AccountSwitcher is_visible={is_dialog_on} toggle={toggleDialog} />\n                    </div>\n                </CSSTransition>\n            ) : (\n                <AccountSwitcherMobile\n                    is_visible={is_dialog_on}\n                    disableApp={disableApp}\n                    enableApp={enableApp}\n                    toggle={toggleDialog}\n                />\n            )}\n        </div>\n    );\n};\n\nAccountInfo.propTypes = {\n    acc_switcher_disabled_message: PropTypes.string,\n    account_type: PropTypes.string,\n    balance: PropTypes.string,\n    currency: PropTypes.string,\n    disableApp: PropTypes.func,\n    enableApp: PropTypes.func,\n    is_dialog_on: PropTypes.bool,\n    is_disabled: PropTypes.bool,\n    is_eu: PropTypes.bool,\n    is_virtual: PropTypes.bool,\n    is_mobile: PropTypes.bool,\n    loginid: PropTypes.string,\n    toggleDialog: PropTypes.func,\n};\n\nexport default AccountInfo;\n","import { localize } from '@deriv/translations';\n\n/**\n * Experian result is defined by client's information validity.\n * Defines the possible types of actions needed to take on experian result response.\n *\n * Possible values are:\n *   - Success: Client can trade\n *   - Warn: POI/POA Validity partially failed, trade in demo possible\n *   - Danger: POI/POA validation failed. Trade is locked until this resolved.\n *   - Pending: POI/POA is in pending state.\n * @enum {EXPERIAN}\n */\nexport const EXPERIAN = {\n    SUCCESS: 1,\n    WARN: 0,\n    DANGER: -1,\n    PENDING: -2,\n};\n\n/**\n * Return account title for the given landing company\n *\n * @param {string} landing_company_shortcode\n * @return {string} localized title\n */\nexport const getAccountTitle = landing_company_shortcode => {\n    switch (landing_company_shortcode) {\n        case 'svg':\n            return localize('Options & Multipliers');\n        case 'maltainvest':\n            return localize('Multipliers');\n        default:\n            return localize('Deriv');\n    }\n};\n\n/**\n * @param {string} landing_company_shortcode\n *\n * @return {EXPERIAN.WARN|EXPERIAN.SUCCESS|EXPERIAN.DANGER}\n */\nexport const getExperianResult = status => {\n    const { landing_company_shortcode = '' } = status;\n\n    if (landing_company_shortcode === 'svg') return EXPERIAN.SUCCESS;\n\n    return EXPERIAN.SUCCESS;\n};\n\nexport const screen_height_sm_threshold = 930;\n","import { useStore } from '@deriv/stores';\n\nconst useHasActiveRealAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n\n    const has_active_real_account = active_accounts.some(account => account.is_virtual === 0);\n\n    return has_active_real_account;\n};\n\nexport default useHasActiveRealAccount;\n","import { useStore } from '@deriv/stores';\nimport useHasActiveRealAccount from './useHasActiveRealAccount';\n\nconst useHasSetCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n    const has_active_real_account = useHasActiveRealAccount();\n\n    const has_real_account = account_list\n        .filter(account => !account.is_virtual)\n        .some(account => account.title !== 'Real' && account.title !== 'Investment');\n\n    const has_set_currency = has_real_account || !has_active_real_account;\n\n    return has_set_currency;\n};\n\nexport default useHasSetCurrency;\n"],"names":["CurrencyDisplay","_ref2","currency","loginid","is_virtual","replace","_jsx","Localize","i18n_default_text","getCurrencyName","AccountDisplay","_ref3","_server$server_info","_server$server_info2","has_error","market_type","sub_account_type","platform","server","product","is_dark_mode_on","is_eu","shortcode","should_show_server_name","account_title","getCFDAccountDisplay","getServerName","React","account","_account$server_info","server_region","server_info","geolocation","region","_account$server_info2","_account$server_info3","sequence","_jsxs","children","Text","color","size","className","is_bot","isBot","localize","classNames","_ref","balance","currency_icon","display_type","has_balance","has_reset_balance","is_disabled","redirectAccount","onClickResetVirtualBalance","selected_loginid","currency_badge","id","onClick","Icon","icon","Button","e","stopPropagation","secondary","small","styles","fontWeight","Money","getCurrencyDisplayCode","amount","formatMoney","should_format","show_currency","AccountWrapper","header","is_visible","toggleVisibility","ContentExpander","title","is_expanded","onToggle","is_title_spaced","propTypes","PropTypes","getSortedAccountList","account_list","accounts","sort","a","b","a_currency","b_currency","a_is_crypto","isCryptocurrency","b_is_crypto","a_is_fiat","b_is_fiat","getSortedCFDList","a_is_demo","isDemo","b_is_demo","account_type","AccountSwitcher","observer","_account_list$find","_account_list$find2","_account_list$find3","history","is_mobile","client","ui","traders_hub","useStore","available_crypto_currencies","account_loginid","is_landing_company_loaded","is_low_risk","is_high_risk","is_logged_in","has_fiat","mt5_login_list","logout","logoutClient","obj_total_balance","switchAccount","resetVirtualBalance","has_active_real_account","upgradeable_landing_companies","real_account_creation_unlock_date","has_any_real_account","virtual_account_loginid","has_maltainvest_account","show_eu_related_content","content_flag","selectRegion","setTogglePlatformType","is_positions_drawer_on","openRealAccountSignup","toggleAccountsDialog","togglePositionsDrawer","toggleSetCurrencyModal","should_show_real_accounts_list","setShouldShowCooldownModal","setIsForcedToExitPnv","active_tab_index","setActiveTabIndex","is_deriv_demo_visible","setDerivDemoVisible","is_deriv_real_visible","setDerivRealVisible","is_non_eu_regulator_visible","setNonEuRegulatorVisible","is_eu_regulator_visible","setEuRegulatorVisible","wrapper_ref","scroll_ref","account_total_balance_currency","vrtc_loginid","find","vrtc_currency","section","oAuthLogout","useOauth2","handleLogout","async","window","location","pathname","startsWith","routes","bot","push","phone_verification","Promise","resolve","setTimeout","closeAccountsDialog","useOnClickOutside","event","target","classList","contains","doSwitch","resetBalance","isRealAccountTab","isDemoAccountTab","getRemainingRealAccounts","length","hasSetCurrency","useHasSetCurrency","canResetBalance","checkMultipleSvgAcc","all_svg_acc","getRealMT5","ContentFlag","LOW_RISK_CR_NON_EU","filter","landing_company_short","map","acc","forEach","svg_acc","have_more_accounts","type","has_cr_account","_acc$loginid","demo_account","AccountList","undefined","real_accounts","ref","index","getAccountTitle","first_real_login_id","test","TradersHubRedirect","TradersHubLink","BinaryLink","align","Tabs","active_index","onTabItemClick","top","label","DesktopWrapper","ThemedScrollbars","height","MobileWrapper","Div100vhContainer","max_autoheight_offset","line_height","weight","amount_real","setAccountCurrency","Loading","is_fullscreen","withRouter","AccountSwitcherMobile","props","disableApp","enableApp","is_upgrade_enabled","toggle","Modal","is_open","is_vertical_top","has_close_icon","toggleModal","width","onClose","visible","wrapperClassName","data_testid","AccountInfo","acc_switcher_disabled_message","is_dialog_on","toggleDialog","currency_lower","toLowerCase","isDesktop","useDevice","AccountInfoWrapper","disabled_message","AccountInfoIcon","DisplayAccountType","CSSTransition","in","timeout","enter","enterDone","exit","unmountOnExit","EXPERIAN","SUCCESS","WARN","DANGER","PENDING","landing_company_shortcode","getExperianResult","status","useHasActiveRealAccount","active_accounts","some"],"sourceRoot":""}