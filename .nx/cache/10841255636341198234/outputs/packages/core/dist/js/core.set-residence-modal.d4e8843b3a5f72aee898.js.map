{"version":3,"file":"js/core.set-residence-modal.d4e8843b3a5f72aee898.js","mappings":"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","sources":["webpack:///./App/Containers/SetResidenceModal/set-residence-modal.jsx","webpack:///./App/Containers/SetResidenceModal/index.js","webpack:///./App/Containers/SetResidenceModal/set-residence-form.jsx"],"sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Form, Formik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { Button, Dialog, Text } from '@deriv/components';\nimport { website_name } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport SetResidenceForm from './set-residence-form.jsx';\nimport 'Sass/app/modules/set-residence.scss';\nimport { observer, useStore } from '@deriv/stores';\n\n// TODO: Move some of these functions to helpers since some of them are shared with AccountSignUpModal\nconst isResidenceText = (item, values) => item.text.toLowerCase() === values.residence.toLowerCase();\n\nconst validateResidence = (values, residence_list) => {\n    const errors = {};\n\n    if (!values.residence) {\n        errors.residence = true;\n    } else {\n        const index_of_selection = residence_list.findIndex(item => isResidenceText(item, values));\n\n        if (index_of_selection === -1 || residence_list[index_of_selection].disabled === 'DISABLED') {\n            errors.residence = localize('Unfortunately, {{website_name}} is not available in your country.', {\n                website_name,\n            });\n        }\n    }\n\n    return errors;\n};\n\nconst SetResidence = ({ enableApp, onSetResidence, residence_list, toggleModalVisibility }) => {\n    const onSetResidenceComplete = error => {\n        // TODO: Proper error handling (currently we have no place to put the message)\n        if (error) {\n            throw Error(error);\n        }\n        // Handle lower level modal controls due to overriding modal rendering\n        toggleModalVisibility(false);\n        enableApp();\n    };\n\n    const onSetResidencePassthrough = values => {\n        const index_of_selection = residence_list.findIndex(item => isResidenceText(item, values));\n        const modded_values = { ...values, residence: residence_list[index_of_selection].value };\n        onSetResidence(modded_values, onSetResidenceComplete);\n    };\n    return (\n        <div className='set-residence'>\n            <Formik\n                initialValues={{ residence: '' }}\n                validate={values => validateResidence(values, residence_list)}\n                onSubmit={onSetResidencePassthrough}\n            >\n                {({ isSubmitting, errors, values, setFieldValue, touched }) => (\n                    <Form>\n                        <React.Fragment>\n                            <SetResidenceForm\n                                errors={errors}\n                                touched={touched}\n                                setFieldValue={setFieldValue}\n                                residence_list={residence_list}\n                            >\n                                <Text as='p' size='xxs' weight='bold' className='set-residence__subtext'>\n                                    <Localize i18n_default_text='We need this to make sure our service complies with laws and regulations in your country.' />\n                                </Text>\n                                <Button\n                                    className={classNames('set-residence__btn', {\n                                        'set-residence__btn--disabled':\n                                            !values.residence || errors.residence || isSubmitting,\n                                    })}\n                                    type='submit'\n                                    is_disabled={!values.residence || !!errors.residence || isSubmitting}\n                                    primary\n                                    large\n                                >\n                                    <Localize i18n_default_text='Set residence' />\n                                </Button>\n                            </SetResidenceForm>\n                        </React.Fragment>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nSetResidence.propTypes = {\n    enableApp: PropTypes.func,\n    onSetResidence: PropTypes.func,\n    residence_list: PropTypes.array,\n    toggleModalVisibility: PropTypes.func,\n};\n\nconst SetResidenceModal = observer(() => {\n    const { ui, client } = useStore();\n    const {\n        is_set_residence_modal_visible: is_visible,\n        toggleSetResidenceModal,\n        enableApp,\n        disableApp,\n        is_loading,\n    } = ui;\n    const { onSetResidence, residence_list } = client;\n    if (residence_list.length < 1) return null;\n    return (\n        <Dialog\n            is_visible={is_visible}\n            disableApp={disableApp}\n            enableApp={enableApp}\n            is_loading={is_loading || !residence_list.length}\n            is_content_centered\n        >\n            <SetResidence\n                onSetResidence={onSetResidence}\n                residence_list={residence_list}\n                toggleModalVisibility={toggleSetResidenceModal}\n                enableApp={enableApp}\n            />\n        </Dialog>\n    );\n});\n\nexport default SetResidenceModal;\n","import SetResidenceModal from './set-residence-modal.jsx';\n\nexport default SetResidenceModal;\n","import React from 'react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { Autocomplete, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\n\nconst SetResidenceForm = ({\n    children,\n    class_prefix = 'set-residence',\n    default_value,\n    history_value,\n    errors,\n    onResidenceSelectionChanged,\n    touched,\n    setFieldTouched,\n    setFieldValue,\n    residence_list,\n}) => {\n    React.useEffect(() => {\n        if (default_value) {\n            setFieldTouched('residence', true);\n            setFieldValue('residence', default_value, true);\n        }\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <div className={`${class_prefix}__residence-selection`}>\n            <Field name='residence'>\n                {({ field }) => (\n                    <React.Fragment>\n                        <Autocomplete\n                            {...field}\n                            autoComplete='off'\n                            input_id='dt_core_set-residence-form_signup-residence-select'\n                            type='text'\n                            label={localize('Country of residence')}\n                            historyValue={history_value}\n                            error={touched.residence && errors.residence}\n                            required\n                            list_items={residence_list}\n                            onItemSelection={({ value, text }) => {\n                                setFieldValue('residence', value ? text : '', true);\n                                onResidenceSelectionChanged?.();\n                            }}\n                        />\n                    </React.Fragment>\n                )}\n            </Field>\n            {!errors?.residence?.length && (\n                <Text as='p' size='xxs' className='account-signup__subtext' color='less-prominent'>\n                    <Localize i18n_default_text='Select the country where you currently live.' />\n                </Text>\n            )}\n            <div className={`${class_prefix}__button_wrapper`}>{children}</div>\n        </div>\n    );\n};\n\nSetResidenceForm.propTypes = {\n    children: PropTypes.object,\n    class_prefix: PropTypes.string,\n    default_value: PropTypes.string,\n    history_value: PropTypes.string,\n    errors: PropTypes.object,\n    onResidenceSelectionChanged: PropTypes.func,\n    residence_list: PropTypes.arrayOf(PropTypes.object),\n    setFieldTouched: PropTypes.func,\n    setFieldValue: PropTypes.func,\n    touched: PropTypes.object,\n};\n\nexport default SetResidenceForm;\n"],"names":["isResidenceText","item","values","text","toLowerCase","residence","SetResidence","_ref","enableApp","onSetResidence","residence_list","toggleModalVisibility","onSetResidenceComplete","error","Error","_jsx","className","children","Formik","initialValues","validate","validateResidence","errors","index_of_selection","findIndex","disabled","localize","website_name","onSubmit","modded_values","_objectSpread","value","_ref2","isSubmitting","setFieldValue","touched","Form","React","_jsxs","SetResidenceForm","Text","as","size","weight","Localize","i18n_default_text","Button","classNames","type","is_disabled","primary","large","propTypes","PropTypes","observer","ui","client","useStore","is_set_residence_modal_visible","is_visible","toggleSetResidenceModal","disableApp","is_loading","length","Dialog","is_content_centered","_errors$residence","class_prefix","default_value","history_value","onResidenceSelectionChanged","setFieldTouched","Field","name","field","Autocomplete","autoComplete","input_id","label","historyValue","required","list_items","onItemSelection","_ref3","color"],"sourceRoot":""}