{"version":3,"file":"cfd/js/internalCFDStoreUsage.js","mappings":"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","sources":["webpack://@deriv/cfd/./src/Stores/Modules/CFD/Helpers/cfd-config.ts","webpack://@deriv/cfd/./src/Stores/Modules/CFD/Helpers/useCfdStores.tsx","webpack://@deriv/cfd/./src/Stores/base-store.js","webpack://@deriv/cfd/./src/Stores/Modules/CFD/cfd-store.js","webpack://@deriv/cfd/./src/Stores/Modules/index.js","webpack://@deriv/cfd/./src/Stores/index.js"],"sourcesContent":["import { Jurisdiction, PRODUCT } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TProducts } from 'Components/props.types';\n\nexport type TDxCompanies = ReturnType<typeof getDxCompanies>;\nexport type TMtCompanies = ReturnType<typeof getMtCompanies>;\nexport type TCTraderCompanies = ReturnType<typeof getCTraderCompanies>;\n\nexport const getDxCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('CFDs'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Standard'),\n    };\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: localize('Financial'),\n    };\n    return {\n        demo: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                dxtrade_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                dxtrade_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: localize('Financial'),\n                short_title: financial_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getCTraderCompanies = () => {\n    const all_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('All'),\n    };\n    return {\n        demo: {\n            all: {\n                ctrader_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo'),\n                short_title: all_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                dxtrade_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('All'),\n                short_title: all_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getMtCompanies = (is_eu: boolean, product?: TProducts) => {\n    const all_config = {\n        account_type: '',\n        leverage: 100,\n        short_title: product === 'swap_free' ? localize('Swap-Free') : localize('Zero Spread'),\n    };\n    const synthetic_config = {\n        account_type: '',\n        leverage: 500,\n        short_title: localize('Standard'),\n    };\n\n    let financial_title;\n    switch (product) {\n        case PRODUCT.STP:\n            financial_title = localize('Financial STP');\n            break;\n        case PRODUCT.GOLD:\n            financial_title = localize('Gold');\n            break;\n        default:\n            financial_title = localize('Financial');\n    }\n\n    const financial_demo_title = product === PRODUCT.GOLD ? localize('Demo Gold') : localize('Demo Financial');\n    const financial_demo_title_eu = product === PRODUCT.GOLD ? localize('Demo Gold') : localize('Demo CFDs');\n    const financial_demo_short_title = product === PRODUCT.GOLD ? localize('Gold') : localize('Deriv CFDs');\n    const financial_title_eu = product === PRODUCT.GOLD ? localize('Deriv Gold') : localize('Deriv CFDs');\n\n    const financial_config = {\n        account_type: 'financial',\n        leverage: 1000,\n        short_title: is_eu ? financial_demo_short_title : financial_title,\n    };\n    const financial_stp_config = {\n        account_type: 'financial_stp',\n        leverage: 100,\n        short_title: localize('Financial STP'),\n    };\n\n    return {\n        demo: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: product === 'swap_free' ? localize('Demo Swap-Free') : localize('Demo Zero Spread'),\n                short_title: all_config.short_title,\n            },\n            all_swap_free_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Swap-Free SVG'),\n                short_title: localize('Swap-Free SVG'),\n            },\n            all_zero_spread_bvi: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Demo Zero Spread BVI'),\n                short_title: localize('Zero Spread BVI'),\n            },\n            ctrader: {\n                mt5_account_type: all_config.account_type,\n                leverage: '500',\n                title: localize('Demo'),\n                short_title: localize('cTrader'),\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? financial_demo_title_eu : financial_demo_title,\n                short_title: financial_config.short_title,\n            },\n            financial_demo: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial'),\n                short_title: financial_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Demo Standard SVG'),\n                short_title: synthetic_config.short_title,\n            },\n\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('Demo CFDs') : localize('Demo Financial SVG'),\n                short_title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Demo Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n        real: {\n            all: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: product === 'swap_free' ? localize('Swap-Free') : localize('Zero Spread'),\n                short_title: all_config.short_title,\n            },\n            all_swap_free_svg: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Swap-Free SVG'),\n                short_title: all_config.short_title,\n            },\n            all_zero_spread_bvi: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Zero Spread BVI'),\n                short_title: all_config.short_title,\n            },\n            ctrader: {\n                mt5_account_type: all_config.account_type,\n                leverage: '500',\n                title: localize('Real'),\n                short_title: localize('cTrader'),\n            },\n            dxtrade: {\n                mt5_account_type: all_config.account_type,\n                leverage: all_config.leverage,\n                title: localize('Real'),\n                short_title: all_config.short_title,\n            },\n            synthetic: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_svg: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard SVG'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_bvi: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard BVI'),\n                short_title: synthetic_config.short_title,\n            },\n            synthetic_v: {\n                mt5_account_type: synthetic_config.account_type,\n                leverage: synthetic_config.leverage,\n                title: localize('Standard Vanuatu'),\n                short_title: synthetic_config.short_title,\n            },\n            financial: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? financial_title_eu : financial_title,\n                short_title: financial_config.short_title,\n            },\n            financial_svg: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial SVG'),\n                short_title: financial_config.short_title,\n            },\n            financial_bvi: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial BVI'),\n                short_title: financial_config.short_title,\n            },\n            financial_fx: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Labuan'),\n                short_title: financial_config.short_title,\n            },\n            financial_v: {\n                mt5_account_type: financial_config.account_type,\n                leverage: financial_config.leverage,\n                title: is_eu ? localize('CFDs') : localize('Financial Vanuatu'),\n                short_title: financial_config.short_title,\n            },\n            financial_stp: {\n                mt5_account_type: financial_stp_config.account_type,\n                leverage: financial_stp_config.leverage,\n                title: localize('Financial STP'),\n                short_title: financial_stp_config.short_title,\n            },\n        },\n    };\n};\n\nexport const getFormattedJurisdictionCode = (jurisdiction_code: string) => {\n    let formatted_label = '';\n\n    switch (jurisdiction_code) {\n        case Jurisdiction.SVG:\n            formatted_label = localize('SVG');\n            break;\n        case Jurisdiction.BVI:\n            formatted_label = localize('BVI');\n            break;\n        case Jurisdiction.LABUAN:\n            formatted_label = localize('Labuan');\n            break;\n        case Jurisdiction.VANUATU:\n            formatted_label = localize('Vanuatu');\n            break;\n        case Jurisdiction.MALTA_INVEST:\n            formatted_label = localize('Malta');\n            break;\n        default:\n            formatted_label = jurisdiction_code?.toUpperCase();\n            break;\n    }\n\n    return formatted_label;\n};\n","import React, { createContext, PropsWithChildren, useContext } from 'react';\nimport { useStore } from '@deriv/stores';\nimport type { TCFDStore } from '../../../../types/cfd-store.types';\n\nconst CFDStoreContext = createContext<TCFDStore | null>(null);\n\nexport const CFDStoreProvider = ({ children }: PropsWithChildren<unknown>) => {\n    const { modules } = useStore();\n\n    return (\n        <CFDStoreContext.Provider\n            // value={memoizedValue}\n            value={modules?.cfd || {}}\n        >\n            {children}\n        </CFDStoreContext.Provider>\n    );\n};\n\nexport const useCfdStore = () => {\n    const store = useContext(CFDStoreContext);\n\n    if (!store) {\n        throw new Error('useCfdStore must be used within CfdStoreContext');\n    }\n\n    return store;\n};\n","import { action, intercept, makeObservable, observable, reaction, toJS, when } from 'mobx';\n\nimport { isEmptyObject, isProduction, Validator } from '@deriv/shared';\n\n/**\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\n *  1. Creating snapshot object from the store.\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\n */\nexport default class BaseStore {\n    /**\n     * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\n     */\n    static STORAGES = Object.freeze({\n        LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\n        SESSION_STORAGE: Symbol('SESSION_STORAGE'),\n    });\n\n    validation_errors = {};\n\n    validation_rules = {};\n\n    preSwitchAccountDisposer = null;\n    pre_switch_account_listener = null;\n\n    switchAccountDisposer = null;\n    switch_account_listener = null;\n\n    logoutDisposer = null;\n    logout_listener = null;\n\n    clientInitDisposer = null;\n    client_init_listener = null;\n\n    networkStatusChangeDisposer = null;\n    network_status_change_listener = null;\n\n    themeChangeDisposer = null;\n    theme_change_listener = null;\n\n    realAccountSignupEndedDisposer = null;\n    real_account_signup_ended_listener = null;\n\n    partial_fetch_time = 0;\n\n    /**\n     * Constructor of the base class that gets properties' name of child which should be saved in storages\n     *\n     * @param {Object} options - An object that contains the following properties:\n     *     @property {Object}   root_store - An object that contains the root store of the app.\n     *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\n     *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\n     *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\n     *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\n     */\n    constructor(options = {}) {\n        makeObservable(this, {\n            validation_errors: observable,\n            validation_rules: observable,\n            partial_fetch_time: observable,\n            retrieveFromStorage: action,\n            setValidationErrorMessages: action,\n            setValidationRules: action,\n            addRule: action,\n            validateProperty: action,\n            validateAllProperties: action,\n            onSwitchAccount: action.bound,\n            onPreSwitchAccount: action.bound,\n            onLogout: action.bound,\n            onClientInit: action.bound,\n            onNetworkStatusChange: action.bound,\n            onThemeChange: action.bound,\n            onRealAccountSignupEnd: action.bound,\n            disposePreSwitchAccount: action.bound,\n            disposeSwitchAccount: action.bound,\n            disposeLogout: action.bound,\n            disposeClientInit: action.bound,\n            disposeNetworkStatusChange: action.bound,\n            disposeThemeChange: action.bound,\n            disposeRealAccountSignupEnd: action.bound,\n            onUnmount: action.bound,\n            assertHasValidCache: action.bound,\n        });\n\n        const { root_store, local_storage_properties, session_storage_properties, validation_rules, store_name } =\n            options;\n\n        Object.defineProperty(this, 'root_store', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'local_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n        Object.defineProperty(this, 'session_storage_properties', {\n            enumerable: false,\n            writable: true,\n        });\n\n        const has_local_or_session_storage =\n            (local_storage_properties && local_storage_properties.length) ||\n            (session_storage_properties && session_storage_properties.length);\n\n        if (has_local_or_session_storage) {\n            if (!store_name) {\n                throw new Error('store_name is required for local/session storage');\n            }\n\n            Object.defineProperty(this, 'store_name', {\n                value: store_name,\n                enumerable: false,\n                writable: false,\n            });\n        }\n\n        this.root_store = root_store;\n        this.local_storage_properties = local_storage_properties || [];\n        this.session_storage_properties = session_storage_properties || [];\n\n        setTimeout(() => {\n            this.setValidationRules(validation_rules);\n\n            this.setupReactionForLocalStorage();\n            this.setupReactionForSessionStorage();\n            this.retrieveFromStorage();\n        }, 0);\n    }\n\n    /**\n     * Returns an snapshot of the current store\n     *\n     * @param {String[]} properties - A list of properties' names that should be in the snapshot.\n     *\n     * @return {Object} Returns a cloned object of the store.\n     */\n    getSnapshot(properties) {\n        let snapshot = toJS(this);\n\n        if (!isEmptyObject(this.root_store)) {\n            snapshot.root_store = this.root_store;\n        }\n\n        if (properties && properties.length) {\n            snapshot = properties.reduce((result, p) => Object.assign(result, { [p]: snapshot[p] }), {});\n        }\n\n        return snapshot;\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForLocalStorage() {\n        if (this.local_storage_properties.length) {\n            reaction(\n                () => this.local_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\n     *  and invokes `saveToStorage` when there are any changes on them.\n     *\n     */\n    setupReactionForSessionStorage() {\n        if (this.session_storage_properties.length) {\n            reaction(\n                () => this.session_storage_properties.map(i => this[i]),\n                () => this.saveToStorage(this.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE)\n            );\n        }\n    }\n\n    /**\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\n     *\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\n     *\n     */\n    saveToStorage(properties, storage) {\n        const snapshot = JSON.stringify(this.getSnapshot(properties), (key, value) => {\n            if (value !== null) return value;\n            return undefined;\n        });\n\n        if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\n            localStorage.setItem(this.store_name, snapshot);\n        } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\n            sessionStorage.setItem(this.store_name, snapshot);\n        }\n    }\n\n    /**\n     * Retrieves saved snapshot of the store and assigns to the current instance.\n     *\n     */\n    retrieveFromStorage() {\n        const local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\n        const session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\n\n        const snapshot = { ...local_storage_snapshot, ...session_storage_snapshot };\n\n        Object.keys(snapshot).forEach(k => (this[k] = snapshot[k]));\n    }\n\n    /**\n     * Sets validation error messages for an observable property of the store\n     *\n     * @param {String} propertyName - The observable property's name\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\n     *\n     */\n    setValidationErrorMessages(propertyName, messages) {\n        const is_different = () =>\n            !!this.validation_errors[propertyName]\n                .filter(x => !messages.includes(x))\n                .concat(messages.filter(x => !this.validation_errors[propertyName].includes(x))).length;\n        if (!this.validation_errors[propertyName] || is_different()) {\n            this.validation_errors[propertyName] = messages;\n        }\n    }\n\n    /**\n     * Sets validation rules\n     *\n     * @param {object} rules\n     *\n     */\n    setValidationRules(rules = {}) {\n        Object.keys(rules).forEach(key => {\n            this.addRule(key, rules[key]);\n        });\n    }\n\n    /**\n     * Adds rules to the particular property\n     *\n     * @param {String} property\n     * @param {String} rules\n     *\n     */\n    addRule(property, rules) {\n        this.validation_rules[property] = rules;\n\n        intercept(this, property, change => {\n            this.validateProperty(property, change.newValue);\n            return change;\n        });\n    }\n\n    /**\n     * Validates a particular property of the store\n     *\n     * @param {String} property - The name of the property in the store\n     * @param {object} value    - The value of the property, it can be undefined.\n     *\n     */\n    validateProperty(property, value) {\n        const trigger = this.validation_rules[property].trigger;\n        const inputs = { [property]: value !== undefined ? value : this[property] };\n        const validation_rules = { [property]: this.validation_rules[property].rules || [] };\n\n        if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\n            inputs[trigger] = this[trigger];\n            validation_rules[trigger] = this.validation_rules[trigger].rules || [];\n        }\n\n        const validator = new Validator(inputs, validation_rules, this);\n\n        validator.isPassed();\n\n        Object.keys(inputs).forEach(key => {\n            this.setValidationErrorMessages(key, validator.errors.get(key));\n        });\n    }\n\n    /**\n     * Validates all properties which validation rule has been set for.\n     *\n     */\n    validateAllProperties() {\n        const validation_rules = Object.keys(this.validation_rules);\n        const validation_errors = Object.keys(this.validation_errors);\n\n        validation_rules.forEach(p => {\n            this.validateProperty(p, this[p]);\n        });\n\n        // Remove keys that are present in error, but not in rules:\n        validation_errors.forEach(error => {\n            if (!validation_rules.includes(error)) {\n                delete this.validation_errors[error];\n            }\n        });\n    }\n\n    onSwitchAccount(listener) {\n        if (listener) {\n            this.switch_account_listener = listener;\n\n            this.switchAccountDisposer = when(\n                () => this.root_store.client.switch_broadcast,\n                () => {\n                    try {\n                        const result = this.switch_account_listener();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.switchEndSignal();\n                                this.onSwitchAccount(this.switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Switching account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onPreSwitchAccount(listener) {\n        if (listener) {\n            this.pre_switch_account_listener = listener;\n            this.preSwitchAccountDisposer = when(\n                () => this.root_store.client.pre_switch_broadcast,\n                () => {\n                    try {\n                        const result = this.pre_switch_account_listener?.();\n                        if (result && result.then && typeof result.then === 'function') {\n                            result.then(() => {\n                                this.root_store.client.setPreSwitchAccount(false);\n                                this.onPreSwitchAccount(this.pre_switch_account_listener);\n                            });\n                        } else {\n                            throw new Error('Pre-switch account listeners are required to return a promise.');\n                        }\n                    } catch (error) {\n                        // there is no listener currently active. so we can just ignore the error raised from treating\n                        // a null object as a function. Although, in development mode, we throw a console error.\n                        if (!isProduction()) {\n                            console.error(error); // eslint-disable-line\n                        }\n                    }\n                }\n            );\n        }\n    }\n\n    onLogout(listener) {\n        this.logoutDisposer = when(\n            () => this.root_store.client.has_logged_out,\n            async () => {\n                try {\n                    const result = this.logout_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setLogout(false);\n                            this.onLogout(this.logout_listener);\n                        });\n                    } else {\n                        throw new Error('Logout listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.logout_listener = listener;\n    }\n\n    onClientInit(listener) {\n        this.clientInitDisposer = when(\n            () => this.root_store.client.initialized_broadcast,\n            async () => {\n                try {\n                    const result = this.client_init_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.client.setInitialized(false);\n                            this.onClientInit(this.client_init_listener);\n                        });\n                    } else {\n                        throw new Error('Client init listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n        this.client_init_listener = listener;\n    }\n\n    onNetworkStatusChange(listener) {\n        this.networkStatusChangeDisposer = reaction(\n            () => this.root_store.common.is_network_online,\n            is_online => {\n                try {\n                    this.network_status_change_listener(is_online);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.network_status_change_listener = listener;\n    }\n\n    onThemeChange(listener) {\n        this.themeChangeDisposer = reaction(\n            () => this.root_store.ui.is_dark_mode_on,\n            is_dark_mode_on => {\n                try {\n                    this.theme_change_listener(is_dark_mode_on);\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.theme_change_listener = listener;\n    }\n\n    onRealAccountSignupEnd(listener) {\n        this.realAccountSignupEndedDisposer = when(\n            () => this.root_store.ui.has_real_account_signup_ended,\n            () => {\n                try {\n                    const result = this.real_account_signup_ended_listener();\n                    if (result && result.then && typeof result.then === 'function') {\n                        result.then(() => {\n                            this.root_store.ui.setRealAccountSignupEnd(false);\n                            this.onRealAccountSignupEnd(this.real_account_signup_ended_listener);\n                        });\n                    } else {\n                        throw new Error('Real account signup listeners are required to return a promise.');\n                    }\n                } catch (error) {\n                    // there is no listener currently active. so we can just ignore the error raised from treating\n                    // a null object as a function. Although, in development mode, we throw a console error.\n                    if (!isProduction()) {\n                        console.error(error); // eslint-disable-line\n                    }\n                }\n            }\n        );\n\n        this.real_account_signup_ended_listener = listener;\n    }\n\n    disposePreSwitchAccount() {\n        if (typeof this.preSwitchAccountDisposer === 'function') {\n            this.preSwitchAccountDisposer();\n        }\n        this.pre_switch_account_listener = null;\n    }\n\n    disposeSwitchAccount() {\n        if (typeof this.switchAccountDisposer === 'function') {\n            this.switchAccountDisposer();\n        }\n        this.switch_account_listener = null;\n    }\n\n    disposeLogout() {\n        if (typeof this.logoutDisposer === 'function') {\n            this.logoutDisposer();\n        }\n        this.logout_listener = null;\n    }\n\n    disposeClientInit() {\n        if (typeof this.clientInitDisposer === 'function') {\n            this.clientInitDisposer();\n        }\n        this.client_init_listener = null;\n    }\n\n    disposeNetworkStatusChange() {\n        if (typeof this.networkStatusChangeDisposer === 'function') {\n            this.networkStatusChangeDisposer();\n        }\n        this.network_status_change_listener = null;\n    }\n\n    disposeThemeChange() {\n        if (typeof this.themeChangeDisposer === 'function') {\n            this.themeChangeDisposer();\n        }\n        this.theme_change_listener = null;\n    }\n\n    disposeRealAccountSignupEnd() {\n        if (typeof this.realAccountSignupEndedDisposer === 'function') {\n            this.realAccountSignupEndedDisposer();\n        }\n        this.real_account_signup_ended_listener = null;\n    }\n\n    onUnmount() {\n        this.disposePreSwitchAccount();\n        this.disposeSwitchAccount();\n        this.disposeLogout();\n        this.disposeClientInit();\n        this.disposeNetworkStatusChange();\n        this.disposeThemeChange();\n        this.disposeRealAccountSignupEnd();\n    }\n\n    assertHasValidCache(loginid, ...reactions) {\n        // account was changed when this was unmounted.\n        if (this.root_store.client.loginid !== loginid) {\n            reactions.forEach(act => act());\n            this.partial_fetch_time = false;\n        }\n    }\n}\n","import { action, computed, observable, runInAction, makeObservable, override } from 'mobx';\nimport {\n    getAccountListKey,\n    getAccountTypeFields,\n    CFD_PLATFORMS,\n    WS,\n    Jurisdiction,\n    JURISDICTION_MARKET_TYPES,\n    setPerformanceValue,\n    startPerformanceEventTimer,\n} from '@deriv/shared';\nimport BaseStore from '../../base-store';\n\nimport { getDxCompanies, getMtCompanies } from './Helpers/cfd-config';\n\nexport default class CFDStore extends BaseStore {\n    is_ctrader_transfer_modal_visible = false;\n    is_jurisdiction_modal_visible = false;\n    jurisdiction_selected_shortcode = '';\n    is_compare_accounts_visible = false;\n    is_mt5_trade_modal_visible = false;\n    product = '';\n\n    account_type = {\n        category: '',\n        type: '',\n    };\n\n    mt5_trade_account = {};\n    new_account_response = {};\n    map_type = {};\n    has_cfd_error = false;\n    error_message = '';\n    is_sent_email_modal_enabled = false;\n\n    is_account_being_created = false;\n    is_cfd_success_dialog_enabled = false;\n    is_mt5_financial_stp_modal_open = false;\n    is_cfd_password_modal_enabled = false;\n    is_mt5_password_invalid_format_modal_visible = false;\n    is_mt5_password_changed_modal_visible = false;\n    is_from_mt5_migration_modal = false;\n    is_server_maintenance_modal_visible = false;\n    is_account_unavailable_modal_visible = false;\n    mt5_migration_error = '';\n    current_account = undefined; // this is a tmp value, don't rely on it, unless you set it first.\n\n    error_type = undefined;\n\n    dxtrade_tokens = {\n        demo: '',\n        real: '',\n    };\n    ctrader_tokens = {\n        demo: '',\n        real: '',\n    };\n\n    real_synthetic_accounts_existing_data = [];\n    real_financial_accounts_existing_data = [];\n    real_swapfree_accounts_existing_data = [];\n    real_zerospread_accounts_existing_data = [];\n\n    migrated_mt5_accounts = [];\n\n    constructor({ root_store }) {\n        super({ root_store });\n\n        makeObservable(this, {\n            is_compare_accounts_visible: observable,\n            is_jurisdiction_modal_visible: observable,\n            is_mt5_trade_modal_visible: observable,\n            is_ctrader_transfer_modal_visible: observable,\n            jurisdiction_selected_shortcode: observable,\n            account_type: observable,\n            mt5_trade_account: observable,\n            mt5_migration_error: observable,\n            new_account_response: observable,\n            map_type: observable,\n            has_cfd_error: observable,\n            error_message: observable,\n            is_account_being_created: observable,\n            is_cfd_success_dialog_enabled: observable,\n            is_mt5_financial_stp_modal_open: observable,\n            is_cfd_password_modal_enabled: observable,\n            is_sent_email_modal_enabled: observable,\n            current_account: observable,\n            error_type: observable,\n            product: observable,\n            dxtrade_tokens: observable,\n            ctrader_tokens: observable,\n            migrated_mt5_accounts: observable,\n            is_mt5_password_invalid_format_modal_visible: observable,\n            is_mt5_password_changed_modal_visible: observable,\n            is_from_mt5_migration_modal: observable,\n            is_server_maintenance_modal_visible: observable,\n            is_account_unavailable_modal_visible: observable,\n            account_title: computed,\n            current_list: computed,\n            onMount: action.bound,\n            onUnmount: override,\n            checkShouldOpenAccount: action.bound,\n            realAccountSignupEndListener: action.bound,\n            resetFormErrors: action.bound,\n            clearCFDError: action.bound,\n            createCFDAccount: action.bound,\n            disableCFDPasswordModal: action.bound,\n            enableCFDPasswordModal: action.bound,\n            getName: action.bound,\n            migrateMT5Accounts: action.bound,\n            openMT5Account: action.bound,\n            openCFDAccount: action.bound,\n            beginRealSignupForMt5: action.bound,\n            enableMt5FinancialStpModal: action.bound,\n            setAccountType: action.bound,\n            setProduct: action.bound,\n            setCurrentAccount: action.bound,\n            setMT5TradeAccount: action.bound,\n            setIsAccountBeingCreated: action.bound,\n            setError: action.bound,\n            setCFDNewAccount: action.bound,\n            setCFDSuccessDialog: action.bound,\n            setMT5MigrationError: action.bound,\n            setMigratedMT5Accounts: action.bound,\n            setSentEmailModalStatus: action.bound,\n            setIsFromMt5MigrationModal: action.bound,\n            setServerMaintenanceModal: action.bound,\n            setAccountUnavailableModal: action.bound,\n            getAccountStatus: action.bound,\n            creatMT5Password: action.bound,\n            submitMt5Password: action.bound,\n            createCFDPassword: action.bound,\n            submitCFDPassword: action.bound,\n            toggleCompareAccountsModal: action.bound,\n            toggleCTraderTransferModal: action.bound,\n            getRealSyntheticAccountsExistingData: action.bound,\n            getRealFinancialAccountsExistingData: action.bound,\n            getRealSwapfreeAccountsExistingData: action.bound,\n            toggleJurisdictionModal: action.bound,\n            toggleMT5TradeModal: action.bound,\n            disableMt5FinancialStpModal: action.bound,\n            topUpVirtual: action.bound,\n            sendVerifyEmail: action.bound,\n            setJurisdictionSelectedShortcode: action.bound,\n            setDxtradeToken: action.bound,\n            setCTraderToken: action.bound,\n            loadDxtradeTokens: action.bound,\n            loadCTraderTokens: action.bound,\n            setIsMt5PasswordInvalidFormatModalVisible: action.bound,\n            setIsMt5PasswordChangedModalVisible: action.bound,\n        });\n    }\n\n    get account_title() {\n        return this.account_type.category\n            ? getMtCompanies(this.root_store.traders_hub.show_eu_related_content, this.product)[\n                  this.account_type.category\n              ][this.account_type.type].title\n            : '';\n    }\n\n    get current_list() {\n        const list = {};\n        const show_eu_related_content = this.root_store.traders_hub.show_eu_related_content;\n        this.root_store.client.mt5_login_list\n            // eslint-disable-next-line no-confusing-arrow\n            .filter(acc =>\n                show_eu_related_content\n                    ? acc.landing_company_short === 'maltainvest'\n                    : acc.landing_company_short !== 'maltainvest'\n            )\n            .forEach(account => {\n                // e.g. mt5.real.financial_stp\n                list[getAccountListKey(account, CFD_PLATFORMS.MT5, account.landing_company_short)] = {\n                    ...account,\n                };\n            });\n\n        this.root_store.client.dxtrade_accounts_list.forEach(account => {\n            // e.g. dxtrade.real.financial_stp\n            list[getAccountListKey(account, CFD_PLATFORMS.DXTRADE)] = {\n                ...account,\n            };\n        });\n        this.root_store.client.ctrader_accounts_list.forEach(account => {\n            list[getAccountListKey(account, CFD_PLATFORMS.CTRADER)] = {\n                ...account,\n            };\n        });\n        return list;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get mt5_companies() {\n        return getMtCompanies(this.root_store.client.is_eu, this.product);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    get dxtrade_companies() {\n        return getDxCompanies();\n    }\n\n    onMount() {\n        this.checkShouldOpenAccount();\n        this.onRealAccountSignupEnd(this.realAccountSignupEndListener);\n        this.root_store.ui.is_cfd_page = true;\n    }\n\n    onUnmount() {\n        this.disposeRealAccountSignupEnd();\n        this.root_store.ui.is_cfd_page = false;\n    }\n\n    // other platforms can redirect to here using account switcher's `Add` account button\n    // so in that case we should open the corresponding account opening modal on load/component update\n    checkShouldOpenAccount() {\n        const account_type = sessionStorage.getItem('open_cfd_account_type');\n        if (account_type) {\n            const [category, platform, type, set_password] = account_type.split('.');\n            this.createCFDAccount({ category, platform, type, set_password });\n            sessionStorage.removeItem('open_cfd_account_type');\n        }\n    }\n\n    setIsAccountBeingCreated(is_account_being_created) {\n        this.is_account_being_created = is_account_being_created;\n    }\n\n    realAccountSignupEndListener() {\n        const post_signup = JSON.parse(sessionStorage.getItem('post_real_account_signup'));\n        if (post_signup && post_signup.category && post_signup.type) {\n            sessionStorage.removeItem('post_real_account_signup');\n            this.enableCFDPasswordModal();\n        }\n        return Promise.resolve();\n    }\n\n    resetFormErrors() {\n        this.error_message = '';\n        this.error_type = undefined;\n        this.has_cfd_error = false;\n    }\n\n    clearCFDError() {\n        this.resetFormErrors();\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    async createCFDAccount({ category, platform, type, set_password }) {\n        this.clearCFDError();\n        this.setAccountType({\n            category,\n            type,\n        });\n        if (platform === CFD_PLATFORMS.DXTRADE) {\n            if (category === 'real') {\n                this.realCFDSignup(set_password);\n            } else {\n                this.demoCFDSignup();\n            }\n        } else if (platform === CFD_PLATFORMS.CTRADER) {\n            startPerformanceEventTimer('create_ctrader_account_time');\n            this.root_store.client.setIsLandingCompanyLoaded(false);\n\n            this.setJurisdictionSelectedShortcode('svg');\n            if (this.account_type.category === 'demo') {\n                this.setIsAccountBeingCreated(true);\n            }\n            const account_creation_values = {\n                platform,\n                account_type: this.account_type.category,\n                market_type: this.account_type.type,\n                company: this.jurisdiction_selected_shortcode,\n            };\n\n            const response = await this.openCFDAccount(account_creation_values);\n            if (!response.error) {\n                this.setError(false);\n\n                const account_list = {\n                    echo_req: response.echo_req,\n                    trading_platform_accounts: [\n                        ...this.root_store.client.ctrader_accounts_list,\n                        response.trading_platform_new_account,\n                    ],\n                };\n                this.root_store.client.responseTradingPlatformAccountsList(account_list);\n                WS.transferBetweenAccounts();\n                const trading_platform_available_accounts_list_response = await WS.tradingPlatformAvailableAccounts(\n                    CFD_PLATFORMS.CTRADER\n                );\n                this.root_store.client.responseCTraderTradingPlatformAvailableAccounts(\n                    trading_platform_available_accounts_list_response\n                );\n                this.setCFDSuccessDialog(true);\n                this.setIsAccountBeingCreated(false);\n                WS.tradingPlatformAccountsList(CFD_PLATFORMS.CTRADER);\n                setPerformanceValue('create_ctrader_account_time');\n            } else {\n                this.setError(true, response.error);\n                this.setIsAccountBeingCreated(false);\n            }\n            this.root_store.client.setIsLandingCompanyLoaded(true);\n        } else if (platform === CFD_PLATFORMS.MT5) {\n            if (category === 'real') {\n                this.toggleJurisdictionModal();\n            } else {\n                if (this.root_store.traders_hub.show_eu_related_content) {\n                    this.setJurisdictionSelectedShortcode(Jurisdiction.MALTA_INVEST);\n                } else this.setJurisdictionSelectedShortcode(Jurisdiction.SVG);\n                this.demoCFDSignup();\n            }\n        }\n    }\n\n    demoCFDSignup() {\n        this.enableCFDPasswordModal();\n    }\n\n    disableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = false;\n    }\n\n    enableCFDPasswordModal() {\n        this.is_cfd_password_modal_enabled = true;\n    }\n\n    setSentEmailModalStatus(status) {\n        this.is_sent_email_modal_enabled = status;\n    }\n\n    getName(account_type = this.account_type) {\n        const { first_name } = this.root_store.client.account_settings && this.root_store.client.account_settings;\n        const title = this.mt5_companies[account_type?.category][account_type?.type].title;\n\n        // First name is not set when user has no real account\n        return first_name ? [first_name, title].join(' ') : title;\n    }\n\n    async migrateMT5Accounts(values, actions) {\n        actions?.setSubmitting(true);\n        const account_to_migrate = this.root_store.client.mt5_login_list.filter(\n            acc => acc.landing_company_short === Jurisdiction.SVG && !!acc.eligible_to_migrate\n        );\n        const promises = account_to_migrate.map(account => {\n            const { eligible_to_migrate } = account;\n            const [type, shortcode] = Object.entries(eligible_to_migrate)[0];\n            const account_type = {\n                category: 'real',\n                type,\n            };\n            this.setMigratedMT5Accounts([\n                ...this.migrated_mt5_accounts,\n                { login_id: account.login, to_account: { ...(eligible_to_migrate ?? {}) } },\n            ]);\n            return this.requestMigrateAccount(values, shortcode, account_type);\n        });\n        this.root_store.ui.setMT5MigrationModalEnabled(true);\n\n        try {\n            const results = await Promise.all(promises);\n            const has_error = results.find(result => result.error);\n            const error_code = has_error?.error?.code;\n            if (this.is_mt5_password_changed_modal_visible) this.setIsMt5PasswordChangedModalVisible(false);\n            if (!has_error) {\n                actions?.setStatus({ error_message: '' });\n                this.setError(false);\n                this.setCFDSuccessDialog(true);\n                await this.getAccountStatus(CFD_PLATFORMS.MT5);\n\n                const mt5_login_list_response = await WS.authorized.mt5LoginList();\n                this.root_store.client.responseMt5LoginList(mt5_login_list_response);\n\n                WS.transferBetweenAccounts();\n                this.root_store.client.responseMT5TradingServers(await WS.tradingServers(CFD_PLATFORMS.MT5));\n            } else if (['IncorrectMT5PasswordFormat', 'InvalidTradingPlatformPasswordFormat'].includes(error_code)) {\n                this.setError(true, has_error?.error);\n                this.setMigratedMT5Accounts([]);\n                this.setMT5MigrationError('');\n            } else {\n                this.setMT5MigrationError(has_error?.error?.message);\n                actions?.setStatus({ error_message: has_error?.error?.message });\n                await this.getAccountStatus(CFD_PLATFORMS.MT5);\n                this.clearCFDError();\n                this.root_store.ui.toggleMT5MigrationModal(true);\n                this.setMigratedMT5Accounts([]);\n            }\n        } catch (error) {\n            // At least one request has failed\n            // eslint-disable-next-line no-console\n            console.warn('One or more MT5 migration requests failed:', error);\n            actions?.setStatus({ error_message: error?.message });\n            this.setMT5MigrationError(error);\n            this.setMigratedMT5Accounts([]);\n        } finally {\n            actions?.setSubmitting(false);\n        }\n    }\n\n    requestMigrateAccount(values, shortcode, account_type) {\n        const name = this.getName(account_type);\n        const leverage = this.mt5_companies[account_type.category][account_type.type].leverage;\n        const type_request = getAccountTypeFields(account_type);\n        const { address_line_1, address_line_2, address_postcode, address_city, address_state, country_code, phone } =\n            this.root_store.client.account_settings;\n\n        return WS.mt5NewAccount({\n            mainPassword: values.password,\n            email: this.root_store.client.email_address,\n            leverage,\n            name,\n            address: address_line_1 || address_line_2,\n            city: address_city,\n            country: country_code,\n            phone,\n            state: address_state,\n            zipCode: address_postcode,\n            migrate: 1,\n            ...(values.server ? { server: values.server } : {}),\n            ...(shortcode ? { company: shortcode } : {}),\n            ...(shortcode !== Jurisdiction.LABUAN\n                ? type_request\n                : {\n                      account_type: JURISDICTION_MARKET_TYPES.FINANCIAL,\n                      mt5_account_type: 'financial_stp',\n                  }),\n        });\n    }\n\n    openMT5Account(values) {\n        const name = this.getName();\n        const leverage = this.mt5_companies[this.account_type.category][this.account_type.type].leverage;\n        const type_request = getAccountTypeFields(this.account_type);\n        const { address_line_1, address_line_2, address_postcode, address_city, address_state, country_code, phone } =\n            this.root_store.client.account_settings;\n\n        return WS.mt5NewAccount({\n            mainPassword: values.password,\n            email: this.root_store.client.email_address,\n            leverage,\n            name,\n            address: address_line_1 || address_line_2,\n            city: address_city,\n            country: country_code,\n            phone,\n            state: address_state,\n            zipCode: address_postcode,\n            product: this.product,\n            ...(values.server ? { server: values.server } : {}),\n            ...(this.jurisdiction_selected_shortcode && this.account_type.category === 'real'\n                ? { company: this.jurisdiction_selected_shortcode }\n                : {}),\n            ...(this.jurisdiction_selected_shortcode !== Jurisdiction.LABUAN\n                ? type_request\n                : {\n                      account_type: 'financial',\n                      mt5_account_type: 'financial_stp',\n                  }),\n        });\n    }\n\n    openCFDAccount(values) {\n        return WS.tradingPlatformNewAccount({\n            password: CFD_PLATFORMS.DXTRADE ? values.password : '',\n            platform: values.platform,\n            account_type: this.account_type.category,\n            market_type:\n                this.account_type.type === 'dxtrade' || this.account_type.type === 'cTrader'\n                    ? 'all'\n                    : this.account_type.type,\n            company: values.company,\n        });\n    }\n\n    beginRealSignupForMt5() {\n        sessionStorage.setItem('post_real_account_signup', JSON.stringify(this.account_type));\n        this.root_store.ui.openRealAccountSignup('svg');\n    }\n\n    realCFDSignup(set_password) {\n        switch (this.account_type.type) {\n            case 'financial':\n                this.enableCFDPasswordModal();\n                break;\n            case 'financial_stp':\n                this.root_store.client.fetchResidenceList();\n                this.root_store.client.fetchStatesList();\n                this.root_store.client.fetchAccountSettings();\n                if (set_password) this.enableCFDPasswordModal();\n                else this.enableMt5FinancialStpModal();\n                break;\n            case 'synthetic':\n            case 'dxtrade':\n            case 'all':\n                this.enableCFDPasswordModal();\n                break;\n            default:\n                throw new Error('Cannot determine mt5 account signup.');\n        }\n    }\n\n    enableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = true;\n    }\n\n    setAccountType(account_type) {\n        this.account_type = account_type;\n    }\n\n    setProduct(product) {\n        this.product = product;\n    }\n\n    setCurrentAccount(data, meta) {\n        this.current_account = {\n            ...meta,\n            ...data,\n        };\n    }\n\n    setIsMt5PasswordInvalidFormatModalVisible(visible) {\n        this.is_mt5_password_invalid_format_modal_visible = visible;\n    }\n\n    setIsMt5PasswordChangedModalVisible(visible) {\n        this.is_mt5_password_changed_modal_visible = visible;\n    }\n\n    setMT5TradeAccount(mt5_trade_account) {\n        this.mt5_trade_account = mt5_trade_account;\n    }\n\n    setError(state, obj) {\n        this.has_cfd_error = state;\n        this.error_message = obj ? obj.message : '';\n        this.error_type = obj?.code ?? undefined;\n    }\n\n    setCFDNewAccount(cfd_new_account) {\n        this.new_account_response = cfd_new_account;\n    }\n\n    setCFDSuccessDialog(value) {\n        this.is_cfd_success_dialog_enabled = !!value;\n    }\n\n    setMT5MigrationError(error) {\n        this.mt5_migration_error = error;\n    }\n\n    async getAccountStatus(platform) {\n        const should_load_account_status =\n            (platform === CFD_PLATFORMS.MT5 && this.root_store.client.is_mt5_password_not_set) ||\n            (platform === CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set);\n\n        if (should_load_account_status) {\n            await WS.getAccountStatus();\n        }\n    }\n\n    async creatMT5Password(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.MT5,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n        return false;\n    }\n\n    async submitMt5Password(values, actions) {\n        startPerformanceEventTimer('create_mt5_account_time');\n\n        if (this.root_store.client.is_mt5_password_not_set) {\n            const has_error = await this.creatMT5Password(values, actions);\n            if (has_error) return;\n        }\n\n        this.resetFormErrors();\n        if (this.root_store.ui.is_mt5_migration_modal_enabled || this.is_from_mt5_migration_modal) {\n            await this.migrateMT5Accounts(values, actions);\n        } else {\n            const response = await this.openMT5Account(values);\n            if (!response.error) {\n                actions?.setStatus({ success: true });\n                actions?.setSubmitting(false);\n                this.setError(false);\n                this.setIsMt5PasswordChangedModalVisible(false);\n                this.setCFDSuccessDialog(true);\n                await this.getAccountStatus(CFD_PLATFORMS.MT5);\n\n                const mt5_login_list_response = await WS.authorized.mt5LoginList();\n                this.root_store.client.responseMt5LoginList(mt5_login_list_response);\n\n                WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n                this.root_store.client.responseMT5TradingServers(await WS.tradingServers(CFD_PLATFORMS.MT5));\n                this.setCFDNewAccount(response.mt5_new_account);\n                setPerformanceValue('create_mt5_account_time');\n            } else {\n                await this.getAccountStatus(CFD_PLATFORMS.MT5);\n                this.setError(true, response.error);\n                actions?.resetForm({});\n                actions?.setSubmitting(false);\n                actions?.setStatus({ success: false });\n            }\n        }\n    }\n\n    async createCFDPassword(values, actions) {\n        const response = await WS.tradingPlatformPasswordChange({\n            new_password: values.password,\n            platform: CFD_PLATFORMS.DXTRADE,\n        });\n        if (response.error) {\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return true;\n        }\n\n        return false;\n    }\n\n    async submitCFDPassword(values, actions) {\n        startPerformanceEventTimer('create_dxtrade_account_time');\n\n        if (CFD_PLATFORMS.DXTRADE && this.root_store.client.is_dxtrade_password_not_set) {\n            const has_error = await this.createCFDPassword(values, actions);\n            if (has_error) return;\n        }\n\n        const response = await this.openCFDAccount(values);\n\n        if (response.error) {\n            await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n            this.setError(true, response.error);\n            actions.resetForm({});\n            actions.setSubmitting(false);\n            actions.setStatus({ success: false });\n            return;\n        }\n\n        actions.setStatus({ success: true });\n        actions.setSubmitting(false);\n        this.setError(false);\n        this.setCFDSuccessDialog(true);\n        await this.getAccountStatus(CFD_PLATFORMS.DXTRADE);\n\n        const trading_platform_accounts_list_response = await WS.tradingPlatformAccountsList(values.platform);\n        this.root_store.client.responseTradingPlatformAccountsList(trading_platform_accounts_list_response);\n\n        WS.transferBetweenAccounts(); // get the list of updated accounts for transfer in cashier\n        this.setCFDNewAccount(response.trading_platform_new_account);\n        setPerformanceValue('create_dxtrade_account_time');\n    }\n\n    toggleCompareAccountsModal() {\n        this.is_compare_accounts_visible = !this.is_compare_accounts_visible;\n    }\n\n    toggleCTraderTransferModal() {\n        this.is_ctrader_transfer_modal_visible = !this.is_ctrader_transfer_modal_visible;\n    }\n\n    getRealSyntheticAccountsExistingData(real_synthetic_accounts_existing_data) {\n        this.real_synthetic_accounts_existing_data = real_synthetic_accounts_existing_data;\n    }\n\n    getRealFinancialAccountsExistingData(real_financial_accounts_existing_data) {\n        this.real_financial_accounts_existing_data = real_financial_accounts_existing_data;\n    }\n\n    getRealSwapfreeAccountsExistingData(real_swapfree_accounts_existing_data) {\n        this.real_swapfree_accounts_existing_data = real_swapfree_accounts_existing_data;\n    }\n\n    toggleJurisdictionModal() {\n        this.is_jurisdiction_modal_visible = !this.is_jurisdiction_modal_visible;\n    }\n\n    toggleMT5TradeModal() {\n        this.is_mt5_trade_modal_visible = !this.is_mt5_trade_modal_visible;\n    }\n\n    disableMt5FinancialStpModal() {\n        this.is_mt5_financial_stp_modal_open = false;\n    }\n\n    async topUpVirtual(platform) {\n        this.root_store.ui.setTopUpInProgress(true);\n        let response;\n\n        switch (platform) {\n            case CFD_PLATFORMS.DXTRADE: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform,\n                    to_account: this.current_account.account_id,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.CTRADER: {\n                response = await WS.authorized.send({\n                    trading_platform_deposit: 1,\n                    platform: CFD_PLATFORMS.CTRADER,\n                    to_account: this.current_account.account_id,\n                });\n                break;\n            }\n            case CFD_PLATFORMS.MT5: {\n                response = await WS.authorized.mt5Deposit({\n                    to_mt5: this.current_account.login,\n                });\n                break;\n            }\n            default: {\n                response.error = 'Invalid platform';\n                break;\n            }\n        }\n\n        if (!response.error) {\n            let new_balance;\n            switch (platform) {\n                case CFD_PLATFORMS.DXTRADE: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.DXTRADE)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.dxtrade_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.CTRADER: {\n                    await WS.authorized\n                        .tradingPlatformAccountsList(CFD_PLATFORMS.CTRADER)\n                        .then(this.root_store.client.responseTradingPlatformAccountsList);\n                    new_balance = this.root_store.client.ctrader_accounts_list.find(\n                        item => item.account_id === this.current_account.account_id\n                    )?.balance;\n                    break;\n                }\n                case CFD_PLATFORMS.MT5: {\n                    await WS.authorized.mt5LoginList().then(this.root_store.client.responseMt5LoginList);\n\n                    new_balance = this.root_store.client.mt5_login_list.find(\n                        item => item.login === this.current_account.login\n                    )?.balance;\n                    break;\n                }\n                default: {\n                    break;\n                }\n            }\n            runInAction(() => {\n                // Get new current account\n                this.root_store.ui.is_top_up_virtual_open = false;\n                this.current_account.balance = new_balance;\n            });\n            setTimeout(() => {\n                runInAction(() => {\n                    this.root_store.ui.is_top_up_virtual_success = true;\n                });\n            }, 250);\n        } else {\n            // eslint-disable-next-line no-console\n            console.error(response);\n        }\n        this.root_store.ui.setTopUpInProgress(false);\n    }\n\n    sendVerifyEmail() {\n        return WS.verifyEmail(this.root_store.client.email, 'trading_platform_investor_password_reset');\n    }\n\n    setDxtradeToken(response, server) {\n        if (!response.error) {\n            const { dxtrade } = response.service_token;\n            this.dxtrade_tokens[server] = dxtrade.token;\n        }\n    }\n\n    setCTraderToken(response, server) {\n        if (!response.error) {\n            const { ctrader } = response.service_token;\n            this.ctrader_tokens[server] = ctrader.token;\n        }\n    }\n\n    loadDxtradeTokens() {\n        ['demo', 'real'].forEach(account_type => {\n            const has_existing_account = this.root_store.client.dxtrade_accounts_list.some(\n                account => account.account_type === account_type\n            );\n            if (!this.dxtrade_tokens[account_type] && has_existing_account) {\n                WS.getServiceToken(CFD_PLATFORMS.DXTRADE, account_type).then(response =>\n                    this.setDxtradeToken(response, account_type)\n                );\n            }\n        });\n    }\n\n    loadCTraderTokens(url, account_type) {\n        const has_existing_account = this.root_store.client.ctrader_accounts_list.some(\n            account => account.account_type === account_type\n        );\n        if (has_existing_account) {\n            WS.getServiceToken(CFD_PLATFORMS.CTRADER, account_type)\n                .then(response => {\n                    this.setCTraderToken(response, account_type);\n                    return window.open(`${url}?token=${response.service_token.ctrader.token}`, '_blank');\n                })\n                .catch(() => window.open(`${url}`, '_blank'));\n        }\n    }\n\n    static async changePassword({ login, old_password, new_password, password_type }) {\n        let response;\n\n        if (password_type === 'investor') {\n            response = await WS.authorized.tradingPlatformInvestorPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        } else {\n            response = await WS.authorized.tradingPlatformPasswordChange({\n                account_id: login,\n                old_password,\n                new_password,\n                platform: CFD_PLATFORMS.MT5,\n            });\n        }\n\n        return response?.error?.message;\n    }\n\n    setJurisdictionSelectedShortcode(shortcode) {\n        this.jurisdiction_selected_shortcode = shortcode;\n    }\n\n    setMigratedMT5Accounts(accounts) {\n        this.migrated_mt5_accounts = accounts;\n    }\n\n    setIsFromMt5MigrationModal(is_from_mt5_migration_modal) {\n        this.is_from_mt5_migration_modal = is_from_mt5_migration_modal;\n    }\n\n    setServerMaintenanceModal(is_server_maintenance_modal_visible) {\n        this.is_server_maintenance_modal_visible = is_server_maintenance_modal_visible;\n    }\n\n    setAccountUnavailableModal(is_account_unavailable_modal_visible) {\n        this.is_account_unavailable_modal_visible = is_account_unavailable_modal_visible;\n    }\n}\n","import CFDStore from './CFD/cfd-store';\n\nexport default class ModulesStore {\n    constructor(root_store) {\n        this.cfd = new CFDStore({ root_store });\n    }\n}\n","import ModulesStore from './Modules';\n\nexport default class RootStore {\n    constructor(core_store) {\n        this.client = core_store.client;\n        this.common = core_store.common;\n        this.modules = new ModulesStore(this, core_store);\n        this.ui = core_store.ui;\n        this.gtm = core_store.gtm;\n        this.notifications = core_store.notifications;\n        this.traders_hub = core_store.traders_hub;\n    }\n}\n"],"names":["getDxCompanies","all_config","account_type","leverage","short_title","localize","synthetic_config","financial_config","demo","all","dxtrade_account_type","title","synthetic","financial","real","dxtrade","mt5_account_type","getCTraderCompanies","ctrader_account_type","getMtCompanies","is_eu","product","financial_title","PRODUCT","STP","GOLD","financial_demo_title","financial_demo_title_eu","financial_demo_short_title","financial_title_eu","financial_stp_config","all_swap_free_svg","all_zero_spread_bvi","ctrader","financial_demo","synthetic_svg","financial_svg","financial_stp","synthetic_bvi","synthetic_v","financial_bvi","financial_fx","financial_v","getFormattedJurisdictionCode","jurisdiction_code","formatted_label","Jurisdiction","SVG","BVI","LABUAN","VANUATU","MALTA_INVEST","toUpperCase","CFDStoreContext","createContext","CFDStoreProvider","_ref","children","modules","useStore","React","Provider","value","cfd","useCfdStore","store","useContext","Error","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","_defineProperties","key","toPrimitive","String","Number","_toPrimitive","BaseStore","_this","options","undefined","_classCallCheck","validation_errors","validation_rules","preSwitchAccountDisposer","pre_switch_account_listener","switchAccountDisposer","switch_account_listener","logoutDisposer","logout_listener","clientInitDisposer","client_init_listener","networkStatusChangeDisposer","network_status_change_listener","themeChangeDisposer","theme_change_listener","realAccountSignupEndedDisposer","real_account_signup_ended_listener","partial_fetch_time","makeObservable","this","observable","retrieveFromStorage","action","setValidationErrorMessages","setValidationRules","addRule","validateProperty","validateAllProperties","onSwitchAccount","bound","onPreSwitchAccount","onLogout","onClientInit","onNetworkStatusChange","onThemeChange","onRealAccountSignupEnd","disposePreSwitchAccount","disposeSwitchAccount","disposeLogout","disposeClientInit","disposeNetworkStatusChange","disposeThemeChange","disposeRealAccountSignupEnd","onUnmount","assertHasValidCache","root_store","local_storage_properties","session_storage_properties","store_name","setTimeout","setupReactionForLocalStorage","setupReactionForSessionStorage","properties","snapshot","toJS","isEmptyObject","reduce","result","assign","_this2","reaction","map","saveToStorage","STORAGES","LOCAL_STORAGE","_this3","SESSION_STORAGE","storage","JSON","stringify","getSnapshot","localStorage","setItem","sessionStorage","_this4","local_storage_snapshot","parse","getItem","session_storage_snapshot","k","propertyName","messages","_this5","x","includes","concat","_this6","rules","property","_this7","intercept","change","newValue","_this8","trigger","inputs","validator","Validator","isPassed","errors","get","_this9","error","listener","_this10","when","client","switch_broadcast","switchEndSignal","isProduction","console","_this11","pre_switch_broadcast","_this11$pre_switch_ac","setPreSwitchAccount","_this12","has_logged_out","_callee","_context","setLogout","t0","_this13","initialized_broadcast","_callee2","_context2","setInitialized","_this14","common","is_network_online","is_online","_this15","ui","is_dark_mode_on","_this16","has_real_account_signup_ended","setRealAccountSignupEnd","loginid","_len","reactions","Array","_key","act","freeze","_toConsumableArray","isArray","_arrayLikeToArray","_arrayWithoutHoles","from","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","toString","test","_callSuper","_getPrototypeOf","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","Boolean","valueOf","bind","_setPrototypeOf","CFDStore","_BaseStore","is_ctrader_transfer_modal_visible","is_jurisdiction_modal_visible","jurisdiction_selected_shortcode","is_compare_accounts_visible","is_mt5_trade_modal_visible","category","mt5_trade_account","new_account_response","map_type","has_cfd_error","error_message","is_sent_email_modal_enabled","is_account_being_created","is_cfd_success_dialog_enabled","is_mt5_financial_stp_modal_open","is_cfd_password_modal_enabled","is_mt5_password_invalid_format_modal_visible","is_mt5_password_changed_modal_visible","is_from_mt5_migration_modal","is_server_maintenance_modal_visible","is_account_unavailable_modal_visible","mt5_migration_error","current_account","error_type","dxtrade_tokens","ctrader_tokens","real_synthetic_accounts_existing_data","real_financial_accounts_existing_data","real_swapfree_accounts_existing_data","real_zerospread_accounts_existing_data","migrated_mt5_accounts","account_title","computed","current_list","onMount","override","checkShouldOpenAccount","realAccountSignupEndListener","resetFormErrors","clearCFDError","createCFDAccount","disableCFDPasswordModal","enableCFDPasswordModal","getName","migrateMT5Accounts","openMT5Account","openCFDAccount","beginRealSignupForMt5","enableMt5FinancialStpModal","setAccountType","setProduct","setCurrentAccount","setMT5TradeAccount","setIsAccountBeingCreated","setError","setCFDNewAccount","setCFDSuccessDialog","setMT5MigrationError","setMigratedMT5Accounts","setSentEmailModalStatus","setIsFromMt5MigrationModal","setServerMaintenanceModal","setAccountUnavailableModal","getAccountStatus","creatMT5Password","submitMt5Password","createCFDPassword","submitCFDPassword","toggleCompareAccountsModal","toggleCTraderTransferModal","getRealSyntheticAccountsExistingData","getRealFinancialAccountsExistingData","getRealSwapfreeAccountsExistingData","toggleJurisdictionModal","toggleMT5TradeModal","disableMt5FinancialStpModal","topUpVirtual","sendVerifyEmail","setJurisdictionSelectedShortcode","setDxtradeToken","setCTraderToken","loadDxtradeTokens","loadCTraderTokens","setIsMt5PasswordInvalidFormatModalVisible","setIsMt5PasswordChangedModalVisible","_inherits","traders_hub","show_eu_related_content","list","mt5_login_list","acc","landing_company_short","account","getAccountListKey","CFD_PLATFORMS","MT5","dxtrade_accounts_list","DXTRADE","ctrader_accounts_list","CTRADER","is_cfd_page","_account_type$split2","split","platform","set_password","removeItem","post_signup","_createCFDAccount","_ref2","account_creation_values","response","account_list","trading_platform_available_accounts_list_response","realCFDSignup","demoCFDSignup","startPerformanceEventTimer","setIsLandingCompanyLoaded","market_type","company","echo_req","trading_platform_accounts","trading_platform_new_account","responseTradingPlatformAccountsList","WS","transferBetweenAccounts","tradingPlatformAvailableAccounts","responseCTraderTradingPlatformAvailableAccounts","tradingPlatformAccountsList","setPerformanceValue","_x","status","first_name","account_settings","mt5_companies","join","_migrateMT5Accounts","actions","account_to_migrate","promises","_has_error$error","results","has_error","error_code","mt5_login_list_response","_has_error$error2","_has_error$error3","setSubmitting","eligible_to_migrate","_Object$entries$","entries","shortcode","login_id","login","to_account","requestMigrateAccount","setMT5MigrationModalEnabled","find","code","setStatus","authorized","mt5LoginList","responseMt5LoginList","tradingServers","t1","responseMT5TradingServers","message","toggleMT5MigrationModal","t2","warn","_x2","_x3","type_request","getAccountTypeFields","_this$root_store$clie","address_line_1","address_line_2","address_postcode","address_city","address_state","country_code","phone","mt5NewAccount","mainPassword","password","email","email_address","address","city","country","state","zipCode","migrate","server","JURISDICTION_MARKET_TYPES","FINANCIAL","_this$root_store$clie2","tradingPlatformNewAccount","openRealAccountSignup","fetchResidenceList","fetchStatesList","fetchAccountSettings","data","meta","visible","obj","_obj$code","cfd_new_account","_getAccountStatus","_callee3","_context3","is_mt5_password_not_set","is_dxtrade_password_not_set","_x4","_creatMT5Password","_callee4","_context4","tradingPlatformPasswordChange","new_password","resetForm","success","_x5","_x6","_submitMt5Password","_callee5","_context5","is_mt5_migration_modal_enabled","mt5_new_account","_x7","_x8","_createCFDPassword","_callee6","_context6","_x9","_x10","_submitCFDPassword","_callee7","trading_platform_accounts_list_response","_context7","_x11","_x12","_topUpVirtual","_callee8","new_balance","_this$root_store$clie3","_this$root_store$clie4","_this$root_store$clie5","_context8","setTopUpInProgress","send","trading_platform_deposit","account_id","mt5Deposit","to_mt5","item","balance","runInAction","is_top_up_virtual_open","is_top_up_virtual_success","_x13","verifyEmail","service_token","token","has_existing_account","some","getServiceToken","url","window","open","accounts","_changePassword","_callee9","_ref4","_response","_response$error","old_password","_context9","password_type","tradingPlatformInvestorPasswordChange","_x14","ModulesStore","_createClass","RootStore","core_store","gtm","notifications"],"sourceRoot":""}