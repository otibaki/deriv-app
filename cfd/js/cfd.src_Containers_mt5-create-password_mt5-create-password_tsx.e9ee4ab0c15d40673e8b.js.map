{"version":3,"file":"cfd/js/cfd.src_Containers_mt5-create-password_mt5-create-password_tsx.e9ee4ab0c15d40673e8b.js","mappings":"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","sources":["webpack://@deriv/cfd/./src/Containers/cfd-password-modal-info.tsx","webpack://@deriv/cfd/./src/Containers/jurisdiction-checkbox.tsx","webpack://@deriv/cfd/./src/Containers/cfd-password-modal-tnc.tsx","webpack://@deriv/cfd/./src/Containers/mt5-create-password/mt5-create-password.tsx"],"sourcesContent":["import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { useIsSelectedMT5AccountCreated } from '@deriv/hooks';\n\ntype CfdPasswordModalInfoProps = {\n    jurisdiction_selected_shortcode: string;\n    platform: string;\n    product: string;\n    need_tnc: boolean;\n};\n\nconst CfdPasswordModalInfo = ({ platform, product, need_tnc }: CfdPasswordModalInfoProps) => {\n    const { available_account_to_create } = useIsSelectedMT5AccountCreated();\n    return (\n        <div className='cfd-password-modal-info'>\n            <div className='cfd-password-modal-info__icon'>\n                <Icon icon='IcInfoLight' />\n            </div>\n            <Text size='xxxs'>\n                {need_tnc ? (\n                    <Localize\n                        i18n_default_text='You are adding your {{platform}} {{product}} account under {{company}}, regulated by the {{regulatory_authority}} (license no.<0/>)'\n                        values={{\n                            platform,\n                            product,\n                            company: available_account_to_create?.name,\n                            regulatory_authority: available_account_to_create?.regulatory_authority ?? '',\n                        }}\n                        components={[\n                            <span\n                                key={0}\n                                dangerouslySetInnerHTML={{ __html: available_account_to_create?.licence_number ?? '' }}\n                            />,\n                        ]}\n                    />\n                ) : (\n                    <Localize\n                        i18n_default_text='You are adding your {{platform}} {{product}} account under {{company}}.'\n                        values={{\n                            platform,\n                            product,\n                            company: available_account_to_create?.name,\n                        }}\n                    />\n                )}\n            </Text>\n        </div>\n    );\n};\n\nexport default CfdPasswordModalInfo;\n","import React from 'react';\nimport { Checkbox, StaticUrl, Text } from '@deriv/components';\nimport { DBVI_COMPANY_NAMES } from '@deriv/shared';\nimport { observer } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { useIsSelectedMT5AccountCreated } from '@deriv/hooks';\n\ntype TJurisdictionCheckBoxProps = {\n    class_name: string;\n    is_checked: boolean;\n    jurisdiction_selected_shortcode: string;\n    onCheck: () => void;\n};\n\nconst JurisdictionCheckBox = observer(\n    ({ class_name, is_checked, jurisdiction_selected_shortcode, onCheck }: TJurisdictionCheckBoxProps) => {\n        const { available_account_to_create } = useIsSelectedMT5AccountCreated();\n        const getCheckboxLabel = () => (\n            <Text as='p' size='xxs' line_height='m'>\n                <Localize\n                    i18n_default_text=\"I confirm and accept {{company}} 's <0>terms and conditions</0>\"\n                    values={{ company: available_account_to_create?.name }}\n                    components={[\n                        <StaticUrl\n                            key={0}\n                            className='link link--no-underline'\n                            href={DBVI_COMPANY_NAMES[jurisdiction_selected_shortcode]?.tnc_url}\n                            is_document\n                        />,\n                    ]}\n                />\n            </Text>\n        );\n\n        return (\n            <div className={class_name}>\n                <Checkbox\n                    value={is_checked}\n                    onChange={onCheck}\n                    label={getCheckboxLabel()}\n                    defaultChecked={!!is_checked}\n                />\n            </div>\n        );\n    }\n);\n\nexport default JurisdictionCheckBox;\n","import React from 'react';\nimport { getCFDPlatformLabel, CFD_PRODUCTS_TITLE, CFD_PLATFORMS } from '@deriv/shared';\nimport { observer } from '@deriv/stores';\nimport CfdPasswordModalInfo from './cfd-password-modal-info';\nimport JurisdictionCheckBox from './jurisdiction-checkbox';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport classNames from 'classnames';\n\ntype CfdPasswordModalTncProps = {\n    platform: typeof CFD_PLATFORMS[keyof typeof CFD_PLATFORMS];\n    checked: boolean;\n    need_tnc: boolean;\n    onCheck: () => void;\n    className?: string;\n};\n\nconst CfdPasswordModalTnc = observer(\n    ({ platform, checked, onCheck, className, need_tnc }: CfdPasswordModalTncProps) => {\n        const { jurisdiction_selected_shortcode, account_title } = useCfdStore();\n        return (\n            <div className={classNames('cfd-password-modal-tnc', className)}>\n                <CfdPasswordModalInfo\n                    jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                    platform={getCFDPlatformLabel(platform)}\n                    product={account_title}\n                    need_tnc={need_tnc}\n                />\n                {need_tnc && (\n                    <JurisdictionCheckBox\n                        is_checked={checked}\n                        onCheck={onCheck}\n                        class_name='cfd-password-modal__checkbox'\n                        jurisdiction_selected_shortcode={jurisdiction_selected_shortcode}\n                    />\n                )}\n            </div>\n        );\n    }\n);\n\nexport default CfdPasswordModalTnc;\n","import React from 'react';\nimport { Formik, FormikErrors, FormikHelpers } from 'formik';\nimport { FormSubmitButton, PasswordInput, PasswordMeter, Text, Icon } from '@deriv/components';\nimport { getCFDPlatformLabel, getCFDPlatformNames, getErrorMessages } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { useCfdStore } from '../../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { CATEGORY, CFD_PLATFORMS } from '../../Helpers/cfd-config';\nimport './mt5-create-password.scss';\nimport '../../sass/cfd.scss';\nimport CfdPasswordModalTnc from '../cfd-password-modal-tnc';\n// This component is for first MT5 password modal\n\nexport type TCFDPasswordFormValues = { password: string };\n\ntype TCFDPasswordFormReusedProps = {\n    platform: typeof CFD_PLATFORMS[keyof typeof CFD_PLATFORMS];\n    error_message: string;\n    validatePassword?: (values: TCFDPasswordFormValues) => FormikErrors<TCFDPasswordFormValues>;\n};\n\ntype TOnSubmitPassword = (values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) => void;\ntype TCFDCreatePasswordProps = TCFDPasswordFormReusedProps & {\n    password: string;\n    onSubmit: TOnSubmitPassword;\n    need_tnc: boolean;\n};\n\nconst handlePasswordInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    handleChange: (el: React.ChangeEvent<HTMLInputElement>) => void,\n    validateForm: (values?: TCFDPasswordFormValues) => Promise<FormikErrors<TCFDPasswordFormValues>>,\n    setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void\n) => {\n    handleChange(e);\n    validateForm().then(() => {\n        setFieldTouched('password', true);\n    });\n};\n\nconst MT5CreatePassword = ({\n    password,\n    platform,\n    validatePassword,\n    onSubmit,\n    error_message,\n    need_tnc,\n}: TCFDCreatePasswordProps) => {\n    const { account_type } = useCfdStore();\n    const [checked, setChecked] = React.useState(!(need_tnc && account_type.category === CATEGORY.REAL));\n\n    return (\n        <Formik\n            initialValues={{\n                password,\n            }}\n            enableReinitialize\n            validate={validatePassword}\n            onSubmit={onSubmit}\n        >\n            {({\n                errors,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                setFieldTouched,\n                touched,\n                values,\n                validateForm,\n            }) => (\n                <React.Fragment>\n                    <form className='mt5-password-modal-form'>\n                        <div\n                            className='mt5-password-modal__content dc-modal__container_mt5-password-modal__body'\n                            data-testid='dt_mt5_create_password'\n                        >\n                            <div className='mt5-password-modal__create-password-content'>\n                                <div className='mt5-password-modal__create-password-icon'>\n                                    <Icon icon='IcMt5Password' size={100} />\n                                </div>\n\n                                <Text\n                                    size='xs'\n                                    align='left'\n                                    className='mt5-password-modal__create-password-description'\n                                >\n                                    <Localize\n                                        i18n_default_text='Create a password for your {{platform}} account:'\n                                        values={{ platform: getCFDPlatformNames(platform) }}\n                                    />\n                                </Text>\n                                <div className='mt5-password-modal__mt5-input-element'>\n                                    <PasswordMeter\n                                        input={values.password}\n                                        has_error={!!(touched.password && errors.password)}\n                                        custom_feedback_messages={getErrorMessages().password_warnings}\n                                    >\n                                        {({ has_warning }: { has_warning: boolean }) => (\n                                            <PasswordInput\n                                                autoComplete='new-password'\n                                                label={localize('{{platform}} password', {\n                                                    platform: getCFDPlatformLabel(platform),\n                                                })}\n                                                error={\n                                                    (touched.password && errors.password) ||\n                                                    (values.password.length === 0 ? error_message : '')\n                                                }\n                                                name='password'\n                                                value={values.password}\n                                                onBlur={handleBlur}\n                                                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                                    handlePasswordInputChange(\n                                                        e,\n                                                        handleChange,\n                                                        validateForm,\n                                                        setFieldTouched\n                                                    );\n                                                }}\n                                                data_testId={`dt_${platform}_password`}\n                                                hint={\n                                                    (!has_warning || values.password.length === 0) &&\n                                                    localize('This password works for all your Deriv MT5 accounts.')\n                                                }\n                                            />\n                                        )}\n                                    </PasswordMeter>\n                                </div>\n                                {account_type.category === CATEGORY.REAL && (\n                                    <CfdPasswordModalTnc\n                                        platform={platform}\n                                        checked={checked}\n                                        onCheck={() => setChecked(prev => !prev)}\n                                        need_tnc={need_tnc}\n                                    />\n                                )}\n                            </div>\n                            <div className='mt5-password-modal__submit-button'>\n                                <FormSubmitButton\n                                    is_disabled={!values.password || !checked || Object.keys(errors).length > 0}\n                                    is_loading={isSubmitting}\n                                    label={localize('Create account')}\n                                    onClick={handleSubmit}\n                                />\n                            </div>\n                        </div>\n                    </form>\n                </React.Fragment>\n            )}\n        </Formik>\n    );\n};\nexport default MT5CreatePassword;\n"],"names":["_ref","_available_account_to","_available_account_to2","platform","product","need_tnc","available_account_to_create","useIsSelectedMT5AccountCreated","React","className","Icon","icon","Text","size","Localize","i18n_default_text","values","company","name","regulatory_authority","components","key","dangerouslySetInnerHTML","__html","licence_number","observer","_DBVI_COMPANY_NAMES$j","class_name","is_checked","jurisdiction_selected_shortcode","onCheck","Checkbox","value","onChange","label","as","line_height","StaticUrl","href","DBVI_COMPANY_NAMES","tnc_url","is_document","defaultChecked","checked","_useCfdStore","useCfdStore","account_title","classNames","CfdPasswordModalInfo","getCFDPlatformLabel","JurisdictionCheckBox","password","validatePassword","onSubmit","error_message","account_type","_React$useState2","_slicedToArray","category","CATEGORY","REAL","setChecked","Formik","initialValues","enableReinitialize","validate","_ref2","errors","isSubmitting","handleBlur","handleChange","handleSubmit","setFieldTouched","touched","validateForm","align","getCFDPlatformNames","PasswordMeter","input","has_error","custom_feedback_messages","getErrorMessages","password_warnings","_ref3","has_warning","PasswordInput","autoComplete","localize","error","length","onBlur","e","then","handlePasswordInputChange","data_testId","concat","hint","CfdPasswordModalTnc","prev","FormSubmitButton","is_disabled","Object","keys","is_loading","onClick"],"sourceRoot":""}