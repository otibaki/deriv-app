{"version":3,"file":"p2p/js/p2p.two-month-picker.29738ea13115126feb6d.js","mappings":"+rCAoBA,IAAMA,EAAe,SAAHC,GAOQ,IANtBC,EAAmBD,EAAnBC,oBACAC,EAAUF,EAAVE,WACAC,EAAQH,EAARG,SACAC,EAAQJ,EAARI,SACAC,EAAcL,EAAdK,eACAC,EAAKN,EAALM,MAMA,OACIC,EAAAA,cAACA,EAAAA,SAAc,KACXA,EAAAA,cAACC,EAAAA,SAASC,OAAM,CACZC,cAAeN,EACfO,cAAc,OACdC,uBAAqB,EACrBC,iBAAkBR,EAClBS,WAAYZ,EACZa,WAAY,WAAF,MAAS,CAAC,CAAC,IAEzBR,EAAAA,cAACC,EAAAA,SAASQ,KAAI,CACVL,cAAc,OACdD,cAAeN,EACfa,YAAY,aACZJ,iBAAkBZ,EAClBiB,aAAW,EACXC,cAAeb,EACfc,eArBe,SAACC,GACxBlB,EAASmB,IAAAA,IAAWD,EAAEE,cAAcC,QAAQC,KAAM,cACtD,IAuBJ,EAEMC,EAAiB,SAAHC,GAAuE,IAAjExB,EAAQwB,EAARxB,SAAUF,EAAmB0B,EAAnB1B,oBAAqBK,EAAKqB,EAALrB,MACiDsB,EAAAC,EAA5DtB,EAAAA,UAAeuB,EAAAA,EAAAA,UAASxB,GAAOyB,QAAQC,SAAS,EAAG,UAAS,GAA/FC,EAAcL,EAAA,GAAEM,EAAeN,EAAA,GAC2BO,EAAAN,EAArBtB,EAAAA,SAAeD,GAAM,GAA1D8B,EAAeD,EAAA,GAAEE,EAAgBF,EAAA,GA2CxC,OACI5B,EAAAA,cAACA,EAAAA,SAAc,KACXA,EAAAA,cAAA,OAAK+B,UAAU,eACX/B,EAAAA,cAACR,EAAY,CACTE,oBAAqBA,EACrBC,WA/BG,SAACuB,GAChBS,GAAgBK,EAAAA,EAAAA,WAAUd,EAAKe,cAAe,IAC9CH,GAAiBP,EAAAA,EAAAA,UAASL,GAC9B,EA6BgBtB,SAAUA,EACVC,SAAU6B,EACV5B,eAxBW,SAACoB,GACxB,OAAyD,KAAlDgB,EAAAA,EAAAA,eAAaX,EAAAA,EAAAA,UAASG,GAAiBR,EAClD,EAuBgBnB,MAAOA,KAGfC,EAAAA,cAAA,OAAK+B,UAAU,gBACX/B,EAAAA,cAACR,EAAY,CACTE,oBAAqBA,EACrBC,WAnDK,SAACuB,GAClBS,EAAgBT,GAChBY,GAAiBK,EAAAA,EAAAA,WAAUjB,EAAKe,cAAe,GACnD,EAiDgBrC,SAAUA,EACVC,SAAUgC,EACV/B,eAxBS,SAACoB,GACtB,IAAMkB,GAASb,EAAAA,EAAAA,UAASM,GAAiBQ,QAAQ,SACjD,OAA0D,KAAtDH,EAAAA,EAAAA,eAAaX,EAAAA,EAAAA,YAAWc,QAAQ,SAAUD,IACR,KAA/BF,EAAAA,EAAAA,cAAaE,EAAQlB,EAChC,EAqBgBnB,MAAOA,KAK3B,EAEA,QAAeC,EAAAA,KAAWmB,E","sources":["webpack://@deriv/p2p/./src/components/composite-calendar/two-month-picker.tsx"],"sourcesContent":["import React from 'react';\nimport moment from 'moment';\nimport { Calendar } from '@deriv/components';\nimport { addMonths, diffInMonths, subMonths, toMoment } from '@deriv/shared';\n\ntype TTwoMonthPickerProps = {\n    onChange: (date: moment.MomentInput) => void;\n    getIsPeriodDisabled: (date: moment.Moment) => boolean;\n    value: moment.Moment | number;\n};\n\ntype TCalendarPaneProps = {\n    getIsPeriodDisabled: (date: moment.Moment) => boolean;\n    navigateFn: (date: moment.Moment) => void;\n    onChange: (date: moment.MomentInput) => void;\n    paneDate: moment.Moment | number;\n    validateArrows: (date: moment.Moment) => boolean;\n    value: moment.Moment | number;\n};\n\nconst CalendarPane = ({\n    getIsPeriodDisabled,\n    navigateFn,\n    onChange,\n    paneDate,\n    validateArrows,\n    value,\n}: TCalendarPaneProps) => {\n    const updateSelectedDate = (e: React.MouseEvent<HTMLElement>) => {\n        onChange(moment.utc(e.currentTarget.dataset.date, 'YYYY-MM-DD'));\n    };\n\n    return (\n        <React.Fragment>\n            <Calendar.Header\n                calendar_date={paneDate}\n                calendar_view='date'\n                hide_disabled_periods\n                isPeriodDisabled={validateArrows}\n                navigateTo={navigateFn}\n                switchView={() => ({})}\n            />\n            <Calendar.Body\n                calendar_view='date'\n                calendar_date={paneDate}\n                date_format='YYYY-MM-DD'\n                isPeriodDisabled={getIsPeriodDisabled}\n                hide_others\n                selected_date={value}\n                updateSelected={updateSelectedDate}\n            />\n        </React.Fragment>\n    );\n};\n\nconst TwoMonthPicker = ({ onChange, getIsPeriodDisabled, value }: TTwoMonthPickerProps) => {\n    const [left_pane_date, setLeftPaneDate] = React.useState(toMoment(value).clone().subtract(1, 'month'));\n    const [right_pane_date, setRightPaneDate] = React.useState(value);\n\n    /**\n     * Navigate from date\n     *\n     * @param {moment.Moment} date\n     */\n    const navigateFrom = (date: moment.Moment) => {\n        setLeftPaneDate(date);\n        setRightPaneDate(addMonths(date.toISOString(), 1));\n    };\n\n    /**\n     * Navigate to date\n     *\n     * @param {moment.Moment} date\n     */\n    const navigateTo = (date: moment.Moment) => {\n        setLeftPaneDate(subMonths(date.toISOString(), 1));\n        setRightPaneDate(toMoment(date));\n    };\n\n    /**\n     * Only allow previous months to be available to navigate. Disable other periods\n     *\n     * @param {moment.Moment} date\n     */\n    const validateFromArrows = (date: moment.Moment) => {\n        return diffInMonths(toMoment(left_pane_date), date) !== -1;\n    };\n\n    /**\n     * Only allow next month to be available to navigate (unless next month is in the future).\n     * Disable other periods\n     *\n     * @param {moment.Moment} date\n     */\n    const validateToArrows = (date: moment.Moment) => {\n        const r_date = toMoment(right_pane_date).startOf('month');\n        if (diffInMonths(toMoment().startOf('month'), r_date) === 0) return true; // future months are disallowed\n        return diffInMonths(r_date, date) !== 1;\n    };\n\n    return (\n        <React.Fragment>\n            <div className='first-month'>\n                <CalendarPane\n                    getIsPeriodDisabled={getIsPeriodDisabled}\n                    navigateFn={navigateTo}\n                    onChange={onChange}\n                    paneDate={left_pane_date}\n                    validateArrows={validateFromArrows}\n                    value={value}\n                />\n            </div>\n            <div className='second-month'>\n                <CalendarPane\n                    getIsPeriodDisabled={getIsPeriodDisabled}\n                    navigateFn={navigateFrom}\n                    onChange={onChange}\n                    paneDate={right_pane_date}\n                    validateArrows={validateToArrows}\n                    value={value}\n                />\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default React.memo(TwoMonthPicker);\n"],"names":["CalendarPane","_ref","getIsPeriodDisabled","navigateFn","onChange","paneDate","validateArrows","value","React","Calendar","Header","calendar_date","calendar_view","hide_disabled_periods","isPeriodDisabled","navigateTo","switchView","Body","date_format","hide_others","selected_date","updateSelected","e","moment","currentTarget","dataset","date","TwoMonthPicker","_ref2","_React$useState2","_slicedToArray","toMoment","clone","subtract","left_pane_date","setLeftPaneDate","_React$useState4","right_pane_date","setRightPaneDate","className","subMonths","toISOString","diffInMonths","addMonths","r_date","startOf"],"sourceRoot":""}