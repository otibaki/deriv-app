{"version":3,"file":"git-revision-webpack-plugin.cjs.production.min.js","sources":["../src/helpers/remove-empty-lines.ts","../src/helpers/run-git-command.ts","../src/build-file.ts","../src/index.ts"],"sourcesContent":["export default function removeEmptyLines(string: string) {\n  return string.replace(/[\\s\\r\\n]+$/, '')\n}\n","import { exec } from 'child_process'\nimport { execSync } from 'child_process'\nimport path from 'path'\nimport removeEmptyLines from './remove-empty-lines'\n\ninterface Cb {\n  (err: Error | null, output: string): void\n}\n\nexport default function(gitWorkTree: string | undefined, command: string, callback?: Cb) {\n  const gitCommand = gitWorkTree\n    ? ['git', '--git-dir=' + path.join(gitWorkTree, '.git'), '--work-tree=' + gitWorkTree, command].join(' ')\n    : ['git', command].join(' ')\n\n  if (callback) {\n    exec(gitCommand, function(err, stdout) {\n      if (err) {\n        return callback(err, '')\n      }\n      callback(null, removeEmptyLines(stdout))\n    })\n\n    return null\n  } else {\n    return removeEmptyLines(`${execSync(gitCommand)}`)\n  }\n}\n","import runGitCommand from './helpers/run-git-command'\nimport { Compiler } from 'webpack'\n\ninterface BuildFileOptions {\n  compiler: Compiler\n  gitWorkTree?: string\n  command: string\n  replacePattern: RegExp\n  asset: string\n}\n\nexport default function buildFile({ compiler, gitWorkTree, command, replacePattern, asset }: BuildFileOptions) {\n  let data: string = ''\n\n  compiler.hooks.compilation.tap('GitRevisionWebpackPlugin', compilation => {\n    compilation.hooks.optimizeTree.tapAsync('optimize-tree', (_, __, callback) => {\n      runGitCommand(gitWorkTree, command, function(err, res) {\n        if (err) {\n          return callback(err)\n        }\n        data = res\n\n        callback()\n      })\n    })\n\n    compilation.hooks.assetPath.tap('GitRevisionWebpackPlugin', (assetPath: any, chunkData: any) => {\n      const path = typeof assetPath === 'function' ? assetPath(chunkData) : assetPath\n\n      if (!data) return path\n      return path.replace(replacePattern, data)\n    })\n\n    compilation.hooks.processAssets.tap('GitRevisionWebpackPlugin', assets => {\n      assets[asset] = {\n        source: function() {\n          return data\n        },\n        size: function() {\n          return data ? data.length : 0\n        },\n        buffer: function() {\n          return Buffer.from(data)\n        },\n        map: function() {\n          return {}\n        },\n        sourceAndMap: function() {\n          return { source: data, map: {} }\n        },\n        updateHash: function() {},\n      }\n    })\n  })\n}\n","import buildFile from './build-file'\nimport runGitCommand from './helpers/run-git-command'\nimport { Compiler } from 'webpack'\n\nconst COMMITHASH_COMMAND = 'rev-parse HEAD'\nconst VERSION_COMMAND = 'describe --always'\nconst BRANCH_COMMAND = 'rev-parse --abbrev-ref HEAD'\nconst LASTCOMMITDATETIME_COMMAND = 'log -1 --format=%cI'\n\ninterface GitRevisionPluginOptions {\n  gitWorkTree?: string\n  commithashCommand?: string\n  versionCommand?: string\n  branch?: boolean\n  branchCommand?: string\n  lastCommitDateTimeCommand?: string\n  lightweightTags?: boolean\n}\n\nexport class GitRevisionPlugin {\n  gitWorkTree?: string\n  commithashCommand: string\n  versionCommand: string\n  createBranchFile: boolean\n  branchCommand: string\n  lastCommitDateTimeCommand: string\n\n  constructor(options: GitRevisionPluginOptions = {}) {\n    this.gitWorkTree = options.gitWorkTree\n    this.commithashCommand = options.commithashCommand || COMMITHASH_COMMAND\n    this.versionCommand = options.versionCommand || VERSION_COMMAND + (options.lightweightTags ? ' --tags' : '')\n    this.createBranchFile = options.branch || false\n    this.branchCommand = options.branchCommand || BRANCH_COMMAND\n    this.lastCommitDateTimeCommand = options.lastCommitDateTimeCommand || LASTCOMMITDATETIME_COMMAND\n\n    if (options.versionCommand && options.lightweightTags) {\n      throw new Error(\"lightweightTags can't be used together versionCommand\")\n    }\n  }\n\n  commithash() {\n    return runGitCommand(this.gitWorkTree, this.commithashCommand)\n  }\n\n  version() {\n    return runGitCommand(this.gitWorkTree, this.versionCommand)\n  }\n\n  branch() {\n    return runGitCommand(this.gitWorkTree, this.branchCommand)\n  }\n\n  lastcommitdatetime() {\n    return runGitCommand(this.gitWorkTree, this.lastCommitDateTimeCommand)\n  }\n\n  apply(compiler: Compiler) {\n    buildFile({\n      compiler: compiler,\n      gitWorkTree: this.gitWorkTree,\n      command: this.commithashCommand,\n      replacePattern: /\\[git-revision-hash\\]/gi,\n      asset: 'COMMITHASH',\n    })\n\n    buildFile({\n      compiler: compiler,\n      gitWorkTree: this.gitWorkTree,\n      command: this.versionCommand,\n      replacePattern: /\\[git-revision-version\\]/gi,\n      asset: 'VERSION',\n    })\n\n    buildFile({\n      compiler: compiler,\n      gitWorkTree: this.gitWorkTree,\n      command: this.lastCommitDateTimeCommand,\n      replacePattern: /\\[git-revision-last-commit-datetime\\]/gi,\n      asset: 'LASTCOMMITDATETIME',\n    })\n\n    if (this.createBranchFile) {\n      buildFile({\n        compiler: compiler,\n        gitWorkTree: this.gitWorkTree,\n        command: this.branchCommand,\n        replacePattern: /\\[git-revision-branch\\]/gi,\n        asset: 'BRANCH',\n      })\n    }\n  }\n}\n"],"names":["removeEmptyLines","string","replace","gitWorkTree","command","callback","gitCommand","path","join","exec","err","stdout","execSync","buildFile","replacePattern","asset","data","compiler","hooks","compilation","tap","optimizeTree","tapAsync","_","__","runGitCommand","res","assetPath","chunkData","processAssets","assets","source","size","length","buffer","Buffer","from","map","sourceAndMap","updateHash","options","commithashCommand","versionCommand","lightweightTags","createBranchFile","branch","branchCommand","lastCommitDateTimeCommand","Error","commithash","this","version","lastcommitdatetime","apply"],"mappings":"mLAAwBA,EAAiBC,UAChCA,EAAOC,QAAQ,aAAc,eCQdC,EAAiCC,EAAiBC,OAClEC,EAAaH,EACf,CAAC,MAAO,aAAeI,EAAKC,KAAKL,EAAa,QAAS,eAAiBA,EAAaC,GAASI,KAAK,KACnG,CAAC,MAAOJ,GAASI,KAAK,YAEtBH,GACFI,OAAKH,GAAY,SAASI,EAAKC,MACzBD,SACKL,EAASK,EAAK,IAEvBL,EAAS,KAAML,EAAiBW,OAG3B,MAEAX,KAAoBY,WAASN,aCbhBO,SAAsBV,IAAAA,YAAaC,IAAAA,QAASU,IAAAA,eAAgBC,IAAAA,MAC9EC,EAAe,KADeC,SAGzBC,MAAMC,YAAYC,IAAI,4BAA4B,SAAAD,GACzDA,EAAYD,MAAMG,aAAaC,SAAS,iBAAiB,SAACC,EAAGC,EAAInB,GAC/DoB,EAActB,EAAaC,GAAS,SAASM,EAAKgB,MAC5ChB,SACKL,EAASK,GAElBM,EAAOU,EAEPrB,UAIJc,EAAYD,MAAMS,UAAUP,IAAI,4BAA4B,SAACO,EAAgBC,OACrErB,EAA4B,mBAAdoB,EAA2BA,EAAUC,GAAaD,SAEjEX,EACET,EAAKL,QAAQY,EAAgBE,GADlBT,KAIpBY,EAAYD,MAAMW,cAAcT,IAAI,4BAA4B,SAAAU,GAC9DA,EAAOf,GAAS,CACdgB,OAAQ,kBACCf,GAETgB,KAAM,kBACGhB,EAAOA,EAAKiB,OAAS,GAE9BC,OAAQ,kBACCC,OAAOC,KAAKpB,IAErBqB,IAAK,iBACI,IAETC,aAAc,iBACL,CAAEP,OAAQf,EAAMqB,IAAK,KAE9BE,WAAY,oECvBNC,eAAAA,IAAAA,EAAoC,SACzCrC,YAAcqC,EAAQrC,iBACtBsC,kBAAoBD,EAAQC,mBAzBV,sBA0BlBC,eAAiBF,EAAQE,gBAzBV,qBAyB+CF,EAAQG,gBAAkB,UAAY,SACpGC,iBAAmBJ,EAAQK,SAAU,OACrCC,cAAgBN,EAAQM,eA1BV,mCA2BdC,0BAA4BP,EAAQO,2BA1BV,sBA4B3BP,EAAQE,gBAAkBF,EAAQG,sBAC9B,IAAIK,MAAM,oFAIpBC,WAAA,kBACSxB,EAAcyB,KAAK/C,YAAa+C,KAAKT,sBAG9CU,QAAA,kBACS1B,EAAcyB,KAAK/C,YAAa+C,KAAKR,mBAG9CG,OAAA,kBACSpB,EAAcyB,KAAK/C,YAAa+C,KAAKJ,kBAG9CM,mBAAA,kBACS3B,EAAcyB,KAAK/C,YAAa+C,KAAKH,8BAG9CM,MAAA,SAAMpC,GACJJ,EAAU,CACRI,SAAUA,EACVd,YAAa+C,KAAK/C,YAClBC,QAAS8C,KAAKT,kBACd3B,eAAgB,0BAChBC,MAAO,eAGTF,EAAU,CACRI,SAAUA,EACVd,YAAa+C,KAAK/C,YAClBC,QAAS8C,KAAKR,eACd5B,eAAgB,6BAChBC,MAAO,YAGTF,EAAU,CACRI,SAAUA,EACVd,YAAa+C,KAAK/C,YAClBC,QAAS8C,KAAKH,0BACdjC,eAAgB,0CAChBC,MAAO,uBAGLmC,KAAKN,kBACP/B,EAAU,CACRI,SAAUA,EACVd,YAAa+C,KAAK/C,YAClBC,QAAS8C,KAAKJ,cACdhC,eAAgB,4BAChBC,MAAO"}