{"version":3,"file":"git-revision-webpack-plugin.cjs.development.js","sources":["../src/helpers/remove-empty-lines.ts","../src/helpers/run-git-command.ts","../src/build-file.ts","../src/index.ts"],"sourcesContent":["export default function removeEmptyLines(string: string) {\n  return string.replace(/[\\s\\r\\n]+$/, '')\n}\n","import { exec } from 'child_process'\nimport { execSync } from 'child_process'\nimport path from 'path'\nimport removeEmptyLines from './remove-empty-lines'\n\ninterface Cb {\n  (err: Error | null, output: string): void\n}\n\nexport default function(gitWorkTree: string | undefined, command: string, callback?: Cb) {\n  const gitCommand = gitWorkTree\n    ? ['git', '--git-dir=' + path.join(gitWorkTree, '.git'), '--work-tree=' + gitWorkTree, command].join(' ')\n    : ['git', command].join(' ')\n\n  if (callback) {\n    exec(gitCommand, function(err, stdout) {\n      if (err) {\n        return callback(err, '')\n      }\n      callback(null, removeEmptyLines(stdout))\n    })\n\n    return null\n  } else {\n    return removeEmptyLines(`${execSync(gitCommand)}`)\n  }\n}\n","import runGitCommand from './helpers/run-git-command'\nimport { Compiler } from 'webpack'\n\ninterface BuildFileOptions {\n  compiler: Compiler\n  gitWorkTree?: string\n  command: string\n  replacePattern: RegExp\n  asset: string\n}\n\nexport default function buildFile({ compiler, gitWorkTree, command, replacePattern, asset }: BuildFileOptions) {\n  let data: string = ''\n\n  compiler.hooks.compilation.tap('GitRevisionWebpackPlugin', compilation => {\n    compilation.hooks.optimizeTree.tapAsync('optimize-tree', (_, __, callback) => {\n      runGitCommand(gitWorkTree, command, function(err, res) {\n        if (err) {\n          return callback(err)\n        }\n        data = res\n\n        callback()\n      })\n    })\n\n    compilation.hooks.assetPath.tap('GitRevisionWebpackPlugin', (assetPath: any, chunkData: any) => {\n      const path = typeof assetPath === 'function' ? assetPath(chunkData) : assetPath\n\n      if (!data) return path\n      return path.replace(replacePattern, data)\n    })\n\n    compilation.hooks.processAssets.tap('GitRevisionWebpackPlugin', assets => {\n      assets[asset] = {\n        source: function() {\n          return data\n        },\n        size: function() {\n          return data ? data.length : 0\n        },\n        buffer: function() {\n          return Buffer.from(data)\n        },\n        map: function() {\n          return {}\n        },\n        sourceAndMap: function() {\n          return { source: data, map: {} }\n        },\n        updateHash: function() {},\n      }\n    })\n  })\n}\n","import buildFile from './build-file'\nimport runGitCommand from './helpers/run-git-command'\nimport { Compiler } from 'webpack'\n\nconst COMMITHASH_COMMAND = 'rev-parse HEAD'\nconst VERSION_COMMAND = 'describe --always'\nconst BRANCH_COMMAND = 'rev-parse --abbrev-ref HEAD'\nconst LASTCOMMITDATETIME_COMMAND = 'log -1 --format=%cI'\n\ninterface GitRevisionPluginOptions {\n  gitWorkTree?: string\n  commithashCommand?: string\n  versionCommand?: string\n  branch?: boolean\n  branchCommand?: string\n  lastCommitDateTimeCommand?: string\n  lightweightTags?: boolean\n}\n\nexport class GitRevisionPlugin {\n  gitWorkTree?: string\n  commithashCommand: string\n  versionCommand: string\n  createBranchFile: boolean\n  branchCommand: string\n  lastCommitDateTimeCommand: string\n\n  constructor(options: GitRevisionPluginOptions = {}) {\n    this.gitWorkTree = options.gitWorkTree\n    this.commithashCommand = options.commithashCommand || COMMITHASH_COMMAND\n    this.versionCommand = options.versionCommand || VERSION_COMMAND + (options.lightweightTags ? ' --tags' : '')\n    this.createBranchFile = options.branch || false\n    this.branchCommand = options.branchCommand || BRANCH_COMMAND\n    this.lastCommitDateTimeCommand = options.lastCommitDateTimeCommand || LASTCOMMITDATETIME_COMMAND\n\n    if (options.versionCommand && options.lightweightTags) {\n      throw new Error(\"lightweightTags can't be used together versionCommand\")\n    }\n  }\n\n  commithash() {\n    return runGitCommand(this.gitWorkTree, this.commithashCommand)\n  }\n\n  version() {\n    return runGitCommand(this.gitWorkTree, this.versionCommand)\n  }\n\n  branch() {\n    return runGitCommand(this.gitWorkTree, this.branchCommand)\n  }\n\n  lastcommitdatetime() {\n    return runGitCommand(this.gitWorkTree, this.lastCommitDateTimeCommand)\n  }\n\n  apply(compiler: Compiler) {\n    buildFile({\n      compiler: compiler,\n      gitWorkTree: this.gitWorkTree,\n      command: this.commithashCommand,\n      replacePattern: /\\[git-revision-hash\\]/gi,\n      asset: 'COMMITHASH',\n    })\n\n    buildFile({\n      compiler: compiler,\n      gitWorkTree: this.gitWorkTree,\n      command: this.versionCommand,\n      replacePattern: /\\[git-revision-version\\]/gi,\n      asset: 'VERSION',\n    })\n\n    buildFile({\n      compiler: compiler,\n      gitWorkTree: this.gitWorkTree,\n      command: this.lastCommitDateTimeCommand,\n      replacePattern: /\\[git-revision-last-commit-datetime\\]/gi,\n      asset: 'LASTCOMMITDATETIME',\n    })\n\n    if (this.createBranchFile) {\n      buildFile({\n        compiler: compiler,\n        gitWorkTree: this.gitWorkTree,\n        command: this.branchCommand,\n        replacePattern: /\\[git-revision-branch\\]/gi,\n        asset: 'BRANCH',\n      })\n    }\n  }\n}\n"],"names":["removeEmptyLines","string","replace","gitWorkTree","command","callback","gitCommand","path","join","exec","err","stdout","execSync","buildFile","compiler","replacePattern","asset","data","hooks","compilation","tap","optimizeTree","tapAsync","_","__","runGitCommand","res","assetPath","chunkData","processAssets","assets","source","size","length","buffer","Buffer","from","map","sourceAndMap","updateHash","COMMITHASH_COMMAND","VERSION_COMMAND","BRANCH_COMMAND","LASTCOMMITDATETIME_COMMAND","GitRevisionPlugin","options","commithashCommand","versionCommand","lightweightTags","createBranchFile","branch","branchCommand","lastCommitDateTimeCommand","Error","commithash","version","lastcommitdatetime","apply"],"mappings":";;;;;;;;;SAAwBA,iBAAiBC;AACvC,SAAOA,MAAM,CAACC,OAAP,CAAe,YAAf,EAA6B,EAA7B,CAAP;AACD;;wBCOuBC,aAAiCC,SAAiBC;AACxE,MAAMC,UAAU,GAAGH,WAAW,GAC1B,CAAC,KAAD,EAAQ,eAAeI,IAAI,CAACC,IAAL,CAAUL,WAAV,EAAuB,MAAvB,CAAvB,EAAuD,iBAAiBA,WAAxE,EAAqFC,OAArF,EAA8FI,IAA9F,CAAmG,GAAnG,CAD0B,GAE1B,CAAC,KAAD,EAAQJ,OAAR,EAAiBI,IAAjB,CAAsB,GAAtB,CAFJ;;AAIA,MAAIH,QAAJ,EAAc;AACZI,IAAAA,kBAAI,CAACH,UAAD,EAAa,UAASI,GAAT,EAAcC,MAAd;AACf,UAAID,GAAJ,EAAS;AACP,eAAOL,QAAQ,CAACK,GAAD,EAAM,EAAN,CAAf;AACD;;AACDL,MAAAA,QAAQ,CAAC,IAAD,EAAOL,gBAAgB,CAACW,MAAD,CAAvB,CAAR;AACD,KALG,CAAJ;AAOA,WAAO,IAAP;AACD,GATD,MASO;AACL,WAAOX,gBAAgB,MAAIY,sBAAQ,CAACN,UAAD,CAAZ,CAAvB;AACD;AACF;;SCfuBO;MAAYC,gBAAAA;MAAUX,mBAAAA;MAAaC,eAAAA;MAASW,sBAAAA;MAAgBC,aAAAA;AAClF,MAAIC,IAAI,GAAW,EAAnB;AAEAH,EAAAA,QAAQ,CAACI,KAAT,CAAeC,WAAf,CAA2BC,GAA3B,CAA+B,0BAA/B,EAA2D,UAAAD,WAAW;AACpEA,IAAAA,WAAW,CAACD,KAAZ,CAAkBG,YAAlB,CAA+BC,QAA/B,CAAwC,eAAxC,EAAyD,UAACC,CAAD,EAAIC,EAAJ,EAAQnB,QAAR;AACvDoB,MAAAA,aAAa,CAACtB,WAAD,EAAcC,OAAd,EAAuB,UAASM,GAAT,EAAcgB,GAAd;AAClC,YAAIhB,GAAJ,EAAS;AACP,iBAAOL,QAAQ,CAACK,GAAD,CAAf;AACD;;AACDO,QAAAA,IAAI,GAAGS,GAAP;AAEArB,QAAAA,QAAQ;AACT,OAPY,CAAb;AAQD,KATD;AAWAc,IAAAA,WAAW,CAACD,KAAZ,CAAkBS,SAAlB,CAA4BP,GAA5B,CAAgC,0BAAhC,EAA4D,UAACO,SAAD,EAAiBC,SAAjB;AAC1D,UAAMrB,IAAI,GAAG,OAAOoB,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAACC,SAAD,CAA3C,GAAyDD,SAAtE;AAEA,UAAI,CAACV,IAAL,EAAW,OAAOV,IAAP;AACX,aAAOA,IAAI,CAACL,OAAL,CAAaa,cAAb,EAA6BE,IAA7B,CAAP;AACD,KALD;AAOAE,IAAAA,WAAW,CAACD,KAAZ,CAAkBW,aAAlB,CAAgCT,GAAhC,CAAoC,0BAApC,EAAgE,UAAAU,MAAM;AACpEA,MAAAA,MAAM,CAACd,KAAD,CAAN,GAAgB;AACde,QAAAA,MAAM,EAAE;AACN,iBAAOd,IAAP;AACD,SAHa;AAIde,QAAAA,IAAI,EAAE;AACJ,iBAAOf,IAAI,GAAGA,IAAI,CAACgB,MAAR,GAAiB,CAA5B;AACD,SANa;AAOdC,QAAAA,MAAM,EAAE;AACN,iBAAOC,MAAM,CAACC,IAAP,CAAYnB,IAAZ,CAAP;AACD,SATa;AAUdoB,QAAAA,GAAG,EAAE;AACH,iBAAO,EAAP;AACD,SAZa;AAadC,QAAAA,YAAY,EAAE;AACZ,iBAAO;AAAEP,YAAAA,MAAM,EAAEd,IAAV;AAAgBoB,YAAAA,GAAG,EAAE;AAArB,WAAP;AACD,SAfa;AAgBdE,QAAAA,UAAU,EAAE;AAhBE,OAAhB;AAkBD,KAnBD;AAoBD,GAvCD;AAwCD;;AClDD,IAAMC,kBAAkB,GAAG,gBAA3B;AACA,IAAMC,eAAe,GAAG,mBAAxB;AACA,IAAMC,cAAc,GAAG,6BAAvB;AACA,IAAMC,0BAA0B,GAAG,qBAAnC;AAYA,IAAaC,iBAAb;AAQE,6BAAYC,OAAZ;QAAYA;AAAAA,MAAAA,UAAoC;;;AAC9C,SAAK1C,WAAL,GAAmB0C,OAAO,CAAC1C,WAA3B;AACA,SAAK2C,iBAAL,GAAyBD,OAAO,CAACC,iBAAR,IAA6BN,kBAAtD;AACA,SAAKO,cAAL,GAAsBF,OAAO,CAACE,cAAR,IAA0BN,eAAe,IAAII,OAAO,CAACG,eAAR,GAA0B,SAA1B,GAAsC,EAA1C,CAA/D;AACA,SAAKC,gBAAL,GAAwBJ,OAAO,CAACK,MAAR,IAAkB,KAA1C;AACA,SAAKC,aAAL,GAAqBN,OAAO,CAACM,aAAR,IAAyBT,cAA9C;AACA,SAAKU,yBAAL,GAAiCP,OAAO,CAACO,yBAAR,IAAqCT,0BAAtE;;AAEA,QAAIE,OAAO,CAACE,cAAR,IAA0BF,OAAO,CAACG,eAAtC,EAAuD;AACrD,YAAM,IAAIK,KAAJ,CAAU,uDAAV,CAAN;AACD;AACF;;AAnBH;;AAAA,SAqBEC,UArBF,GAqBE;AACE,WAAO7B,aAAa,CAAC,KAAKtB,WAAN,EAAmB,KAAK2C,iBAAxB,CAApB;AACD,GAvBH;;AAAA,SAyBES,OAzBF,GAyBE;AACE,WAAO9B,aAAa,CAAC,KAAKtB,WAAN,EAAmB,KAAK4C,cAAxB,CAApB;AACD,GA3BH;;AAAA,SA6BEG,MA7BF,GA6BE;AACE,WAAOzB,aAAa,CAAC,KAAKtB,WAAN,EAAmB,KAAKgD,aAAxB,CAApB;AACD,GA/BH;;AAAA,SAiCEK,kBAjCF,GAiCE;AACE,WAAO/B,aAAa,CAAC,KAAKtB,WAAN,EAAmB,KAAKiD,yBAAxB,CAApB;AACD,GAnCH;;AAAA,SAqCEK,KArCF,GAqCE,eAAM3C,QAAN;AACED,IAAAA,SAAS,CAAC;AACRC,MAAAA,QAAQ,EAAEA,QADF;AAERX,MAAAA,WAAW,EAAE,KAAKA,WAFV;AAGRC,MAAAA,OAAO,EAAE,KAAK0C,iBAHN;AAIR/B,MAAAA,cAAc,EAAE,yBAJR;AAKRC,MAAAA,KAAK,EAAE;AALC,KAAD,CAAT;AAQAH,IAAAA,SAAS,CAAC;AACRC,MAAAA,QAAQ,EAAEA,QADF;AAERX,MAAAA,WAAW,EAAE,KAAKA,WAFV;AAGRC,MAAAA,OAAO,EAAE,KAAK2C,cAHN;AAIRhC,MAAAA,cAAc,EAAE,4BAJR;AAKRC,MAAAA,KAAK,EAAE;AALC,KAAD,CAAT;AAQAH,IAAAA,SAAS,CAAC;AACRC,MAAAA,QAAQ,EAAEA,QADF;AAERX,MAAAA,WAAW,EAAE,KAAKA,WAFV;AAGRC,MAAAA,OAAO,EAAE,KAAKgD,yBAHN;AAIRrC,MAAAA,cAAc,EAAE,yCAJR;AAKRC,MAAAA,KAAK,EAAE;AALC,KAAD,CAAT;;AAQA,QAAI,KAAKiC,gBAAT,EAA2B;AACzBpC,MAAAA,SAAS,CAAC;AACRC,QAAAA,QAAQ,EAAEA,QADF;AAERX,QAAAA,WAAW,EAAE,KAAKA,WAFV;AAGRC,QAAAA,OAAO,EAAE,KAAK+C,aAHN;AAIRpC,QAAAA,cAAc,EAAE,2BAJR;AAKRC,QAAAA,KAAK,EAAE;AALC,OAAD,CAAT;AAOD;AACF,GAvEH;;AAAA;AAAA;;;;"}