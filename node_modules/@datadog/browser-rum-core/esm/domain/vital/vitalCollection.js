import { clocksNow, combine, elapsed, generateUUID, toServerDuration } from '@datadog/browser-core';
export function createCustomVitalsState() {
    var vitalsByName = new Map();
    var vitalsByReference = new WeakMap();
    return { vitalsByName: vitalsByName, vitalsByReference: vitalsByReference };
}
export function startVitalCollection(lifeCycle, pageStateHistory, customVitalsState) {
    function isValid(vital) {
        return !pageStateHistory.wasInPageStateDuringPeriod("frozen" /* PageState.FROZEN */, vital.startClocks.relative, vital.duration);
    }
    function addDurationVital(vital) {
        if (isValid(vital)) {
            lifeCycle.notify(11 /* LifeCycleEventType.RAW_RUM_EVENT_COLLECTED */, processVital(vital, true));
        }
    }
    return {
        addDurationVital: addDurationVital,
        startDurationVital: function (name, options) {
            if (options === void 0) { options = {}; }
            return startDurationVital(customVitalsState, name, options);
        },
        stopDurationVital: function (nameOrRef, options) {
            if (options === void 0) { options = {}; }
            stopDurationVital(addDurationVital, customVitalsState, nameOrRef, options);
        },
    };
}
export function startDurationVital(_a, name, options) {
    var vitalsByName = _a.vitalsByName, vitalsByReference = _a.vitalsByReference;
    if (options === void 0) { options = {}; }
    var vital = {
        name: name,
        startClocks: clocksNow(),
        context: options.context,
        description: options.description,
    };
    // To avoid leaking implementation details of the vital, we return a reference to it.
    var reference = { __dd_vital_reference: true };
    vitalsByName.set(name, vital);
    // To avoid memory leaks caused by the creation of numerous references (e.g., from improper useEffect implementations), we use a WeakMap.
    vitalsByReference.set(reference, vital);
    return reference;
}
export function stopDurationVital(stopCallback, _a, nameOrRef, options) {
    var vitalsByName = _a.vitalsByName, vitalsByReference = _a.vitalsByReference;
    if (options === void 0) { options = {}; }
    var vitalStart = typeof nameOrRef === 'string' ? vitalsByName.get(nameOrRef) : vitalsByReference.get(nameOrRef);
    if (!vitalStart) {
        return;
    }
    stopCallback(buildDurationVital(vitalStart, vitalStart.startClocks, options, clocksNow()));
    if (typeof nameOrRef === 'string') {
        vitalsByName.delete(nameOrRef);
    }
    else {
        vitalsByReference.delete(nameOrRef);
    }
}
function buildDurationVital(vitalStart, startClocks, stopOptions, stopClocks) {
    var _a;
    return {
        name: vitalStart.name,
        type: "duration" /* VitalType.DURATION */,
        startClocks: startClocks,
        duration: elapsed(startClocks.timeStamp, stopClocks.timeStamp),
        context: combine(vitalStart.context, stopOptions.context),
        description: (_a = stopOptions.description) !== null && _a !== void 0 ? _a : vitalStart.description,
    };
}
function processVital(vital, valueComputedBySdk) {
    var rawRumEvent = {
        date: vital.startClocks.timeStamp,
        vital: {
            id: generateUUID(),
            type: vital.type,
            name: vital.name,
            duration: toServerDuration(vital.duration),
            description: vital.description,
        },
        type: "vital" /* RumEventType.VITAL */,
    };
    if (valueComputedBySdk) {
        rawRumEvent._dd = {
            vital: {
                computed_value: true,
            },
        };
    }
    return {
        rawRumEvent: rawRumEvent,
        startTime: vital.startClocks.relative,
        customerContext: vital.context,
        domainContext: {},
    };
}
//# sourceMappingURL=vitalCollection.js.map