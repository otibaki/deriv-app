"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNavigationEntry = getNavigationEntry;
exports.computeTimingsFromDeprecatedPerformanceTiming = computeTimingsFromDeprecatedPerformanceTiming;
var browser_core_1 = require("@datadog/browser-core");
var performanceObservable_1 = require("./performanceObservable");
function getNavigationEntry() {
    if ((0, performanceObservable_1.supportPerformanceTimingEvent)(performanceObservable_1.RumPerformanceEntryType.NAVIGATION)) {
        var navigationEntry = performance.getEntriesByType(performanceObservable_1.RumPerformanceEntryType.NAVIGATION)[0];
        if (navigationEntry) {
            return navigationEntry;
        }
    }
    var timings = computeTimingsFromDeprecatedPerformanceTiming();
    var entry = (0, browser_core_1.assign)({
        entryType: performanceObservable_1.RumPerformanceEntryType.NAVIGATION,
        initiatorType: 'navigation',
        name: window.location.href,
        startTime: 0,
        duration: timings.responseEnd,
        decodedBodySize: 0,
        encodedBodySize: 0,
        transferSize: 0,
        workerStart: 0,
        toJSON: function () { return (0, browser_core_1.assign)({}, entry, { toJSON: undefined }); },
    }, timings);
    return entry;
}
function computeTimingsFromDeprecatedPerformanceTiming() {
    var result = {};
    var timing = performance.timing;
    for (var key in timing) {
        if ((0, browser_core_1.isNumber)(timing[key])) {
            var numberKey = key;
            var timingElement = timing[numberKey];
            result[numberKey] = timingElement === 0 ? 0 : (0, browser_core_1.getRelativeTime)(timingElement);
        }
    }
    return result;
}
//# sourceMappingURL=performanceUtils.js.map