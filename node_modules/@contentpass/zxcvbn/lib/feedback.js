// Generated by CoffeeScript 1.12.7
var feedback, scoring;

scoring = require('./scoring');

feedback = {
  messages: {
    use_a_few_words: 'Use a few words, avoid common phrases',
    no_need_for_mixed_chars: 'No need for symbols, digits, or uppercase letters',
    uncommon_words_are_better: 'Add another word or two. Uncommon words are better.',
    straight_rows_of_keys_are_easy: 'Straight rows of keys are easy to guess',
    short_keyboard_patterns_are_easy: 'Short keyboard patterns are easy to guess',
    use_longer_keyboard_patterns: 'Use a longer keyboard pattern with more turns',
    repeated_chars_are_easy: 'Repeats like "aaa" are easy to guess',
    repeated_patterns_are_easy: 'Repeats like "abcabcabc" are only slightly harder to guess than "abc"',
    avoid_repeated_chars: 'Avoid repeated words and characters',
    sequences_are_easy: 'Sequences like abc or 6543 are easy to guess',
    avoid_sequences: 'Avoid sequences',
    recent_years_are_easy: 'Recent years are easy to guess',
    avoid_recent_years: 'Avoid recent years',
    avoid_associated_years: 'Avoid years that are associated with you',
    dates_are_easy: 'Dates are often easy to guess',
    avoid_associated_dates_and_years: 'Avoid dates and years that are associated with you',
    top10_common_password: 'This is a top-10 common password',
    top100_common_password: 'This is a top-100 common password',
    very_common_password: 'This is a very common password',
    similar_to_common_password: 'This is similar to a commonly used password',
    a_word_is_easy: 'A word by itself is easy to guess',
    names_are_easy: 'Names and surnames by themselves are easy to guess',
    common_names_are_easy: 'Common names and surnames are easy to guess',
    capitalization_doesnt_help: 'Capitalization doesn\'t help very much',
    all_uppercase_doesnt_help: 'All-uppercase is almost as easy to guess as all-lowercase',
    reverse_doesnt_help: 'Reversed words aren\'t much harder to guess',
    substitution_doesnt_help: 'Predictable substitutions like \'@\' instead of \'a\' don\'t help very much',
    user_dictionary: 'This password is on the blacklist'
  },
  get_feedback: function(score, sequence, custom_messages) {
    var extra_feedback, i, len, longest_match, match, ref;
    this.custom_messages = custom_messages;
    if (sequence.length === 0) {
      return this.build_feedback(null, ['use_a_few_words', 'no_need_for_mixed_chars']);
    }
    if (score > 2) {
      return this.build_feedback();
    }
    longest_match = sequence[0];
    ref = sequence.slice(1);
    for (i = 0, len = ref.length; i < len; i++) {
      match = ref[i];
      if (match.token.length > longest_match.token.length) {
        longest_match = match;
      }
    }
    feedback = this.get_match_feedback(longest_match, sequence.length === 1);
    extra_feedback = ['uncommon_words_are_better'];
    if (feedback != null) {
      return this.build_feedback(feedback.warning, extra_feedback.concat(feedback.suggestions));
    } else {
      return this.build_feedback(null, extra_feedback);
    }
  },
  get_match_feedback: function(match, is_sole_match) {
    var warning;
    switch (match.pattern) {
      case 'dictionary':
        return this.get_dictionary_match_feedback(match, is_sole_match);
      case 'spatial':
        warning = match.turns === 1 ? 'straight_rows_of_keys_are_easy' : 'short_keyboard_patterns_are_easy';
        return {
          warning: warning,
          suggestions: ['use_longer_keyboard_patterns']
        };
      case 'repeat':
        warning = match.base_token.length === 1 ? 'repeated_chars_are_easy' : 'repeated_patterns_are_easy';
        return {
          warning: warning,
          suggestions: ['avoid_repeated_chars']
        };
      case 'sequence':
        return {
          warning: 'sequences_are_easy',
          suggestions: ['avoid_sequences']
        };
      case 'regex':
        if (match.regex_name === 'recent_year') {
          return {
            warning: 'recent_years_are_easy',
            suggestions: ['avoid_recent_years', 'avoid_associated_years']
          };
        }
        break;
      case 'date':
        return {
          warning: 'dates_are_easy',
          suggestions: ['avoid_associated_dates_and_years']
        };
    }
  },
  get_dictionary_match_feedback: function(match, is_sole_match) {
    var ref, result, suggestions, warning, word;
    warning = match.dictionary_name === 'user_inputs' ? 'user_dictionary' : match.dictionary_name === 'passwords' ? is_sole_match && !match.l33t && !match.reversed ? match.rank <= 10 ? 'top10_common_password' : match.rank <= 100 ? 'top100_common_password' : 'very_common_password' : match.guesses_log10 <= 4 ? 'similar_to_common_password' : void 0 : match.dictionary_name === 'english_wikipedia' ? is_sole_match ? 'a_word_is_easy' : void 0 : (ref = match.dictionary_name) === 'surnames' || ref === 'male_names' || ref === 'female_names' ? is_sole_match ? 'names_are_easy' : 'common_names_are_easy' : void 0;
    suggestions = [];
    word = match.token;
    if (word.match(scoring.START_UPPER)) {
      suggestions.push('capitalization_doesnt_help');
    } else if (word.match(scoring.ALL_UPPER) && word.toLowerCase() !== word) {
      suggestions.push('all_uppercase_doesnt_help');
    }
    if (match.reversed && match.token.length >= 4) {
      suggestions.push('reverse_doesnt_help');
    }
    if (match.l33t) {
      suggestions.push('substitution_doesnt_help');
    }
    result = {
      warning: warning,
      suggestions: suggestions
    };
    return result;
  },
  get_message: function(key) {
    if ((this.custom_messages != null) && key in this.custom_messages) {
      return this.custom_messages[key] || '';
    } else if (this.messages[key] != null) {
      return this.messages[key];
    } else {
      throw new Error("unknown message: " + key);
    }
  },
  build_feedback: function(warning_key, suggestion_keys) {
    var i, len, message, suggestion_key, suggestions;
    if (warning_key == null) {
      warning_key = null;
    }
    if (suggestion_keys == null) {
      suggestion_keys = [];
    }
    suggestions = [];
    for (i = 0, len = suggestion_keys.length; i < len; i++) {
      suggestion_key = suggestion_keys[i];
      message = this.get_message(suggestion_key);
      if (message != null) {
        suggestions.push(message);
      }
    }
    feedback = {
      warning: warning_key ? this.get_message(warning_key) : '',
      suggestions: suggestions
    };
    return feedback;
  }
};

module.exports = feedback;

//# sourceMappingURL=feedback.js.map
