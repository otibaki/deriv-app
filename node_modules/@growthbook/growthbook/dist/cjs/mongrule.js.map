{"version":3,"file":"mongrule.js","names":["_regexCache","evalCondition","obj","condition","savedGroups","k","v","Object","entries","evalOr","evalAnd","evalConditionValue","getPath","path","parts","split","current","i","length","getRegex","regex","RegExp","replace","value","Array","isArray","isOperatorObject","JSON","stringify","op","evalOperatorCondition","keys","filter","getType","t","includes","elemMatch","actual","expected","check","isIn","some","el","operator","paddedVersionString","passed","j","test","e","console","error","conditions"],"sources":["../../src/mongrule.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { SavedGroupsValues } from \"./types/growthbook\";\nimport {\n  ConditionInterface,\n  TestedObj,\n  ConditionValue,\n  Operator,\n  OperatorConditionValue,\n  VarType,\n} from \"./types/mongrule\";\nimport { paddedVersionString } from \"./util\";\n\nconst _regexCache: { [key: string]: RegExp } = {};\n\n// The top-level condition evaluation function\nexport function evalCondition(\n  obj: TestedObj,\n  condition: ConditionInterface,\n  // Must be included for `condition` to correctly evaluate group Operators\n  savedGroups?: SavedGroupsValues\n): boolean {\n  savedGroups = savedGroups || {};\n  // Condition is an object, keys are either specific operators or object paths\n  // values are either arguments for operators or conditions for paths\n  for (const [k, v] of Object.entries(condition)) {\n    switch (k) {\n      case \"$or\":\n        if (!evalOr(obj, v as ConditionInterface[], savedGroups)) return false;\n        break;\n      case \"$nor\":\n        if (evalOr(obj, v as ConditionInterface[], savedGroups)) return false;\n        break;\n      case \"$and\":\n        if (!evalAnd(obj, v as ConditionInterface[], savedGroups)) return false;\n        break;\n      case \"$not\":\n        if (evalCondition(obj, v as ConditionInterface, savedGroups))\n          return false;\n        break;\n      default:\n        if (!evalConditionValue(v, getPath(obj, k), savedGroups)) return false;\n    }\n  }\n  return true;\n}\n\n// Return value at dot-separated path of an object\nfunction getPath(obj: TestedObj, path: string) {\n  const parts = path.split(\".\");\n  let current: any = obj;\n  for (let i = 0; i < parts.length; i++) {\n    if (current && typeof current === \"object\" && parts[i] in current) {\n      current = current[parts[i]];\n    } else {\n      return null;\n    }\n  }\n  return current;\n}\n\n// Transform a regex string into a real RegExp object\nfunction getRegex(regex: string): RegExp {\n  if (!_regexCache[regex]) {\n    _regexCache[regex] = new RegExp(regex.replace(/([^\\\\])\\//g, \"$1\\\\/\"));\n  }\n  return _regexCache[regex];\n}\n\n// Evaluate a single value against a condition\nfunction evalConditionValue(\n  condition: ConditionValue,\n  value: any,\n  savedGroups: SavedGroupsValues\n) {\n  // Simple equality comparisons\n  if (typeof condition === \"string\") {\n    return value + \"\" === condition;\n  }\n  if (typeof condition === \"number\") {\n    return value * 1 === condition;\n  }\n  if (typeof condition === \"boolean\") {\n    return !!value === condition;\n  }\n\n  if (condition === null) {\n    return value === null;\n  }\n\n  if (Array.isArray(condition) || !isOperatorObject(condition)) {\n    return JSON.stringify(value) === JSON.stringify(condition);\n  }\n\n  // This is a special operator condition and we should evaluate each one separately\n  for (const op in condition) {\n    if (\n      !evalOperatorCondition(\n        op as Operator,\n        value,\n        condition[op as keyof OperatorConditionValue],\n        savedGroups\n      )\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// If the object has only keys that start with '$'\nfunction isOperatorObject(obj: any): boolean {\n  const keys = Object.keys(obj);\n  return (\n    keys.length > 0 && keys.filter((k) => k[0] === \"$\").length === keys.length\n  );\n}\n\n// Return the data type of a value\nfunction getType(v: any): VarType | \"unknown\" {\n  if (v === null) return \"null\";\n  if (Array.isArray(v)) return \"array\";\n  const t = typeof v;\n  if ([\"string\", \"number\", \"boolean\", \"object\", \"undefined\"].includes(t)) {\n    return t as VarType;\n  }\n  return \"unknown\";\n}\n\n// At least one element of actual must match the expected condition/value\nfunction elemMatch(actual: any, expected: any, savedGroups: SavedGroupsValues) {\n  if (!Array.isArray(actual)) return false;\n  const check = isOperatorObject(expected)\n    ? (v: any) => evalConditionValue(expected, v, savedGroups)\n    : (v: any) => evalCondition(v, expected, savedGroups);\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] && check(actual[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isIn(actual: any, expected: Array<any>): boolean {\n  // Do an intersection if attribute is an array\n  if (Array.isArray(actual)) {\n    return actual.some((el) => expected.includes(el));\n  }\n  return expected.includes(actual);\n}\n\n// Evaluate a single operator condition\nfunction evalOperatorCondition(\n  operator: Operator,\n  actual: any,\n  expected: any,\n  savedGroups: SavedGroupsValues\n): boolean {\n  switch (operator) {\n    case \"$veq\":\n      return paddedVersionString(actual) === paddedVersionString(expected);\n    case \"$vne\":\n      return paddedVersionString(actual) !== paddedVersionString(expected);\n    case \"$vgt\":\n      return paddedVersionString(actual) > paddedVersionString(expected);\n    case \"$vgte\":\n      return paddedVersionString(actual) >= paddedVersionString(expected);\n    case \"$vlt\":\n      return paddedVersionString(actual) < paddedVersionString(expected);\n    case \"$vlte\":\n      return paddedVersionString(actual) <= paddedVersionString(expected);\n    case \"$eq\":\n      return actual === expected;\n    case \"$ne\":\n      return actual !== expected;\n    case \"$lt\":\n      return actual < expected;\n    case \"$lte\":\n      return actual <= expected;\n    case \"$gt\":\n      return actual > expected;\n    case \"$gte\":\n      return actual >= expected;\n    case \"$exists\":\n      // Using `!=` and `==` instead of strict checks so it also matches for undefined\n      return expected ? actual != null : actual == null;\n    case \"$in\":\n      if (!Array.isArray(expected)) return false;\n      return isIn(actual, expected);\n    case \"$inGroup\":\n      return isIn(actual, savedGroups[expected] || []);\n    case \"$notInGroup\":\n      return !isIn(actual, savedGroups[expected] || []);\n    case \"$nin\":\n      if (!Array.isArray(expected)) return false;\n      return !isIn(actual, expected);\n    case \"$not\":\n      return !evalConditionValue(expected, actual, savedGroups);\n    case \"$size\":\n      if (!Array.isArray(actual)) return false;\n      return evalConditionValue(expected, actual.length, savedGroups);\n    case \"$elemMatch\":\n      return elemMatch(actual, expected, savedGroups);\n    case \"$all\":\n      if (!Array.isArray(actual)) return false;\n      for (let i = 0; i < expected.length; i++) {\n        let passed = false;\n        for (let j = 0; j < actual.length; j++) {\n          if (evalConditionValue(expected[i], actual[j], savedGroups)) {\n            passed = true;\n            break;\n          }\n        }\n        if (!passed) return false;\n      }\n      return true;\n    case \"$regex\":\n      try {\n        return getRegex(expected).test(actual);\n      } catch (e) {\n        return false;\n      }\n    case \"$type\":\n      return getType(actual) === expected;\n    default:\n      console.error(\"Unknown operator: \" + operator);\n      return false;\n  }\n}\n\n// Recursive $or rule\nfunction evalOr(\n  obj: TestedObj,\n  conditions: ConditionInterface[],\n  savedGroups: SavedGroupsValues\n): boolean {\n  if (!conditions.length) return true;\n  for (let i = 0; i < conditions.length; i++) {\n    if (evalCondition(obj, conditions[i], savedGroups)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// Recursive $and rule\nfunction evalAnd(\n  obj: TestedObj,\n  conditions: ConditionInterface[],\n  savedGroups: SavedGroupsValues\n): boolean {\n  for (let i = 0; i < conditions.length; i++) {\n    if (!evalCondition(obj, conditions[i], savedGroups)) {\n      return false;\n    }\n  }\n  return true;\n}\n"],"mappings":"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"}