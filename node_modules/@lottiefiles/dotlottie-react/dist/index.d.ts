import { Config, DotLottie } from '@lottiefiles/dotlottie-web';
export * from '@lottiefiles/dotlottie-web';
import { ComponentProps, RefCallback } from 'react';

type DotLottieReactProps = Omit<Config, 'canvas'> & ComponentProps<'canvas'> & {
    animationId?: string;
    autoResizeCanvas?: boolean;
    dotLottieRefCallback?: RefCallback<DotLottie>;
    playOnHover?: boolean;
    themeData?: string;
    themeId?: string;
};
declare const DotLottieReact: ({ animationId, autoResizeCanvas, autoplay, backgroundColor, data, dotLottieRefCallback, loop, marker, mode, playOnHover, renderConfig, segment, speed, src, themeData, themeId, useFrameInterpolation, ...props }: DotLottieReactProps) => JSX.Element;

type DotLottieConfig = Omit<Config, 'canvas'> & {
    animationId?: string;
    autoResizeCanvas?: boolean;
    playOnHover?: boolean;
    themeData?: string;
    themeId?: string;
};
interface UseDotLottieResult {
    DotLottieComponent: (props: ComponentProps<'canvas'>) => JSX.Element;
    canvas: HTMLCanvasElement | null;
    container: HTMLDivElement | null;
    dotLottie: DotLottie | null;
    setCanvasRef: RefCallback<HTMLCanvasElement>;
    setContainerRef: RefCallback<HTMLDivElement>;
}
declare const useDotLottie: (config?: DotLottieConfig) => UseDotLottieResult;
declare const setWasmUrl: (url: string) => void;

export { type DotLottieConfig, DotLottieReact, type DotLottieReactProps, type UseDotLottieResult, setWasmUrl, useDotLottie };
