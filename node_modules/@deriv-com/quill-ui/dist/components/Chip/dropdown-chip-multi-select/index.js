import { j as e } from "../../../jsx-runtime-DmTjM30f.js";
import j, { forwardRef as v, useState as w, Fragment as b } from "react";
import { Chip as I, LabelTextSizes as D } from "../base/index.js";
import { c as F } from "../../../clsx-OuTLNxxd.js";
import { I as m, q as O } from "../../../dropdown-chip-single-select-CbCwkSrZ.js";
import { D as _ } from "../../../index-C1BOoRZp.js";
import '../../../assets/wheel-picker-base.css';import '../../../assets/password-validation.css';import '../../../assets/date-picker.css';import '../../../assets/divider.css';/* empty css                        */
import "../../Atom/dropdown/title/index.js";
import "../../Atom/dropdown/item-container/index.js";
/* empty css                            */
import "../../Typography/base.js";
import "../../Typography/heading/index.js";
import "../../../dayjs.min-DrYbymKu.js";
/* empty css                                    */
/* empty css                                  */
import "../../../lodash-rsqVyylH.js";
const g = ({ item: t, size: s }) => {
  const p = {
    sm: "sm",
    md: "sm",
    lg: "md"
  };
  return /* @__PURE__ */ e.jsx(m.Option, { value: t, as: b, disabled: t.disabled, children: ({ disabled: r, selected: i }) => /* @__PURE__ */ e.jsx(
    _,
    {
      label: t.label,
      disabled: r,
      selected: i,
      size: p[s],
      checkbox: !0
    }
  ) });
}, R = v(
  ({
    size: t = "md",
    icon: s,
    labelTag: p,
    disabled: r,
    options: i,
    onSelectionChange: n,
    className: a,
    label: c,
    ...u
  }, x) => {
    const [o, h] = w(
      []
    ), f = (l) => {
      h(l), n == null || n(l);
    };
    return /* @__PURE__ */ e.jsx(
      m,
      {
        value: o,
        onChange: f,
        multiple: !0,
        disabled: r,
        children: ({ open: l }) => /* @__PURE__ */ e.jsxs(e.Fragment, { children: [
          /* @__PURE__ */ e.jsx(m.Button, { as: "div", children: /* @__PURE__ */ e.jsx(
            I,
            {
              ...u,
              icon: s,
              size: t,
              labelTag: p,
              ref: x,
              dropdown: !0,
              selected: o.length > 0,
              isDropdownOpen: l,
              disabled: r,
              label: c,
              children: o.length > 0 && j.cloneElement(D[t], {
                children: `(${o.length})`
              })
            }
          ) }),
          /* @__PURE__ */ e.jsx(
            O,
            {
              enter: "enter",
              enterFrom: "enter-from",
              enterTo: "enter-to",
              leave: "leave",
              leaveFrom: "enter-from",
              leaveTo: "leave-to",
              children: /* @__PURE__ */ e.jsx(
                m.Options,
                {
                  className: F(
                    "dropdown",
                    `dropdown__size--${t}`,
                    a
                  ),
                  children: i.map((d) => /* @__PURE__ */ e.jsx(
                    g,
                    {
                      item: d,
                      size: t
                    },
                    `chip-selectable-item-${d.value}`
                  ))
                }
              )
            }
          )
        ] })
      }
    );
  }
);
R.displayName = "DropdownChipMultiSelect";
export {
  R as DropdownChipMultiSelect,
  R as default
};
