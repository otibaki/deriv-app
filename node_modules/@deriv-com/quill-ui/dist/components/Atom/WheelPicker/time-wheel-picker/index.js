import { j as g } from "../../../../jsx-runtime-DmTjM30f.js";
import { useState as r, useCallback as B, useEffect as k } from "react";
import { WheelPicker as R } from "../base/index.js";
import { KEY as y } from "../../../../utils/common-utils.js";
import { d as P } from "../../../../dayjs.min-DrYbymKu.js";
import { l as J } from "../../../../lodash-rsqVyylH.js";
const le = ({
  is12Hour: a = !0,
  startTimeIn24Format: j,
  endTimeIn24Format: q = "23:59",
  selectedTime: L = "0:00",
  minutesInterval: c = 2,
  hoursInterval: S = 1,
  locale: O = "en-US",
  setSelectedValue: C,
  setSelectedTime: _,
  close: D,
  data: n,
  disabled: M,
  containerHeight: A = "100%"
}) => {
  const f = P(`1/1/1 ${j ?? "00:00"}`), v = P(`1/1/1 ${L}`), x = P(`1/1/1 ${q}`), [s, d] = r({
    label: "00",
    value: 0
  }), [o, K] = r({
    label: "00",
    value: 0
  }), [h, F] = r({
    label: "AM",
    value: "AM"
  }), [$, w] = r(
    new Array(a ? 3 : 2).fill(!1)
  ), [m, T] = r(), [i, W] = r(), [b, U] = r(), z = () => {
    const e = [];
    if (a)
      for (let l = 1; l <= 12; l += S)
        e.push({
          label: `0${l}`.slice(-2),
          value: l
        });
    else
      for (let l = f.get("hour"); l <= (x.get("hour") || 23); l += S)
        e.push({
          label: `0${l}`.slice(-2),
          value: l
        });
    return e;
  }, V = (e) => {
    var N;
    const l = /* @__PURE__ */ new Date(`1/1/1 12:00:00 ${e}`), t = {
      hour12: !0,
      timeStyle: "long"
    }, p = (N = new Intl.DateTimeFormat(O, t).formatToParts(l).find((Y) => Y.type === "dayPeriod")) == null ? void 0 : N.value;
    return p ? p.toUpperCase() : "";
  }, G = B(
    J.debounce((e) => {
      T([...e]);
    }, 100),
    []
  );
  k(() => {
    const e = v.get("hour");
    if (a) {
      d({
        label: `0${e % 12 || 12}`.slice(-2),
        value: e % 12 || 12
      });
      const u = [], p = v.format("A");
      u.push({
        label: V("AM"),
        value: "AM"
      }), u.push({
        label: V("PM"),
        value: "PM"
      }), U(u), F({
        label: V(p),
        value: p
      });
    } else
      d({ label: `0${e}`.slice(-2), value: e });
    const l = z();
    W(l), K({
      label: o.label || `0${v.get("minute")}`.slice(-2),
      value: o.value || v.get("minute")
    });
    const t = [];
    for (let u = 0; u < 60; u += c)
      t.push({
        label: `0${u}`.slice(-2),
        value: u
      });
    T([...t]);
  }, []), k(() => {
    if (!a && j) {
      const e = [];
      let l = 0;
      f.get("hour") === s.value && (l = f.get("minute") + (f.get("minute") % c ? c - f.get("minute") % c : 0), l === 60 && (d({
        label: `0${s.value + 1}`.slice(-2),
        value: s.value + 1
      }), W(
        i == null ? void 0 : i.filter((t) => t.value > s.value)
      )));
      for (let t = l; t <= (x.get("minute") || 59); t += c)
        e.push({
          label: `0${t}`.slice(-2),
          value: t
        });
      G(e);
    }
  }, [s]), k(() => {
    C && C(
      s.label + ":" + o.label + (a ? " " + h.label : "")
    ), _ && _(
      s.value + ":" + o.value + (a ? " " + h.value : "")
    );
  }, [s, o, h]);
  const E = (e, l) => {
    switch (w(new Array(a ? 3 : 2).fill(!1)), e.key) {
      case y.ARROW_RIGHT:
        w([!1, l === 0, l === 1]);
        break;
      case y.ARROW_LEFT:
        w([l === 1, l === 2, !1]);
        break;
      case y.ENTER:
      case y.ESCAPE:
        D == null || D();
        break;
    }
  };
  return /* @__PURE__ */ g.jsxs("div", { className: "quill-wheel-picker", children: [
    i && /* @__PURE__ */ g.jsx(
      R,
      {
        data: (n == null ? void 0 : n[0]) || i,
        selectedValue: s.value,
        setSelectedValue: (e) => {
          d(
            i.find((l) => l.value === e) || i[0]
          );
        },
        isFocused: $[0],
        handleKeyDown: (e) => E(e, 0),
        position: "left",
        disabled: M,
        containerHeight: A
      }
    ),
    (m == null ? void 0 : m.length) && /* @__PURE__ */ g.jsx(
      R,
      {
        data: m,
        selectedValue: o.value,
        setSelectedValue: (e) => {
          K(
            m.find((l) => l.value === e) || o
          );
        },
        isFocused: $[1],
        handleKeyDown: (e) => E(e, 1),
        position: a ? "center" : "right",
        listClassName: "quill-wheel-picker__data-items__minute",
        disabled: M,
        containerHeight: A
      }
    ),
    b && a && /* @__PURE__ */ g.jsx(
      R,
      {
        data: (n == null ? void 0 : n[2]) || b,
        selectedValue: h.value,
        setSelectedValue: (e) => {
          F(
            b.find((l) => l.value === e) || b[0]
          );
        },
        isFocused: $[2],
        handleKeyDown: (e) => E(e, 2),
        position: "right",
        disabled: M,
        containerHeight: A
      }
    )
  ] });
};
export {
  le as TimeWheelPickerContainer,
  le as default
};
