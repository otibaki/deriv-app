import { j as u } from "../../../../jsx-runtime-DmTjM30f.js";
import { useState as b, useEffect as y } from "react";
import { WheelPicker as A } from "../base/index.js";
import { reactNodeToString as c, KEY as t } from "../../../../utils/common-utils.js";
const W = ({
  data: l = [],
  inputValues: n = [],
  setInputValues: h = () => null,
  close: a,
  setSelectedValue: i,
  disabled: g,
  containerHeight: R = "100%"
}) => {
  const [k, o] = b(
    new Array(l.length).fill(!1)
  );
  y(() => {
    i && i(
      n.reduce(
        (f, r, s) => {
          if (!l[s]) return f;
          const e = l[s].find(
            (w) => w.value === r
          );
          return s === 0 ? c(e == null ? void 0 : e.label) || (e == null ? void 0 : e.value) : `${f ?? ""} ${c(e == null ? void 0 : e.label) || (e == null ? void 0 : e.value)}`;
        },
        ""
      )
    );
  }, [n]);
  const E = (f, r) => {
    switch (o(new Array(l.length).fill(!1)), f.key) {
      case t.ARROW_RIGHT:
        r === 0 ? o([!1, !0, !1]) : r === 1 && o([!1, !1, !0]);
        break;
      case t.ARROW_LEFT:
        r === 2 ? o([!1, !0, !1]) : r === 1 && o([!0, !1, !1]);
        break;
      case t.ENTER:
      case t.ESCAPE:
        a && a();
        break;
    }
  }, p = (f) => {
    if (l.length !== 1)
      return f === 0 && l.length > 1 ? "left" : f === l.length - 1 && l.length > 1 ? "right" : "center";
  };
  return /* @__PURE__ */ u.jsx("div", { className: "quill-wheel-picker", children: l.map((f, r) => /* @__PURE__ */ u.jsx(
    A,
    {
      data: f,
      selectedValue: n[r],
      setSelectedValue: (s) => h(r, s),
      isFocused: k[r],
      handleKeyDown: (s) => E(s, r),
      position: p(r),
      disabled: g,
      containerHeight: R
    },
    `wheel-picker__${r}`
  )) });
};
export {
  W as WheelPickerContainer,
  W as default
};
