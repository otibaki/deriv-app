import { ComponentProps, PropsWithChildren, ReactNode } from 'react';
import { TPosition } from '../../types.ts';
import { LinkProps } from '../Link/types';
import { ButtonProps } from '../Button';
type AsElement = "a" | "div" | "button";
type TPositionWithoutCenter = Exclude<TPosition, "center">;
type TooltipActionProps = LinkProps | ButtonProps;
type TTooltipMenuIcon<T extends AsElement> = ComponentProps<T> & {
    as?: T;
    tooltipContent: string | JSX.Element;
    tooltipPosition?: TPositionWithoutCenter;
    popoverAlign?: "start" | "center" | "end";
    tooltipColor?: string;
    tooltipAction?: "link" | "button";
    tooltipActionProps?: TooltipActionProps;
    hasArrow?: boolean;
    actionText?: string | ReactNode;
    shouldCloseToolTipOnMouseLeave?: boolean;
    variant?: "base" | "rich";
    title?: string | JSX.Element;
};
export declare const Tooltip: {
    <T extends AsElement>({ as, tooltipContent, shouldCloseToolTipOnMouseLeave, tooltipPosition, variant, popoverAlign, title, actionText, tooltipColor, tooltipAction, tooltipActionProps, hasArrow, children, ...rest }: PropsWithChildren<TTooltipMenuIcon<T>>): import("react").JSX.Element;
    displayName: string;
};
export default Tooltip;
