import { j as x } from "../../jsx-runtime-DmTjM30f.js";
import { useState as r } from "react";
import { NotificationsContext as B } from "./notificationsContext.js";
import { STATUS as e } from "../../utils/notification-utils.js";
import { v as n } from "../../v4-ANoOI1Qw.js";
const P = ({ children: m }) => {
  const [c, a] = r([]), [d, s] = r([]), f = (o) => {
    a((t) => [...t, { ...o, id: n() }]);
  }, p = (o) => {
    s((t) => [
      { ...o, id: n(), status: e.UNREAD },
      ...t
    ]);
  }, N = () => {
    s(
      (o) => o.map((t) => ({ ...t, status: e.READ }))
    );
  }, u = (o) => {
    s(
      (t) => t.map(
        (i) => i.id === o ? { ...i, status: e.READ } : i
      )
    );
  }, v = () => {
    s([]);
  }, A = (o) => {
    a((t) => t.filter((i) => i.id !== o));
  }, l = (o) => {
    s((t) => t.filter((i) => i.id !== o));
  }, I = (o) => {
    a(
      o.map((t) => ({ ...t, id: t.id || n() }))
    );
  }, R = (o) => {
    s(
      o.map((t) => ({ ...t, id: t.id || n() }))
    );
  };
  return /* @__PURE__ */ x.jsx(
    B.Provider,
    {
      value: {
        addBanner: f,
        addNotificationItem: p,
        banners: c,
        markAllNotificationsAsRead: N,
        markNotificationItemAsRead: u,
        notificationItems: d,
        removeAllNotificationItems: v,
        removeBanner: A,
        removeNotificationItem: l,
        updateBanners: I,
        updateNotificationItems: R
      },
      children: m
    }
  );
};
export {
  P as NotificationsProvider
};
