import L, { useState as K, useRef as rt, useContext as nt, useEffect as R } from "react";
import { u as ot } from "../../index-EY1gwl5O.js";
import { ActionSheetContext as at } from "../../components/ActionSheet/root/index.js";
function ct(s, t, e) {
  return Math.max(t, Math.min(s, e));
}
const d = {
  toVector(s, t) {
    return s === void 0 && (s = t), Array.isArray(s) ? s : [s, s];
  },
  add(s, t) {
    return [s[0] + t[0], s[1] + t[1]];
  },
  sub(s, t) {
    return [s[0] - t[0], s[1] - t[1]];
  },
  addTo(s, t) {
    s[0] += t[0], s[1] += t[1];
  },
  subTo(s, t) {
    s[0] -= t[0], s[1] -= t[1];
  }
};
function V(s, t, e) {
  return t === 0 || Math.abs(t) === 1 / 0 ? Math.pow(s, e * 5) : s * t * e / (t + e * s);
}
function j(s, t, e, i = 0.15) {
  return i === 0 ? ct(s, t, e) : s < t ? -V(t - s, e - t, i) + t : s > e ? +V(s - e, e - t, i) + e : s;
}
function ut(s, [t, e], [i, r]) {
  const [[n, o], [c, u]] = s;
  return [j(t, n, o, i), j(e, c, u, r)];
}
function ft(s, t) {
  if (typeof s != "object" || s === null) return s;
  var e = s[Symbol.toPrimitive];
  if (e !== void 0) {
    var i = e.call(s, t || "default");
    if (typeof i != "object") return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(s);
}
function ht(s) {
  var t = ft(s, "string");
  return typeof t == "symbol" ? t : String(t);
}
function p(s, t, e) {
  return t = ht(t), t in s ? Object.defineProperty(s, t, {
    value: e,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : s[t] = e, s;
}
function B(s, t) {
  var e = Object.keys(s);
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(s);
    t && (i = i.filter(function(r) {
      return Object.getOwnPropertyDescriptor(s, r).enumerable;
    })), e.push.apply(e, i);
  }
  return e;
}
function l(s) {
  for (var t = 1; t < arguments.length; t++) {
    var e = arguments[t] != null ? arguments[t] : {};
    t % 2 ? B(Object(e), !0).forEach(function(i) {
      p(s, i, e[i]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(s, Object.getOwnPropertyDescriptors(e)) : B(Object(e)).forEach(function(i) {
      Object.defineProperty(s, i, Object.getOwnPropertyDescriptor(e, i));
    });
  }
  return s;
}
const q = {
  pointer: {
    start: "down",
    change: "move",
    end: "up"
  },
  mouse: {
    start: "down",
    change: "move",
    end: "up"
  },
  touch: {
    start: "start",
    change: "move",
    end: "end"
  },
  gesture: {
    start: "start",
    change: "change",
    end: "end"
  }
};
function H(s) {
  return s ? s[0].toUpperCase() + s.slice(1) : "";
}
const lt = ["enter", "leave"];
function dt(s = !1, t) {
  return s && !lt.includes(t);
}
function pt(s, t = "", e = !1) {
  const i = q[s], r = i && i[t] || t;
  return "on" + H(s) + H(r) + (dt(e, r) ? "Capture" : "");
}
const mt = ["gotpointercapture", "lostpointercapture"];
function gt(s) {
  let t = s.substring(2).toLowerCase();
  const e = !!~t.indexOf("passive");
  e && (t = t.replace("passive", ""));
  const i = mt.includes(t) ? "capturecapture" : "capture", r = !!~t.indexOf(i);
  return r && (t = t.replace("capture", "")), {
    device: t,
    capture: r,
    passive: e
  };
}
function _t(s, t = "") {
  const e = q[s], i = e && e[t] || t;
  return s + i;
}
function x(s) {
  return "touches" in s;
}
function Q(s) {
  return x(s) ? "touch" : "pointerType" in s ? s.pointerType : "mouse";
}
function yt(s) {
  return Array.from(s.touches).filter((t) => {
    var e, i;
    return t.target === s.currentTarget || ((e = s.currentTarget) === null || e === void 0 || (i = e.contains) === null || i === void 0 ? void 0 : i.call(e, t.target));
  });
}
function vt(s) {
  return s.type === "touchend" || s.type === "touchcancel" ? s.changedTouches : s.targetTouches;
}
function J(s) {
  return x(s) ? vt(s)[0] : s;
}
function bt(s) {
  return yt(s).map((t) => t.identifier);
}
function C(s) {
  const t = J(s);
  return x(s) ? t.identifier : t.pointerId;
}
function Y(s) {
  const t = J(s);
  return [t.clientX, t.clientY];
}
function wt(s) {
  const t = {};
  if ("buttons" in s && (t.buttons = s.buttons), "shiftKey" in s) {
    const {
      shiftKey: e,
      altKey: i,
      metaKey: r,
      ctrlKey: n
    } = s;
    Object.assign(t, {
      shiftKey: e,
      altKey: i,
      metaKey: r,
      ctrlKey: n
    });
  }
  return t;
}
function P(s, ...t) {
  return typeof s == "function" ? s(...t) : s;
}
function Et() {
}
function Tt(...s) {
  return s.length === 0 ? Et : s.length === 1 ? s[0] : function() {
    let t;
    for (const e of s)
      t = e.apply(this, arguments) || t;
    return t;
  };
}
function W(s, t) {
  return Object.assign({}, t, s || {});
}
const Dt = 32;
class St {
  constructor(t, e, i) {
    this.ctrl = t, this.args = e, this.key = i, this.state || (this.state = {}, this.computeValues([0, 0]), this.computeInitial(), this.init && this.init(), this.reset());
  }
  get state() {
    return this.ctrl.state[this.key];
  }
  set state(t) {
    this.ctrl.state[this.key] = t;
  }
  get shared() {
    return this.ctrl.state.shared;
  }
  get eventStore() {
    return this.ctrl.gestureEventStores[this.key];
  }
  get timeoutStore() {
    return this.ctrl.gestureTimeoutStores[this.key];
  }
  get config() {
    return this.ctrl.config[this.key];
  }
  get sharedConfig() {
    return this.ctrl.config.shared;
  }
  get handler() {
    return this.ctrl.handlers[this.key];
  }
  reset() {
    const {
      state: t,
      shared: e,
      ingKey: i,
      args: r
    } = this;
    e[i] = t._active = t.active = t._blocked = t._force = !1, t._step = [!1, !1], t.intentional = !1, t._movement = [0, 0], t._distance = [0, 0], t._direction = [0, 0], t._delta = [0, 0], t._bounds = [[-1 / 0, 1 / 0], [-1 / 0, 1 / 0]], t.args = r, t.axis = void 0, t.memo = void 0, t.elapsedTime = t.timeDelta = 0, t.direction = [0, 0], t.distance = [0, 0], t.overflow = [0, 0], t._movementBound = [!1, !1], t.velocity = [0, 0], t.movement = [0, 0], t.delta = [0, 0], t.timeStamp = 0;
  }
  start(t) {
    const e = this.state, i = this.config;
    e._active || (this.reset(), this.computeInitial(), e._active = !0, e.target = t.target, e.currentTarget = t.currentTarget, e.lastOffset = i.from ? P(i.from, e) : e.offset, e.offset = e.lastOffset, e.startTime = e.timeStamp = t.timeStamp);
  }
  computeValues(t) {
    const e = this.state;
    e._values = t, e.values = this.config.transform(t);
  }
  computeInitial() {
    const t = this.state;
    t._initial = t._values, t.initial = t.values;
  }
  compute(t) {
    const {
      state: e,
      config: i,
      shared: r
    } = this;
    e.args = this.args;
    let n = 0;
    if (t && (e.event = t, i.preventDefault && t.cancelable && e.event.preventDefault(), e.type = t.type, r.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size, r.locked = !!document.pointerLockElement, Object.assign(r, wt(t)), r.down = r.pressed = r.buttons % 2 === 1 || r.touches > 0, n = t.timeStamp - e.timeStamp, e.timeStamp = t.timeStamp, e.elapsedTime = e.timeStamp - e.startTime), e._active) {
      const T = e._delta.map(Math.abs);
      d.addTo(e._distance, T);
    }
    this.axisIntent && this.axisIntent(t);
    const [o, c] = e._movement, [u, h] = i.threshold, {
      _step: a,
      values: g
    } = e;
    if (i.hasCustomTransform ? (a[0] === !1 && (a[0] = Math.abs(o) >= u && g[0]), a[1] === !1 && (a[1] = Math.abs(c) >= h && g[1])) : (a[0] === !1 && (a[0] = Math.abs(o) >= u && Math.sign(o) * u), a[1] === !1 && (a[1] = Math.abs(c) >= h && Math.sign(c) * h)), e.intentional = a[0] !== !1 || a[1] !== !1, !e.intentional) return;
    const f = [0, 0];
    if (i.hasCustomTransform) {
      const [T, it] = g;
      f[0] = a[0] !== !1 ? T - a[0] : 0, f[1] = a[1] !== !1 ? it - a[1] : 0;
    } else
      f[0] = a[0] !== !1 ? o - a[0] : 0, f[1] = a[1] !== !1 ? c - a[1] : 0;
    this.restrictToAxis && !e._blocked && this.restrictToAxis(f);
    const y = e.offset, v = e._active && !e._blocked || e.active;
    v && (e.first = e._active && !e.active, e.last = !e._active && e.active, e.active = r[this.ingKey] = e._active, t && (e.first && ("bounds" in i && (e._bounds = P(i.bounds, e)), this.setup && this.setup()), e.movement = f, this.computeOffset()));
    const [w, E] = e.offset, [[b, U], [m, S]] = e._bounds;
    e.overflow = [w < b ? -1 : w > U ? 1 : 0, E < m ? -1 : E > S ? 1 : 0], e._movementBound[0] = e.overflow[0] ? e._movementBound[0] === !1 ? e._movement[0] : e._movementBound[0] : !1, e._movementBound[1] = e.overflow[1] ? e._movementBound[1] === !1 ? e._movement[1] : e._movementBound[1] : !1;
    const O = e._active ? i.rubberband || [0, 0] : [0, 0];
    if (e.offset = ut(e._bounds, e.offset, O), e.delta = d.sub(e.offset, y), this.computeMovement(), v && (!e.last || n > Dt)) {
      e.delta = d.sub(e.offset, y);
      const T = e.delta.map(Math.abs);
      d.addTo(e.distance, T), e.direction = e.delta.map(Math.sign), e._direction = e._delta.map(Math.sign), !e.first && n > 0 && (e.velocity = [T[0] / n, T[1] / n], e.timeDelta = n);
    }
  }
  emit() {
    const t = this.state, e = this.shared, i = this.config;
    if (t._active || this.clean(), (t._blocked || !t.intentional) && !t._force && !i.triggerAllEvents) return;
    const r = this.handler(l(l(l({}, e), t), {}, {
      [this.aliasKey]: t.values
    }));
    r !== void 0 && (t.memo = r);
  }
  clean() {
    this.eventStore.clean(), this.timeoutStore.clean();
  }
}
function kt([s, t], e) {
  const i = Math.abs(s), r = Math.abs(t);
  if (i > r && i > e)
    return "x";
  if (r > i && r > e)
    return "y";
}
class At extends St {
  constructor(...t) {
    super(...t), p(this, "aliasKey", "xy");
  }
  reset() {
    super.reset(), this.state.axis = void 0;
  }
  init() {
    this.state.offset = [0, 0], this.state.lastOffset = [0, 0];
  }
  computeOffset() {
    this.state.offset = d.add(this.state.lastOffset, this.state.movement);
  }
  computeMovement() {
    this.state.movement = d.sub(this.state.offset, this.state.lastOffset);
  }
  axisIntent(t) {
    const e = this.state, i = this.config;
    if (!e.axis && t) {
      const r = typeof i.axisThreshold == "object" ? i.axisThreshold[Q(t)] : i.axisThreshold;
      e.axis = kt(e._movement, r);
    }
    e._blocked = (i.lockDirection || !!i.axis) && !e.axis || !!i.axis && i.axis !== e.axis;
  }
  restrictToAxis(t) {
    if (this.config.axis || this.config.lockDirection)
      switch (this.state.axis) {
        case "x":
          t[1] = 0;
          break;
        case "y":
          t[0] = 0;
          break;
      }
  }
}
const F = (s) => s, $ = 0.15, N = {
  enabled(s = !0) {
    return s;
  },
  eventOptions(s, t, e) {
    return l(l({}, e.shared.eventOptions), s);
  },
  preventDefault(s = !1) {
    return s;
  },
  triggerAllEvents(s = !1) {
    return s;
  },
  rubberband(s = 0) {
    switch (s) {
      case !0:
        return [$, $];
      case !1:
        return [0, 0];
      default:
        return d.toVector(s);
    }
  },
  from(s) {
    if (typeof s == "function") return s;
    if (s != null) return d.toVector(s);
  },
  transform(s, t, e) {
    const i = s || e.shared.transform;
    if (this.hasCustomTransform = !!i, process.env.NODE_ENV === "development") {
      const r = i || F;
      return (n) => {
        const o = r(n);
        return (!isFinite(o[0]) || !isFinite(o[1])) && console.warn(`[@use-gesture]: config.transform() must produce a valid result, but it was: [${o[0]},${[1]}]`), o;
      };
    }
    return i || F;
  },
  threshold(s) {
    return d.toVector(s, 0);
  }
};
process.env.NODE_ENV === "development" && Object.assign(N, {
  domTarget(s) {
    if (s !== void 0)
      throw Error("[@use-gesture]: `domTarget` option has been renamed to `target`.");
    return NaN;
  },
  lockDirection(s) {
    if (s !== void 0)
      throw Error("[@use-gesture]: `lockDirection` option has been merged with `axis`. Use it as in `{ axis: 'lock' }`");
    return NaN;
  },
  initial(s) {
    if (s !== void 0)
      throw Error("[@use-gesture]: `initial` option has been renamed to `from`.");
    return NaN;
  }
});
const Ot = 0, k = l(l({}, N), {}, {
  axis(s, t, {
    axis: e
  }) {
    if (this.lockDirection = e === "lock", !this.lockDirection) return e;
  },
  axisThreshold(s = Ot) {
    return s;
  },
  bounds(s = {}) {
    if (typeof s == "function")
      return (n) => k.bounds(s(n));
    if ("current" in s)
      return () => s.current;
    if (typeof HTMLElement == "function" && s instanceof HTMLElement)
      return s;
    const {
      left: t = -1 / 0,
      right: e = 1 / 0,
      top: i = -1 / 0,
      bottom: r = 1 / 0
    } = s;
    return [[t, e], [i, r]];
  }
}), G = {
  ArrowRight: (s, t = 1) => [s * t, 0],
  ArrowLeft: (s, t = 1) => [-1 * s * t, 0],
  ArrowUp: (s, t = 1) => [0, -1 * s * t],
  ArrowDown: (s, t = 1) => [0, s * t]
};
class It extends At {
  constructor(...t) {
    super(...t), p(this, "ingKey", "dragging");
  }
  reset() {
    super.reset();
    const t = this.state;
    t._pointerId = void 0, t._pointerActive = !1, t._keyboardActive = !1, t._preventScroll = !1, t._delayed = !1, t.swipe = [0, 0], t.tap = !1, t.canceled = !1, t.cancel = this.cancel.bind(this);
  }
  setup() {
    const t = this.state;
    if (t._bounds instanceof HTMLElement) {
      const e = t._bounds.getBoundingClientRect(), i = t.currentTarget.getBoundingClientRect(), r = {
        left: e.left - i.left + t.offset[0],
        right: e.right - i.right + t.offset[0],
        top: e.top - i.top + t.offset[1],
        bottom: e.bottom - i.bottom + t.offset[1]
      };
      t._bounds = k.bounds(r);
    }
  }
  cancel() {
    const t = this.state;
    t.canceled || (t.canceled = !0, t._active = !1, setTimeout(() => {
      this.compute(), this.emit();
    }, 0));
  }
  setActive() {
    this.state._active = this.state._pointerActive || this.state._keyboardActive;
  }
  clean() {
    this.pointerClean(), this.state._pointerActive = !1, this.state._keyboardActive = !1, super.clean();
  }
  pointerDown(t) {
    const e = this.config, i = this.state;
    if (t.buttons != null && (Array.isArray(e.pointerButtons) ? !e.pointerButtons.includes(t.buttons) : e.pointerButtons !== -1 && e.pointerButtons !== t.buttons)) return;
    const r = this.ctrl.setEventIds(t);
    e.pointerCapture && t.target.setPointerCapture(t.pointerId), !(r && r.size > 1 && i._pointerActive) && (this.start(t), this.setupPointer(t), i._pointerId = C(t), i._pointerActive = !0, this.computeValues(Y(t)), this.computeInitial(), e.preventScrollAxis && Q(t) !== "mouse" ? (i._active = !1, this.setupScrollPrevention(t)) : e.delay > 0 ? (this.setupDelayTrigger(t), e.triggerAllEvents && (this.compute(t), this.emit())) : this.startPointerDrag(t));
  }
  startPointerDrag(t) {
    const e = this.state;
    e._active = !0, e._preventScroll = !0, e._delayed = !1, this.compute(t), this.emit();
  }
  pointerMove(t) {
    const e = this.state, i = this.config;
    if (!e._pointerActive) return;
    const r = C(t);
    if (e._pointerId !== void 0 && r !== e._pointerId) return;
    const n = Y(t);
    if (document.pointerLockElement === t.target ? e._delta = [t.movementX, t.movementY] : (e._delta = d.sub(n, e._values), this.computeValues(n)), d.addTo(e._movement, e._delta), this.compute(t), e._delayed && e.intentional) {
      this.timeoutStore.remove("dragDelay"), e.active = !1, this.startPointerDrag(t);
      return;
    }
    if (i.preventScrollAxis && !e._preventScroll)
      if (e.axis)
        if (e.axis === i.preventScrollAxis || i.preventScrollAxis === "xy") {
          e._active = !1, this.clean();
          return;
        } else {
          this.timeoutStore.remove("startPointerDrag"), this.startPointerDrag(t);
          return;
        }
      else
        return;
    this.emit();
  }
  pointerUp(t) {
    this.ctrl.setEventIds(t);
    try {
      this.config.pointerCapture && t.target.hasPointerCapture(t.pointerId) && t.target.releasePointerCapture(t.pointerId);
    } catch {
      process.env.NODE_ENV === "development" && console.warn("[@use-gesture]: If you see this message, it's likely that you're using an outdated version of `@react-three/fiber`. \n\nPlease upgrade to the latest version.");
    }
    const e = this.state, i = this.config;
    if (!e._active || !e._pointerActive) return;
    const r = C(t);
    if (e._pointerId !== void 0 && r !== e._pointerId) return;
    this.state._pointerActive = !1, this.setActive(), this.compute(t);
    const [n, o] = e._distance;
    if (e.tap = n <= i.tapsThreshold && o <= i.tapsThreshold, e.tap && i.filterTaps)
      e._force = !0;
    else {
      const [c, u] = e._delta, [h, a] = e._movement, [g, f] = i.swipe.velocity, [y, v] = i.swipe.distance, w = i.swipe.duration;
      if (e.elapsedTime < w) {
        const E = Math.abs(c / e.timeDelta), b = Math.abs(u / e.timeDelta);
        E > g && Math.abs(h) > y && (e.swipe[0] = Math.sign(c)), b > f && Math.abs(a) > v && (e.swipe[1] = Math.sign(u));
      }
    }
    this.emit();
  }
  pointerClick(t) {
    !this.state.tap && t.detail > 0 && (t.preventDefault(), t.stopPropagation());
  }
  setupPointer(t) {
    const e = this.config, i = e.device;
    if (process.env.NODE_ENV === "development")
      try {
        if (i === "pointer" && e.preventScrollDelay === void 0) {
          const r = "uv" in t ? t.sourceEvent.currentTarget : t.currentTarget;
          window.getComputedStyle(r).touchAction === "auto" && console.warn("[@use-gesture]: The drag target has its `touch-action` style property set to `auto`. It is recommended to add `touch-action: 'none'` so that the drag gesture behaves correctly on touch-enabled devices. For more information read this: https://use-gesture.netlify.app/docs/extras/#touch-action.\n\nThis message will only show in development mode. It won't appear in production. If this is intended, you can ignore it.", r);
        }
      } catch {
      }
    e.pointerLock && t.currentTarget.requestPointerLock(), e.pointerCapture || (this.eventStore.add(this.sharedConfig.window, i, "change", this.pointerMove.bind(this)), this.eventStore.add(this.sharedConfig.window, i, "end", this.pointerUp.bind(this)), this.eventStore.add(this.sharedConfig.window, i, "cancel", this.pointerUp.bind(this)));
  }
  pointerClean() {
    this.config.pointerLock && document.pointerLockElement === this.state.currentTarget && document.exitPointerLock();
  }
  preventScroll(t) {
    this.state._preventScroll && t.cancelable && t.preventDefault();
  }
  setupScrollPrevention(t) {
    this.state._preventScroll = !1, Pt(t);
    const e = this.eventStore.add(this.sharedConfig.window, "touch", "change", this.preventScroll.bind(this), {
      passive: !1
    });
    this.eventStore.add(this.sharedConfig.window, "touch", "end", e), this.eventStore.add(this.sharedConfig.window, "touch", "cancel", e), this.timeoutStore.add("startPointerDrag", this.startPointerDrag.bind(this), this.config.preventScrollDelay, t);
  }
  setupDelayTrigger(t) {
    this.state._delayed = !0, this.timeoutStore.add("dragDelay", () => {
      this.state._step = [0, 0], this.startPointerDrag(t);
    }, this.config.delay);
  }
  keyDown(t) {
    const e = G[t.key];
    if (e) {
      const i = this.state, r = t.shiftKey ? 10 : t.altKey ? 0.1 : 1;
      this.start(t), i._delta = e(this.config.keyboardDisplacement, r), i._keyboardActive = !0, d.addTo(i._movement, i._delta), this.compute(t), this.emit();
    }
  }
  keyUp(t) {
    t.key in G && (this.state._keyboardActive = !1, this.setActive(), this.compute(t), this.emit());
  }
  bind(t) {
    const e = this.config.device;
    t(e, "start", this.pointerDown.bind(this)), this.config.pointerCapture && (t(e, "change", this.pointerMove.bind(this)), t(e, "end", this.pointerUp.bind(this)), t(e, "cancel", this.pointerUp.bind(this)), t("lostPointerCapture", "", this.pointerUp.bind(this))), this.config.keys && (t("key", "down", this.keyDown.bind(this)), t("key", "up", this.keyUp.bind(this))), this.config.filterTaps && t("click", "", this.pointerClick.bind(this), {
      capture: !0,
      passive: !1
    });
  }
}
function Pt(s) {
  "persist" in s && typeof s.persist == "function" && s.persist();
}
const A = typeof window < "u" && window.document && window.document.createElement;
function Z() {
  return A && "ontouchstart" in window;
}
function xt() {
  return Z() || A && window.navigator.maxTouchPoints > 1;
}
function Lt() {
  return A && "onpointerdown" in window;
}
function Ct() {
  return A && "exitPointerLock" in window.document;
}
function Mt() {
  try {
    return "constructor" in GestureEvent;
  } catch {
    return !1;
  }
}
const _ = {
  isBrowser: A,
  gesture: Mt(),
  touch: Z(),
  touchscreen: xt(),
  pointer: Lt(),
  pointerLock: Ct()
}, Nt = 250, Ut = 180, Kt = 0.5, Rt = 50, Vt = 250, jt = 10, X = {
  mouse: 0,
  touch: 0,
  pen: 8
}, tt = l(l({}, k), {}, {
  device(s, t, {
    pointer: {
      touch: e = !1,
      lock: i = !1,
      mouse: r = !1
    } = {}
  }) {
    return this.pointerLock = i && _.pointerLock, _.touch && e ? "touch" : this.pointerLock ? "mouse" : _.pointer && !r ? "pointer" : _.touch ? "touch" : "mouse";
  },
  preventScrollAxis(s, t, {
    preventScroll: e
  }) {
    if (this.preventScrollDelay = typeof e == "number" ? e : e || e === void 0 && s ? Nt : void 0, !(!_.touchscreen || e === !1))
      return s || (e !== void 0 ? "y" : void 0);
  },
  pointerCapture(s, t, {
    pointer: {
      capture: e = !0,
      buttons: i = 1,
      keys: r = !0
    } = {}
  }) {
    return this.pointerButtons = i, this.keys = r, !this.pointerLock && this.device === "pointer" && e;
  },
  threshold(s, t, {
    filterTaps: e = !1,
    tapsThreshold: i = 3,
    axis: r = void 0
  }) {
    const n = d.toVector(s, e ? i : r ? 1 : 0);
    return this.filterTaps = e, this.tapsThreshold = i, n;
  },
  swipe({
    velocity: s = Kt,
    distance: t = Rt,
    duration: e = Vt
  } = {}) {
    return {
      velocity: this.transform(d.toVector(s)),
      distance: this.transform(d.toVector(t)),
      duration: e
    };
  },
  delay(s = 0) {
    switch (s) {
      case !0:
        return Ut;
      case !1:
        return 0;
      default:
        return s;
    }
  },
  axisThreshold(s) {
    return s ? l(l({}, X), s) : X;
  },
  keyboardDisplacement(s = jt) {
    return s;
  }
});
process.env.NODE_ENV === "development" && Object.assign(tt, {
  useTouch(s) {
    if (s !== void 0)
      throw Error("[@use-gesture]: `useTouch` option has been renamed to `pointer.touch`. Use it as in `{ pointer: { touch: true } }`.");
    return NaN;
  },
  experimental_preventWindowScrollY(s) {
    if (s !== void 0)
      throw Error("[@use-gesture]: `experimental_preventWindowScrollY` option has been renamed to `preventScroll`.");
    return NaN;
  },
  swipeVelocity(s) {
    if (s !== void 0)
      throw Error("[@use-gesture]: `swipeVelocity` option has been renamed to `swipe.velocity`. Use it as in `{ swipe: { velocity: 0.5 } }`.");
    return NaN;
  },
  swipeDistance(s) {
    if (s !== void 0)
      throw Error("[@use-gesture]: `swipeDistance` option has been renamed to `swipe.distance`. Use it as in `{ swipe: { distance: 50 } }`.");
    return NaN;
  },
  swipeDuration(s) {
    if (s !== void 0)
      throw Error("[@use-gesture]: `swipeDuration` option has been renamed to `swipe.duration`. Use it as in `{ swipe: { duration: 250 } }`.");
    return NaN;
  }
});
l(l({}, N), {}, {
  device(s, t, {
    shared: e,
    pointer: {
      touch: i = !1
    } = {}
  }) {
    if (e.target && !_.touch && _.gesture) return "gesture";
    if (_.touch && i) return "touch";
    if (_.touchscreen) {
      if (_.pointer) return "pointer";
      if (_.touch) return "touch";
    }
  },
  bounds(s, t, {
    scaleBounds: e = {},
    angleBounds: i = {}
  }) {
    const r = (o) => {
      const c = W(P(e, o), {
        min: -1 / 0,
        max: 1 / 0
      });
      return [c.min, c.max];
    }, n = (o) => {
      const c = W(P(i, o), {
        min: -1 / 0,
        max: 1 / 0
      });
      return [c.min, c.max];
    };
    return typeof e != "function" && typeof i != "function" ? [r(), n()] : (o) => [r(o), n(o)];
  },
  threshold(s, t, e) {
    return this.lockDirection = e.axis === "lock", d.toVector(s, this.lockDirection ? [0.1, 3] : 0);
  },
  modifierKey(s) {
    return s === void 0 ? "ctrlKey" : s;
  },
  pinchOnWheel(s = !0) {
    return s;
  }
});
l(l({}, k), {}, {
  mouseOnly: (s = !0) => s
});
l(l({}, k), {}, {
  mouseOnly: (s = !0) => s
});
const et = /* @__PURE__ */ new Map(), M = /* @__PURE__ */ new Map();
function Bt(s) {
  et.set(s.key, s.engine), M.set(s.key, s.resolver);
}
const Ht = {
  key: "drag",
  engine: It,
  resolver: tt
};
function Yt(s, t) {
  if (s == null) return {};
  var e = {}, i = Object.keys(s), r, n;
  for (n = 0; n < i.length; n++)
    r = i[n], !(t.indexOf(r) >= 0) && (e[r] = s[r]);
  return e;
}
function Wt(s, t) {
  if (s == null) return {};
  var e = Yt(s, t), i, r;
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(s);
    for (r = 0; r < n.length; r++)
      i = n[r], !(t.indexOf(i) >= 0) && Object.prototype.propertyIsEnumerable.call(s, i) && (e[i] = s[i]);
  }
  return e;
}
const Ft = {
  target(s) {
    if (s)
      return () => "current" in s ? s.current : s;
  },
  enabled(s = !0) {
    return s;
  },
  window(s = _.isBrowser ? window : void 0) {
    return s;
  },
  eventOptions({
    passive: s = !0,
    capture: t = !1
  } = {}) {
    return {
      passive: s,
      capture: t
    };
  },
  transform(s) {
    return s;
  }
}, $t = ["target", "eventOptions", "window", "enabled", "transform"];
function I(s = {}, t) {
  const e = {};
  for (const [i, r] of Object.entries(t))
    switch (typeof r) {
      case "function":
        if (process.env.NODE_ENV === "development") {
          const n = r.call(e, s[i], i, s);
          Number.isNaN(n) || (e[i] = n);
        } else
          e[i] = r.call(e, s[i], i, s);
        break;
      case "object":
        e[i] = I(s[i], r);
        break;
      case "boolean":
        r && (e[i] = s[i]);
        break;
    }
  return e;
}
function Gt(s, t, e = {}) {
  const i = s, {
    target: r,
    eventOptions: n,
    window: o,
    enabled: c,
    transform: u
  } = i, h = Wt(i, $t);
  if (e.shared = I({
    target: r,
    eventOptions: n,
    window: o,
    enabled: c,
    transform: u
  }, Ft), t) {
    const a = M.get(t);
    e[t] = I(l({
      shared: e.shared
    }, h), a);
  } else
    for (const a in h) {
      const g = M.get(a);
      if (g)
        e[a] = I(l({
          shared: e.shared
        }, h[a]), g);
      else if (process.env.NODE_ENV === "development" && !["drag", "pinch", "scroll", "wheel", "move", "hover"].includes(a)) {
        if (a === "domTarget")
          throw Error("[@use-gesture]: `domTarget` option has been renamed to `target`.");
        console.warn(`[@use-gesture]: Unknown config key \`${a}\` was used. Please read the documentation for further information.`);
      }
    }
  return e;
}
class st {
  constructor(t, e) {
    p(this, "_listeners", /* @__PURE__ */ new Set()), this._ctrl = t, this._gestureKey = e;
  }
  add(t, e, i, r, n) {
    const o = this._listeners, c = _t(e, i), u = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {}, h = l(l({}, u), n);
    t.addEventListener(c, r, h);
    const a = () => {
      t.removeEventListener(c, r, h), o.delete(a);
    };
    return o.add(a), a;
  }
  clean() {
    this._listeners.forEach((t) => t()), this._listeners.clear();
  }
}
class Xt {
  constructor() {
    p(this, "_timeouts", /* @__PURE__ */ new Map());
  }
  add(t, e, i = 140, ...r) {
    this.remove(t), this._timeouts.set(t, window.setTimeout(e, i, ...r));
  }
  remove(t) {
    const e = this._timeouts.get(t);
    e && window.clearTimeout(e);
  }
  clean() {
    this._timeouts.forEach((t) => void window.clearTimeout(t)), this._timeouts.clear();
  }
}
class zt {
  constructor(t) {
    p(this, "gestures", /* @__PURE__ */ new Set()), p(this, "_targetEventStore", new st(this)), p(this, "gestureEventStores", {}), p(this, "gestureTimeoutStores", {}), p(this, "handlers", {}), p(this, "config", {}), p(this, "pointerIds", /* @__PURE__ */ new Set()), p(this, "touchIds", /* @__PURE__ */ new Set()), p(this, "state", {
      shared: {
        shiftKey: !1,
        metaKey: !1,
        ctrlKey: !1,
        altKey: !1
      }
    }), qt(this, t);
  }
  setEventIds(t) {
    if (x(t))
      return this.touchIds = new Set(bt(t)), this.touchIds;
    if ("pointerId" in t)
      return t.type === "pointerup" || t.type === "pointercancel" ? this.pointerIds.delete(t.pointerId) : t.type === "pointerdown" && this.pointerIds.add(t.pointerId), this.pointerIds;
  }
  applyHandlers(t, e) {
    this.handlers = t, this.nativeHandlers = e;
  }
  applyConfig(t, e) {
    this.config = Gt(t, e, this.config);
  }
  clean() {
    this._targetEventStore.clean();
    for (const t of this.gestures)
      this.gestureEventStores[t].clean(), this.gestureTimeoutStores[t].clean();
  }
  effect() {
    return this.config.shared.target && this.bind(), () => this._targetEventStore.clean();
  }
  bind(...t) {
    const e = this.config.shared, i = {};
    let r;
    if (!(e.target && (r = e.target(), !r))) {
      if (e.enabled) {
        for (const o of this.gestures) {
          const c = this.config[o], u = z(i, c.eventOptions, !!r);
          if (c.enabled) {
            const h = et.get(o);
            new h(this, t, o).bind(u);
          }
        }
        const n = z(i, e.eventOptions, !!r);
        for (const o in this.nativeHandlers)
          n(o, "", (c) => this.nativeHandlers[o](l(l({}, this.state.shared), {}, {
            event: c,
            args: t
          })), void 0, !0);
      }
      for (const n in i)
        i[n] = Tt(...i[n]);
      if (!r) return i;
      for (const n in i) {
        const {
          device: o,
          capture: c,
          passive: u
        } = gt(n);
        this._targetEventStore.add(r, o, "", i[n], {
          capture: c,
          passive: u
        });
      }
    }
  }
}
function D(s, t) {
  s.gestures.add(t), s.gestureEventStores[t] = new st(s, t), s.gestureTimeoutStores[t] = new Xt();
}
function qt(s, t) {
  t.drag && D(s, "drag"), t.wheel && D(s, "wheel"), t.scroll && D(s, "scroll"), t.move && D(s, "move"), t.pinch && D(s, "pinch"), t.hover && D(s, "hover");
}
const z = (s, t, e) => (i, r, n, o = {}, c = !1) => {
  var u, h;
  const a = (u = o.capture) !== null && u !== void 0 ? u : t.capture, g = (h = o.passive) !== null && h !== void 0 ? h : t.passive;
  let f = c ? i : pt(i, r, a);
  e && g && (f += "Passive"), s[f] = s[f] || [], s[f].push(n);
};
function Qt(s, t = {}, e, i) {
  const r = L.useMemo(() => new zt(s), []);
  if (r.applyHandlers(s, i), r.applyConfig(t, e), L.useEffect(r.effect.bind(r)), L.useEffect(() => r.clean.bind(r), []), t.target === void 0)
    return r.bind.bind(r);
}
function Jt(s, t) {
  return Bt(Ht), Qt({
    drag: s
  }, t || {}, "drag");
}
const se = ({
  show: s,
  onClose: t,
  shouldCloseOnDrag: e,
  fullHeightOnOpen: i
}) => {
  const [r, n] = K("auto"), [o, c] = K(!1), u = rt(null), h = ot("(min-width: 1024px)"), { expandable: a } = nt(at);
  R(() => {
    h && n("100%"), !h && s && n(i ? "90dvh" : "auto");
  }, [s, h]), R(() => {
    const f = u.current, y = () => {
      if (f) {
        const v = f.scrollTop > 0 && f.scrollTop + f.clientHeight < f.scrollHeight;
        c(v);
      }
    };
    if (f)
      return f.addEventListener("scroll", y), () => {
        f.removeEventListener("scroll", y);
      };
  }, [s]);
  const g = Jt(
    ({ dragging: f, distance: y, initial: v, xy: w, cancel: E }) => {
      var O;
      const b = typeof window < "u" ? window.innerHeight : 0;
      let m = ((O = u.current) == null ? void 0 : O.clientHeight) || 0;
      const S = v[1] < w[1] && Math.abs(v[1] - w[1]) > Math.abs(v[0] - w[0]);
      if (S ? m = m - y[1] : m = m + y[1], f)
        if (S) {
          if (!e) return;
          E(), t == null || t();
        } else {
          if (!a) return;
          n(`${m}px`);
        }
      else {
        if (y[1] === 0 || !a) return;
        if (!S)
          m >= 0 && m <= b * 0.3 ? n("30dvh") : m >= b * 0.3 && m <= b * 0.5 ? n("50dvh") : n("90dvh");
        else if (m <= b * 0.3) {
          if (!e)
            return r === "auto" ? void 0 : n("30dvh");
          n("0dvh"), E(), t == null || t();
        } else m <= b * 0.5 ? n("30dvh") : n("50dvh");
      }
    },
    {
      filterTaps: !0,
      rubberband: !0
    }
  );
  return { height: r, containerRef: u, bindHandle: g, isScrolled: o, isLg: h };
};
export {
  se as useSwipeBlock
};
