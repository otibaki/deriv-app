{"version":3,"file":"account/js/account.Sections_Profile_LanguageSettings_index_ts.aa486d12456eb1826a13.js","mappings":"6eAaA,MCXA,EDW4BA,IAAsF,IAArF,oBAAEC,EAAmB,GAAEC,EAAE,cAAEC,EAAa,KAAEC,EAAI,SAAEC,GAAgCL,EACzG,OACIM,EAAAA,EAAAA,MAAA,OACIC,WAAWC,EAAAA,EAAAA,GAAK,mCAAoC,CAChD,2CAA4CP,IAEhDC,GAAI,eAAeA,WACnB,cAAa,8BAA8BO,SAAA,EAE3CC,EAAAA,EAAAA,KAAA,SACIC,KAAK,QACLT,GAAIA,EACJE,KAAMA,EACNC,SAAUA,EACVO,MAAOV,EACPK,UAAU,+CAEdD,EAAAA,EAAAA,MAAA,SAAOO,QAASX,EAAIK,UAAU,4CAA2CE,SAAA,EACrEC,EAAAA,EAAAA,KAAA,OAAAD,SAAMK,EAAAA,gBAAgBZ,GAAI,GAAI,OAC9BQ,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACK,EAAAA,KAAI,CACDC,KAAK,KACLT,WAAWC,EAAAA,EAAAA,GAAK,mCAAoC,CAChD,2CAA4CP,IAC7CQ,SAEFN,WAIX,E,uEEnCd,MCNA,GDMyBc,EAAAA,EAAAA,WAAS,KAC9B,MAAM,OAAEC,IAAWC,EAAAA,EAAAA,aACb,eAAEC,EAAc,YAAEC,EAAW,SAAEC,IAAaC,EAAAA,EAAAA,oBAE5C,uBAAEC,GAA2BN,GAC7B,UAAEO,IAAcC,EAAAA,EAAAA,KAEtB,IAAKD,EACD,OAAOf,EAAAA,EAAAA,KAACiB,EAAAA,SAAQ,CAACC,GAAIC,EAAAA,OAAOC,cAGhC,MAOMC,GAA4CC,EAAAA,EAAAA,qBAAoBC,EAAAA,uBAEtE,OACI3B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBE,SAAA,EAC9BC,EAAAA,EAAAA,KAACwB,EAAAA,EAAa,CAACC,MAAOb,EAAS,sBAC/BZ,EAAAA,EAAAA,KAAA,OAAKH,UAAU,wCAAuCE,SACjD2B,OAAOC,QAAQN,GAAmBO,KAAItC,IAA2B,IAAzBuC,EAAc3B,GAAMZ,EACzD,OACIU,EAAAA,EAAAA,KAAC8B,EAAmB,CAEhBtC,GAAIqC,EACJpC,cAAeS,EACfX,oBAAqBoB,IAAgBkB,EACrCnC,KAAK,uBACLC,SAAUoC,eArBLA,iBAGnBjB,EAAuBe,GAC7BnB,EAAemB,EAAa,EAkBEG,CAAqBH,EAAa,GANvCA,EAQP,QAIZ,G","sources":["webpack://@deriv/account/./Components/language-settings/language-radio-button.tsx","webpack://@deriv/account/./Components/language-settings/index.ts","webpack://@deriv/account/./Sections/Profile/LanguageSettings/language-settings.tsx","webpack://@deriv/account/./Sections/Profile/LanguageSettings/index.ts"],"sourcesContent":["import { ChangeEventHandler } from 'react';\nimport { Text } from '@deriv/components';\nimport clsx from 'clsx';\nimport { TranslationFlag } from '@deriv/shared';\n\nexport type TLanguageRadioButton = {\n    is_current_language: boolean;\n    id: string;\n    language_text: string;\n    name: string;\n    onChange: ChangeEventHandler<HTMLInputElement>;\n};\n\nconst LanguageRadioButton = ({ is_current_language, id, language_text, name, onChange }: TLanguageRadioButton) => {\n    return (\n        <div\n            className={clsx('settings-language__language-link', {\n                'settings-language__language-link--active': is_current_language,\n            })}\n            id={`dt_settings_${id}_button`}\n            data-testid={'dt_language_settings_button'}\n        >\n            <input\n                type='radio'\n                id={id}\n                name={name}\n                onChange={onChange}\n                value={id}\n                className='settings-language__language--radio-button'\n            />\n            <label htmlFor={id} className='settings-language__language--center-label'>\n                <div>{TranslationFlag[id](36, 24)}</div>\n                <div>\n                    <Text\n                        size='xs'\n                        className={clsx('settings-language__language-name', {\n                            'settings-language__language-name--active': is_current_language,\n                        })}\n                    >\n                        {language_text}\n                    </Text>\n                </div>\n            </label>\n        </div>\n    );\n};\n\nexport default LanguageRadioButton;\n","import LanguageRadioButton from './language-radio-button';\n\nexport default LanguageRadioButton;\n","import { Redirect } from 'react-router-dom';\nimport { UNSUPPORTED_LANGUAGES, routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTranslations, getAllowedLanguages } from '@deriv-com/translations';\nimport FormSubHeader from '../../../Components/form-sub-header';\nimport LanguageRadioButton from '../../../Components/language-settings';\nimport { useDevice } from '@deriv-com/ui';\n\nconst LanguageSettings = observer(() => {\n    const { common } = useStore();\n    const { switchLanguage, currentLang, localize } = useTranslations();\n    // [TODO]: Remove changeSelectedLanguage() when whole app starts to use @deriv-com/translations\n    const { changeSelectedLanguage } = common;\n    const { isDesktop } = useDevice();\n\n    if (!isDesktop) {\n        return <Redirect to={routes.traders_hub} />;\n    }\n\n    const handleLanguageChange = async (language_key: string) => {\n        // [TODO]: Remove changeSelectedLanguage() when whole app starts to use @deriv-com/translations\n        // This function also helps in informing language change to BE\n        await changeSelectedLanguage(language_key);\n        switchLanguage(language_key);\n    };\n\n    const allowed_languages: Record<string, string> = getAllowedLanguages(UNSUPPORTED_LANGUAGES);\n\n    return (\n        <div className='settings-language'>\n            <FormSubHeader title={localize('Select language')} />\n            <div className='settings-language__language-container'>\n                {Object.entries(allowed_languages).map(([language_key, value]) => {\n                    return (\n                        <LanguageRadioButton\n                            key={language_key}\n                            id={language_key}\n                            language_text={value}\n                            is_current_language={currentLang === language_key}\n                            name='language-radio-group'\n                            onChange={async () => {\n                                await handleLanguageChange(language_key);\n                            }}\n                        />\n                    );\n                })}\n            </div>\n        </div>\n    );\n});\n\nexport default LanguageSettings;\n","import LanguageSettings from './language-settings';\n\nexport default LanguageSettings;\n"],"names":["_ref","is_current_language","id","language_text","name","onChange","_jsxs","className","clsx","children","_jsx","type","value","htmlFor","TranslationFlag","Text","size","observer","common","useStore","switchLanguage","currentLang","localize","useTranslations","changeSelectedLanguage","isDesktop","useDevice","Redirect","to","routes","traders_hub","allowed_languages","getAllowedLanguages","UNSUPPORTED_LANGUAGES","FormSubHeader","title","Object","entries","map","language_key","LanguageRadioButton","async","handleLanguageChange"],"sourceRoot":""}