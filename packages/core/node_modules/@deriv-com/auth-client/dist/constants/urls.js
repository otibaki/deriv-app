import { URLConstants as s, LocalStorageUtils as e, LocalStorageConstants as r, AppIDConstants as d, URLUtils as h, WebSocketUtils as v } from "@deriv-com/utils";
const I = "https://oauth.deriv.com/oauth2/sessions/logout", L = "https://oauth.deriv.com", S = {
  [s.derivP2pProduction]: "blue.derivws.com",
  [s.derivP2pStaging]: "red.derivws.com"
}, a = () => {
  const t = window.location.origin, o = window.location.hostname, { getAppId: n } = v, i = n(), g = e.getValue(r.configAppId), l = e.getValue(r.configServerURL);
  t === s.derivP2pStaging && (!g || !l) && (e.setValue(
    r.configServerURL,
    S[t]
  ), e.setValue(
    r.configAppId,
    `${d.domainAppId[o]}`
  ));
  const c = e.getValue(r.configServerURL) || localStorage.getItem("config.server_url"), p = /qa/.test(String(c)) ? c : "oauth.deriv.com", u = e.getValue(r.configAppId) || i, U = e.getValue(r.i18nLanguage);
  return {
    appId: u,
    lang: U,
    serverUrl: p
  };
}, m = () => {
  const { appId: t, lang: o, serverUrl: n } = a();
  return t && n ? `https://${n}/oauth2/authorize?app_id=${t}&l=${o ?? "EN"}&&brand=deriv` : h.getOauthURL();
}, f = () => {
  const { appId: t, serverUrl: o } = a();
  return t && o ? `https://${o}/oauth2/sessions/logout` : I;
}, O = () => {
  const { appId: t, serverUrl: o } = a();
  return t && o ? `https://${o}` : L;
};
export {
  I as DEFAULT_OAUTH_LOGOUT_URL,
  L as DEFAULT_OAUTH_ORIGIN_URL,
  f as getOAuthLogoutUrl,
  O as getOAuthOrigin,
  m as getOauthUrl,
  a as getServerInfo
};
