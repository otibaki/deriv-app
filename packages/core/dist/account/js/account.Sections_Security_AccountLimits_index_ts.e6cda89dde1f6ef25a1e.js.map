{"version":3,"file":"account/js/account.Sections_Security_AccountLimits_index_ts.e6cda89dde1f6ef25a1e.js","mappings":"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","sources":["webpack://@deriv/account/./Components/article/article.tsx","webpack://@deriv/account/./Components/article/index.ts","webpack://@deriv/account/./Components/account-limits/account-limits-article.tsx","webpack://@deriv/account/./Components/account-limits/account-limits-context.tsx","webpack://@deriv/account/./Components/account-limits/account-limits-extra-info.tsx","webpack://@deriv/account/./Components/account-limits/account-limits-footer.tsx","webpack://@deriv/account/./Components/account-limits/account-limits-overlay.tsx","webpack://@deriv/account/./Components/account-limits/account-limits-table-cell.tsx","webpack://@deriv/account/./Components/account-limits/account-limits-table-header.tsx","webpack://@deriv/account/./Components/account-limits/account-limits-turnover-limit-row.tsx","webpack://@deriv/account/./Components/account-limits/withdrawal-limits-table.tsx","webpack://@deriv/account/./Components/account-limits/account-limits.tsx","webpack://@deriv/account/./Sections/Security/AccountLimits/index.ts"],"sourcesContent":["import { ReactNode, Fragment } from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\nimport './article.scss';\nimport clsx from 'clsx';\n\nexport type TArticle = {\n    title: JSX.Element | string;\n    descriptions: Array<ReactNode>;\n    onClickLearnMore?: () => void;\n    className?: string;\n};\n\nconst Article = ({ title, descriptions, onClickLearnMore, className }: TArticle) => {\n    const has_descriptions: boolean = descriptions?.length > 0;\n    const has_single_description: boolean = descriptions?.length === 1;\n\n    return (\n        <article className={clsx('da-article', className)}>\n            <Text as='h4' color='prominent' line_height='m' size='xs' weight='bold' className='da-article__header'>\n                {title}\n            </Text>\n            {has_descriptions && (\n                <Fragment>\n                    {has_single_description ? (\n                        <Text as='p' size='xxs' line_height='m'>\n                            {descriptions[0]}\n                        </Text>\n                    ) : (\n                        <ul className='da-article__list'>\n                            {descriptions.map((description, idx) => (\n                                <li key={idx}>\n                                    <Text size='xxs' line_height='xs'>\n                                        {description}\n                                    </Text>\n                                </li>\n                            ))}\n                        </ul>\n                    )}\n                </Fragment>\n            )}\n            {onClickLearnMore && (\n                <div className='da-article__learn-more' onClick={onClickLearnMore}>\n                    <Text size='xxs' color='loss-danger' line_height='s'>\n                        <Localize i18n_default_text='Learn more' />\n                    </Text>\n                    <Icon icon='IcChevronRight' className='da-article__learn-more-icon' color='red' />\n                </div>\n            )}\n        </article>\n    );\n};\n\nexport default Article;\n","import AccountArticle from './article';\nimport './article.scss';\n\nexport default AccountArticle;\n","import { Localize, useTranslations } from '@deriv-com/translations';\nimport AccountArticle from '../article';\n\nconst getDescription = () => [\n    <Localize key={0} i18n_default_text='These are default limits that we apply to your accounts.' />,\n];\n\nconst AccountLimitsArticle = () => {\n    const { localize } = useTranslations();\n    return <AccountArticle title={localize('Account limits')} descriptions={getDescription()} />;\n};\n\nexport default AccountLimitsArticle;\n","import { createContext } from 'react';\n\nexport type TAccountLimitsContext = {\n    currency: string;\n    footer_ref?: React.RefObject<HTMLElement>;\n    overlay_ref: HTMLDivElement;\n    toggleOverlay?: () => void;\n};\n\nconst AccountLimitsContext = createContext<TAccountLimitsContext>({\n    currency: '',\n    overlay_ref: document.createElement('div'),\n});\n\nexport default AccountLimitsContext;\n","import { Popover, Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TAccountLimitsExtraInfo = {\n    message: string;\n    should_display_in_info_tooltip?: boolean;\n    className?: string;\n};\n\nconst AccountLimitsExtraInfo = ({\n    message,\n    should_display_in_info_tooltip = false,\n    ...props\n}: TAccountLimitsExtraInfo) => {\n    const { isDesktop } = useDevice();\n    if (!isDesktop && !should_display_in_info_tooltip) {\n        return (\n            <Text color='less-prominent' line_height='s' size='xxxs'>\n                {message}\n            </Text>\n        );\n    }\n\n    return (\n        <Popover\n            data_testid='dt_acc_limits_popover'\n            alignment={isDesktop ? 'right' : 'top'}\n            className='da-account-limits__popover'\n            icon='info'\n            is_bubble_hover_enabled\n            message={message}\n            zIndex='9999'\n            {...props}\n        />\n    );\n};\n\nexport default AccountLimitsExtraInfo;\n","import { useContext } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\nimport AccountLimitsContext, { TAccountLimitsContext } from './account-limits-context';\n\nconst AccountLimitsFooterPortal = () => {\n    const { footer_ref, toggleOverlay } = useContext<TAccountLimitsContext>(AccountLimitsContext);\n\n    return createPortal(\n        <a className='link link--prominent' onClick={toggleOverlay} data-testid='dt_footer_text'>\n            <Text size='xxs' line_height='m' weight='bold'>\n                <Localize i18n_default_text='Learn more about account limits' />\n            </Text>\n        </a>,\n        footer_ref?.current as HTMLElement\n    );\n};\n\nexport default AccountLimitsFooterPortal;\n","import { useContext } from 'react';\nimport { Popup, StaticUrl } from '@deriv/components';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport AccountLimitsContext from './account-limits-context';\n\nconst AccountLimitsOverlay = () => {\n    const { localize } = useTranslations();\n    const { overlay_ref, toggleOverlay } = useContext(AccountLimitsContext);\n\n    return (\n        <Popup.Overlay\n            descriptions={[\n                {\n                    key: 'account_limits_desc_1',\n                    component: (\n                        <Localize i18n_default_text='These are default limits that we apply to your accounts.' />\n                    ),\n                },\n                {\n                    key: 'account_limits_desc_2',\n                    component: (\n                        <Localize\n                            i18n_default_text='To learn more about account limits and how they apply, please go to the <0>Help Centre</0>.'\n                            components={[<StaticUrl key={0} className='link' href='/help-centre' />]}\n                        />\n                    ),\n                },\n            ]}\n            done_text={localize('Done')}\n            overlay_ref={overlay_ref}\n            title={localize('Account limits')}\n            toggleOverlay={toggleOverlay}\n        />\n    );\n};\n\nexport default AccountLimitsOverlay;\n","import { ReactElement, PropsWithChildren } from 'react';\nimport clsx from 'clsx';\nimport { Text } from '@deriv/components';\n\ntype TAccountLimitsTableCell = {\n    align: 'right' | 'left';\n    is_hint: boolean;\n    level: string;\n    className?: string;\n    renderExtraInfo: () => ReactElement;\n};\n\nconst AccountLimitsTableCell = ({\n    align,\n    children,\n    is_hint,\n    level,\n    renderExtraInfo,\n    className,\n}: PropsWithChildren<Partial<TAccountLimitsTableCell>>) => {\n    const text_size = is_hint ? 'xxxs' : 'xxs';\n\n    return (\n        <td\n            className={clsx('da-account-limits__table-cell', className, {\n                'da-account-limits__table-cell--left': align !== 'right',\n                'da-account-limits__table-cell--right': align === 'right',\n                'da-account-limits__table-cell--submarket': level === 'submarket',\n            })}\n            data-testid='account_limit_table_cell'\n        >\n            {children && (\n                <Text\n                    align={align}\n                    as='p'\n                    color='prominent'\n                    size={text_size}\n                    line_height='m'\n                    data-testid='account_limit_table_cell_text'\n                >\n                    {children}\n                </Text>\n            )}\n            {renderExtraInfo?.()}\n        </td>\n    );\n};\n\nexport default AccountLimitsTableCell;\n","import { ReactNode, PropsWithChildren } from 'react';\nimport clsx from 'clsx';\nimport { Text } from '@deriv/components';\n\ntype TAccountLimitsTableHeader = {\n    align: 'left' | 'right';\n    renderExtraInfo: () => ReactNode;\n};\n\nconst AccountLimitsTableHeader = ({\n    align,\n    children,\n    renderExtraInfo,\n}: PropsWithChildren<Partial<TAccountLimitsTableHeader>>) => {\n    return (\n        <th\n            className={clsx('da-account-limits__table-header', {\n                'da-account-limits__table-header--left': align !== 'right',\n                'da-account-limits__table-header--right': align === 'right',\n            })}\n            data-testid='account_limit_table_header'\n        >\n            {children && (\n                <Text\n                    align={align}\n                    as='p'\n                    color='prominent'\n                    size='xs'\n                    line_height='m'\n                    weight='bold'\n                    data-testid='account_limit_table_header_text'\n                >\n                    {children}\n                </Text>\n            )}\n            {renderExtraInfo?.()}\n        </th>\n    );\n};\n\nexport default AccountLimitsTableHeader;\n","import { useContext, Fragment } from 'react';\nimport { FormatUtils, CurrencyConstants } from '@deriv-com/utils';\nimport AccountLimitsTableCell from './account-limits-table-cell';\nimport AccountLimitsContext, { TAccountLimitsContext } from './account-limits-context';\n\nexport type TAccountLimitsCollection = {\n    level?: string;\n    name: string;\n    payout_limit: number;\n    profile_name: string;\n    turnover_limit: number;\n};\n\ntype TAccountLimitsTurnoverLimitRow = {\n    collection: TAccountLimitsCollection[];\n    title?: string;\n};\n\nconst AccountLimitsTurnoverLimitRow = ({ collection, title }: TAccountLimitsTurnoverLimitRow) => {\n    const { currency } = useContext<TAccountLimitsContext>(AccountLimitsContext);\n\n    return (\n        <Fragment>\n            {collection?.map(({ name, turnover_limit, level }) => (\n                <tr key={name} data-testid='account-limits-turnover-limit-row'>\n                    <AccountLimitsTableCell level={level}>\n                        {title && `${title} - `}\n                        {name}\n                    </AccountLimitsTableCell>\n                    <AccountLimitsTableCell align='right'>\n                        {FormatUtils.formatMoney(turnover_limit, { currency: currency as CurrencyConstants.Currency })}\n                    </AccountLimitsTableCell>\n                </tr>\n            ))}\n        </Fragment>\n    );\n};\n\nexport default AccountLimitsTurnoverLimitRow;\n","import { Fragment } from 'react';\nimport { FormatUtils, CurrencyConstants } from '@deriv-com/utils';\nimport { Localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport AccountLimitsTableCell from './account-limits-table-cell';\nimport AccountLimitsTableHeader from './account-limits-table-header';\nimport AccountLimitsExtraInfo from './account-limits-extra-info';\nimport { useGetWithdrawalLimitsDetails } from '@deriv/hooks';\n\nconst WithdrawalLimitsTable = observer(() => {\n    const { client } = useStore();\n    const { withdrawal_limit_details } = useGetWithdrawalLimitsDetails();\n    const { currency } = client;\n\n    return (\n        <Fragment>\n            <table className='da-account-limits__table' data-testid='withdrawal_limits_table'>\n                <thead>\n                    <tr>\n                        <AccountLimitsTableHeader>\n                            <Localize i18n_default_text='Withdrawal limits' />\n                        </AccountLimitsTableHeader>\n                        <AccountLimitsTableHeader align='right'>\n                            <Localize i18n_default_text='Limit (USD)' />\n                        </AccountLimitsTableHeader>\n                    </tr>\n                </thead>\n                <tbody>\n                    <Fragment>\n                        {withdrawal_limit_details.map((withdrawal_limit_detail, index) => (\n                            <tr key={index}>\n                                <AccountLimitsTableCell\n                                    className='da-account-limits__table-cell--withdrawal-limit'\n                                    renderExtraInfo={() => (\n                                        <AccountLimitsExtraInfo\n                                            should_display_in_info_tooltip\n                                            message={withdrawal_limit_detail.withdrawal_info_message}\n                                        />\n                                    )}\n                                >\n                                    {withdrawal_limit_detail.withdrawal_title}\n                                </AccountLimitsTableCell>\n                                <AccountLimitsTableCell align='right'>\n                                    {FormatUtils.formatMoney(\n                                        (withdrawal_limit_detail.withdrawal_amount as number) ?? 0,\n                                        {\n                                            currency: currency as CurrencyConstants.Currency,\n                                        }\n                                    )}\n                                </AccountLimitsTableCell>\n                            </tr>\n                        ))}\n                    </Fragment>\n                </tbody>\n            </table>\n        </Fragment>\n    );\n});\n\nexport default WithdrawalLimitsTable;\n","import { RefObject, useState, useEffect } from 'react';\nimport { FormikValues } from 'formik';\nimport clsx from 'clsx';\nimport { useIsMounted } from '@deriv/shared';\nimport { FormatUtils, CurrencyConstants } from '@deriv-com/utils';\nimport { Loading, ThemedScrollbars } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport DemoMessage from '../demo-message';\nimport LoadErrorMessage from '../load-error-message';\nimport AccountLimitsArticle from './account-limits-article';\nimport AccountLimitsContext, { TAccountLimitsContext } from './account-limits-context';\nimport AccountLimitsExtraInfo from './account-limits-extra-info';\nimport AccountLimitsFooter from './account-limits-footer';\nimport AccountLimitsOverlay from './account-limits-overlay';\nimport AccountLimitsTableCell from './account-limits-table-cell';\nimport AccountLimitsTableHeader from './account-limits-table-header';\nimport AccountLimitsTurnoverLimitRow, { TAccountLimitsCollection } from './account-limits-turnover-limit-row';\nimport WithdrawalLimitsTable from './withdrawal-limits-table';\n\ntype TAccountLimits = {\n    footer_ref?: RefObject<HTMLElement>;\n    is_app_settings?: boolean;\n    overlay_ref: HTMLDivElement;\n    setIsOverlayShown?: (is_overlay_shown?: boolean) => void;\n    setIsPopupOverlayShown?: (is_popup_overlay_shown: boolean) => void;\n    should_bypass_scrollbars?: boolean;\n    should_show_article?: boolean;\n};\n\nconst AccountLimits = observer(\n    ({\n        footer_ref,\n        is_app_settings,\n        overlay_ref,\n        setIsOverlayShown: setIsPopupOverlayShown,\n        should_bypass_scrollbars,\n        should_show_article = true,\n    }: TAccountLimits) => {\n        const { localize } = useTranslations();\n        const { client } = useStore();\n        const { account_limits, account_status, currency, getLimits, is_virtual, is_switching } = client;\n        const isMounted = useIsMounted();\n        const [is_loading, setLoading] = useState(true);\n        const [is_overlay_shown, setIsOverlayShown] = useState(false);\n        const { isDesktop } = useDevice();\n\n        const handleGetLimitsResponse = () => {\n            if (isMounted()) setLoading(false);\n        };\n\n        useEffect(() => {\n            if (is_virtual) {\n                setLoading(false);\n            } else {\n                getLimits().then(handleGetLimitsResponse);\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, []);\n\n        useEffect(() => {\n            if (!is_virtual && account_limits && is_loading && Object.keys(account_status).length > 0) {\n                setLoading(false);\n            }\n        }, [account_limits, is_virtual, is_loading, account_status]);\n\n        useEffect(() => {\n            if (typeof setIsPopupOverlayShown === 'function') {\n                setIsPopupOverlayShown(is_overlay_shown);\n            }\n        }, [is_overlay_shown, setIsPopupOverlayShown]);\n\n        const toggleOverlay = () => setIsOverlayShown(!is_overlay_shown);\n\n        if (is_switching || is_loading) {\n            return <Loading is_fullscreen={false} />;\n        }\n\n        if (is_virtual) {\n            return (\n                <div data-testid='dt_account_demo_message_wrapper' className='account__demo-message-wrapper'>\n                    <DemoMessage />\n                </div>\n            );\n        }\n\n        const {\n            api_initial_load_error,\n            open_positions,\n            account_balance,\n            payout,\n            market_specific,\n            num_of_days_limit,\n            remainder,\n            withdrawal_since_inception_monetary,\n        } = account_limits;\n\n        if (api_initial_load_error) {\n            return <LoadErrorMessage error_message={api_initial_load_error} />;\n        }\n\n        const { commodities, forex, indices, synthetic_index } = market_specific ?? {};\n        const forex_ordered = forex?.slice().sort((a: FormikValues, b: FormikValues) => a.name.localeCompare(b.name));\n        const derived_ordered = synthetic_index\n            ?.slice()\n            .sort((a: FormikValues, b: FormikValues) => (a.level > b.level ? 1 : -1));\n\n        const context_value: TAccountLimitsContext = {\n            currency,\n            footer_ref,\n            overlay_ref,\n            toggleOverlay,\n        };\n\n        return (\n            <AccountLimitsContext.Provider value={context_value}>\n                <section className='da-account-limits__wrapper' data-testid='account_limits_data'>\n                    <div\n                        className={clsx('da-account-limits', {\n                            'da-account-limits--app-settings': is_app_settings,\n                        })}\n                    >\n                        {should_show_article && !isDesktop && <AccountLimitsArticle />}\n                        <div className='da-account-limits__table-wrapper'>\n                            <ThemedScrollbars is_bypassed={!!should_bypass_scrollbars || !isDesktop}>\n                                <table className='da-account-limits__table' data-testid='trading_limit_item_table'>\n                                    <thead>\n                                        <tr>\n                                            <AccountLimitsTableHeader>\n                                                <Localize i18n_default_text='Trading limits' />\n                                            </AccountLimitsTableHeader>\n                                            <AccountLimitsTableHeader align='right'>\n                                                <Localize i18n_default_text='Limit' />\n                                            </AccountLimitsTableHeader>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr>\n                                            <AccountLimitsTableCell\n                                                renderExtraInfo={() => (\n                                                    <AccountLimitsExtraInfo\n                                                        message={localize(\n                                                            'Represents the maximum number of outstanding contracts in your portfolio. Each line in your portfolio counts for one open position. Once the maximum is reached, you will not be able to open new positions without closing an existing position first.'\n                                                        )}\n                                                    />\n                                                )}\n                                            >\n                                                <Localize i18n_default_text='*Maximum number of open positions' />\n                                            </AccountLimitsTableCell>\n                                            <AccountLimitsTableCell align='right'>\n                                                {open_positions}\n                                            </AccountLimitsTableCell>\n                                        </tr>\n                                        <tr>\n                                            <AccountLimitsTableCell\n                                                renderExtraInfo={() => (\n                                                    <AccountLimitsExtraInfo\n                                                        message={localize(\n                                                            'Represents the maximum amount of cash that you may hold in your account.  If the maximum is reached, you will be asked to withdraw funds.'\n                                                        )}\n                                                    />\n                                                )}\n                                            >\n                                                <Localize i18n_default_text='*Maximum account cash balance' />\n                                            </AccountLimitsTableCell>\n                                            <AccountLimitsTableCell align='right'>\n                                                {/* null or 0 are expected form BE when max balance limit is not set */}\n                                                {account_balance ? (\n                                                    FormatUtils.formatMoney(account_balance, {\n                                                        currency: currency as CurrencyConstants.Currency,\n                                                    })\n                                                ) : (\n                                                    <Localize i18n_default_text='Not set' />\n                                                )}\n                                            </AccountLimitsTableCell>\n                                        </tr>\n                                        <tr>\n                                            <AccountLimitsTableCell\n                                                renderExtraInfo={() => (\n                                                    <AccountLimitsExtraInfo\n                                                        message={localize(\n                                                            'Represents the maximum aggregate payouts on outstanding contracts in your portfolio. If the maximum is attained, you may not purchase additional contracts without first closing out existing positions.'\n                                                        )}\n                                                    />\n                                                )}\n                                            >\n                                                <Localize i18n_default_text='Maximum aggregate payouts on open positions' />\n                                            </AccountLimitsTableCell>\n                                            <AccountLimitsTableCell align='right'>\n                                                {FormatUtils.formatMoney(payout as number, {\n                                                    currency: currency as CurrencyConstants.Currency,\n                                                })}\n                                            </AccountLimitsTableCell>\n                                        </tr>\n                                        <tr>\n                                            <AccountLimitsTableCell is_hint>\n                                                <Localize i18n_default_text='*Any limits in your Self-exclusion settings will override these default limits.' />\n                                            </AccountLimitsTableCell>\n                                            <AccountLimitsTableCell />\n                                        </tr>\n                                    </tbody>\n                                </table>\n                                <table className='da-account-limits__table' data-testid='trading_daily_turnover_table'>\n                                    <thead>\n                                        <tr>\n                                            <AccountLimitsTableHeader\n                                                renderExtraInfo={() => (\n                                                    <AccountLimitsExtraInfo\n                                                        message={localize(\n                                                            'Represents the maximum volume of contracts that you may purchase in any given trading day.'\n                                                        )}\n                                                    />\n                                                )}\n                                            >\n                                                <Localize i18n_default_text='Maximum daily turnover' />\n                                            </AccountLimitsTableHeader>\n                                            <AccountLimitsTableHeader align='right'>\n                                                <Localize i18n_default_text='Limit' />\n                                            </AccountLimitsTableHeader>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <AccountLimitsTurnoverLimitRow\n                                            collection={commodities as TAccountLimitsCollection[]}\n                                        />\n                                        <AccountLimitsTurnoverLimitRow\n                                            collection={forex_ordered as TAccountLimitsCollection[]}\n                                        />\n                                        <AccountLimitsTurnoverLimitRow\n                                            collection={indices as TAccountLimitsCollection[]}\n                                        />\n                                        <AccountLimitsTurnoverLimitRow\n                                            collection={derived_ordered as TAccountLimitsCollection[]}\n                                        />\n                                    </tbody>\n                                </table>\n                                {/* We only show \"Withdrawal Limits\" on account-wide settings pages. */}\n\n                                {!is_app_settings && <WithdrawalLimitsTable />}\n                            </ThemedScrollbars>\n                        </div>\n                        {should_show_article && isDesktop && <AccountLimitsArticle />}\n                        {footer_ref && <AccountLimitsFooter />}\n                        {is_overlay_shown && overlay_ref && <AccountLimitsOverlay />}\n                    </div>\n                </section>\n            </AccountLimitsContext.Provider>\n        );\n    }\n);\n\nexport default AccountLimits;\n","import AccountLimits from './account-limits';\n\nexport default AccountLimits;\n"],"names":["_ref","title","descriptions","onClickLearnMore","className","has_descriptions","length","has_single_description","_jsxs","clsx","children","_jsx","Text","as","color","line_height","size","weight","Fragment","map","description","idx","onClick","Localize","i18n_default_text","Icon","icon","AccountLimitsArticle","localize","useTranslations","AccountArticle","createContext","currency","overlay_ref","document","createElement","message","should_display_in_info_tooltip","props","isDesktop","useDevice","Popover","data_testid","alignment","is_bubble_hover_enabled","zIndex","AccountLimitsFooterPortal","footer_ref","toggleOverlay","useContext","AccountLimitsContext","createPortal","current","AccountLimitsOverlay","Popup","Overlay","key","component","components","StaticUrl","href","done_text","align","is_hint","level","renderExtraInfo","text_size","collection","_ref2","name","turnover_limit","AccountLimitsTableCell","FormatUtils","formatMoney","observer","client","useStore","withdrawal_limit_details","useGetWithdrawalLimitsDetails","AccountLimitsTableHeader","withdrawal_limit_detail","index","AccountLimitsExtraInfo","withdrawal_info_message","withdrawal_title","withdrawal_amount","AccountLimits","is_app_settings","setIsOverlayShown","setIsPopupOverlayShown","should_bypass_scrollbars","should_show_article","account_limits","account_status","getLimits","is_virtual","is_switching","isMounted","useIsMounted","is_loading","setLoading","useState","is_overlay_shown","handleGetLimitsResponse","useEffect","then","Object","keys","Loading","is_fullscreen","DemoMessage","api_initial_load_error","open_positions","account_balance","payout","market_specific","num_of_days_limit","remainder","withdrawal_since_inception_monetary","LoadErrorMessage","error_message","commodities","forex","indices","synthetic_index","forex_ordered","slice","sort","a","b","localeCompare","derived_ordered","context_value","Provider","value","ThemedScrollbars","is_bypassed","AccountLimitsTurnoverLimitRow","WithdrawalLimitsTable","AccountLimitsFooter"],"sourceRoot":""}