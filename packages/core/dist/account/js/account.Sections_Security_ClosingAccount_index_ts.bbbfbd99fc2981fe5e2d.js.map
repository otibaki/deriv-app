{"version":3,"file":"account/js/account.Sections_Security_ClosingAccount_index_ts.bbbfbd99fc2981fe5e2d.js","mappings":"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","sources":["webpack://@deriv/account/./Sections/Security/ClosingAccount/closing-account-steps.tsx","webpack://@deriv/account/./Constants/closing-account-config.tsx","webpack://@deriv/account/./Sections/Security/ClosingAccount/closing-account-pending-conditions/closing-account-pending-content.tsx","webpack://@deriv/account/./Sections/Security/ClosingAccount/closing-account-pending-conditions/closing-account-pending-wrapper.tsx","webpack://@deriv/account/./Sections/Security/ClosingAccount/closing-account-pending-conditions/closing-account-pending-balance.tsx","webpack://@deriv/account/./Sections/Security/ClosingAccount/closing-account-pending-conditions/closing-account-pending-positions.tsx","webpack://@deriv/account/./Sections/Security/ClosingAccount/closing-account-pending-conditions/closing-account-has-pending-conditions.tsx","webpack://@deriv/account/./Sections/Security/ClosingAccount/closing-account-reason-form.tsx","webpack://@deriv/account/./Sections/Security/ClosingAccount/closing-account-warning-modal.tsx","webpack://@deriv/account/./Sections/Security/ClosingAccount/closing-account-general-error-content.tsx","webpack://@deriv/account/./Sections/Security/ClosingAccount/closing-account-reason.tsx","webpack://@deriv/account/./Sections/Security/ClosingAccount/index.ts","webpack://@deriv/account/./Sections/Security/ClosingAccount/closing-account.tsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv-com/translations';\nimport { Button, StaticUrl, Text } from '@deriv/components';\n\ntype TClosingAccountStepsProps = {\n    redirectToReasons: () => void;\n};\nconst CloseButton = ({ redirectToReasons }: TClosingAccountStepsProps) => (\n    <Button className='closing-account__button--close-account' large onClick={() => redirectToReasons()} primary>\n        <Localize i18n_default_text='Close my account' />\n    </Button>\n);\n\nconst ClosingAccountSteps = observer(({ redirectToReasons }: TClosingAccountStepsProps) => {\n    const { common } = useStore();\n    const { is_from_derivgo } = common;\n\n    return (\n        <div>\n            <div className='closing-account__information'>\n                <Text size='xs' weight='bold' className='closing-account__information--bold' as='p'>\n                    <Localize i18n_default_text='Are you sure?' />\n                </Text>\n            </div>\n            <div className='closing-account__steps'>\n                <Text size='xs' as='p' className='closing-account__title'>\n                    <Localize i18n_default_text='If you close your account:' />\n                </Text>\n                <ul>\n                    <li>\n                        <Localize i18n_default_text=\"You can't trade on Deriv.\" />\n                    </li>\n                    <li>\n                        <Localize i18n_default_text=\"You can't make transactions.\" />\n                    </li>\n                </ul>\n            </div>\n            <div className='closing-account__steps'>\n                <Text size='xs' as='p' line_height='s' className='closing-account__title'>\n                    <Localize i18n_default_text='Before closing your account:' />\n                </Text>\n                <ul>\n                    <li>\n                        <Localize i18n_default_text='Close all your positions.' />\n                    </li>\n                    <li>\n                        <Localize i18n_default_text='Withdraw your funds.' />\n                    </li>\n                </ul>\n            </div>\n            <div className='closing-account__steps'>\n                <Text size='xs' as='p' line_height='s'>\n                    <Localize\n                        i18n_default_text='We shall delete your personal information as soon as our legal obligations are met, as mentioned in the section on Data Retention in our <0>Security and privacy policy</0>'\n                        components={[\n                            <StaticUrl key={0} className='link' href='tnc/security-and-privacy.pdf' is_document />,\n                        ]}\n                    />\n                </Text>\n            </div>\n            {is_from_derivgo ? (\n                <div className='closing-account__buttons-container'>\n                    <CloseButton redirectToReasons={redirectToReasons} />\n                </div>\n            ) : (\n                <div className='closing-account__buttons-container'>\n                    <Link to='/'>\n                        <Button className='closing-account__button--cancel' large secondary>\n                            <Localize i18n_default_text='Cancel' />\n                        </Button>\n                    </Link>\n                    <CloseButton redirectToReasons={redirectToReasons} />\n                </div>\n            )}\n        </div>\n    );\n});\nexport default ClosingAccountSteps;\n","import { Localize } from '@deriv-com/translations';\n\nexport const MAX_ALLOWED_REASONS_FOR_CLOSING_ACCOUNT = 3;\nexport const CHARACTER_LIMIT_FOR_CLOSING_ACCOUNT = 110;\nexport const SET_CHECKBOX_DISABLED = 'SET_CHECKBOX_DISABLED';\nexport const SET_TOTAL_CHECKBOX_CHECKED = 'SET_TOTAL_CHECKBOX_CHECKED';\nexport const SET_REMAINING_CHARACTERS = 'SET_REMAINING_CHARACTERS';\nexport const SET_TOTAL_ACCUMULATED_CHARACTERS = 'SET_TOTAL_ACCUMULATED_CHARACTERS';\n\nexport const getCloseAccountReasonsList = () => [\n    {\n        name: 'financial-priorities',\n        label: <Localize i18n_default_text='I have other financial priorities.' />,\n    },\n    {\n        name: 'stop-trading',\n        label: <Localize i18n_default_text='I want to stop myself from trading.' />,\n    },\n    {\n        name: 'not-interested',\n        label: <Localize i18n_default_text='I’m no longer interested in trading.' />,\n    },\n    {\n        name: 'another-website',\n        label: <Localize i18n_default_text='I prefer another trading website.' />,\n    },\n    {\n        name: 'not-user-friendly',\n        label: <Localize i18n_default_text='The platforms aren’t user-friendly.' />,\n    },\n    {\n        name: 'difficult-transactions',\n        label: <Localize i18n_default_text='Making deposits and withdrawals is difficult.' />,\n    },\n    {\n        name: 'lack-of-features',\n        label: <Localize i18n_default_text='The platforms lack key features or functionality.' />,\n    },\n    {\n        name: 'unsatisfactory-service',\n        label: <Localize i18n_default_text='Customer service was unsatisfactory.' />,\n    },\n    {\n        name: 'other-reasons',\n        label: <Localize i18n_default_text='I’m closing my account for other reasons.' />,\n    },\n];\n","import { ReactNode } from 'react';\nimport { Icon, Text } from '@deriv/components';\n\ntype TClosingAccountPendingContentProps = {\n    currency_icon: string;\n    loginid?: string;\n    title?: ReactNode;\n    value: ReactNode;\n};\n\nconst ClosingAccountPendingContent = ({ currency_icon, loginid, title, value }: TClosingAccountPendingContentProps) => (\n    <div className='closing-account-error__container'>\n        <div className='closing-account-error__account-details'>\n            <Icon icon={currency_icon} size={24} />\n            <div className='closing-account-error__account'>\n                <Text line_height='s' color='prominent' size='xs'>\n                    {title}\n                </Text>\n                <Text color='prominent' size='xxxs' line_height='xs'>\n                    {loginid}\n                </Text>\n            </div>\n        </div>\n        <Text className='closing-account-error__details' color='prominent' size='xs' line_height='s' align='right'>\n            {value}\n        </Text>\n    </div>\n);\n\nexport default ClosingAccountPendingContent;\n","import { PropsWithChildren, ReactNode } from 'react';\nimport { Text } from '@deriv/components';\n\ntype TClosingAccountPendingWrapperProps = {\n    title: JSX.Element;\n    description?: ReactNode;\n};\n\nconst ClosingAccountPendingWrapper = ({\n    children,\n    title,\n    description,\n}: PropsWithChildren<TClosingAccountPendingWrapperProps>) => (\n    <div className='closing-account-error'>\n        <Text as='p' line_height='s' size='xs' weight='bold' color='prominent' className='closing-account-error__title'>\n            {title}\n        </Text>\n        {description && (\n            <Text as='p' size='xxs' className='closing-account-error__description'>\n                {description}\n            </Text>\n        )}\n        <div className='closing-account-error__wrapper'>{children}</div>\n    </div>\n);\n\nexport default ClosingAccountPendingWrapper;\n","import { Money } from '@deriv/components';\nimport { CFD_PLATFORMS, getCFDAccount, getCFDAccountDisplay, getCFDPlatformLabel, getMT5Icon } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv-com/translations';\nimport { CurrencyConstants, FormatUtils } from '@deriv-com/utils';\n\nimport { TCFDPlatform, TDetailsOfDerivXAccount, TDetailsOfMT5Account } from '../../../../Types';\n\nimport ClosingAccountPendingContent from './closing-account-pending-content';\nimport ClosingAccountPendingWrapper from './closing-account-pending-wrapper';\n\ntype TClosingAccountPendingBalanceProps = {\n    platform: TCFDPlatform;\n    account_balance: TDetailsOfMT5Account[] | TDetailsOfDerivXAccount[];\n};\n\ntype TShortcode = Exclude<TDetailsOfMT5Account['landing_company_short'], 'seychelles'>;\n\nconst ClosingAccountPendingBalance = observer(({ platform, account_balance }: TClosingAccountPendingBalanceProps) => {\n    const { traders_hub } = useStore();\n    const { is_eu_user } = traders_hub;\n\n    const is_mt5_platform = platform === CFD_PLATFORMS.MT5;\n\n    return (\n        <ClosingAccountPendingWrapper\n            title={\n                <Localize\n                    i18n_default_text='Please withdraw your funds from the following {{platform_name}} account(s):'\n                    values={{ platform_name: getCFDPlatformLabel(platform) }}\n                />\n            }\n        >\n            {account_balance.map(account => {\n                const getCurrencyIcon = (platform: TCFDPlatform) => {\n                    switch (platform) {\n                        case CFD_PLATFORMS.MT5:\n                            return `IcMt5-${getMT5Icon({\n                                market_type: account.market_type,\n                                is_eu: is_eu_user,\n                                product: account.product,\n                            })}`;\n                        case CFD_PLATFORMS.DXTRADE:\n                            return `IcDxtrade-${getCFDAccount({\n                                market_type: account.market_type,\n                                sub_account_type: account.sub_account_type,\n                                platform,\n                                is_eu: is_eu_user,\n                            })}`;\n                        case CFD_PLATFORMS.CTRADER:\n                            return `IcCtrader`;\n                        default:\n                            return '';\n                    }\n                };\n                return (\n                    <ClosingAccountPendingContent\n                        key={account.login}\n                        currency_icon={getCurrencyIcon(platform)}\n                        loginid={account.display_login}\n                        title={\n                            getCFDAccountDisplay({\n                                market_type: account.market_type,\n                                sub_account_type: account.sub_account_type,\n                                platform,\n                                shortcode: is_mt5_platform ? (account.landing_company_short as TShortcode) : undefined,\n                                is_eu: is_eu_user,\n                                product: account.product,\n                            }) ?? ''\n                        }\n                        value={\n                            account.currency && (\n                                <Money\n                                    currency={account.currency}\n                                    amount={FormatUtils.formatMoney(account.balance ?? 0, {\n                                        currency: account.currency as CurrencyConstants.Currency,\n                                    })}\n                                    should_format={false}\n                                />\n                            )\n                        }\n                    />\n                );\n            })}\n        </ClosingAccountPendingWrapper>\n    );\n});\n\nexport default ClosingAccountPendingBalance;\n","import { CFD_PLATFORMS, getCFDAccount, getCFDAccountDisplay, getCFDPlatformLabel, getMT5Icon } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv-com/translations';\nimport { TCFDPlatform, TDetailsOfDerivXAccount, TDetailsOfMT5Account } from '../../../../Types';\nimport ClosingAccountPendingWrapper from './closing-account-pending-wrapper';\nimport ClosingAccountPendingContent from './closing-account-pending-content';\n\ntype TClosingAccountPendingPositionsProps = {\n    platform: TCFDPlatform;\n    open_positions: Array<TDetailsOfMT5Account | TDetailsOfDerivXAccount>; //ctrader\n};\n\ntype TShortcode = Exclude<TDetailsOfMT5Account['landing_company_short'], 'seychelles'>;\n\nconst ClosingAccountPendingPositions = observer(\n    ({ platform, open_positions }: TClosingAccountPendingPositionsProps) => {\n        const { traders_hub } = useStore();\n        const { is_eu_user } = traders_hub;\n\n        const is_mt5_platform = platform === CFD_PLATFORMS.MT5;\n\n        return (\n            <ClosingAccountPendingWrapper\n                title={\n                    <Localize\n                        i18n_default_text='Please close your positions in the following {{platform_name}} account(s):'\n                        values={{ platform_name: getCFDPlatformLabel(platform) }}\n                    />\n                }\n            >\n                {open_positions.map(account => {\n                    const getCurrencyIcon = (platform: TCFDPlatform) => {\n                        switch (platform) {\n                            case CFD_PLATFORMS.MT5:\n                                return `IcMt5-${getMT5Icon({\n                                    market_type: account.market_type,\n                                    is_eu: is_eu_user,\n                                    product: account.product,\n                                })}`;\n                            case CFD_PLATFORMS.DXTRADE:\n                                return `IcDxtrade-${getCFDAccount({\n                                    market_type: account.market_type,\n                                    sub_account_type: account.sub_account_type,\n                                    platform,\n                                    is_eu: is_eu_user,\n                                })}`;\n                            case CFD_PLATFORMS.CTRADER:\n                                return `IcCtrader`;\n                            default:\n                                return '';\n                        }\n                    };\n                    return (\n                        <ClosingAccountPendingContent\n                            key={account.login}\n                            currency_icon={getCurrencyIcon(platform)}\n                            loginid={account.display_login}\n                            title={\n                                getCFDAccountDisplay({\n                                    market_type: account.market_type,\n                                    sub_account_type: account.sub_account_type,\n                                    platform,\n                                    shortcode: is_mt5_platform\n                                        ? (account.landing_company_short as TShortcode)\n                                        : undefined,\n                                    is_eu: is_eu_user,\n                                    product: account.product,\n                                }) ?? ''\n                            }\n                            value={\n                                <Localize\n                                    i18n_default_text='{{number_of_positions}} position(s)'\n                                    values={{ number_of_positions: account.positions }}\n                                />\n                            }\n                        />\n                    );\n                })}\n            </ClosingAccountPendingWrapper>\n        );\n    }\n);\n\nexport default ClosingAccountPendingPositions;\n","import { Fragment } from 'react';\nimport { DetailsOfEachMT5Loginid } from '@deriv/api-types';\nimport { Button, Money, ThemedScrollbars } from '@deriv/components';\nimport { CFD_PLATFORMS } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv-com/translations';\nimport { FormatUtils, CurrencyConstants } from '@deriv-com/utils';\nimport {\n    TAccounts,\n    TDetailsOfDerivAccount,\n    TDetailsOfDerivXAccount,\n    TDetailsOfMT5Account,\n    TDetailsOfCtraderAccount,\n} from '../../../../Types';\nimport ClosingAccountPendingContent from './closing-account-pending-content';\nimport ClosingAccountPendingWrapper from './closing-account-pending-wrapper';\nimport ClosingAccountPendingBalance from './closing-account-pending-balance';\nimport ClosingAccountPendingPositions from './closing-account-pending-positions';\n\ntype TDetails = {\n    pending_withdrawals?: Record<string, number>;\n    open_positions?: Record<string, number>;\n    balance?: Record<string, { balance: number; currency: string }>;\n};\n\ntype TClosingAccountHasPendingConditionsProps = {\n    details: TDetails | null;\n    onConfirm: () => void;\n};\n\nconst getDerivAccount = (client_accounts: TAccounts[], login_id: string) =>\n    client_accounts.find(client_account => client_account.loginid === login_id);\n\nconst getCurrentMT5Account = (mt5_login_list: DetailsOfEachMT5Loginid[], login_id: string) =>\n    mt5_login_list.find(account_obj => account_obj.login === login_id);\n\nconst getCurrentDxTradeOrCtraderAccount = (\n    accounts_list: Array<TDetailsOfDerivXAccount | TDetailsOfCtraderAccount>,\n    login_id: string\n) => accounts_list.find(account_obj => account_obj.account_id === login_id);\n\nconst ClosingAccountHasPendingConditions = observer(\n    ({ details, onConfirm }: TClosingAccountHasPendingConditionsProps) => {\n        const { client } = useStore();\n        const { dxtrade_accounts_list, mt5_login_list, account_list, ctrader_accounts_list } = client;\n\n        let deriv_open_positions: TDetailsOfDerivAccount[] = [];\n        let deriv_balance: TDetailsOfDerivAccount[] = [];\n        let account_pending_withdrawals: TDetailsOfDerivAccount[] = [];\n\n        let mt5_open_positions: TDetailsOfMT5Account[] = [];\n        let mt5_balance: TDetailsOfMT5Account[] = [];\n\n        let dxtrade_open_positions: TDetailsOfDerivXAccount[] = [];\n        let dxtrade_balance: TDetailsOfDerivXAccount[] = [];\n\n        let ctrader_open_positions: TDetailsOfCtraderAccount[] = [];\n        let ctrader_balance: TDetailsOfCtraderAccount[] = [];\n\n        if (details?.pending_withdrawals) {\n            Object.keys(details.pending_withdrawals).forEach(login_id => {\n                const info = {\n                    withdrawals: details.pending_withdrawals?.[login_id],\n                };\n                const deriv_account = getDerivAccount(account_list, login_id);\n                if (deriv_account) {\n                    account_pending_withdrawals = [...account_pending_withdrawals, { ...deriv_account, ...info }];\n                }\n            });\n        }\n\n        if (details?.open_positions) {\n            Object.keys(details.open_positions).forEach(login_id => {\n                const info = {\n                    positions: details.open_positions?.[login_id],\n                };\n                const deriv_account = getDerivAccount(account_list, login_id);\n                if (deriv_account) {\n                    deriv_open_positions = [...deriv_open_positions, { ...deriv_account, ...info }];\n                } else {\n                    const mt5_account = getCurrentMT5Account(mt5_login_list, login_id);\n                    if (mt5_account) {\n                        mt5_open_positions = [...mt5_open_positions, { ...mt5_account, ...info }];\n                    }\n\n                    const dxtrade_account = getCurrentDxTradeOrCtraderAccount(dxtrade_accounts_list, login_id);\n                    if (dxtrade_account) {\n                        dxtrade_open_positions = [...dxtrade_open_positions, { ...dxtrade_account, ...info }];\n                    }\n\n                    const ctrader_account = getCurrentDxTradeOrCtraderAccount(ctrader_accounts_list, login_id);\n                    if (ctrader_account) {\n                        ctrader_open_positions = [...ctrader_open_positions, { ...ctrader_account, ...info }];\n                    }\n                }\n            });\n        }\n\n        if (details?.balance) {\n            Object.keys(details.balance).forEach(login_id => {\n                const info = {\n                    balance: details.balance?.[login_id].balance,\n                    currency: details.balance?.[login_id].currency,\n                };\n                const deriv_account = getDerivAccount(account_list, login_id);\n                if (deriv_account) {\n                    deriv_balance = [...deriv_balance, { ...deriv_account, ...info }];\n                } else {\n                    const mt5_account = getCurrentMT5Account(mt5_login_list, login_id);\n                    if (mt5_account) {\n                        mt5_balance = [...mt5_balance, { ...mt5_account, ...info }];\n                    }\n\n                    const dxtrade_account = getCurrentDxTradeOrCtraderAccount(dxtrade_accounts_list, login_id);\n                    if (dxtrade_account) {\n                        dxtrade_balance = [...dxtrade_balance, { ...dxtrade_account, ...info }];\n                    }\n\n                    const ctrader_account = getCurrentDxTradeOrCtraderAccount(ctrader_accounts_list, login_id);\n                    if (ctrader_account) {\n                        ctrader_balance = [...ctrader_balance, { ...ctrader_account, ...info }];\n                    }\n                }\n            });\n        }\n\n        return (\n            <Fragment>\n                <ThemedScrollbars autohide={false} width='43rem'>\n                    {!!deriv_open_positions.length && (\n                        <ClosingAccountPendingWrapper\n                            title={\n                                <Localize i18n_default_text='Please close your positions in the following Deriv account(s):' />\n                            }\n                        >\n                            {deriv_open_positions.map(account => (\n                                <ClosingAccountPendingContent\n                                    key={account.loginid}\n                                    currency_icon={`IcCurrency-${account.icon}`}\n                                    loginid={account.loginid}\n                                    title={account.title}\n                                    value={\n                                        <Localize\n                                            i18n_default_text='{{number_of_positions}} position(s)'\n                                            values={{ number_of_positions: account.positions }}\n                                        />\n                                    }\n                                />\n                            ))}\n                        </ClosingAccountPendingWrapper>\n                    )}\n                    {!!deriv_balance.length && (\n                        <ClosingAccountPendingWrapper\n                            title={\n                                <Localize i18n_default_text='Please withdraw your funds from the following Deriv account(s):' />\n                            }\n                        >\n                            {deriv_balance.map(account => (\n                                <ClosingAccountPendingContent\n                                    key={account.loginid}\n                                    currency_icon={`IcCurrency-${account.icon}`}\n                                    loginid={account.loginid}\n                                    title={account.title}\n                                    value={\n                                        account.currency && (\n                                            <Money\n                                                currency={account.currency}\n                                                amount={FormatUtils.formatMoney(account.balance ?? 0, {\n                                                    currency: account.currency as CurrencyConstants.Currency,\n                                                })}\n                                                should_format={false}\n                                            />\n                                        )\n                                    }\n                                />\n                            ))}\n                        </ClosingAccountPendingWrapper>\n                    )}\n                    {!!mt5_open_positions.length && (\n                        <ClosingAccountPendingPositions\n                            platform={CFD_PLATFORMS.MT5}\n                            open_positions={mt5_open_positions}\n                        />\n                    )}\n\n                    {!!mt5_balance.length && (\n                        <ClosingAccountPendingBalance platform={CFD_PLATFORMS.MT5} account_balance={mt5_balance} />\n                    )}\n                    {!!dxtrade_open_positions.length && (\n                        <ClosingAccountPendingPositions\n                            platform={CFD_PLATFORMS.DXTRADE}\n                            open_positions={dxtrade_open_positions}\n                        />\n                    )}\n                    {!!dxtrade_balance.length && (\n                        <ClosingAccountPendingBalance\n                            platform={CFD_PLATFORMS.DXTRADE}\n                            account_balance={dxtrade_balance}\n                        />\n                    )}\n                    {!!ctrader_open_positions.length && (\n                        <ClosingAccountPendingPositions\n                            platform={CFD_PLATFORMS.CTRADER}\n                            open_positions={ctrader_open_positions}\n                        />\n                    )}\n                    {!!ctrader_balance.length && (\n                        <ClosingAccountPendingBalance\n                            platform={CFD_PLATFORMS.CTRADER}\n                            account_balance={ctrader_balance}\n                        />\n                    )}\n                    {!!account_pending_withdrawals.length && (\n                        <ClosingAccountPendingWrapper\n                            title={<Localize i18n_default_text='Pending withdrawal request:' />}\n                            description={\n                                <Localize\n                                    i18n_default_text='We are still processing your withdrawal request.<0 />Please wait for the transaction to be completed before deactivating your account.'\n                                    components={[<br key={0} />]}\n                                />\n                            }\n                        >\n                            {account_pending_withdrawals.map(account => (\n                                <ClosingAccountPendingContent\n                                    key={account.loginid}\n                                    currency_icon={`IcCurrency-${account.icon}`}\n                                    loginid={account.loginid}\n                                    title={account.title}\n                                    value={\n                                        <Localize\n                                            i18n_default_text='{{pending_withdrawals}} pending withdrawal(s)'\n                                            values={{ pending_withdrawals: account.withdrawals }}\n                                        />\n                                    }\n                                />\n                            ))}\n                        </ClosingAccountPendingWrapper>\n                    )}\n                </ThemedScrollbars>\n                <div>\n                    <Button className='closing-account-error__button' primary onClick={onConfirm}>\n                        <Localize i18n_default_text='OK' />\n                    </Button>\n                </div>\n            </Fragment>\n        );\n    }\n);\n\nexport default ClosingAccountHasPendingConditions;\n","import { useReducer, useEffect, ChangeEvent, ClipboardEvent } from 'react';\nimport { Field, Form, Formik, FormikErrors, FieldProps, FormikValues } from 'formik';\nimport { Checkbox, FormSubmitButton, Input, Text } from '@deriv/components';\nimport { useTranslations, Localize } from '@deriv-com/translations';\nimport { TClosingAccountFormValues } from '../../../Types';\nimport {\n    CHARACTER_LIMIT_FOR_CLOSING_ACCOUNT,\n    MAX_ALLOWED_REASONS_FOR_CLOSING_ACCOUNT,\n    SET_CHECKBOX_DISABLED,\n    SET_REMAINING_CHARACTERS,\n    SET_TOTAL_ACCUMULATED_CHARACTERS,\n    SET_TOTAL_CHECKBOX_CHECKED,\n    getCloseAccountReasonsList,\n} from '../../../Constants/closing-account-config';\n\ntype TClosingAccountReasonFormProps = {\n    onBackClick: () => void;\n    onConfirmClick: (reason: string) => void;\n};\nconst initial_form_values: TClosingAccountFormValues = {\n    'financial-priorities': false,\n    'stop-trading': false,\n    'not-interested': false,\n    'another-website': false,\n    'not-user-friendly': false,\n    'difficult-transactions': false,\n    'lack-of-features': false,\n    'unsatisfactory-service': false,\n    'other-reasons': false,\n    other_trading_platforms: '',\n    do_to_improve: '',\n};\n\ntype TFormError = FormikErrors<TClosingAccountFormValues> & {\n    empty_reason?: string;\n    characters_limits?: string;\n};\n\ntype TCustomState = {\n    is_checkbox_disabled: boolean;\n    total_checkbox_checked: number;\n    remaining_characters: number;\n    total_accumulated_characters: number;\n};\ntype TAction =\n    | { type: 'SET_CHECKBOX_DISABLED'; payload: boolean }\n    | { type: 'SET_TOTAL_CHECKBOX_CHECKED'; payload: number }\n    | { type: 'SET_REMAINING_CHARACTERS'; payload: number }\n    | { type: 'SET_TOTAL_ACCUMULATED_CHARACTERS'; payload: number };\n\nconst initial_state = {\n    is_checkbox_disabled: false,\n    total_checkbox_checked: 0,\n    remaining_characters: CHARACTER_LIMIT_FOR_CLOSING_ACCOUNT,\n    total_accumulated_characters: 0,\n};\n\nconst reducer = (state: TCustomState, action: TAction) => {\n    switch (action.type) {\n        case SET_CHECKBOX_DISABLED:\n            return { ...state, is_checkbox_disabled: action.payload };\n        case SET_TOTAL_CHECKBOX_CHECKED:\n            return { ...state, total_checkbox_checked: action.payload };\n        case SET_REMAINING_CHARACTERS:\n            return { ...state, remaining_characters: action.payload };\n        case SET_TOTAL_ACCUMULATED_CHARACTERS:\n            return { ...state, total_accumulated_characters: action.payload };\n        default:\n            return state;\n    }\n};\n\nconst ClosingAccountReasonForm = ({ onBackClick, onConfirmClick }: TClosingAccountReasonFormProps) => {\n    const [state, dispatch] = useReducer(reducer, initial_state);\n    const { localize } = useTranslations();\n\n    const { is_checkbox_disabled, total_checkbox_checked, remaining_characters, total_accumulated_characters } = state;\n\n    useEffect(() => {\n        if (total_checkbox_checked === MAX_ALLOWED_REASONS_FOR_CLOSING_ACCOUNT) {\n            dispatch({ type: SET_CHECKBOX_DISABLED, payload: true });\n        } else if (is_checkbox_disabled) dispatch({ type: SET_CHECKBOX_DISABLED, payload: false });\n    }, [total_checkbox_checked, is_checkbox_disabled]);\n\n    const validateFields = (values: TClosingAccountFormValues) => {\n        const error: TFormError = {};\n        const selected_reason_count = selectedReasonsForCloseAccount(values).length;\n        const text_inputs_length = (values.other_trading_platforms + values.do_to_improve).length;\n        let remaining_chars = CHARACTER_LIMIT_FOR_CLOSING_ACCOUNT - text_inputs_length;\n\n        if (selected_reason_count) {\n            const final_value = formatReasonsForCloseAccount(values);\n            remaining_chars = remaining_chars >= 0 ? remaining_chars : 0;\n\n            if (!/^[a-zA-Z0-9.,'\\-\\s]*$/.test(final_value)) {\n                error.characters_limits = localize(\"Must be numbers, letters, and special characters . , ' -\");\n            }\n        } else {\n            error.empty_reason = localize('Please select at least one reason');\n        }\n\n        dispatch({ type: SET_TOTAL_ACCUMULATED_CHARACTERS, payload: text_inputs_length });\n        dispatch({ type: SET_REMAINING_CHARACTERS, payload: remaining_chars });\n\n        return error;\n    };\n\n    const handleSubmitForm = (values: TClosingAccountFormValues) => {\n        const final_reason = formatReasonsForCloseAccount(values);\n\n        onConfirmClick(final_reason);\n    };\n\n    const handleChangeCheckbox = (\n        values: FormikValues,\n        name: string,\n        setFieldValue: (name: string, values: string | boolean) => void\n    ) => {\n        if (!values[name]) {\n            dispatch({ type: SET_TOTAL_CHECKBOX_CHECKED, payload: total_checkbox_checked + 1 });\n\n            setFieldValue(name, !values[name]);\n        } else {\n            dispatch({ type: SET_TOTAL_CHECKBOX_CHECKED, payload: total_checkbox_checked - 1 });\n\n            setFieldValue(name, !values[name]);\n        }\n    };\n\n    const handleInputChange = (\n        event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n        old_value: string,\n        onChange: (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void\n    ) => {\n        const value = event.target.value;\n        const is_delete_action = old_value.length > value.length;\n\n        if (\n            (remaining_characters <= 0 || total_accumulated_characters >= CHARACTER_LIMIT_FOR_CLOSING_ACCOUNT) &&\n            !is_delete_action\n        ) {\n            event.preventDefault();\n        } else {\n            onChange(event);\n        }\n    };\n\n    const handleInputPaste = async (e: ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>): Promise<void> => {\n        const clipboardData = e.clipboardData.getData('text') || (await navigator.clipboard.readText());\n\n        if (remaining_characters <= 0 || clipboardData.length > remaining_characters) {\n            e.preventDefault();\n        }\n    };\n\n    const formatReasonsForCloseAccount = (values: TClosingAccountFormValues) => {\n        let selected_reasons = selectedReasonsForCloseAccount(values)\n            .map(val => val[0])\n            .toString();\n        const is_other_trading_platform__has_value = !!values.other_trading_platforms.length;\n        const is_to_do_improve_has_value = !!values.do_to_improve.length;\n        if (is_other_trading_platform__has_value) {\n            selected_reasons = `${selected_reasons}, ${values.other_trading_platforms}`;\n        }\n        if (is_to_do_improve_has_value) {\n            selected_reasons = `${selected_reasons}, ${values.do_to_improve}`;\n        }\n\n        return selected_reasons.replace(/(\\r\\n|\\n|\\r)/gm, ' ');\n    };\n\n    const selectedReasonsForCloseAccount = (values: TClosingAccountFormValues) =>\n        Object.entries(values).filter(\n            ([key, value]) => !['other_trading_platforms', 'do_to_improve'].includes(key) && value\n        );\n\n    return (\n        <Formik initialValues={initial_form_values} validate={validateFields} onSubmit={handleSubmitForm}>\n            {({ values, setFieldValue, errors, handleChange, dirty, isValid }) => (\n                <Form>\n                    {getCloseAccountReasonsList().map(reason => (\n                        <Field name={reason.name} key={reason.name}>\n                            {({ field }: FieldProps) => (\n                                <Checkbox\n                                    {...field}\n                                    disabled={\n                                        is_checkbox_disabled && !values[field.name as keyof TClosingAccountFormValues]\n                                    }\n                                    className='closing-account-reasons__checkbox'\n                                    label={reason.label}\n                                    onChange={() => {\n                                        handleChangeCheckbox(values, field.name, setFieldValue);\n                                    }}\n                                />\n                            )}\n                        </Field>\n                    ))}\n                    <Field name='other_trading_platforms'>\n                        {({ field }: FieldProps) => (\n                            <Input\n                                {...field}\n                                className='closing-account-reasons__input'\n                                data-lpignore='true'\n                                autoComplete='off'\n                                type='textarea'\n                                placeholder={localize(\n                                    'If you don’t mind sharing, which other trading platforms do you use?'\n                                )}\n                                name='other_trading_platforms'\n                                value={values.other_trading_platforms}\n                                max_characters={CHARACTER_LIMIT_FOR_CLOSING_ACCOUNT}\n                                onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                    handleInputChange(e, values.other_trading_platforms, handleChange)\n                                }\n                                onPaste={handleInputPaste}\n                            />\n                        )}\n                    </Field>\n                    <Field name='do_to_improve'>\n                        {({ field }: FieldProps) => (\n                            <Input\n                                {...field}\n                                className='closing-account-reasons__input'\n                                data-lpignore='true'\n                                autoComplete='off'\n                                type='textarea'\n                                placeholder={localize('What could we do to improve?')}\n                                name='do_to_improve'\n                                value={values.do_to_improve}\n                                max_characters={CHARACTER_LIMIT_FOR_CLOSING_ACCOUNT}\n                                onChange={(e: ChangeEvent<HTMLInputElement>) =>\n                                    handleInputChange(e, values.do_to_improve, handleChange)\n                                }\n                                onPaste={handleInputPaste}\n                            />\n                        )}\n                    </Field>\n                    <div className='closing-account-reasons__footer'>\n                        <div className='closing-account-reasons__hint-wrapper'>\n                            <Text size='xxs' as='p' color='less-prominent' className='closing-account-reasons__hint'>\n                                <Localize\n                                    i18n_default_text='Remaining characters: {{remaining_characters}}'\n                                    values={{ remaining_characters }}\n                                />\n                            </Text>\n                            {!isValid &&\n                                Object.entries(errors).map(([key, value]) => (\n                                    <Text\n                                        as='p'\n                                        weight='bold'\n                                        size='xs'\n                                        color='loss-danger'\n                                        className='closing-account-reasons__error'\n                                        key={key}\n                                    >\n                                        {value}\n                                    </Text>\n                                ))}\n                        </div>\n                        <FormSubmitButton\n                            is_disabled={!dirty || !isValid}\n                            label={localize('Continue')}\n                            has_cancel\n                            cancel_label={localize('Back')}\n                            onCancel={onBackClick}\n                        />\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default ClosingAccountReasonForm;\n","import { Localize, useTranslations } from '@deriv-com/translations';\nimport { FormSubmitButton, Icon, Text, Modal } from '@deriv/components';\n\ntype TClosingAccountWarningModalProps = {\n    show_warning_modal: boolean;\n    startDeactivating: () => void;\n    closeWarningModal: () => void;\n};\n\nconst ClosingAccountWarningModal = ({\n    show_warning_modal,\n    startDeactivating,\n    closeWarningModal,\n}: TClosingAccountWarningModalProps) => {\n    const { localize } = useTranslations();\n\n    return (\n        <Modal className='closing-account-reasons' is_open={show_warning_modal} toggleModal={closeWarningModal}>\n            <div className='account-closure-warning-modal'>\n                <Icon icon='IcRedWarning' size={96} />\n                <Text size='xs' weight='bold' className='account-closure-warning-modal__warning-message'>\n                    <Localize i18n_default_text='Close your account?' />\n                </Text>\n                <div className='account-closure-warning-modal__content-wrapper'>\n                    <Text as='p' align='center' className='account-closure-warning-modal__content'>\n                        <Localize i18n_default_text='Closing your account will automatically log you out. We shall delete your personal information as soon as our legal obligations are met.' />\n                    </Text>\n                </div>\n                <FormSubmitButton\n                    label={localize('Close account')}\n                    className='account-closure-warning-modal__close-account-button'\n                    has_cancel\n                    cancel_label={localize('Go Back')}\n                    onClick={startDeactivating}\n                    onCancel={closeWarningModal}\n                />\n            </div>\n        </Modal>\n    );\n};\nexport default ClosingAccountWarningModal;\n","import { Fragment } from 'react';\nimport { Button, Text } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\n\ntype TClosingAccountGeneralErrorContentProps = {\n    message: string;\n    onClick: () => void;\n};\n\nconst ClosingAccountGeneralErrorContent = ({ message, onClick }: TClosingAccountGeneralErrorContentProps) => (\n    <Fragment>\n        <div className='closing-account-error__container closing-account-error__container-message'>\n            <div className='closing-account-error__details closing-account-error__details-message'>\n                <Text size='xs'>{message}</Text>\n            </div>\n        </div>\n        <div>\n            <Button className='closing-account-error__button' primary onClick={onClick}>\n                <Localize i18n_default_text='OK' />\n            </Button>\n        </div>\n    </Fragment>\n);\n\nexport default ClosingAccountGeneralErrorContent;\n","import { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Loading, Modal, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { useCloseDerivAccount } from '@deriv/api';\nimport { Localize } from '@deriv-com/translations';\nimport { MAX_ALLOWED_REASONS_FOR_CLOSING_ACCOUNT } from '../../../Constants/closing-account-config';\nimport ClosingAccountHasPendingConditions from './closing-account-pending-conditions/closing-account-has-pending-conditions';\nimport ClosingAccountReasonForm from './closing-account-reason-form';\nimport ClosingAccountWarningModal from './closing-account-warning-modal';\nimport ClosingAccountGeneralErrorContent from './closing-account-general-error-content';\n\ntype TClosingAccountReasonProps = {\n    redirectToSteps: () => void;\n};\n\nconst ClosingAccountReason = ({ redirectToSteps }: TClosingAccountReasonProps) => {\n    const { mutate, error, isSuccess, isLoading } = useCloseDerivAccount();\n\n    const [reasons_to_close_account, setReasonsToCloseAccount] = useState('');\n    const [error_info, setErrorInfo] = useState('');\n    const [show_warning_modal, setShowWarningModal] = useState(false);\n\n    useEffect(() => {\n        if (error) {\n            if (typeof error === 'object' && 'code' in error) {\n                const { code } = error;\n                const getModalToRender = () => {\n                    if (code === 'AccountHasPendingConditions') {\n                        return 'account_has_pending_conditions_modal';\n                    }\n                    if (code === 'MT5AccountInaccessible') {\n                        return 'inaccessible_modal';\n                    }\n                    return 'error_modal';\n                };\n\n                setErrorInfo(getModalToRender());\n            }\n        }\n    }, [error]);\n\n    const getErrorModalTitle = () => {\n        if (!error_info) return '';\n        switch (error_info) {\n            case 'error_modal':\n                return <Localize i18n_default_text='An error occurred' />;\n            case 'inaccessible_modal':\n                return <Localize i18n_default_text='Inaccessible MT5 account(s)' />;\n            default:\n                return <Localize i18n_default_text='Action required' />;\n        }\n    };\n\n    const getErrorModalContent = () => {\n        switch (error_info) {\n            case 'account_has_pending_conditions_modal':\n                return (\n                    <ClosingAccountHasPendingConditions\n                        details={\n                            error &&\n                            typeof error === 'object' &&\n                            'details' in error &&\n                            typeof error.details === 'object'\n                                ? error.details\n                                : {}\n                        }\n                        onConfirm={redirectToSteps}\n                    />\n                );\n            case 'inaccessible_modal':\n                return (\n                    <ClosingAccountGeneralErrorContent\n                        message={\n                            error &&\n                            typeof error === 'object' &&\n                            'message' in error &&\n                            typeof error.message === 'string'\n                                ? error.message\n                                : ''\n                        }\n                        onClick={closeErrorModal}\n                    />\n                );\n            default:\n                return null;\n        }\n    };\n\n    const onConfirm = (final_reason: string) => {\n        setShowWarningModal(true);\n        setReasonsToCloseAccount(final_reason);\n    };\n\n    const closeErrorModal = () => {\n        setErrorInfo('');\n    };\n    const closeWarningModal = () => {\n        setShowWarningModal(false);\n    };\n\n    const startDeactivating = async () => {\n        closeWarningModal();\n        mutate({ payload: { reason: reasons_to_close_account } });\n    };\n\n    if (isSuccess) return <Redirect to={routes.account_closed} />;\n\n    if (isLoading) return <Loading is_fullscreen={false} />;\n\n    return (\n        <div className='closing-account-reasons'>\n            <Text weight='bold' size='xs' className='closing-account-reasons__title' as='p'>\n                <Localize\n                    i18n_default_text='Please tell us why you’re leaving. (Select up to {{ allowed_reasons }} reasons.)'\n                    values={{ allowed_reasons: MAX_ALLOWED_REASONS_FOR_CLOSING_ACCOUNT }}\n                />\n            </Text>\n            <ClosingAccountReasonForm onBackClick={redirectToSteps} onConfirmClick={onConfirm} />\n\n            {show_warning_modal && (\n                <ClosingAccountWarningModal\n                    show_warning_modal={show_warning_modal}\n                    closeWarningModal={closeWarningModal}\n                    startDeactivating={startDeactivating}\n                />\n            )}\n            <Modal\n                className='closing-account-reasons'\n                is_open={!!error_info}\n                toggleModal={closeErrorModal}\n                title={getErrorModalTitle()}\n            >\n                {getErrorModalContent()}\n            </Modal>\n        </div>\n    );\n};\n\nexport default ClosingAccountReason;\n","import ClosingAccount from './closing-account';\n\nexport default ClosingAccount;\n","import { useState } from 'react';\nimport ClosingAccountSteps from './closing-account-steps';\nimport ClosingAccountReason from './closing-account-reason';\n\nconst ClosingAccount = () => {\n    const [render_close_account_reason, setRenderCloseAccountReason] = useState(false);\n    const redirectToReasons = () => {\n        setRenderCloseAccountReason(true);\n    };\n    const redirectToSteps = () => {\n        setRenderCloseAccountReason(false);\n    };\n\n    return (\n        <div className='closing-account' data-testid='dt_closing_account'>\n            {render_close_account_reason ? (\n                <ClosingAccountReason redirectToSteps={redirectToSteps} />\n            ) : (\n                <ClosingAccountSteps redirectToReasons={redirectToReasons} />\n            )}\n        </div>\n    );\n};\n\nexport default ClosingAccount;\n"],"names":["CloseButton","_ref","redirectToReasons","_jsx","Button","className","large","onClick","primary","children","Localize","i18n_default_text","observer","_ref2","common","useStore","is_from_derivgo","_jsxs","Text","size","weight","as","line_height","components","StaticUrl","href","is_document","Link","to","secondary","CHARACTER_LIMIT_FOR_CLOSING_ACCOUNT","SET_CHECKBOX_DISABLED","SET_TOTAL_CHECKBOX_CHECKED","SET_REMAINING_CHARACTERS","SET_TOTAL_ACCUMULATED_CHARACTERS","currency_icon","loginid","title","value","Icon","icon","color","align","description","platform","account_balance","traders_hub","is_eu_user","is_mt5_platform","CFD_PLATFORMS","MT5","ClosingAccountPendingWrapper","values","platform_name","getCFDPlatformLabel","map","account","ClosingAccountPendingContent","getMT5Icon","market_type","is_eu","product","DXTRADE","getCFDAccount","sub_account_type","CTRADER","getCurrencyIcon","display_login","getCFDAccountDisplay","shortcode","landing_company_short","undefined","currency","Money","amount","FormatUtils","formatMoney","balance","should_format","login","open_positions","number_of_positions","positions","getDerivAccount","client_accounts","login_id","find","client_account","getCurrentMT5Account","mt5_login_list","account_obj","getCurrentDxTradeOrCtraderAccount","accounts_list","account_id","details","onConfirm","client","dxtrade_accounts_list","account_list","ctrader_accounts_list","deriv_open_positions","deriv_balance","account_pending_withdrawals","mt5_open_positions","mt5_balance","dxtrade_open_positions","dxtrade_balance","ctrader_open_positions","ctrader_balance","pending_withdrawals","Object","keys","forEach","info","withdrawals","deriv_account","mt5_account","dxtrade_account","ctrader_account","Fragment","ThemedScrollbars","autohide","width","length","ClosingAccountPendingPositions","ClosingAccountPendingBalance","initial_form_values","other_trading_platforms","do_to_improve","initial_state","is_checkbox_disabled","total_checkbox_checked","remaining_characters","total_accumulated_characters","reducer","state","action","type","payload","onBackClick","onConfirmClick","dispatch","useReducer","localize","useTranslations","useEffect","handleInputChange","event","old_value","onChange","target","is_delete_action","preventDefault","handleInputPaste","async","clipboardData","e","getData","navigator","clipboard","readText","formatReasonsForCloseAccount","selected_reasons","selectedReasonsForCloseAccount","val","toString","is_other_trading_platform__has_value","is_to_do_improve_has_value","replace","entries","filter","key","includes","Formik","initialValues","validate","error","selected_reason_count","text_inputs_length","remaining_chars","final_value","test","characters_limits","empty_reason","onSubmit","final_reason","_ref3","setFieldValue","errors","handleChange","dirty","isValid","Form","name","label","reason","Field","_ref4","field","Checkbox","disabled","handleChangeCheckbox","_ref5","Input","autoComplete","placeholder","max_characters","onPaste","_ref6","_ref7","FormSubmitButton","is_disabled","has_cancel","cancel_label","onCancel","show_warning_modal","startDeactivating","closeWarningModal","Modal","is_open","toggleModal","message","redirectToSteps","mutate","isSuccess","isLoading","useCloseDerivAccount","reasons_to_close_account","setReasonsToCloseAccount","useState","error_info","setErrorInfo","setShowWarningModal","code","getModalToRender","closeErrorModal","Redirect","routes","account_closed","Loading","is_fullscreen","allowed_reasons","ClosingAccountReasonForm","ClosingAccountWarningModal","getErrorModalTitle","getErrorModalContent","ClosingAccountHasPendingConditions","ClosingAccountGeneralErrorContent","ClosingAccount","render_close_account_reason","setRenderCloseAccountReason","ClosingAccountReason","ClosingAccountSteps"],"sourceRoot":""}