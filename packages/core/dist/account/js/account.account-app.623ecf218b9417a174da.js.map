{"version":3,"file":"account/js/account.account-app.623ecf218b9417a174da.js","mappings":"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","sources":["webpack://@deriv/account/./Components/forms/form-fields/account-opening-reason.tsx","webpack://@deriv/account/./Components/forms/form-select-field.tsx","webpack://@deriv/account/./Components/poa-address-mismatch-hint-box/poa-address-mismatch-hint-box.tsx","webpack://@deriv/account/./Components/poa-address-mismatch-hint-box/index.ts","webpack://@deriv/account/./Containers/employment-tax-details-container/employment-tax-details-container.tsx","webpack://@deriv/account/./Containers/employment-tax-details-container/index.ts","webpack://@deriv/account/./hooks/useKycAuthStatus.ts","webpack://@deriv/account/./Sections/Profile/PersonalDetails/constants.ts","webpack://@deriv/account/./Sections/Profile/PersonalDetails/input-group.tsx","webpack://@deriv/account/./Configs/user-profile-validation-config.ts","webpack://@deriv/account/./Sections/Profile/PersonalDetails/validation.ts","webpack://@deriv/account/./Sections/Profile/PersonalDetails/verify-button.tsx","webpack://@deriv/account/./Sections/Profile/PersonalDetails/index.ts","webpack://@deriv/account/./Sections/Profile/PersonalDetails/personal-details-form.tsx","webpack://@deriv/account/./hooks/useScrollToPosition.ts","webpack://@deriv/account/./Sections/Verification/ProofOfIdentity/proof-of-identity-utils.ts","webpack://@deriv/account/./Components/poi/status/expired/expired.tsx","webpack://@deriv/account/./Components/poi/status/expired/index.js","webpack://@deriv/account/./Components/poi/idv-status/idv-limited/idv-limited.tsx","webpack://@deriv/account/./Components/poi/idv-status/idv-limited/index.ts","webpack://@deriv/account/./Components/poa/poa-button/poa-button.tsx","webpack://@deriv/account/./Components/poa/poa-button/index.ts","webpack://@deriv/account/./Components/poi/idv-status/idv-submit-complete/idv-submit-complete.tsx","webpack://@deriv/account/./Components/poi/idv-status/idv-submit-complete/index.js","webpack://@deriv/account/./Components/poa/continue-trading-button/continue-trading-button.tsx","webpack://@deriv/account/./Components/poi/idv-status/idv-verified/index.js","webpack://@deriv/account/./Components/poi/idv-status/idv-verified/idv-verified.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfIdentity/idv.jsx","webpack://@deriv/account/./Components/poi/status/limited/limited.tsx","webpack://@deriv/account/./Components/poi/status/limited/index.js","webpack://@deriv/account/./Components/poi/status/not-required/index.ts","webpack://@deriv/account/./Components/poi/status/not-required/not-required.tsx","webpack://@deriv/account/./Components/route-button/index.ts","webpack://@deriv/account/./Components/route-button/route-button.tsx","webpack://@deriv/account/./Components/poi/status/upload-complete/upload-complete.tsx","webpack://@deriv/account/./Components/poi/status/upload-complete/index.ts","webpack://@deriv/account/./Components/poa/continue-trading-button/index.ts","webpack://@deriv/account/./Components/poi/status/verified/verified.tsx","webpack://@deriv/account/./Components/poi/status/verified/index.ts","webpack://@deriv/account/./Components/icon-message-list/list-item.tsx","webpack://@deriv/account/./Components/icon-message-list/index.ts","webpack://@deriv/account/./Components/icon-message-list/icon-message-list.tsx","webpack://@deriv/account/./Components/poi/status/rejected-reasons/index.ts","webpack://@deriv/account/./Components/poi/status/rejected-reasons/rejected-reasons.tsx","webpack://@deriv/account/./Components/poi-manual-upload-failed/index.ts","webpack://@deriv/account/./Components/poi-manual-upload-failed/poi-manual-upload-failed.tsx","webpack://@deriv/account/./Constants/api-error-codes.ts","webpack://@deriv/account/./Components/file-uploader-container/upload-file.ts","webpack://@deriv/account/./Components/poi/missing-personal-details/missing-personal-details.tsx","webpack://@deriv/account/./Components/poi/missing-personal-details/index.js","webpack://@deriv/account/./Components/forms/personal-details-form.jsx","webpack://@deriv/account/./Configs/poi-error-config.tsx","webpack://@deriv/account/./Components/poi/poi-confirm-with-example-form-container/index.ts","webpack://@deriv/account/./Components/poi/poi-confirm-with-example-form-container/poi-confirm-with-example-form-container.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfIdentity/onfido-sdk-view.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfIdentity/onfido-sdk-view-container.tsx","webpack://@deriv/account/./Components/poi/status/unsupported/constants.ts","webpack://@deriv/account/./Components/poi/status/unsupported/card-details/input-field.tsx","webpack://@deriv/account/./Components/poi/status/unsupported/card-details/uploader.tsx","webpack://@deriv/account/./Components/poi/status/unsupported/card-details/utils.ts","webpack://@deriv/account/./Components/poi/status/unsupported/card-details/documents-upload.tsx","webpack://@deriv/account/./Components/poi/status/unsupported/card-details/selfie-upload.tsx","webpack://@deriv/account/./Components/poi/status/unsupported/card-details/index.ts","webpack://@deriv/account/./Components/poi/status/unsupported/card-details/card-details.tsx","webpack://@deriv/account/./Components/poi/status/unsupported/detail-component.tsx","webpack://@deriv/account/./Components/poi/status/unsupported/card-with-arrow.tsx","webpack://@deriv/account/./Components/poi/status/unsupported/documents.tsx","webpack://@deriv/account/./Components/poi/status/unsupported/unsupported.tsx","webpack://@deriv/account/./Components/poi/status/unsupported/index.js","webpack://@deriv/account/./Sections/Verification/ProofOfIdentity/onfido.jsx","webpack://@deriv/account/./Components/poi/poi-country-selector/index.ts","webpack://@deriv/account/./Components/poi/poi-country-selector/poi-country-selector.tsx","webpack://@deriv/account/./Components/forms/idv-form.tsx","webpack://@deriv/account/./Components/poi/idv-document-submit/index.js","webpack://@deriv/account/./Components/poi/idv-document-submit/idv-document-submit.tsx","webpack://@deriv/account/./Components/poi/idv-status/idv-failed/index.ts","webpack://@deriv/account/./Components/poi/idv-status/idv-failed/idv-failed.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfIdentity/proof-of-identity-submission.jsx","webpack://@deriv/account/./Sections/Verification/Helpers/verification.js","webpack://@deriv/account/./Sections/Verification/ProofOfIdentity/proof-of-identity-container.jsx","webpack://@deriv/account/./Sections/Verification/ProofOfIdentity/proof-of-identity.jsx","webpack://@deriv/account/./Sections/Verification/ProofOfIdentity/proof-of-identity-flow.tsx","webpack://@deriv/account/./Components/poa/status/expired/index.ts","webpack://@deriv/account/./Components/poa/status/expired/expired.tsx","webpack://@deriv/account/./Components/poa/status/not-required/index.ts","webpack://@deriv/account/./Components/poa/status/not-required/not-required.tsx","webpack://@deriv/account/./Components/file-uploader-container/file-uploader.tsx","webpack://@deriv/account/./Constants/file-uploader.tsx","webpack://@deriv/account/./Components/file-uploader-container/file-uploader-container.tsx","webpack://@deriv/account/./Components/file-uploader-container/index.ts","webpack://@deriv/account/./Components/file-uploader-container/files-descriptions.tsx","webpack://@deriv/account/./Components/poa/common-mistakes/common-mistake-examples.tsx","webpack://@deriv/account/./Configs/poa-common-mistake-examples-config.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfAddress/poa-desktop-layout.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfAddress/poa-mobile-layout.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfAddress/proof-of-address-form.tsx","webpack://@deriv/account/./Components/poa/status/submitted/index.ts","webpack://@deriv/account/./Components/poa/status/submitted/submitted.tsx","webpack://@deriv/account/./Components/poa/status/unverified/index.ts","webpack://@deriv/account/./Components/poa/status/unverified/unverified.tsx","webpack://@deriv/account/./Components/poi/poi-button/poi-button.tsx","webpack://@deriv/account/./Components/poa/status/verified/verified.tsx","webpack://@deriv/account/./Components/poa/status/verified/index.ts","webpack://@deriv/account/./Sections/Verification/ProofOfAddress/proof-of-address-container.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfAddress/index.ts","webpack://@deriv/account/./Sections/Verification/ProofOfAddress/proof-of-address.tsx","webpack://@deriv/account/./Constants/poo-identifier.ts","webpack://@deriv/account/./Containers/proof-of-ownership/file-uploader.tsx","webpack://@deriv/account/./Components/sample-credit-card-modal/index.ts","webpack://@deriv/account/./Components/sample-credit-card-modal/sample-credit-card-modal.tsx","webpack://@deriv/account/./Containers/proof-of-ownership/example-link.tsx","webpack://@deriv/account/./Containers/proof-of-ownership/expanded-card.tsx","webpack://@deriv/account/./Containers/proof-of-ownership/card.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfOwnership/proof-of-ownership-form.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfOwnership/validation.ts","webpack://@deriv/account/./Components/poo/statuses/poo-not-required/index.ts","webpack://@deriv/account/./Components/poo/statuses/poo-not-required/poo-not-required.tsx","webpack://@deriv/account/./Components/poo/statuses/poo-verified/index.ts","webpack://@deriv/account/./Components/poo/statuses/poo-verified/poo-verified.tsx","webpack://@deriv/account/./Components/poo/statuses/poo-rejected/index.ts","webpack://@deriv/account/./Components/poo/statuses/poo-rejected/poo-rejected.tsx","webpack://@deriv/account/./Components/poo/statuses/poo-submitted/index.ts","webpack://@deriv/account/./Components/poo/statuses/poo-submitted/poo-submitted.tsx","webpack://@deriv/account/./Configs/payment-method-config.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfOwnership/proof-of-ownership.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfOwnership/index.ts","webpack://@deriv/account/./Sections/Verification/ProofOfIncome/proof-of-income-utils.ts","webpack://@deriv/account/./Sections/Verification/ProofOfIncome/proof-of-income-form.tsx","webpack://@deriv/account/./Components/poinc/statuses/poinc-failed/index.ts","webpack://@deriv/account/./Components/poinc/statuses/poinc-failed/failed.tsx","webpack://@deriv/account/./Components/poinc/statuses/poinc-received/index.ts","webpack://@deriv/account/./Components/poinc/statuses/poinc-received/received.tsx","webpack://@deriv/account/./Components/poinc/statuses/poinc-limited/index.ts","webpack://@deriv/account/./Components/poinc/statuses/poinc-limited/limited.tsx","webpack://@deriv/account/./Components/poinc/statuses/poinc-verified/index.ts","webpack://@deriv/account/./Components/poinc/statuses/poinc-verified/verified.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfIncome/proof-of-income-container.tsx","webpack://@deriv/account/./Sections/Verification/ProofOfIncome/index.ts","webpack://@deriv/account/./Sections/Verification/ProofOfIncome/proof-of-income.tsx","webpack://@deriv/account/./Containers/Account/tradinghub-logout.tsx","webpack://@deriv/account/./Containers/Account/page-overlay-wrapper.tsx","webpack://@deriv/account/./Containers/Account/account.tsx","webpack://@deriv/account/./Containers/employment-tax-info/employment-tax-info.tsx","webpack://@deriv/account/./Sections/Security/DeactivateAccount/index.ts","webpack://@deriv/account/./Sections/Security/DeactivateAccount/deactivate-account.tsx","webpack://@deriv/account/./Constants/routes-config.tsx","webpack://@deriv/account/./Components/Routes/route-with-sub-routes.tsx","webpack://@deriv/account/./Components/Routes/binary-routes.tsx","webpack://@deriv/account/./Containers/routes.tsx","webpack://@deriv/account/./Components/reset-trading-password-modal/reset-trading-password-modal.tsx","webpack://@deriv/account/./Components/reset-trading-password-modal/index.js","webpack://@deriv/account/./Containers/reset-trading-password.tsx","webpack://@deriv/account/./Components/network-status-toast-popup/network-status-toast-popup.tsx","webpack://@deriv/account/./App.tsx","webpack://@deriv/account/./Components/icon-with-message/icon-with-message.tsx","webpack://@deriv/account/./Components/icon-with-message/index.ts","webpack://@deriv/account/./Components/demo-message/index.ts","webpack://@deriv/account/./Components/demo-message/demo-message.tsx","webpack://@deriv/account/./Components/error-component/error-component.tsx","webpack://@deriv/account/./Components/error-component/index.ts","webpack://@deriv/account/./Components/form-body-section/form-body-section.tsx","webpack://@deriv/account/./Components/form-body-section/index.ts","webpack://@deriv/account/./Components/scrollbars-container/scrollbars-container.tsx","webpack://@deriv/account/./Components/form-body/index.ts","webpack://@deriv/account/./Components/form-body/form-body.tsx","webpack://@deriv/account/./Components/form-footer/form-footer.tsx","webpack://@deriv/account/./Components/form-footer/index.ts","webpack://@deriv/account/./Components/form-sub-header/form-sub-header.tsx","webpack://@deriv/account/./Components/form-sub-header/index.ts","webpack://@deriv/account/./Components/forms/form-fields/form-input-field.tsx","webpack://@deriv/account/./Components/forms/form-fields/date-of-birth-field.tsx","webpack://@deriv/account/./Components/forms/form-fields/employment-status.tsx","webpack://@deriv/account/./Components/forms/form-fields/tax-residence.tsx","webpack://@deriv/account/./Components/forms/form-fields/tax-indentification-number.tsx","webpack://@deriv/account/./Constants/external-urls.ts","webpack://@deriv/account/./Components/forms/scroll-to-field-with-error.tsx","webpack://@deriv/account/./Components/icon-message-content/icon-message-content.tsx","webpack://@deriv/account/./Components/icon-message-content/index.ts","webpack://@deriv/account/./Components/inline-note-with-icon/inline-note-with-icon.tsx","webpack://@deriv/account/./Components/inline-note-with-icon/index.ts","webpack://@deriv/account/./Components/leave-confirm/leave-confirm.tsx","webpack://@deriv/account/./Components/leave-confirm/index.ts","webpack://@deriv/account/./Components/load-error-message/load-error-message.tsx","webpack://@deriv/account/./Components/load-error-message/index.ts","webpack://@deriv/account/./Constants/financial-information-list.ts","webpack://@deriv/account/./Constants/onfido.js","webpack://@deriv/account/./Configs/idv-document-config.ts","webpack://@deriv/account/./Helpers/utils.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors in Autocomplete & SelectNative components\nimport React from 'react';\nimport { useDevice } from '@deriv-com/ui';\nimport { SelectNative, Dropdown } from '@deriv/components';\nimport { useTranslations } from '@deriv-com/translations';\nimport { Field, FieldProps } from 'formik';\nimport clsx from 'clsx';\n\ntype TAccountOpeningReasonFieldProps = {\n    required: boolean;\n    account_opening_reason_list: { text: string; value: string }[];\n    setFieldValue: (field: string, value: string, should_validate?: boolean) => void;\n    disabled: boolean;\n    fieldFocused?: boolean;\n    is_modal?: boolean;\n};\n\nconst AccountOpeningReasonField = ({\n    required,\n    account_opening_reason_list,\n    setFieldValue,\n    disabled,\n    fieldFocused,\n    is_modal,\n}: TAccountOpeningReasonFieldProps) => {\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    return (\n        <React.Fragment>\n            <Field name='account_opening_reason'>\n                {({ field, meta }: FieldProps) => (\n                    <div className='account-form__fieldset' id='account-opening-reason'>\n                        {isDesktop ? (\n                            <Dropdown\n                                placeholder={\n                                    required ? localize('Account opening reason*') : localize('Account opening reason')\n                                }\n                                {...field}\n                                disabled={disabled}\n                                is_align_text_left\n                                list={account_opening_reason_list}\n                                error={meta.touched && meta.error ? meta.error : ''}\n                                required\n                                className={clsx({ 'focus-field': fieldFocused })}\n                                list_portal_id={is_modal ? 'modal_root' : ''}\n                            />\n                        ) : (\n                            <SelectNative\n                                placeholder={localize('Please select')}\n                                {...field}\n                                label={\n                                    required ? localize('Account opening reason*') : localize('Account opening reason')\n                                }\n                                list_items={account_opening_reason_list}\n                                error={meta.touched && meta.error ? meta.error : ''}\n                                onChange={e => {\n                                    field.onChange(e);\n                                    setFieldValue('account_opening_reason', e.target.value, true);\n                                }}\n                                required\n                                data_testid='account_opening_reason_mobile'\n                                disabled={disabled}\n                                className={clsx({ 'focus-field': fieldFocused })}\n                            />\n                        )}\n                    </div>\n                )}\n            </Field>\n        </React.Fragment>\n    );\n};\n\nexport default AccountOpeningReasonField;\n","import { FC, Fragment } from 'react';\nimport { Autocomplete, SelectNative } from '@deriv/components';\nimport { Field, FieldProps, FormikErrors } from 'formik';\nimport { TListItem, TGetField } from '../../Types';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TFormSelectField = TGetField & {\n    onItemSelection?: (item: TListItem) => void;\n    list_height?: string;\n    is_country_code_dropdown?: boolean;\n};\n\ntype TSetFieldValue = (\n    field: string,\n    value: string,\n    shouldValidate?: boolean\n) => Promise<void | FormikErrors<Record<string, string>>>;\n\nconst FormSelectField: FC<TFormSelectField> = ({\n    label,\n    name,\n    required = false,\n    disabled = false,\n    list_items,\n    onItemSelection,\n    placeholder,\n    list_height,\n    is_country_code_dropdown = false,\n}) => {\n    const { isDesktop } = useDevice();\n    const onSelect =\n        (field: string, setFieldValue: TSetFieldValue) =>\n        ({ value, text }: TListItem) => {\n            setFieldValue(field, (value && text) ?? '', true);\n        };\n    // TODO: remove the following ts-expect-error comments once the issue is fixed within the components\n    return (\n        <Field name={name}>\n            {({ field, meta: { touched, error }, form: { setFieldValue } }: FieldProps<string>) => (\n                <Fragment>\n                    {!isDesktop ? (\n                        <SelectNative\n                            {...field}\n                            // @ts-expect-error This needs to fixed in AutoComplete component\n                            list_items={list_items}\n                            // @ts-expect-error This needs to fixed in AutoComplete component\n                            label={label}\n                            required={required}\n                            disabled={disabled}\n                            error={touched ? error : undefined}\n                            use_text\n                            is_country_code_dropdown={is_country_code_dropdown}\n                            data-testid={`dt_${field.name}`}\n                        />\n                    ) : (\n                        <Autocomplete\n                            {...field}\n                            disabled={disabled}\n                            label={label}\n                            // @ts-expect-error This needs to fixed in AutoComplete component\n                            list_items={list_items}\n                            placeholder={placeholder}\n                            required={required}\n                            data-lpignore='true'\n                            autoComplete='new-password' // 'off' sometimes doesn't work, have to use new-password to prevent chrome autocomplete\n                            error={touched ? error : undefined}\n                            // @ts-expect-error This needs to fixed in AutoComplete component\n                            onItemSelection={onItemSelection ?? onSelect(field.name, setFieldValue)}\n                            data-testid={`dt_${field.name}`}\n                            list_height={list_height as string}\n                        />\n                    )}\n                </Fragment>\n            )}\n        </Field>\n    );\n};\n\nexport default FormSelectField;\n","import { useRef, useEffect } from 'react';\nimport { InlineMessage } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport './poa-address-mismatch-hint-box.scss';\n\nconst POAAddressMismatchHintBox = () => {\n    const ref = useRef<HTMLDivElement | null>(null);\n\n    useEffect(() => {\n        // To make scrolling work on mobile we need to add a delay.\n        setTimeout(() => ref?.current?.scrollIntoView(), 0);\n    }, []);\n\n    return (\n        <div className='poa-address-mismatch-hint-box--wrapper' ref={ref}>\n            <InlineMessage\n                type='warning'\n                size='xs'\n                message={\n                    <Localize i18n_default_text='It appears that the address in your document doesn’t match the address in your Deriv profile. Please update your personal details now with the correct address.' />\n                }\n            />\n        </div>\n    );\n};\n\nexport default POAAddressMismatchHintBox;\n","import POAAddressMismatchHintBox from './poa-address-mismatch-hint-box';\n\nexport default POAAddressMismatchHintBox;\n","import { useEffect, useMemo, useRef, useState } from 'react';\nimport { FormikValues, useFormikContext } from 'formik';\n\nimport { TinValidations } from '@deriv/api/types';\nimport { Checkbox, useOnClickOutside } from '@deriv/components';\nimport { useResidenceList } from '@deriv/hooks';\nimport { getLegalEntityName } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv-com/translations';\nimport { useDevice } from '@deriv-com/ui';\n\nimport {\n    EmploymentStatusField,\n    TaxIdentificationNumberField,\n    TaxResidenceField,\n} from '../../Components/forms/form-fields';\nimport { isFieldImmutable } from '../../Helpers/utils';\n\nimport './employment-tax-details-container.scss';\n\ntype TEmploymentTaxDetailsContainerProps = {\n    editable_fields: string[];\n    parent_ref: React.RefObject<HTMLDivElement>;\n    should_display_long_message?: boolean;\n    handleChange: (value: string) => void;\n    tin_validation_config: TinValidations;\n    id?: string;\n    should_focus_fields?: boolean;\n};\n\nconst EmploymentTaxDetailsContainer = observer(\n    ({\n        editable_fields,\n        parent_ref,\n        should_display_long_message,\n        tin_validation_config,\n        handleChange,\n        should_focus_fields,\n    }: TEmploymentTaxDetailsContainerProps) => {\n        const { values, setFieldValue, touched, errors, setValues } = useFormikContext<FormikValues>();\n        const { isDesktop } = useDevice();\n        const { data: residence_list } = useResidenceList();\n        const { client } = useStore();\n\n        const { is_virtual, account_settings, account_status } = client;\n\n        const { tin_employment_status_bypass, is_tin_mandatory } = tin_validation_config;\n\n        const is_employment_status_mandatory = is_virtual\n            ? true\n            : Boolean(account_status?.status?.includes('mt5_additional_kyc_required'));\n\n        const is_tin_required =\n            !is_virtual &&\n            values.employment_status &&\n            !tin_employment_status_bypass?.includes(values.employment_status) &&\n            is_employment_status_mandatory;\n\n        const [is_tax_residence_popover_open, setIsTaxResidencePopoverOpen] = useState(false);\n        const [is_tin_popover_open, setIsTinPopoverOpen] = useState(false);\n\n        const tax_residence_ref = useRef<HTMLDivElement>(null);\n        const tin_ref = useRef<HTMLDivElement>(null);\n\n        const validateClickOutside = (event: MouseEvent) => {\n            const target = event?.target as HTMLElement;\n            if (target.tagName === 'A') {\n                event?.stopPropagation();\n                return false;\n            }\n            return !tax_residence_ref.current?.contains(target) && !tin_ref.current?.contains(target);\n        };\n\n        const closeToolTips = () => {\n            setIsTaxResidencePopoverOpen(false);\n            setIsTinPopoverOpen(false);\n        };\n\n        useEffect(() => {\n            if (values.tax_residence) {\n                const tax_residence = residence_list.find(item => item.text === values.tax_residence)?.value;\n                if (tax_residence) {\n                    handleChange(tax_residence);\n                }\n            }\n        }, [handleChange, values.tax_residence, residence_list]);\n\n        useEffect(() => {\n            if (!values.tax_residence || !values.tax_identification_number) {\n                setFieldValue('tax_identification_confirm', false, true);\n            }\n        }, [values.tax_residence, values.tax_identification_number, setFieldValue]);\n\n        useEffect(() => {\n            const parent_element = parent_ref?.current;\n\n            if (parent_element) {\n                parent_element.addEventListener('scroll', closeToolTips);\n            }\n\n            return () => {\n                if (parent_element) {\n                    parent_element.removeEventListener('scroll', closeToolTips);\n                }\n                setIsTaxResidencePopoverOpen(false);\n                setIsTinPopoverOpen(false);\n            };\n        }, [parent_ref]);\n\n        useEffect(() => {\n            if (tin_validation_config) {\n                // This is to trigger re-validation of TIN field when the validation config changes\n                setFieldValue('tax_identification_number', values.tax_identification_number, true);\n            }\n        }, [tin_validation_config, setFieldValue, values.tax_identification_number]);\n\n        useEffect(() => {\n            if (touched.tax_identification_number && values.tax_identification_number) {\n                setFieldValue('tin_skipped', 0, true);\n            }\n        }, [values.tax_identification_number, setFieldValue, touched.tax_identification_number]);\n\n        const is_tax_details_confirm_disabled = useMemo(\n            () =>\n                (isFieldImmutable('tax_identification_number', editable_fields) &&\n                    isFieldImmutable('tax_residence', editable_fields)) ||\n                !values.tax_identification_number ||\n                !values.tax_residence ||\n                !!values.tin_skipped,\n            [editable_fields, values.tax_identification_number, values.tax_residence, values.tin_skipped]\n        );\n\n        useOnClickOutside(tax_residence_ref, () => setIsTaxResidencePopoverOpen(false), validateClickOutside);\n\n        useOnClickOutside(tin_ref, () => setIsTinPopoverOpen(false), validateClickOutside);\n\n        const should_show_no_tax_details_checkbox =\n            (tin_employment_status_bypass?.includes(values.employment_status) && !!values.tax_residence) ||\n            Boolean(values.tin_skipped);\n\n        const should_show_tax_confirm_checkbox =\n            !account_settings.tax_identification_number || touched.tax_identification_number;\n\n        const isFieldDisabled = (field_name: string) => isFieldImmutable(field_name, editable_fields);\n\n        return (\n            <div id={'employment-tax-section'}>\n                <EmploymentStatusField\n                    required={is_employment_status_mandatory}\n                    is_disabled={isFieldDisabled('employment_status')}\n                    fieldFocused={should_focus_fields && !account_settings.employment_status}\n                />\n\n                {!account_settings.tax_identification_number && should_show_no_tax_details_checkbox && (\n                    <Checkbox\n                        name='tin_skipped'\n                        className='employment_tax_detail_field-checkbox'\n                        data-lpignore\n                        onChange={() => {\n                            const confirm_no_tax_details = values.tin_skipped ? 0 : 1;\n                            setValues(\n                                {\n                                    ...values,\n                                    tin_skipped: confirm_no_tax_details,\n                                    tax_identification_number: '',\n                                    tax_identification_confirm: false,\n                                },\n                                true\n                            );\n                        }}\n                        value={values.tin_skipped}\n                        label={<Localize i18n_default_text='I do not have tax information' />}\n                        withTabIndex={0}\n                        data-testid='tin_skipped'\n                        label_font_size={!isDesktop ? 'xxs' : 'xs'}\n                        label_line_height='m'\n                    />\n                )}\n                <div ref={tax_residence_ref} className='account-form__fieldset'>\n                    <TaxResidenceField\n                        disabled={\n                            isFieldDisabled('tax_residence') || (values.tin_skipped && !account_settings.tin_skipped)\n                        }\n                        is_tax_residence_popover_open={is_tax_residence_popover_open}\n                        setIsTaxResidencePopoverOpen={setIsTaxResidencePopoverOpen}\n                        setIsTinPopoverOpen={setIsTinPopoverOpen}\n                        required={(should_display_long_message && !values.tin_skipped) || is_tin_required}\n                        fieldFocused={\n                            should_focus_fields && (!account_settings.tax_residence || !account_settings.residence)\n                        }\n                    />\n                </div>\n                <div ref={tin_ref} className='account-form__fieldset'>\n                    <TaxIdentificationNumberField\n                        disabled={\n                            isFieldDisabled('tax_identification_number') ||\n                            (values.tin_skipped && !account_settings.tin_skipped)\n                        }\n                        is_tin_popover_open={is_tin_popover_open}\n                        setIsTinPopoverOpen={setIsTinPopoverOpen}\n                        setIsTaxResidencePopoverOpen={setIsTaxResidencePopoverOpen}\n                        required={\n                            (should_display_long_message && !values.tin_skipped) ||\n                            (is_tin_required && is_tin_mandatory)\n                        }\n                        fieldFocused={\n                            should_focus_fields &&\n                            values.employment_status &&\n                            !values.tin_skipped &&\n                            (should_display_long_message || is_tin_required)\n                        }\n                    />\n                </div>\n                {should_show_tax_confirm_checkbox && (\n                    <Checkbox\n                        name='tax_identification_confirm'\n                        className='employment_tax_detail_field-checkbox'\n                        data-lpignore\n                        onChange={() =>\n                            setFieldValue('tax_identification_confirm', !values.tax_identification_confirm, true)\n                        }\n                        value={values.tax_identification_confirm}\n                        label={\n                            should_display_long_message ? (\n                                <Localize\n                                    i18n_default_text='I hereby confirm that the tax information provided is true and complete. I will also inform {{legal_entity_name}} about any changes to this information.'\n                                    values={{\n                                        legal_entity_name: getLegalEntityName('maltainvest'),\n                                    }}\n                                />\n                            ) : (\n                                <Localize i18n_default_text='I confirm that my tax information is accurate and complete.' />\n                            )\n                        }\n                        withTabIndex={0}\n                        data-testid='tax_identification_confirm'\n                        has_error={!!(touched.tax_identification_confirm && errors.tax_identification_confirm)}\n                        label_font_size={!isDesktop ? 'xxs' : 'xs'}\n                        label_line_height='m'\n                        disabled={is_tax_details_confirm_disabled}\n                    />\n                )}\n            </div>\n        );\n    }\n);\n\nexport default EmploymentTaxDetailsContainer;\n","import EmploymentTaxDetailsContainer from './employment-tax-details-container';\n\nexport default EmploymentTaxDetailsContainer;\n","import { useQuery } from '@deriv/api';\nimport { TSocketRequestPayload } from '@deriv/api/types';\nimport { useStore } from '@deriv/stores';\n\ntype TKycAuthStatusPayload = TSocketRequestPayload<'kyc_auth_status'>['payload'];\n\n/** Custom hook that returns Proof of Identity (POI) and Proof of Address (POA) authentication status details. */\nexport const useKycAuthStatus = (payload?: TKycAuthStatusPayload) => {\n    const { client } = useStore();\n\n    const { is_authorize } = client;\n    const { data, ...kyc_auth_status_rest } = useQuery('kyc_auth_status', {\n        payload,\n        options: { enabled: is_authorize },\n    });\n    return {\n        /** The KYC auth status */\n        kyc_auth_status: data?.kyc_auth_status,\n        ...kyc_auth_status_rest,\n    };\n};\n","import { localize } from '@deriv/translations';\n\nexport const account_opening_reason_list = [\n    { text: localize('Speculative'), value: 'Speculative' },\n    { text: localize('Income Earning'), value: 'Income Earning' },\n    { text: localize('Hedging'), value: 'Hedging' },\n];\n","import { PropsWithChildren } from 'react';\n\ntype TInputGroup = {\n    className?: string;\n};\n\nconst InputGroup = ({ children, className }: PropsWithChildren<TInputGroup>) => (\n    <fieldset className='account-form__fieldset'>\n        <div className={className}>{children}</div>\n    </fieldset>\n);\n\nexport default InputGroup;\n","import dayjs from 'dayjs';\nimport * as Yup from 'yup';\n\nimport { localize } from '@deriv-com/translations';\nimport { ValidationConstants } from '@deriv-com/utils';\n\nimport { TEmployeeDetailsTinValidationConfig } from '../Types';\n\nconst {\n    taxIdentificationNumber,\n    address,\n    addressCity,\n    addressState,\n    postalCode,\n    phoneNumber,\n    name,\n    postalOfficeBoxNumber,\n} = ValidationConstants.patterns;\nconst { addressPermittedSpecialCharacters } = ValidationConstants.messagesHints;\n\ntype TINDepdendents = {\n    is_mf?: boolean;\n    is_real?: boolean;\n    tin_skipped?: boolean;\n    /**\n     * This flag indicates that tin was skipped before and was set by BE\n     */\n    is_tin_auto_set?: boolean;\n    is_employment_status_tin_mandatory?: boolean;\n    is_required_for_tax_residence?: boolean;\n};\n\nYup.addMethod(Yup.string, 'validatePhoneNumberLength', function (message, isCountryCodeDropdownEnabled) {\n    return this.test('is-valid-phone-number-length', message || localize('You should enter 9-20 numbers.'), value => {\n        if (typeof value === 'string') {\n            // Remove the leading '+' symbol before validation\n            const phoneNumber = value.startsWith('+') ? value.slice(1) : value;\n            return isCountryCodeDropdownEnabled ? /^[0-9]{5,15}$/.test(phoneNumber) : /^[0-9]{9,20}$/.test(phoneNumber);\n        }\n        return false;\n    });\n});\n\nconst tempPhoneNumberValidation = /^[0-9]{5,15}$/;\n\nconst makeTinOptional = ({\n    is_mf,\n    is_real,\n    tin_skipped,\n    is_tin_auto_set,\n    is_employment_status_tin_mandatory,\n    is_required_for_tax_residence,\n}: TINDepdendents) => {\n    const check_if_tin_skipped = tin_skipped && !is_tin_auto_set;\n    if (is_real) {\n        // Students and unemployed are not required to provide TIN to have a regulated MT5 jurisdiction\n        if (is_tin_auto_set && !(is_employment_status_tin_mandatory && is_required_for_tax_residence)) {\n            return true;\n        }\n        return check_if_tin_skipped || !(is_employment_status_tin_mandatory && is_required_for_tax_residence);\n    }\n    // Check For Virtual account\n    if (is_mf) {\n        return check_if_tin_skipped;\n    }\n    return true;\n};\n\nexport const getEmploymentAndTaxValidationSchema = ({\n    tin_config,\n    is_mf = false,\n    is_real = false,\n    is_tin_auto_set = false,\n    is_duplicate_account = false,\n    is_employment_status_tin_mandatory = false,\n}: TEmployeeDetailsTinValidationConfig) => {\n    return Yup.object({\n        employment_status: Yup.string().when('is_employment_status_tin_mandatory', {\n            is: () => is_employment_status_tin_mandatory,\n            then: Yup.string().required(localize('Employment status is required.')),\n            otherwise: Yup.string().notRequired(),\n        }),\n        tax_residence: Yup.string().when('is_mf', {\n            is: () => is_mf,\n            then: Yup.string().required(localize('Tax residence is required.')),\n            otherwise: Yup.string().notRequired(),\n        }),\n        tin_skipped: Yup.number().oneOf([0, 1]).default(0),\n        tax_identification_confirm: Yup.bool().when(['tax_identification_number', 'tax_residence', 'tin_skipped'], {\n            is: (tax_identification_number: string, tax_residence: string, tin_skipped: boolean) =>\n                tax_identification_number && tax_residence && !tin_skipped && !is_duplicate_account,\n            then: Yup.bool().required().oneOf([true]),\n            otherwise: Yup.bool().notRequired(),\n        }),\n        tax_identification_number: Yup.string()\n            .when(['tin_skipped'], {\n                is: (tin_skipped: boolean) =>\n                    makeTinOptional({\n                        is_mf,\n                        is_real,\n                        tin_skipped,\n                        is_tin_auto_set,\n                        is_employment_status_tin_mandatory,\n                        is_required_for_tax_residence: Boolean(tin_config?.is_tin_mandatory),\n                    }),\n                then: Yup.string().notRequired(),\n                otherwise: Yup.string().required(localize('Tax identification number is required.')),\n            })\n            .max(25, localize(\"Tax identification number can't be longer than 25 characters.\"))\n            .matches(taxIdentificationNumber, {\n                excludeEmptyString: true,\n                message: localize('Only letters, numbers, space, hyphen, period, and forward slash are allowed.'),\n            })\n            .test({\n                name: 'validate-tin',\n                test: (value, context) => {\n                    const { tax_residence } = context.parent;\n                    if (value && !tax_residence) {\n                        return context.createError({ message: localize('Please fill in tax residence.') });\n                    }\n\n                    if (\n                        value &&\n                        tin_config?.tin_format?.length &&\n                        !tin_config?.tin_format?.some(tax_regex => new RegExp(tax_regex).test(value as string))\n                    ) {\n                        return context.createError({\n                            message: localize('Tax identification number is not properly formatted.'),\n                        });\n                    }\n\n                    if (\n                        value &&\n                        tin_config?.invalid_patterns?.length &&\n                        tin_config?.invalid_patterns?.some(invalid_pattern =>\n                            new RegExp(invalid_pattern).test(value as string)\n                        )\n                    ) {\n                        return context.createError({\n                            message: localize('Tax identification number is not properly formatted.'),\n                        });\n                    }\n                    return true;\n                },\n            }),\n    });\n};\n\nexport const getAddressDetailValidationSchema = (is_svg: boolean) =>\n    Yup.object({\n        address_city: Yup.string()\n            .required(localize('City is required'))\n            .max(99, localize('Only 99 characters, please.'))\n            .matches(addressCity, localize('Only letters, periods, hyphens, apostrophes, and spaces, please.')),\n        address_line_1: Yup.string()\n            .required(localize('First line of address is required'))\n            .max(70, localize('Only 70 characters, please.'))\n            .matches(\n                address,\n                `${localize('Use only the following special characters:')} ${addressPermittedSpecialCharacters}`\n            )\n            .when({\n                is: () => is_svg,\n                then: Yup.string().test(\n                    'po_box',\n                    localize('P.O. Box is not accepted in address'),\n                    value => !postalOfficeBoxNumber.test(value ?? '')\n                ),\n            }),\n        address_line_2: Yup.string()\n            .max(70, localize('Only 70 characters, please.'))\n            .matches(\n                address,\n                `${localize('Use only the following special characters:')} ${addressPermittedSpecialCharacters}`\n            )\n            .when({\n                is: () => is_svg,\n                then: Yup.string().test(\n                    'po_box',\n                    localize('P.O. Box is not accepted in address'),\n                    value => !postalOfficeBoxNumber.test(value ?? '')\n                ),\n            }),\n        address_postcode: Yup.string()\n            .max(20, localize('Please enter a postal/ZIP code under 20 characters.'))\n            .matches(postalCode, localize('Only letters, numbers, space and hyphen are allowed.')),\n        address_state: Yup.string().matches(addressState, localize('State is not in a proper format')),\n    });\n\nexport const getPersonalDetailsBaseValidationSchema = (broker_code?: string, isCountryCodeDropdownEnabled?: boolean) =>\n    Yup.object({\n        salutation: Yup.string().when({\n            is: () => broker_code === 'maltainvest',\n            then: Yup.string().required(localize('Salutation is required.')),\n        }),\n        account_opening_reason: Yup.string().required(localize('Account opening reason is required.')),\n        first_name: Yup.string()\n            .required(localize('First name is required.'))\n            .max(50, localize('Enter no more than 50 characters.'))\n            .matches(name, localize('Letters, spaces, periods, hyphens, apostrophes only.')),\n        last_name: Yup.string()\n            .required(localize('Last name is required.'))\n            .max(50, localize('Enter no more than 50 characters.'))\n            .matches(name, localize('Letters, spaces, periods, hyphens, apostrophes only.')),\n        date_of_birth: Yup.string()\n            .required('Date of birth is required.')\n            .test({\n                name: 'validate_dob',\n                test: value => dayjs(value).isValid() && dayjs(value).isBefore(dayjs().subtract(18, 'years')),\n                message: localize('You must be 18 years old and above.'),\n            }),\n        phone: Yup.string()\n            .required(localize('Phone is required.'))\n            // @ts-expect-error yup validation giving type error\n            .validatePhoneNumberLength(\n                isCountryCodeDropdownEnabled\n                    ? localize('You should enter 5-15 numbers.')\n                    : localize('You should enter 9-20 numbers.'),\n                isCountryCodeDropdownEnabled\n            )\n            .matches(\n                isCountryCodeDropdownEnabled ? tempPhoneNumberValidation : phoneNumber,\n                localize('Please enter a valid phone number (e.g. +15417541234).')\n            ),\n        ...(isCountryCodeDropdownEnabled && {\n            calling_country_code: Yup.string().required(localize('Code required.')),\n        }),\n        place_of_birth: Yup.string().required(localize('Place of birth is required.')),\n        citizen: broker_code\n            ? Yup.string().when({\n                  is: () => broker_code === 'maltainvest',\n                  then: Yup.string().required(localize('Citizenship is required.')),\n              })\n            : Yup.string().required(localize('Citizenship is required.')),\n    });\n","import * as Yup from 'yup';\n\nimport { TinValidations } from '@deriv/api/types';\nimport { GetSettings, ResidenceList, StatesList } from '@deriv/api-types';\nimport { formatDate, getLocation, toMoment } from '@deriv/shared';\n\nimport {\n    getAddressDetailValidationSchema,\n    getEmploymentAndTaxValidationSchema,\n    getPersonalDetailsBaseValidationSchema,\n} from 'Configs/user-profile-validation-config';\nimport { PersonalDetailsValueTypes } from 'Types';\n\nexport const getPersonalDetailsInitialValues = (\n    account_settings: GetSettings & { tin_skipped?: 0 | 1 },\n    residence_list: ResidenceList,\n    states_list: StatesList,\n    is_virtual?: boolean,\n    selected_phone_code?: string,\n    is_carriers_supported?: boolean,\n    isCountryCodeDropdownEnabled?: string | boolean\n): PersonalDetailsValueTypes => {\n    const virtualAccountInitialValues: PersonalDetailsValueTypes = {\n        email_consent: account_settings.email_consent ?? 0,\n        residence: account_settings.residence,\n    };\n    if (is_virtual) return virtualAccountInitialValues;\n\n    const initialValues = {\n        ...virtualAccountInitialValues,\n        address_city: account_settings.address_city,\n        address_line_1: account_settings.address_line_1,\n        address_line_2: account_settings.address_line_2 ?? '',\n        address_postcode: account_settings.address_postcode ?? '',\n        address_state: '',\n        ...(isCountryCodeDropdownEnabled && {\n            //@ts-expect-error calling_country_code is not defined in GetSettings type\n            calling_country_code: account_settings.calling_country_code || selected_phone_code,\n        }),\n        ...(isCountryCodeDropdownEnabled && { is_carriers_available: is_carriers_supported }),\n        date_of_birth: formatDate(account_settings.date_of_birth, 'YYYY-MM-DD'),\n        first_name: account_settings.first_name,\n        last_name: account_settings.last_name,\n        phone: isCountryCodeDropdownEnabled\n            ? account_settings.phone?.replace(/\\D/g, '')\n            : `+${account_settings.phone?.replace(/\\D/g, '')}`,\n        account_opening_reason: account_settings.account_opening_reason,\n        employment_status: account_settings?.employment_status,\n        tax_residence:\n            (account_settings?.tax_residence\n                ? residence_list.find(item => item.value === account_settings?.tax_residence)?.text\n                : account_settings?.residence) || '',\n    };\n\n    const isGetSettingsKey = (value: string): value is keyof GetSettings =>\n        Object.keys(account_settings).includes(value);\n\n    ['citizen', 'place_of_birth', 'tax_residence'].forEach(key => {\n        if (isGetSettingsKey(key)) {\n            if (account_settings[key]) {\n                // @ts-expect-error keys will always be available\n                initialValues[key] = getLocation(residence_list, account_settings[key] as string, 'text');\n            }\n        }\n    });\n\n    if (account_settings?.tin_skipped) {\n        initialValues.tin_skipped = account_settings.tin_skipped;\n        initialValues.tax_identification_number = '';\n    } else {\n        initialValues.tax_identification_number = account_settings.tax_identification_number ?? '';\n    }\n\n    if (account_settings.address_state) {\n        initialValues.address_state = states_list.length\n            ? getLocation(states_list, account_settings.address_state, 'text')\n            : account_settings.address_state;\n    }\n\n    if (account_settings.request_professional_status) {\n        initialValues.request_professional_status = account_settings.request_professional_status;\n    }\n\n    // Setting default value of `I confirm that my tax information is accurate and complete.` checkbox\n    if (account_settings.tax_residence && account_settings.tax_identification_number && !account_settings.tin_skipped) {\n        initialValues.tax_identification_confirm = true;\n    } else {\n        initialValues.tax_identification_confirm = false;\n    }\n\n    return initialValues;\n};\n\nexport const makeSettingsRequest = (\n    settings: PersonalDetailsValueTypes,\n    residence_list: ResidenceList,\n    states_list: StatesList,\n    is_virtual: boolean\n) => {\n    if (is_virtual && settings.email_consent) return { email_consent: settings.email_consent };\n    const request = settings;\n\n    //@ts-expect-error is_carriers_available is not defined in GetSettings type\n    delete request.is_carriers_available;\n    if (request.residence) delete request.residence;\n    if (request.first_name) {\n        request.first_name = request.first_name.trim();\n    }\n\n    if (request.last_name) {\n        request.last_name = request.last_name.trim();\n    }\n    if (request.date_of_birth) {\n        request.date_of_birth = toMoment(request.date_of_birth).format('YYYY-MM-DD');\n    }\n\n    if (request.tax_residence) {\n        request.tax_residence = getLocation(residence_list, request.tax_residence, 'value');\n    }\n\n    if (request.tax_identification_number) {\n        request.tax_identification_number = request.tax_identification_number.trim();\n    }\n\n    if (request.citizen) {\n        request.citizen = getLocation(residence_list, request.citizen, 'value');\n    }\n\n    if (request.place_of_birth) {\n        request.place_of_birth = getLocation(residence_list, request.place_of_birth, 'value');\n    } else {\n        delete request.place_of_birth;\n    }\n\n    if (request.address_state) {\n        request.address_state = states_list.length\n            ? getLocation(states_list, request.address_state, 'value')\n            : request.address_state;\n    }\n    delete request.tax_identification_confirm;\n\n    return request;\n};\n\nexport const getPersonalDetailsValidationSchema = (\n    is_virtual?: boolean,\n    is_svg?: boolean,\n    tin_validation_config?: TinValidations,\n    is_tin_auto_set?: boolean,\n    immutable_fields?: string[],\n    is_employment_status_tin_mandatory?: boolean,\n    isCountryCodeDropdownEnabled?: string | boolean\n) => {\n    if (is_virtual) return Yup.object();\n\n    const personal_details_schema = getPersonalDetailsBaseValidationSchema('', !!isCountryCodeDropdownEnabled).pick([\n        'first_name',\n        'last_name',\n        'phone',\n        ...(isCountryCodeDropdownEnabled ? (['calling_country_code'] as const) : []),\n        'date_of_birth',\n        'citizen',\n    ]);\n\n    const address_detail_schema = getAddressDetailValidationSchema(is_svg ?? false);\n\n    const employment_tin_schema = getEmploymentAndTaxValidationSchema({\n        tin_config: tin_validation_config as TinValidations,\n        is_mf: !is_svg,\n        is_real: !is_virtual,\n        is_tin_auto_set,\n        is_duplicate_account:\n            immutable_fields?.includes('tax_identification_number') || immutable_fields?.includes('tax_residence'),\n        is_employment_status_tin_mandatory,\n    });\n\n    return personal_details_schema.concat(address_detail_schema).concat(employment_tin_schema);\n};\n","import { useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router';\nimport { GetSettings, ResidenceList, StatesList } from '@deriv/api-types';\nimport { Button } from '@deriv/components';\nimport { useIsPhoneNumberVerified, useSettings, useVerifyEmail } from '@deriv/hooks';\nimport { routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTranslations, Localize } from '@deriv-com/translations';\nimport { makeSettingsRequest } from './validation';\nimport './verify-button.scss';\n\ntype TVerifyButton = {\n    is_verify_button_disabled: boolean;\n    next_email_otp_request_timer?: number;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    setStatus: (status: any) => void;\n    values: GetSettings;\n    residence_list: ResidenceList;\n    states_list: StatesList;\n};\n\nexport const VerifyButton = observer(\n    ({\n        is_verify_button_disabled,\n        next_email_otp_request_timer,\n        setStatus,\n        values,\n        residence_list,\n        states_list,\n    }: TVerifyButton) => {\n        const { client, ui } = useStore();\n        const { setShouldShowPhoneNumberOTP } = ui;\n        const { setVerificationCode, is_authorize, is_virtual } = client;\n        const { is_phone_number_verified } = useIsPhoneNumberVerified();\n        const history = useHistory();\n        const { localize } = useTranslations();\n        const {\n            refetch,\n            mutation: { mutateAsync: updateSettings, isLoading: isSetSettingsLoading },\n        } = useSettings();\n        //@ts-expect-error remove this when phone_number_verification is added to api calls\n        const { sendPhoneNumberVerifyEmail, WS, is_loading, error } = useVerifyEmail('phone_number_verification');\n        const ref = useRef<HTMLDivElement | null>(null);\n\n        useEffect(() => {\n            if (is_authorize) refetch();\n        }, [is_authorize, refetch]);\n\n        useEffect(() => {\n            if (WS.isSuccess) {\n                history.push(routes.phone_verification);\n            } else if (error) {\n                //@ts-expect-error error message has issue with typing\n                setStatus({ msg: error.message, code: error.code });\n            }\n        }, [WS.isSuccess, history, error]);\n\n        const redirectToPhoneVerification = (e: React.MouseEvent<HTMLElement>) => {\n            e.preventDefault();\n            localStorage.setItem('routes_from_notification_to_pnv', routes.personal_details);\n            setVerificationCode('', 'phone_number_verification');\n            setShouldShowPhoneNumberOTP(false);\n            // @ts-expect-error GetSettings types doesn't match updated set_settings payload types\n            const request = makeSettingsRequest({ ...values }, residence_list, states_list, is_virtual);\n            // @ts-expect-error GetSettings types doesn't match updated set_settings payload types\n            updateSettings({ payload: request })\n                .then(() => {\n                    sendPhoneNumberVerifyEmail();\n                })\n                .catch(err => {\n                    setStatus({ msg: err.message, code: err.code });\n                });\n        };\n\n        const verifyTimer = () => {\n            let resendCodeTimer = '';\n            if (next_email_otp_request_timer) {\n                next_email_otp_request_timer < 60\n                    ? (resendCodeTimer = `${localize(' in ')}${next_email_otp_request_timer}s`)\n                    : (resendCodeTimer = `${localize(' in ')}${Math.round(next_email_otp_request_timer / 60)}m`);\n            } else {\n                resendCodeTimer = '';\n            }\n\n            return resendCodeTimer;\n        };\n\n        return (\n            <div ref={ref}>\n                <Button\n                    className='phone-verification-button'\n                    is_disabled={\n                        is_phone_number_verified ||\n                        is_verify_button_disabled ||\n                        isSetSettingsLoading ||\n                        is_loading ||\n                        !!next_email_otp_request_timer\n                    }\n                    onClick={redirectToPhoneVerification}\n                    has_effect\n                    green={is_phone_number_verified}\n                    primary\n                    large\n                >\n                    {is_phone_number_verified ? (\n                        <Localize i18n_default_text='Verified' />\n                    ) : (\n                        <Localize\n                            i18n_default_text='Verify{{resendCode}}'\n                            values={{\n                                resendCode: verifyTimer(),\n                            }}\n                        />\n                    )}\n                </Button>\n            </div>\n        );\n    }\n);\n","import PersonalDetails from './personal-details-form';\n\nexport default PersonalDetails;\n","import { ChangeEvent, Fragment, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikHelpers } from 'formik';\n\nimport { useInvalidateQuery } from '@deriv/api';\nimport {\n    Button,\n    Checkbox,\n    FormSubmitErrorMessage,\n    HintBox,\n    Input,\n    Loading,\n    OpenLiveChatLink,\n    Text,\n} from '@deriv/components';\nimport {\n    useGetPhoneNumberList,\n    useGrowthbookGetFeatureValue,\n    useIsPhoneNumberVerified,\n    usePhoneNumberVerificationSetTimer,\n    useResidenceList,\n    useStatesList,\n    useTinValidations,\n} from '@deriv/hooks';\nimport { AUTH_STATUS_CODES, getBrandWebsiteName, routes, WS } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\n\nimport FormBody from '../../../Components/form-body';\nimport FormFooter from '../../../Components/form-footer';\nimport FormSubHeader from '../../../Components/form-sub-header';\nimport { DateOfBirthField } from '../../../Components/forms/form-fields';\nimport AccountOpeningReasonField from '../../../Components/forms/form-fields/account-opening-reason';\nimport FormSelectField from '../../../Components/forms/form-select-field';\nimport LeaveConfirm from '../../../Components/leave-confirm';\nimport LoadErrorMessage from '../../../Components/load-error-message';\nimport POAAddressMismatchHintBox from '../../../Components/poa-address-mismatch-hint-box';\nimport EmploymentTaxDetailsContainer from '../../../Containers/employment-tax-details-container';\nimport { isFieldImmutable } from '../../../Helpers/utils';\nimport { useScrollElementToTop } from '../../../hooks';\nimport { PersonalDetailsValueTypes } from '../../../Types';\n\nimport { account_opening_reason_list } from './constants';\nimport InputGroup from './input-group';\nimport { getPersonalDetailsInitialValues, getPersonalDetailsValidationSchema, makeSettingsRequest } from './validation';\nimport { VerifyButton } from './verify-button';\n\nimport './personal-details-form.scss';\n\ntype TRestState = {\n    show_form: boolean;\n    api_error?: string;\n};\n\nconst PersonalDetailsForm = observer(() => {\n    const { isDesktop } = useDevice();\n    const [is_loading, setIsLoading] = useState(false);\n    const [is_btn_loading, setIsBtnLoading] = useState(false);\n    const [is_submit_success, setIsSubmitSuccess] = useState(false);\n    const invalidate = useInvalidateQuery();\n    const history = useHistory();\n    const [isPhoneNumberVerificationEnabled, isPhoneNumberVerificationLoaded] = useGrowthbookGetFeatureValue({\n        featureFlag: 'phone_number_verification',\n    });\n    const [isCountryCodeDropdownEnabled, isCountryCodeLoaded] = useGrowthbookGetFeatureValue({\n        featureFlag: 'enable_country_code_dropdown',\n    });\n\n    const { next_email_otp_request_timer, is_email_otp_timer_loading } = usePhoneNumberVerificationSetTimer();\n\n    const { tin_validation_config, mutate } = useTinValidations();\n\n    const scrollToTop = useScrollElementToTop();\n\n    const {\n        client,\n        ui,\n        notifications,\n        common: { is_language_changing },\n    } = useStore();\n    const { is_phone_number_verified } = useIsPhoneNumberVerified();\n\n    const {\n        account_settings,\n        account_status,\n        authentication_status,\n        is_virtual,\n        current_landing_company,\n        updateAccountStatus,\n        fetchAccountSettings,\n        residence,\n        is_svg,\n        is_mf_account,\n    } = client;\n\n    const { field_ref_to_focus, setFieldRefToFocus } = ui;\n\n    const { data: residence_list, isLoading: is_loading_residence_list } = useResidenceList();\n\n    const {\n        is_global_sms_available,\n        is_global_whatsapp_available,\n        legacy_core_countries_list,\n        selected_phone_code,\n        selected_country_list,\n        updatePhoneSettings,\n    } = useGetPhoneNumberList();\n\n    const { data: states_list, isLoading: is_loading_state_list } = useStatesList(residence);\n\n    const {\n        refreshNotifications,\n        showPOAAddressMismatchSuccessNotification,\n        showPOAAddressMismatchFailureNotification,\n    } = notifications;\n\n    const has_poa_address_mismatch = account_status?.status?.includes('poa_address_mismatch');\n    const [rest_state, setRestState] = useState<TRestState>({\n        show_form: true,\n    });\n\n    const notification_timeout = useRef<NodeJS.Timeout>();\n    const scroll_div_ref = useRef(null);\n\n    const [start_on_submit_timeout, setStartOnSubmitTimeout] = useState<{\n        is_timeout_started: boolean;\n        timeout_callback: () => void;\n    }>({\n        is_timeout_started: false,\n        timeout_callback: () => null,\n    });\n\n    useEffect(() => {\n        fetchAccountSettings();\n    }, [fetchAccountSettings]);\n\n    const should_show_loader =\n        is_loading_state_list ||\n        is_loading ||\n        is_loading_residence_list ||\n        !isPhoneNumberVerificationLoaded ||\n        !isCountryCodeLoaded;\n\n    useEffect(() => {\n        const init = async () => {\n            try {\n                // Order of API calls is important\n                await WS.wait('get_settings');\n                await invalidate('residence_list');\n                await invalidate('states_list');\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        if (is_language_changing) {\n            setIsLoading(true);\n            init();\n        }\n    }, [invalidate, is_language_changing]);\n\n    const checkForInitialCarriersSupported = () => {\n        const is_sms_carrier_available =\n            selected_country_list?.carriers &&\n            (selected_country_list?.carriers as string[]).includes('sms') &&\n            is_global_sms_available;\n\n        const is_whatsapp_carrier_available =\n            selected_country_list?.carriers &&\n            (selected_country_list?.carriers as string[]).includes('whatsapp') &&\n            is_global_whatsapp_available;\n\n        return is_sms_carrier_available || is_whatsapp_carrier_available;\n    };\n\n    const hintMessage = () => {\n        if (isPhoneNumberVerificationEnabled) {\n            if (is_phone_number_verified) {\n                return (\n                    <Localize\n                        i18n_default_text='To change your verified phone number, contact us via <0></0>.'\n                        components={[\n                            <OpenLiveChatLink\n                                text_size='xxs'\n                                key={0}\n                                className='account-form__fieldset--phone-verification-livechat-link'\n                            />,\n                        ]}\n                    />\n                );\n            }\n        } else {\n            return null;\n        }\n    };\n\n    const onSubmit = async (\n        values: PersonalDetailsValueTypes,\n        { setStatus, setSubmitting }: FormikHelpers<PersonalDetailsValueTypes>\n    ) => {\n        setStatus({ msg: '' });\n        const request = makeSettingsRequest({ ...values }, residence_list, states_list, is_virtual);\n        setIsBtnLoading(true);\n        const data = await WS.authorized.setSettings(request);\n\n        if (data.error) {\n            setStatus({ msg: data.error.message, code: data.error.code });\n            setIsBtnLoading(false);\n            setSubmitting(false);\n        } else {\n            // Adding a delay to show the notification after the page reload\n            notification_timeout.current = setTimeout(() => {\n                if (data.set_settings.notification) {\n                    showPOAAddressMismatchSuccessNotification();\n                } else if (has_poa_address_mismatch) {\n                    showPOAAddressMismatchFailureNotification();\n                }\n            }, 2000);\n\n            // force request to update settings cache since settings have been updated\n            const response = await WS.authorized.storage.getSettings();\n            if (response.error) {\n                setRestState(prev_state => ({ ...prev_state, api_error: response.error.message }));\n                return;\n            }\n            // Fetches the status of the account after update\n            updatePhoneSettings();\n            updateAccountStatus();\n            refreshNotifications();\n            setIsBtnLoading(false);\n            setIsSubmitSuccess(true);\n            setStartOnSubmitTimeout({\n                is_timeout_started: true,\n                timeout_callback: () => {\n                    setSubmitting(false);\n                },\n            });\n            // redirection back based on 'from' param in query string\n            const url_query_string = window.location.search;\n            const url_params = new URLSearchParams(url_query_string);\n            if (url_params.get('from')) {\n                const from = url_params.get('from') as keyof typeof routes;\n                history.push(routes[from]);\n            }\n        }\n    };\n\n    useEffect(() => () => clearTimeout(notification_timeout.current), []);\n\n    useEffect(() => {\n        let timeout_id: NodeJS.Timeout;\n        if (start_on_submit_timeout.is_timeout_started) {\n            timeout_id = setTimeout(() => {\n                setIsSubmitSuccess(false);\n                setStartOnSubmitTimeout({\n                    is_timeout_started: false,\n                    timeout_callback: () => setIsSubmitSuccess(false),\n                });\n            }, 3000);\n        }\n\n        return () => {\n            clearTimeout(timeout_id);\n        };\n    }, [start_on_submit_timeout.is_timeout_started]);\n\n    const showForm = (show_form: boolean) => setRestState({ show_form });\n\n    const isFieldDisabled = (name: string): boolean => {\n        return !!account_settings?.immutable_fields?.includes(name);\n    };\n\n    const employment_tax_editable_fields = useMemo(() => {\n        const fields_to_disable = ['employment_status', 'tax_identification_number'].filter(field =>\n            isFieldImmutable(field, account_settings?.immutable_fields)\n        );\n        /*\n            [TODO]: Will be removed once BE enables tax_residence in immutable_fields\n            If Tax_residence value is present in response, then it must not be editable\n        */\n        if (!account_settings?.tax_residence) {\n            fields_to_disable.push('tax_residence');\n        }\n        return fields_to_disable;\n    }, [account_settings?.immutable_fields, account_settings?.tax_residence]);\n\n    const { api_error, show_form } = rest_state;\n    const loadTimer = useRef<NodeJS.Timeout>();\n\n    // To facilitate scrolling to the field that is to be focused\n    useLayoutEffect(() => {\n        if (field_ref_to_focus && !should_show_loader && !api_error) {\n            loadTimer.current = setTimeout(() => {\n                const parentRef = isDesktop\n                    ? document.querySelector('.account-form__personal-details .dc-themed-scrollbars')\n                    : document.querySelector('.account__scrollbars_container--grid-layout');\n                const targetRef = document.getElementById(field_ref_to_focus) as HTMLElement;\n                const offset = 24; // 24 is the padding of the container\n                scrollToTop(parentRef as HTMLElement, targetRef, offset);\n            }, 0);\n        }\n        return () => {\n            if (field_ref_to_focus) {\n                clearTimeout(loadTimer.current);\n            }\n        };\n    }, [field_ref_to_focus, isDesktop, should_show_loader, api_error, scrollToTop, setFieldRefToFocus]);\n\n    useEffect(() => {\n        return () => {\n            setFieldRefToFocus(null);\n        };\n    }, [setFieldRefToFocus]);\n\n    if (api_error) return <LoadErrorMessage error_message={api_error} />;\n\n    if (should_show_loader) {\n        return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    }\n\n    const is_poa_verified = authentication_status?.document_status === AUTH_STATUS_CODES.VERIFIED;\n    const is_poi_verified = authentication_status?.identity_status === AUTH_STATUS_CODES.VERIFIED;\n\n    const is_account_verified = is_poa_verified && is_poi_verified;\n\n    const stripped_phone_number = isCountryCodeDropdownEnabled\n        ? account_settings.phone?.replace(/\\D/g, '')\n        : `+${account_settings.phone?.replace(/\\D/g, '')}`;\n\n    //Generate Redirection Link to user based on verification status\n    const getRedirectionLink = () => {\n        if (!is_poi_verified) {\n            return '/account/proof-of-identity';\n        } else if (!is_poa_verified) {\n            return '/account/proof-of-address';\n        }\n        return undefined;\n    };\n\n    const is_tin_auto_set = Boolean(account_settings?.tin_skipped);\n\n    const is_employment_status_tin_mandatory = Boolean(account_status?.status?.includes('mt5_additional_kyc_required'));\n\n    const PersonalDetailSchema = getPersonalDetailsValidationSchema(\n        is_virtual,\n        is_svg,\n        tin_validation_config,\n        is_tin_auto_set,\n        account_settings?.immutable_fields,\n        is_employment_status_tin_mandatory,\n        isCountryCodeDropdownEnabled\n    );\n    const displayErrorMessage = (status: { code: string; msg: string }) => {\n        if (status?.code === 'PhoneNumberTaken') {\n            return (\n                <FormSubmitErrorMessage\n                    message={\n                        <Localize\n                            i18n_default_text='Number already exists in our system. Enter a new one or contact us via <0></0> for help'\n                            components={[<OpenLiveChatLink text_size='xxs' key={0} />]}\n                        />\n                    }\n                    text_color='loss-danger'\n                    weight='none'\n                />\n            );\n        }\n        return <FormSubmitErrorMessage message={status?.msg} />;\n    };\n\n    const initialValues = getPersonalDetailsInitialValues(\n        account_settings,\n        residence_list,\n        states_list,\n        is_virtual,\n        selected_phone_code,\n        checkForInitialCarriersSupported(),\n        isCountryCodeDropdownEnabled\n    );\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            enableReinitialize\n            onSubmit={onSubmit}\n            validationSchema={PersonalDetailSchema}\n        >\n            {({\n                values,\n                errors,\n                setStatus,\n                status,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                isSubmitting,\n                isValid,\n                setFieldValue,\n                setFieldTouched,\n                dirty,\n            }) => (\n                <Fragment>\n                    <LeaveConfirm onDirty={isDesktop ? undefined : showForm} />\n                    {show_form && (\n                        <Form\n                            noValidate\n                            className='account-form account-form__personal-details'\n                            onSubmit={handleSubmit}\n                            data-testid='dt_account_personal_details_section'\n                        >\n                            <FormBody scroll_offset={isDesktop ? '80px' : '199px'}>\n                                <FormSubHeader title={localize('Details')} />\n                                {!is_virtual && (\n                                    <Fragment>\n                                        {isDesktop ? (\n                                            <InputGroup className='account-form__fieldset--2-cols'>\n                                                <Input\n                                                    data-lpignore='true'\n                                                    type='text'\n                                                    name='first_name'\n                                                    label={localize('First name*')}\n                                                    value={values.first_name}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    required\n                                                    disabled={isFieldDisabled('first_name')}\n                                                    error={errors.first_name}\n                                                    id='first_name'\n                                                    data-testid='dt_first_name'\n                                                />\n                                                <Input\n                                                    id='last_name'\n                                                    data-lpignore='true'\n                                                    type='text'\n                                                    name='last_name'\n                                                    label={localize('Last name*')}\n                                                    value={values.last_name}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    required\n                                                    disabled={isFieldDisabled('last_name')}\n                                                    error={errors.last_name}\n                                                    data-testid='dt_last_name'\n                                                />\n                                            </InputGroup>\n                                        ) : (\n                                            <Fragment>\n                                                <fieldset className='account-form__fieldset'>\n                                                    <Input\n                                                        data-lpignore='true'\n                                                        type='text'\n                                                        name='first_name'\n                                                        id='first_name_mobile'\n                                                        label={localize('First name*')}\n                                                        value={values.first_name}\n                                                        onChange={handleChange}\n                                                        onBlur={handleBlur}\n                                                        required\n                                                        disabled={isFieldDisabled('first_name')}\n                                                        error={errors.first_name}\n                                                        data-testid='dt_first_name'\n                                                    />\n                                                </fieldset>\n                                                <fieldset className='account-form__fieldset'>\n                                                    <Input\n                                                        data-lpignore='true'\n                                                        type='text'\n                                                        name='last_name'\n                                                        id='last_name_mobile'\n                                                        label={localize('Last name*')}\n                                                        value={values.last_name}\n                                                        onChange={handleChange}\n                                                        onBlur={handleBlur}\n                                                        required\n                                                        disabled={isFieldDisabled('last_name')}\n                                                        error={errors.last_name}\n                                                        data-testid='dt_last_name'\n                                                    />\n                                                </fieldset>\n                                            </Fragment>\n                                        )}\n                                        {'place_of_birth' in values && (\n                                            <fieldset className='account-form__fieldset'>\n                                                <FormSelectField\n                                                    label={localize('Place of birth')}\n                                                    name='place_of_birth'\n                                                    list_items={residence_list}\n                                                    disabled={isFieldDisabled('place_of_birth')}\n                                                />\n                                            </fieldset>\n                                        )}\n                                        <fieldset className='account-form__fieldset'>\n                                            <DateOfBirthField\n                                                name='date_of_birth'\n                                                label={localize('Date of birth*')}\n                                                id='birth_day'\n                                                disabled={isFieldDisabled('date_of_birth')}\n                                                portal_id=''\n                                                // @ts-expect-error this type value needs to be check again in GetSettings\n                                                value={values.date_of_birth}\n                                            />\n                                        </fieldset>\n\n                                        <fieldset className='account-form__fieldset'>\n                                            <FormSelectField\n                                                label={localize('Citizenship*')}\n                                                name='citizen'\n                                                list_items={residence_list}\n                                                disabled={isFieldDisabled('citizen')}\n                                            />\n                                        </fieldset>\n                                    </Fragment>\n                                )}\n                                <fieldset className='account-form__fieldset'>\n                                    <Input\n                                        data-lpignore='true'\n                                        type='text'\n                                        name='residence'\n                                        id={'residence'}\n                                        label={localize('Country of residence*')}\n                                        //@ts-expect-error type of residence should not be null: needs to be updated in GetSettings type\n                                        value={values.residence}\n                                        required\n                                        disabled={isFieldDisabled('residence')}\n                                        error={errors.residence}\n                                        onChange={handleChange}\n                                    />\n                                </fieldset>\n                                {!is_virtual && (\n                                    <Fragment>\n                                        <fieldset className='account-form__fieldset'>\n                                            <div\n                                                className={clsx('account-form__fieldset--phone_container', {\n                                                    'account-form__fieldset--phone_container--verified':\n                                                        is_phone_number_verified,\n                                                    'account-form__fieldset--phone_container--with-1-field':\n                                                        !isCountryCodeDropdownEnabled,\n                                                })}\n                                            >\n                                                <div className='account-form__fieldset--phone_input'>\n                                                    {isCountryCodeDropdownEnabled && (\n                                                        <FormSelectField\n                                                            label={localize('Code*')}\n                                                            name='calling_country_code'\n                                                            list_items={legacy_core_countries_list}\n                                                            is_country_code_dropdown\n                                                            onItemSelection={country_list => {\n                                                                setFieldValue(\n                                                                    'calling_country_code',\n                                                                    country_list.value,\n                                                                    true\n                                                                );\n                                                                const is_sms_carrier_available =\n                                                                    //@ts-expect-error carriers is not defined in TListItem type\n                                                                    country_list.carriers &&\n                                                                    //@ts-expect-error carriers is not defined in TListItem type\n                                                                    (country_list.carriers as string[]).includes(\n                                                                        'sms'\n                                                                    ) &&\n                                                                    is_global_sms_available;\n                                                                const is_whatsapp_carrier_available =\n                                                                    //@ts-expect-error carriers is not defined in TListItem type\n                                                                    country_list.carriers &&\n                                                                    //@ts-expect-error carriers is not defined in TListItem type\n                                                                    (country_list.carriers as string[]).includes(\n                                                                        'whatsapp'\n                                                                    ) &&\n                                                                    is_global_whatsapp_available;\n                                                                setFieldValue(\n                                                                    'is_carriers_available',\n                                                                    is_sms_carrier_available ||\n                                                                        is_whatsapp_carrier_available,\n                                                                    true\n                                                                );\n                                                            }}\n                                                            disabled={\n                                                                isFieldDisabled('calling_country_code') ||\n                                                                !!next_email_otp_request_timer ||\n                                                                is_email_otp_timer_loading\n                                                            }\n                                                        />\n                                                    )}\n                                                    <Input\n                                                        data-lpignore='true'\n                                                        type='text'\n                                                        inputMode='numeric'\n                                                        name='phone'\n                                                        id={'phone'}\n                                                        label={localize('Phone number*')}\n                                                        //@ts-expect-error type of residence should not be null: needs to be updated in GetSettings type\n                                                        value={values.phone}\n                                                        className='account-form__fieldset--phone-number-input'\n                                                        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                                            let phone_number = e.target.value.replace(/\\D/g, '');\n                                                            if (!isCountryCodeDropdownEnabled) {\n                                                                phone_number =\n                                                                    phone_number.length === 0\n                                                                        ? '+'\n                                                                        : `+${phone_number}`;\n                                                            }\n                                                            setFieldValue('phone', phone_number, true);\n                                                            setStatus('');\n                                                        }}\n                                                        onBlur={handleBlur}\n                                                        required\n                                                        error={errors.phone}\n                                                        disabled={\n                                                            isFieldDisabled('phone') ||\n                                                            !!next_email_otp_request_timer ||\n                                                            is_email_otp_timer_loading\n                                                        }\n                                                        data-testid='dt_phone'\n                                                    />\n                                                </div>\n                                                {isPhoneNumberVerificationEnabled && (\n                                                    <VerifyButton\n                                                        is_verify_button_disabled={\n                                                            isFieldDisabled('phone') ||\n                                                            !isValid ||\n                                                            !stripped_phone_number ||\n                                                            is_email_otp_timer_loading ||\n                                                            (isCountryCodeDropdownEnabled &&\n                                                                //@ts-expect-error is_carriers_available is not defined in GetSettings type\n                                                                !values.is_carriers_available)\n                                                        }\n                                                        // @ts-expect-error This needs to fixed in VerifyButton component\n                                                        values={values}\n                                                        residence_list={residence_list}\n                                                        states_list={states_list}\n                                                        next_email_otp_request_timer={next_email_otp_request_timer}\n                                                        setStatus={setStatus}\n                                                    />\n                                                )}\n                                            </div>\n                                            {is_phone_number_verified && (\n                                                <div className='account-form__fieldset--phone_container--verified-hint'>\n                                                    <Text as='p' color='less-prominent' size='xxs'>\n                                                        {hintMessage()}\n                                                    </Text>\n                                                </div>\n                                            )}\n                                        </fieldset>\n                                        <AccountOpeningReasonField\n                                            account_opening_reason_list={account_opening_reason_list}\n                                            setFieldValue={setFieldValue}\n                                            disabled={\n                                                isFieldDisabled('account_opening_reason') ||\n                                                Boolean(account_settings?.account_opening_reason)\n                                            }\n                                            required\n                                            fieldFocused={\n                                                !account_settings.account_opening_reason &&\n                                                field_ref_to_focus === 'account-opening-reason'\n                                            }\n                                        />\n                                    </Fragment>\n                                )}\n                                {!is_virtual && (\n                                    <div className='employment-tin-section'>\n                                        <FormSubHeader title={localize('Employment and tax information')} />\n                                        <EmploymentTaxDetailsContainer\n                                            editable_fields={employment_tax_editable_fields}\n                                            parent_ref={scroll_div_ref}\n                                            handleChange={mutate}\n                                            tin_validation_config={tin_validation_config}\n                                            should_display_long_message={is_mf_account}\n                                            should_focus_fields={field_ref_to_focus === 'employment-tax-section'}\n                                        />\n                                        {has_poa_address_mismatch && <POAAddressMismatchHintBox />}\n                                        <FormSubHeader title={localize('Address')} />\n                                        <div className='account-address__details-section'>\n                                            <fieldset className='account-form__fieldset'>\n                                                <Input\n                                                    data-lpignore='true'\n                                                    autoComplete='off' // prevent chrome autocomplete\n                                                    type='text'\n                                                    maxLength={70}\n                                                    name='address_line_1'\n                                                    id='address_line_1'\n                                                    label={localize('First line of address*')}\n                                                    value={values.address_line_1}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    error={errors.address_line_1}\n                                                    required\n                                                    disabled={isFieldDisabled('address_line_1')}\n                                                    data-testid='dt_address_line_1'\n                                                />\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <Input\n                                                    data-lpignore='true'\n                                                    autoComplete='off' // prevent chrome autocomplete\n                                                    type='text'\n                                                    maxLength={70}\n                                                    name='address_line_2'\n                                                    id='address_line_2'\n                                                    label={localize('Second line of address (optional)')}\n                                                    value={values.address_line_2}\n                                                    error={errors.address_line_2}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    required\n                                                    disabled={isFieldDisabled('address_line_2')}\n                                                />\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <Input\n                                                    data-lpignore='true'\n                                                    autoComplete='off' // prevent chrome autocomplete\n                                                    type='text'\n                                                    name='address_city'\n                                                    id='address_city'\n                                                    label={localize('Town/City*')}\n                                                    value={values.address_city}\n                                                    error={errors.address_city}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    required\n                                                    disabled={isFieldDisabled('address_city')}\n                                                    data-testid='dt_address_city'\n                                                />\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                {states_list.length ? (\n                                                    <FormSelectField\n                                                        label={localize('State/Province (optional)')}\n                                                        name='address_state'\n                                                        list_items={states_list}\n                                                        disabled={isFieldDisabled('address_state')}\n                                                    />\n                                                ) : (\n                                                    <Input\n                                                        data-lpignore='true'\n                                                        autoComplete='off' // prevent chrome autocomplete\n                                                        type='text'\n                                                        name='address_state'\n                                                        id='address_state'\n                                                        label={localize('State/Province (optional)')}\n                                                        value={values.address_state}\n                                                        error={errors.address_state}\n                                                        onChange={handleChange}\n                                                        onBlur={handleBlur}\n                                                        disabled={isFieldDisabled('address_state')}\n                                                    />\n                                                )}\n                                            </fieldset>\n                                            <fieldset className='account-form__fieldset'>\n                                                <Input\n                                                    data-lpignore='true'\n                                                    autoComplete='off' // prevent chrome autocomplete\n                                                    type='text'\n                                                    name='address_postcode'\n                                                    id='address_postcode'\n                                                    label={localize('Postal/ZIP code')}\n                                                    value={values.address_postcode}\n                                                    error={errors.address_postcode}\n                                                    onChange={handleChange}\n                                                    onBlur={handleBlur}\n                                                    disabled={isFieldDisabled('address_postcode')}\n                                                />\n                                            </fieldset>\n                                        </div>\n                                    </div>\n                                )}\n                                {!!current_landing_company?.support_professional_client && (\n                                    <Fragment>\n                                        <div className='account-form__divider' />\n                                        <div className='pro-client'>\n                                            <FormSubHeader title={localize('Professional Client')} />\n                                            <fieldset className='account-form__fieldset'>\n                                                <div>\n                                                    <Text as='p' size='xs'>\n                                                        <Localize\n                                                            i18n_default_text='By default, all {{brand_website_name}} clients are retail clients but anyone can request to be treated as a professional client.'\n                                                            values={{\n                                                                brand_website_name: getBrandWebsiteName(),\n                                                            }}\n                                                        />\n                                                    </Text>\n                                                    <Text as='p' size='xs'>\n                                                        <Localize i18n_default_text='A professional client receives a lower degree of client protection due to the following.' />\n                                                    </Text>\n                                                    <Text as='p' size='xs'>\n                                                        <Localize i18n_default_text='We presume that you possess the experience, knowledge, and expertise to make your own investment decisions and properly assess the risk involved.' />\n                                                    </Text>\n                                                    <Text as='p' size='xs' className='last-child'>\n                                                        <Localize i18n_default_text='We’re not obliged to conduct an appropriateness test, nor provide you with any risk warnings.' />\n                                                    </Text>\n                                                </div>\n                                                {is_account_verified ? (\n                                                    <Checkbox\n                                                        name='request_professional_status'\n                                                        value={!!values.request_professional_status}\n                                                        onChange={() => {\n                                                            setFieldValue(\n                                                                'request_professional_status',\n                                                                values.request_professional_status ? 0 : 1\n                                                            );\n                                                            setFieldTouched('request_professional_status', true, true);\n                                                        }}\n                                                        label={localize(\n                                                            'I would like to be treated as a professional client.'\n                                                        )}\n                                                        id='request_professional_status'\n                                                        disabled={\n                                                            is_virtual || !!account_settings.request_professional_status\n                                                        }\n                                                        greyDisabled\n                                                    />\n                                                ) : (\n                                                    <HintBox\n                                                        icon='IcInfoBlue'\n                                                        icon_height={20}\n                                                        icon_width={30}\n                                                        message={\n                                                            <Text as='p' size='xs'>\n                                                                <Localize\n                                                                    i18n_default_text='You’ll need to authenticate your account before requesting to become a professional client. <0>Authenticate my account</0>'\n                                                                    components={[\n                                                                        <a\n                                                                            key={0}\n                                                                            className='link--no-bold'\n                                                                            rel='noopener noreferrer'\n                                                                            target='_blank'\n                                                                            href={getRedirectionLink()}\n                                                                        />,\n                                                                    ]}\n                                                                />\n                                                            </Text>\n                                                        }\n                                                        is_info\n                                                        is_inline\n                                                    />\n                                                )}\n                                            </fieldset>\n                                        </div>\n                                        <div className='account-form__divider' />\n                                    </Fragment>\n                                )}\n                                <FormSubHeader title={localize('Email preference')} />\n                                <Fragment>\n                                    <fieldset\n                                        className={clsx(\n                                            'account-form__fieldset',\n                                            'account-form__fieldset--email-consent'\n                                        )}\n                                    >\n                                        <Checkbox\n                                            name='email_consent'\n                                            value={!!values.email_consent}\n                                            onChange={() => {\n                                                setFieldValue('email_consent', values.email_consent ? 0 : 1);\n                                                setFieldTouched('email_consent', true, true);\n                                            }}\n                                            label={localize('Get updates about Deriv products, services and events.')}\n                                            id='email_consent'\n                                            defaultChecked={!!values.email_consent}\n                                            disabled={isFieldDisabled('email_consent') && !is_virtual}\n                                        />\n                                    </fieldset>\n                                </Fragment>\n                            </FormBody>\n                            <FormFooter>\n                                {status?.msg && displayErrorMessage(status)}\n                                {!is_virtual && !(isSubmitting || is_submit_success || status?.msg) && (\n                                    <Text\n                                        className='account-form__footer-note'\n                                        size='xxs'\n                                        color='prominent'\n                                        align={isDesktop ? 'right' : 'center'}\n                                    >\n                                        <Localize i18n_default_text='Ensure your information is correct.' />\n                                    </Text>\n                                )}\n                                <Button\n                                    className={clsx('account-form__footer-btn', {\n                                        'dc-btn--green': is_submit_success,\n                                    })}\n                                    type='submit'\n                                    is_disabled={\n                                        isSubmitting || !dirty || !isValid || is_btn_loading || is_submit_success\n                                    }\n                                    has_effect\n                                    is_loading={is_btn_loading}\n                                    is_submit_success={is_submit_success}\n                                    text={localize('Save changes')}\n                                    large\n                                    primary\n                                />\n                            </FormFooter>\n                        </Form>\n                    )}\n                </Fragment>\n            )}\n        </Formik>\n    );\n});\n\nexport default PersonalDetailsForm;\n","import { useCallback } from 'react';\n\ntype ScrollElementToTop = (rootEl: HTMLElement, targetEl: HTMLElement, offset: number) => void;\n\nexport const useScrollElementToTop = (): ScrollElementToTop => {\n    const scrollElementToTop: ScrollElementToTop = useCallback((rootEl, targetEl, offset = 0) => {\n        if (rootEl && targetEl) {\n            rootEl.scrollTo({\n                top: targetEl.offsetTop - offset,\n                behavior: 'smooth',\n            });\n        }\n    }, []);\n\n    return scrollElementToTop;\n};\n","export const identity_status_codes = {\n    none: 'none',\n    pending: 'pending',\n    rejected: 'rejected',\n    verified: 'verified',\n    expired: 'expired',\n    suspected: 'suspected',\n} as const;\n\nexport const submission_status_code = {\n    selecting: 'selecting',\n    submitting: 'submitting',\n    complete: 'complete',\n} as const;\n\nexport const service_code = {\n    idv: 'idv',\n    onfido: 'onfido',\n    manual: 'manual',\n} as const;\n","import React from 'react';\nimport { Button, Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\ntype TExpired = {\n    handleRequireSubmission: () => void;\n    is_from_external?: boolean;\n    redirect_button?: React.ReactElement;\n};\n\nconst Expired = ({ handleRequireSubmission, is_from_external, redirect_button }: TExpired) => {\n    return (\n        <IconMessageContent\n            message={localize('New proof of identity document needed')}\n            icon={<Icon icon='IcPoiUpload' size={128} />}\n        >\n            <Button\n                type='button'\n                className='account-management__continue'\n                onClick={handleRequireSubmission}\n                large\n                text={localize('Upload Document')}\n                primary\n            />\n            {!is_from_external && redirect_button}\n        </IconMessageContent>\n    );\n};\n\nexport default Expired;\n","import Expired from './expired';\n\nexport default Expired;\n","import React from 'react';\nimport { Button, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { DerivLightExclamationPoiIcon } from '@deriv/quill-icons';\nimport { POIContext } from '@deriv/shared';\nimport { submission_status_code } from '../../../../Sections/Verification/ProofOfIdentity/proof-of-identity-utils';\n\ntype TIdvLimited = {\n    handleRequireSubmission: () => void;\n};\n\nconst IdvLimited = ({ handleRequireSubmission }: TIdvLimited) => {\n    const { setSubmissionStatus } = React.useContext(POIContext);\n\n    return (\n        <div className='proof-of-identity__container'>\n            <DerivLightExclamationPoiIcon className='icon' />\n            <Text className='proof-of-identity__text btm-spacer' align='center' weight='bold'>\n                {localize('ID verification failed')}\n            </Text>\n            <Text className='proof-of-identity__text btm-spacer' align='center' size='xs'>\n                {localize('We were unable to verify your ID with the details you provided. ')}\n                {localize('Please upload your identity document.')}\n            </Text>\n            <Button\n                type='button'\n                className='account-management__continue'\n                onClick={() => {\n                    handleRequireSubmission();\n                    setSubmissionStatus(submission_status_code.selecting);\n                }}\n                large\n                text={localize('Upload identity document')}\n                primary\n            />\n        </div>\n    );\n};\n\nexport default IdvLimited;\n","import IdvLimited from './idv-limited';\n\nexport default IdvLimited;\n","import React from 'react';\nimport { ButtonLink, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport clsx from 'clsx';\n\ntype TPoaButton = {\n    custom_text?: React.ReactNode;\n    class_name?: string;\n};\n\nconst DEFAULT_BTN_TEXT = <Localize i18n_default_text='Submit proof of address' />;\n\nconst PoaButton = ({ custom_text = DEFAULT_BTN_TEXT, class_name }: TPoaButton) => (\n    <ButtonLink className={clsx('account-management__button', class_name)} to={routes.proof_of_address}>\n        <Text className='dc-btn__text' as='p' weight='bold' data-testid='poa_button_text'>\n            {custom_text}\n        </Text>\n    </ButtonLink>\n);\n\nexport default PoaButton;\n","import PoaButton from './poa-button';\n\nexport default PoaButton;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Text } from '@deriv/components';\nimport { TIDVErrorStatus, IDV_ERROR_STATUS } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { DerivLightWaitingPoiIcon } from '@deriv/quill-icons';\nimport PoaButton from '../../../poa/poa-button';\n\ntype TIdvSubmitComplete = {\n    is_from_external: boolean;\n    mismatch_status: TIDVErrorStatus;\n    needs_poa: boolean;\n    redirect_button: React.ReactNode;\n};\n\nconst IdvSubmitComplete = observer(\n    ({ is_from_external, mismatch_status, needs_poa, redirect_button }: Partial<TIdvSubmitComplete>) => {\n        const { client } = useStore();\n        const { is_already_attempted } = client;\n\n        const is_mismatch_error =\n            mismatch_status === IDV_ERROR_STATUS.NameDobMismatch.code ||\n            mismatch_status === IDV_ERROR_STATUS.DobMismatch.code ||\n            mismatch_status === IDV_ERROR_STATUS.NameMismatch.code;\n\n        const is_expired_or_failed_error =\n            mismatch_status === IDV_ERROR_STATUS.Expired.code || mismatch_status === IDV_ERROR_STATUS.Failed.code;\n\n        const getHeaderText = () => {\n            if (is_already_attempted) {\n                if (is_mismatch_error) return <Localize i18n_default_text='Your profile is updated' />;\n                if (is_expired_or_failed_error)\n                    return <Localize i18n_default_text='Your document has been submitted' />;\n            }\n            return <Localize i18n_default_text='Review in progress' />;\n        };\n\n        const getDescriptionText = () => {\n            if (is_already_attempted && (is_mismatch_error || is_expired_or_failed_error))\n                return (\n                    <Localize i18n_default_text=\"We'll review your proof of identity again and will give you an update as soon as possible.\" />\n                );\n            return (\n                <Localize i18n_default_text='Your proof of identity is under review. We’ll get back to you within 5 minutes.' />\n            );\n        };\n\n        const poa_button = !is_from_external && <PoaButton custom_text={<Localize i18n_default_text='Next' />} />;\n\n        return (\n            <div className={clsx('proof-of-identity__container', 'proof-of-identity__container--status')}>\n                <DerivLightWaitingPoiIcon className='icon' />\n                <Text className='proof-of-identity__text btm-spacer' align='center' weight='bold'>\n                    {getHeaderText()}\n                </Text>\n                <Text className='proof-of-identity__text text' size='xs' align='center'>\n                    {getDescriptionText()}\n                </Text>\n                {needs_poa ? (\n                    <React.Fragment>\n                        <Text className='text' size='xs' align='center'>\n                            <Localize i18n_default_text='To start trading, you also need to verify your address.' />\n                        </Text>\n                        {poa_button}\n                    </React.Fragment>\n                ) : (\n                    <div className='proof-of-identity__redirection'>{redirect_button}</div>\n                )}\n            </div>\n        );\n    }\n);\n\nexport default React.memo(IdvSubmitComplete);\n","import IdvSubmitComplete from './idv-submit-complete';\n\nexport default IdvSubmitComplete;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { ButtonLink, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { routes } from '@deriv/shared/src/utils/routes/routes';\n\ntype TContinueTradingButtonProps = { className?: string };\n\n/**\n * Renders a button that redirects to the trading platform\n * @name ContinueTradingButton\n * @param className - Styles to be applied to the button\n * @returns React Element\n */\nexport const ContinueTradingButton = ({ className }: TContinueTradingButtonProps) => (\n    <ButtonLink className={clsx('account-management__button', className)} to={routes.trade}>\n        <Text className='dc-btn__text' as='p' weight='bold' data-testid='continue_btn_text'>\n            <Localize i18n_default_text='Continue trading' />\n        </Text>\n    </ButtonLink>\n);\n","import IdvVerified from './idv-verified';\n\nexport default IdvVerified;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { Localize } from '@deriv/translations';\nimport { ContinueTradingButton } from '../../../poa/continue-trading-button/continue-trading-button';\nimport { DerivLightApprovedPoiIcon } from '@deriv/quill-icons';\nimport PoaButton from '../../../poa/poa-button/poa-button';\n\ntype TIdvVerified = {\n    needs_poa: boolean;\n    is_from_external: boolean;\n    redirect_button: React.ReactNode;\n};\n\nconst IdvVerified = ({ needs_poa, is_from_external, redirect_button }: Partial<TIdvVerified>) => {\n    const header_Text = needs_poa ? (\n        <Localize i18n_default_text='Your ID is verified. You will also need to submit proof of your address.' />\n    ) : (\n        <Localize i18n_default_text='ID verification passed' />\n    );\n    const { isDesktop } = useDevice();\n    return (\n        <div\n            className={clsx('proof-of-identity__container', 'proof-of-identity__container--status')}\n            data-testid='poi_idv_verified_container'\n        >\n            <DerivLightApprovedPoiIcon className='icon' />\n            <Text className='proof-of-identity__text btm-spacer' align='center' weight='bold'>\n                {header_Text}\n            </Text>\n            {needs_poa ? (\n                <React.Fragment>\n                    {isDesktop && (\n                        <Text className='text' size='xs' align='center'>\n                            <Localize i18n_default_text=\"Next, we'll need your proof of address.\" />\n                        </Text>\n                    )}\n                    {!is_from_external && (\n                        <PoaButton custom_text={<Localize i18n_default_text='Submit proof of address' />} />\n                    )}\n                </React.Fragment>\n            ) : (\n                redirect_button || <ContinueTradingButton className='continue-trade' />\n            )}\n        </div>\n    );\n};\n\nexport default IdvVerified;\n","import React from 'react';\nimport { formatIDVError } from '@deriv/shared';\nimport IdvLimited from '../../../Components/poi/idv-status/idv-limited';\nimport IdvSubmitComplete from '../../../Components/poi/idv-status/idv-submit-complete';\nimport IdvVerified from '../../../Components/poi/idv-status/idv-verified';\nimport { identity_status_codes } from './proof-of-identity-utils';\n\nconst Idv = ({ handleRequireSubmission, idv, is_from_external, needs_poa, redirect_button }) => {\n    const { status, submissions_left, last_rejected } = idv;\n    switch (status) {\n        case identity_status_codes.pending:\n            return (\n                <IdvSubmitComplete\n                    is_from_external={is_from_external}\n                    mismatch_status={formatIDVError(last_rejected, status)}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                />\n            );\n        case identity_status_codes.rejected:\n        case identity_status_codes.suspected:\n        case identity_status_codes.expired:\n            if (Number(submissions_left) < 1) return <IdvLimited handleRequireSubmission={handleRequireSubmission} />;\n            return null;\n        case identity_status_codes.verified:\n            return (\n                <IdvVerified\n                    is_from_external={is_from_external}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                />\n            );\n        default:\n            return null;\n    }\n};\n\nexport default Idv;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\nimport { Chat } from '@deriv/utils';\n\nexport const POILimited = () => (\n    <IconMessageContent\n        message={localize(\"You've reached the limit for uploading your documents.\")}\n        text={\n            <Localize\n                i18n_default_text='Please contact us via <0>live chat</0>.'\n                components={[<span key={0} className='link link--orange' onClick={Chat.open} />]}\n            />\n        }\n        icon={<Icon icon='IcPoiFailed' size={128} />}\n    />\n);\n","import { POILimited } from './limited';\n\nexport default POILimited;\n","import { OnfidoNotRequired } from './not-required';\n\nexport default OnfidoNotRequired;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\nexport const OnfidoNotRequired = () => (\n    <IconMessageContent\n        message={localize('Proof of identity verification not required')}\n        text={localize(\n            'Your account does not need identity verification at this time. We will inform you if identity verification is required in the future.'\n        )}\n        icon={<Icon icon='IcPoiVerified' size={128} />}\n    />\n);\n","import { RouteButton } from './route-button';\n\nexport default RouteButton;\n","import clsx from 'clsx';\nimport { ButtonLink, Text } from '@deriv/components';\n\ntype TRouteButtonProps = { route: string; button_label: string; className?: string };\n\n/**\n * Renders a button that redirects to the trading platform\n * @name RouteButton\n * @param route - Route to redirect to\n * @param button_label - Text to be displayed on the button\n * @param className - Styles to be applied to the button\n * @returns React Element\n */\nexport const RouteButton = ({ button_label, className, route }: TRouteButtonProps) => (\n    <ButtonLink className={clsx('account-management__button', className)} to={route}>\n        <Text className='dc-btn__text' as='p' weight='bold' data-testid='route_btn_text'>\n            {button_label}\n        </Text>\n    </ButtonLink>\n);\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { routes } from '@deriv/shared';\nimport { useTranslations } from '@deriv-com/translations';\nimport RouteButton from '../../../route-button';\nimport PoaButton from '../../../poa/poa-button';\nimport IconMessageContent from '../../../icon-message-content/icon-message-content';\nimport { TPOIStatus } from 'Types';\n\nexport const UploadComplete = ({\n    needs_poa,\n    redirect_button,\n    is_from_external,\n    is_manual_upload = false,\n}: TPOIStatus) => {\n    const { localize } = useTranslations();\n    const message = localize('Review in progress');\n    const description = is_manual_upload\n        ? localize('Your proof of identity is under review. We’ll get back to you within 1–3 working days.')\n        : localize('Your proof of identity is under review. We’ll get back to you within 5 minutes.');\n\n    if (!needs_poa) {\n        return (\n            <IconMessageContent message={message} text={description} icon={<Icon icon='IcPoiVerified' size={128} />}>\n                {!is_from_external && (\n                    <RouteButton button_label={localize(\"Return to Trader's Hub\")} route={routes.traders_hub} />\n                )}\n            </IconMessageContent>\n        );\n    }\n    return (\n        <IconMessageContent message={message} icon={<Icon icon='IcPoiVerified' size={128} />}>\n            <React.Fragment>\n                <div className='account-management__text-container'>\n                    <Text align='center' size='xs' as='p'>\n                        {description}\n                    </Text>\n                    <Text align='center' size='xs' as='p'>\n                        {localize('To start trading, you also need to verify your address.')}\n                    </Text>\n                </div>\n                <PoaButton custom_text={localize('Next')} />\n            </React.Fragment>\n            {!is_from_external && redirect_button}\n        </IconMessageContent>\n    );\n};\n\nexport default UploadComplete;\n","import { UploadComplete } from './upload-complete';\n\nexport default UploadComplete;\n","import { ContinueTradingButton } from './continue-trading-button';\n\nexport default ContinueTradingButton;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { TPOIStatus } from 'Types';\nimport IconMessageContent from '../../../icon-message-content';\nimport PoaButton from '../../../poa/poa-button';\nimport { service_code } from '../../../../Sections/Verification/ProofOfIdentity/proof-of-identity-utils';\nimport ContinueTradingButton from '../../../poa/continue-trading-button';\n\nexport const Verified = ({ needs_poa, redirect_button, is_from_external, service }: TPOIStatus) => {\n    const message =\n        service === service_code.idv\n            ? localize('ID verification passed')\n            : localize('Your proof of identity is verified');\n\n    if (!needs_poa) {\n        return (\n            <IconMessageContent\n                message={message}\n                icon={<Icon icon='IcPoaVerified' size={128} data_testid='dt_IcPoaVerified' />}\n                className='account-management-dashboard'\n            >\n                {!is_from_external && (redirect_button || <ContinueTradingButton />)}\n            </IconMessageContent>\n        );\n    }\n    return (\n        <IconMessageContent\n            message={message}\n            icon={<Icon icon='IcPoaVerified' size={128} />}\n            className='account-management-dashboard'\n            text={localize('To continue trading, you must also submit a proof of address.')}\n        >\n            {!is_from_external && (\n                <React.Fragment>\n                    <PoaButton />\n                </React.Fragment>\n            )}\n        </IconMessageContent>\n    );\n};\n\nexport default Verified;\n","import { Verified } from './verified';\n\nexport default Verified;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TListItem = {\n    text: React.ReactNode;\n    index?: number;\n};\n\nconst ListItem = ({ text, index }: TListItem) => {\n    const { isDesktop } = useDevice();\n\n    const text_size = isDesktop ? 'xs' : 'xxs';\n    return (\n        <div className='account-management__list-text-container'>\n            {index && (\n                <Text size={text_size} className='account-management__list-text'>\n                    <Localize i18n_default_text='{{index}}.' values={{ index }} />{' '}\n                </Text>\n            )}\n            <Text size={text_size} className='account-management__list-text'>\n                {text}\n            </Text>\n        </div>\n    );\n};\n\nexport default ListItem;\n","import IconMessageList from './icon-message-list';\n\nexport default IconMessageList;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Div100vhContainer, Text, Button, ThemedScrollbars, Icon } from '@deriv/components';\nimport { getOnfidoError } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport ListItem from './list-item';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TIconMessageList = {\n    className?: string;\n    icon: React.ReactElement;\n    message: string;\n    message_list: Array<string>;\n    onContinue: () => void;\n};\n\nconst IconMessageList = ({ className, icon, message, message_list = [], onContinue }: TIconMessageList) => {\n    const { isDesktop, isMobile } = useDevice();\n\n    return (\n        <ThemedScrollbars is_bypassed={isMobile}>\n            <Div100vhContainer\n                className='account-management__message-wrapper'\n                is_disabled={isDesktop}\n                height_offset='110px'\n            >\n                <div\n                    className={clsx('account-management__message-content', {\n                        [`${className}__message-content`]: className,\n                    })}\n                    data-testid='dt_icon_message_list'\n                >\n                    {icon && (\n                        <div\n                            className={clsx('account-management__message-icon', {\n                                [`${className}__message-icon`]: className,\n                            })}\n                        >\n                            {icon}\n                        </div>\n                    )}\n                    <Text\n                        as='div'\n                        weight='bold'\n                        className={clsx('account-management__message', {\n                            [`${className}__message`]: className,\n                        })}\n                        size={isDesktop ? 's' : 'xs'}\n                    >\n                        {message}\n                    </Text>\n\n                    {message_list && (\n                        <div className='account-management__list-container'>\n                            <div className='account-management__list-message'>\n                                <div className='account-management__list-icon'>\n                                    <Icon icon='IcAlertDanger' color='red' />\n                                </div>\n                                <section>\n                                    {message_list.length < 2 ? (\n                                        <ListItem text={getOnfidoError(message_list[0])} />\n                                    ) : (\n                                        message_list.map((text, idx) => (\n                                            <ListItem\n                                                key={text}\n                                                text={getOnfidoError(message_list[idx])}\n                                                index={idx + 1}\n                                            />\n                                        ))\n                                    )}\n                                </section>\n                            </div>\n                        </div>\n                    )}\n                    {onContinue && (\n                        <Button\n                            type='button'\n                            className='account-management__continue'\n                            onClick={onContinue}\n                            large\n                            primary\n                        >\n                            <Localize i18n_default_text='Verify again' />\n                        </Button>\n                    )}\n                </div>\n            </Div100vhContainer>\n        </ThemedScrollbars>\n    );\n};\n\nexport default IconMessageList;\n","import { RejectedReasons } from './rejected-reasons';\n\nexport default RejectedReasons;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageList from '../../../icon-message-list';\n\ntype TIconMessageList = {\n    handleRequireSubmission: () => void;\n    rejected_reasons: string[];\n};\n\nexport const RejectedReasons = ({ handleRequireSubmission, rejected_reasons }: TIconMessageList) => (\n    <IconMessageList\n        message={localize('Your proof of identity submission failed because:')}\n        icon={<Icon icon='IcPoiFailed' size={128} />}\n        message_list={rejected_reasons}\n        onContinue={handleRequireSubmission}\n    />\n);\n","import POIManualUploadFailed from './poi-manual-upload-failed';\n\nexport default POIManualUploadFailed;\n","import React, { ReactNode } from 'react';\nimport { Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport IconMessageContent from '../icon-message-content';\n\ntype TPOIManualUploadFailed = {\n    error: string;\n    message?: ReactNode;\n};\nconst POIManualUploadFailed = ({ children, message, error }: React.PropsWithChildren<TPOIManualUploadFailed>) => (\n    <IconMessageContent\n        message={message ?? <Localize i18n_default_text={'Proof of identity documents upload failed'} />}\n        text={error}\n        icon={<Icon icon='IcPoiFailed' size={128} />}\n        className='account-management-dashboard'\n    >\n        {children}\n    </IconMessageContent>\n);\n\nexport default POIManualUploadFailed;\n","/**\n * Object containing error code strings returned by the API.\n */\nexport const API_ERROR_CODES = Object.freeze({\n    DUPLICATE_ACCOUNT: 'DuplicateAccount',\n    CLAIMED_DOCUMENT: 'ClaimedDocument',\n    DUPLICATE_DOCUMENT: 'DuplicateUpload',\n});\n","import DocumentUploader from '@binary-com/binary-document-uploader';\nimport { localize } from '@deriv/translations';\nimport { compressImageFiles, readFiles, TSettings } from '@deriv/shared';\nimport { TFile } from 'Types';\n\ntype TProcessedFile = TFile & TSettings & { message: string };\n\nconst fileReadErrorMessage = (filename: string) => {\n    return localize('Unable to read file {{name}}', { name: filename });\n};\n\nconst uploadFile = (file: File, getSocket: () => WebSocket, settings: TSettings) => {\n    return new Promise((resolve, reject) => {\n        if (!file) {\n            reject();\n        }\n\n        // File uploader instance connected to binary_socket\n        const uploader = new DocumentUploader({ connection: getSocket() });\n\n        let is_file_error = false;\n\n        compressImageFiles([file])\n            .then((files_to_process: Blob[]) => {\n                readFiles(files_to_process, fileReadErrorMessage, settings)\n                    .then(processed_files => {\n                        processed_files.forEach(item => {\n                            if (item.message) {\n                                is_file_error = true;\n                                reject(item);\n                            }\n                        });\n                        const total_to_upload = processed_files.length;\n                        if (is_file_error || !total_to_upload) {\n                            return; // don't start submitting files until all front-end validation checks pass\n                        }\n\n                        // send files\n                        uploader.upload(processed_files[0]).then(resolve).catch(reject);\n                    })\n                    /* eslint-disable no-console */\n                    .catch(error => console.error('error: ', error));\n            })\n            /* eslint-disable no-console */\n            .catch(error => console.error('error: ', error));\n    });\n};\n\nexport default uploadFile;\n","import React from 'react';\nimport { ButtonLink, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../icon-message-content';\n\ntype TGoToPersonalDetailsButton = {\n    has_invalid_postal_code?: boolean;\n    anchor?: string;\n    from?: string;\n    text?: string;\n};\n\nconst GoToPersonalDetailsButton = ({ anchor, from, text }: TGoToPersonalDetailsButton) => {\n    const from_string = from ? `?from=${from}` : '';\n    const anchor_string = anchor ? `#${anchor}` : '';\n    return (\n        <ButtonLink to={`/account/personal-details${from_string}${anchor_string}`}>\n            <Text className='dc-btn__text' weight='bold' as='p'>\n                {text ?? localize('Go to personal details')}\n            </Text>\n        </ButtonLink>\n    );\n};\n\nexport const MissingPersonalDetails = ({ has_invalid_postal_code, from }: TGoToPersonalDetailsButton) => {\n    if (has_invalid_postal_code)\n        return (\n            <IconMessageContent\n                message={localize('Your postal code is invalid')}\n                text={localize('Please check and update your postal code before submitting proof of identity.')}\n                icon={<Icon icon='IcAccountMissingDetails' size={128} />}\n            >\n                <GoToPersonalDetailsButton\n                    anchor='address_postcode'\n                    from={from}\n                    text={localize('Update postal code')}\n                />\n            </IconMessageContent>\n        );\n    return (\n        <IconMessageContent\n            message={localize('Your personal details are missing')}\n            text={localize('Please complete your personal details before you verify your identity.')}\n            icon={<Icon icon='IcAccountMissingDetails' size={128} />}\n        >\n            <GoToPersonalDetailsButton from={from} />\n        </IconMessageContent>\n    );\n};\n","import { MissingPersonalDetails } from './missing-personal-details';\n\nexport default MissingPersonalDetails;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport clsx from 'clsx';\nimport { Field, useFormikContext } from 'formik';\nimport { Autocomplete, Checkbox, InlineMessage, RadioGroup, SelectNative, Text } from '@deriv/components';\nimport { routes, validPhone } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport { isFieldImmutable, verifyFields } from '../../Helpers/utils';\nimport FormBodySection from '../form-body-section';\nimport { DateOfBirthField, FormInputField } from './form-fields';\nimport FormSubHeader from '../form-sub-header';\nimport InlineNoteWithIcon from '../inline-note-with-icon';\nimport { useResidenceList } from '@deriv/hooks';\nimport { useDevice } from '@deriv-com/ui';\nimport AccountOpeningReasonField from './form-fields/account-opening-reason';\n\nconst PersonalDetailsForm = props => {\n    const { isDesktop } = useDevice();\n    const {\n        inline_note_text,\n        is_virtual,\n        is_eu_user,\n        is_svg,\n        is_rendered_for_idv,\n        editable_fields = [],\n        has_real_account,\n        is_fully_authenticated,\n        account_opening_reason_list,\n        closeRealAccountSignup,\n        salutation_list,\n        is_rendered_for_onfido,\n        is_qualified_for_poa,\n        class_name,\n        states_list,\n        side_note,\n        no_confirmation_needed,\n        mismatch_status,\n    } = props;\n    const autocomplete_value = 'none';\n    // need to put this check related to DIEL clients\n    const is_svg_only = is_svg && !is_eu_user;\n\n    const { errors, touched, values, setFieldValue, handleChange, handleBlur } = useFormikContext();\n\n    const { data: residence_list } = useResidenceList();\n\n    const getNameAndDobLabels = () => {\n        const is_asterisk_needed = is_svg || is_eu_user || is_rendered_for_onfido || is_rendered_for_idv;\n        const first_name_label = is_asterisk_needed ? localize('First name*') : localize('First name');\n        const last_name_label = is_asterisk_needed ? localize('Last name*') : localize('Last name');\n        const dob_label = is_asterisk_needed ? localize('Date of birth*') : localize('Date of birth');\n\n        return {\n            first_name_label,\n            last_name_label,\n            dob_label,\n        };\n    };\n\n    const is_rendered_for_idv_or_onfido = is_rendered_for_idv || is_rendered_for_onfido;\n\n    const getFieldHint = field_name =>\n        is_svg_only || is_rendered_for_idv_or_onfido ? (\n            <Localize\n                i18n_default_text={'Your {{ field_name }} as in your identity document'}\n                values={{ field_name }}\n            />\n        ) : (\n            <Localize\n                i18n_default_text={'Please enter your {{ field_name }} as in your official identity documents.'}\n                values={{ field_name }}\n            />\n        );\n\n    const handleSalutationSelection = event => {\n        if (event.target?.type === 'radio') {\n            setFieldValue('salutation', event.target?.value);\n        }\n    };\n\n    const poa_clarification_message = (\n        <Localize i18n_default_text='Use the same address that appears on your proof of address (utility bill, bank statement, etc.).' />\n    );\n\n    // need to disable the checkbox if the user has not filled in the name and dob fields initially\n    const is_confirmation_checkbox_disabled = verifyFields(mismatch_status).some(\n        field => !values[field] || errors[field]\n    );\n\n    return (\n        <React.Fragment>\n            <div\n                className={clsx(class_name, {\n                    'account-form__poi-confirm-example': is_rendered_for_idv,\n                })}\n            >\n                {(is_svg_only || is_rendered_for_idv_or_onfido) && (\n                    <div className='account-form__poi-inline-message'>\n                        <InlineMessage message={inline_note_text} size='md' />\n                    </div>\n                )}\n                {is_qualified_for_poa && (\n                    <InlineNoteWithIcon\n                        icon='IcAlertWarning'\n                        message={poa_clarification_message}\n                        font_size={isDesktop ? 'xs' : 'xxxs'}\n                    />\n                )}\n                <FormBodySection\n                    has_side_note={is_rendered_for_idv_or_onfido || is_svg_only}\n                    side_note={side_note}\n                    side_note_position='right'\n                    type='image'\n                >\n                    <fieldset className='account-form__fieldset'>\n                        {'salutation' in values && !is_eu_user && (\n                            <div>\n                                <Text size={isDesktop ? 'xxs' : 'xs'} align={!isDesktop && 'center'}>\n                                    {is_virtual ? (\n                                        localize(\n                                            'Please remember that it is your responsibility to keep your answers accurate and up to date. You can update your personal details at any time in your account settings.'\n                                        )\n                                    ) : (\n                                        <Localize\n                                            i18n_default_text='Please remember that it is your responsibility to keep your answers accurate and up to date. You can update your personal details at any time in your <0>account settings</0>.'\n                                            components={[\n                                                <Link\n                                                    to={routes.personal_details}\n                                                    key={0}\n                                                    className='link'\n                                                    onClick={closeRealAccountSignup}\n                                                />,\n                                            ]}\n                                        />\n                                    )}\n                                </Text>\n                            </div>\n                        )}\n                        {is_eu_user && !is_rendered_for_onfido && !is_qualified_for_poa && (\n                            <FormSubHeader\n                                title={'salutation' in values ? localize('Title and name') : localize('Name')}\n                            />\n                        )}\n                        {'salutation' in values && (\n                            <span onClick={handleSalutationSelection}>\n                                <RadioGroup\n                                    className='dc-radio__input'\n                                    name='salutation'\n                                    selected={values.salutation}\n                                    onToggle={e => {\n                                        e.persist();\n                                        setFieldValue('salutation', e.target.value);\n                                    }}\n                                    required\n                                >\n                                    {salutation_list.map(item => (\n                                        <RadioGroup.Item\n                                            key={item.value}\n                                            label={item.label}\n                                            value={item.value}\n                                            disabled={\n                                                !!values.salutation && isFieldImmutable('salutation', editable_fields)\n                                            }\n                                            has_error={!!(touched.salutation && errors.salutation)}\n                                        />\n                                    ))}\n                                </RadioGroup>\n                            </span>\n                        )}\n                        {'first_name' in values && (\n                            <FormInputField\n                                name='first_name'\n                                required={is_svg}\n                                label={getNameAndDobLabels().first_name_label}\n                                hint={getFieldHint(localize('first name'))}\n                                disabled={\n                                    isFieldImmutable('first_name', editable_fields) ||\n                                    (values?.first_name && has_real_account)\n                                }\n                                placeholder={localize('John')}\n                                data-testid='first_name'\n                            />\n                        )}\n                        {'last_name' in values && (\n                            <FormInputField\n                                name='last_name'\n                                required={is_svg}\n                                label={getNameAndDobLabels().last_name_label}\n                                hint={getFieldHint(localize('last name'))}\n                                disabled={\n                                    isFieldImmutable('last_name', editable_fields) ||\n                                    (values?.last_name && has_real_account)\n                                }\n                                placeholder={localize('Doe')}\n                                data-testid='last_name'\n                            />\n                        )}\n                        {is_eu_user && !is_qualified_for_poa && <FormSubHeader title={localize('Other details')} />}\n                        {'date_of_birth' in values && (\n                            <DateOfBirthField\n                                name='date_of_birth'\n                                required={is_svg}\n                                label={getNameAndDobLabels().dob_label}\n                                hint={getFieldHint(localize('date of birth'))}\n                                disabled={\n                                    isFieldImmutable('date_of_birth', editable_fields) ||\n                                    (values?.date_of_birth && has_real_account)\n                                }\n                                placeholder={localize('01-07-1999')}\n                                portal_id='modal_root'\n                                data_testid='date_of_birth'\n                            />\n                        )}\n                        {'address_line_1' in values && (\n                            <FormInputField\n                                name='address_line_1'\n                                label={localize('First line of address*')}\n                                disabled={isFieldImmutable('address_line_1', editable_fields)}\n                                data-testid='address_line_1'\n                                autoComplete='off'\n                                data-lpignore='true'\n                                type='text'\n                                maxLength={70}\n                                required\n                                onBlur={handleBlur}\n                                error={touched.address_line_1 && errors.address_line_1}\n                                value={values.address_line_1}\n                            />\n                        )}\n                        {'address_line_2' in values && (\n                            <FormInputField\n                                name='address_line_2'\n                                label={localize('Second line of address (optional)')}\n                                disabled={isFieldImmutable('address_line_2', editable_fields)}\n                                data-testid='address_line_2'\n                                autoComplete='off'\n                                data-lpignore='true'\n                                type='text'\n                                maxLength={70}\n                                onBlur={handleBlur}\n                                error={touched.address_line_2 && errors.address_line_2}\n                                value={values.address_line_2}\n                            />\n                        )}\n                        {'address_city' in values && (\n                            <FormInputField\n                                name='address_city'\n                                label={localize('Town/City*')}\n                                disabled={isFieldImmutable('address_city', editable_fields)}\n                                data-testid='address_city'\n                                autoComplete='off'\n                                data-lpignore='true'\n                                type='text'\n                                maxLength={70}\n                                required\n                                onBlur={handleBlur}\n                                error={touched.address_city && errors.address_city}\n                                value={values.address_city}\n                            />\n                        )}\n                        {'address_state' in values &&\n                            (states_list?.length ? (\n                                <React.Fragment>\n                                    {isDesktop ? (\n                                        <Field name='address_state'>\n                                            {({ field }) => (\n                                                <Autocomplete\n                                                    {...field}\n                                                    data-lpignore='true'\n                                                    autoComplete='new-password' // prevent chrome autocomplete\n                                                    type='text'\n                                                    label={localize('State/Province')}\n                                                    error={touched.address_state && errors.address_state}\n                                                    list_items={states_list}\n                                                    onItemSelection={({ value, text }) =>\n                                                        setFieldValue('address_state', value ? text : '', true)\n                                                    }\n                                                />\n                                            )}\n                                        </Field>\n                                    ) : (\n                                        <SelectNative\n                                            placeholder={localize('Please select')}\n                                            label={localize('State/Province')}\n                                            value={values.address_state}\n                                            list_items={states_list}\n                                            error={touched.address_state && errors.address_state}\n                                            use_text\n                                            onChange={e => setFieldValue('address_state', e.target.value, true)}\n                                        />\n                                    )}\n                                </React.Fragment>\n                            ) : (\n                                <FormInputField\n                                    data-lpignore='true'\n                                    autoComplete='off'\n                                    type='text'\n                                    name='address_state'\n                                    label={localize('State/Province')}\n                                    value={values.address_state}\n                                    error={touched.address_state && errors.address_state}\n                                    onBlur={handleBlur}\n                                />\n                            ))}\n                        {'address_postcode' in values && (\n                            <FormInputField\n                                name='address_postcode'\n                                label={localize('Postal/ZIP code')}\n                                disabled={isFieldImmutable('address_postcode', editable_fields)}\n                                data-testid='address_postcode'\n                                autoComplete='off'\n                                data-lpignore='true'\n                                type='text'\n                                maxLength={70}\n                                onBlur={handleBlur}\n                                error={touched.address_postcode && errors.address_postcode}\n                                value={values.address_postcode}\n                            />\n                        )}\n                        {!is_svg_only && 'place_of_birth' in values && (\n                            <PlaceOfBirthField\n                                handleChange={handleChange}\n                                setFieldValue={setFieldValue}\n                                disabled={isFieldImmutable('place_of_birth', editable_fields)}\n                                residence_list={residence_list}\n                                required\n                            />\n                        )}\n                        {'citizen' in values && (\n                            <Field name='citizen'>\n                                {({ field }) => (\n                                    <React.Fragment>\n                                        {isDesktop ? (\n                                            <Autocomplete\n                                                {...field}\n                                                data-lpignore='true'\n                                                autoComplete={autocomplete_value} // prevent chrome autocomplete\n                                                type='text'\n                                                label={is_eu_user ? localize('Citizenship*') : localize('Citizenship')}\n                                                error={touched.citizen && errors.citizen}\n                                                disabled={\n                                                    (values?.citizen && is_fully_authenticated) ||\n                                                    isFieldImmutable('citizen', editable_fields) ||\n                                                    (values?.citizen && has_real_account)\n                                                }\n                                                list_items={residence_list}\n                                                onItemSelection={({ value, text }) =>\n                                                    setFieldValue('citizen', value ? text : '', true)\n                                                }\n                                                list_portal_id='modal_root'\n                                                required\n                                                data-testid='citizenship'\n                                            />\n                                        ) : (\n                                            <SelectNative\n                                                placeholder={localize('Citizenship')}\n                                                name={field.name}\n                                                disabled={\n                                                    (values?.citizen && is_fully_authenticated) ||\n                                                    isFieldImmutable('citizen', editable_fields) ||\n                                                    (values?.citizen && has_real_account)\n                                                }\n                                                label={is_eu_user ? localize('Citizenship*') : localize('Citizenship')}\n                                                list_items={residence_list}\n                                                value={values.citizen}\n                                                use_text\n                                                error={touched.citizen && errors.citizen}\n                                                onChange={e => {\n                                                    handleChange(e);\n                                                    setFieldValue('citizen', e.target.value, true);\n                                                }}\n                                                {...field}\n                                                required\n                                                should_hide_disabled_options={false}\n                                                data_testid='citizenship_mobile'\n                                            />\n                                        )}\n                                    </React.Fragment>\n                                )}\n                            </Field>\n                        )}\n                        {!is_svg_only && 'phone' in values && (\n                            <PhoneField\n                                value={values.phone}\n                                editable_fields={editable_fields}\n                                has_real_account={has_real_account}\n                                required\n                            />\n                        )}\n                        {!is_svg_only && 'account_opening_reason' in values && (\n                            <AccountOpeningReasonField\n                                required\n                                account_opening_reason_list={account_opening_reason_list}\n                                setFieldValue={setFieldValue}\n                                disabled={\n                                    isFieldImmutable('account_opening_reason', editable_fields) ||\n                                    (values?.account_opening_reason && has_real_account)\n                                }\n                            />\n                        )}\n                    </fieldset>\n                </FormBodySection>\n                {!no_confirmation_needed && is_rendered_for_idv && (\n                    <Checkbox\n                        name='confirmation_checkbox'\n                        className='formik__confirmation-checkbox'\n                        value={values.confirmation_checkbox}\n                        label={\n                            <Localize i18n_default_text='I confirm that the name and date of birth above match my chosen identity document' />\n                        }\n                        label_font_size={isDesktop ? 'xs' : 'xxs'}\n                        disabled={is_confirmation_checkbox_disabled}\n                        onChange={handleChange}\n                        has_error={!!(touched.confirmation_checkbox && errors.confirmation_checkbox)}\n                    />\n                )}\n            </div>\n\n            {is_svg_only && (\n                <div className='account-form__poi-additional-information'>\n                    <FormSubHeader title={localize('Additional information')} />\n                    {'phone' in values && (\n                        <PhoneField\n                            value={values.phone}\n                            editable_fields={editable_fields}\n                            has_real_account={has_real_account}\n                            required\n                        />\n                    )}\n                    <React.Fragment>\n                        {'place_of_birth' in values && (\n                            <PlaceOfBirthField\n                                handleChange={handleChange}\n                                setFieldValue={setFieldValue}\n                                disabled={isFieldImmutable('place_of_birth', editable_fields)}\n                                residence_list={residence_list}\n                                required\n                            />\n                        )}\n                        {'account_opening_reason' in values && (\n                            <AccountOpeningReasonField\n                                account_opening_reason_list={account_opening_reason_list}\n                                setFieldValue={setFieldValue}\n                                disabled={\n                                    isFieldImmutable('account_opening_reason', editable_fields) ||\n                                    (values?.account_opening_reason && has_real_account)\n                                }\n                                required\n                                is_modal\n                            />\n                        )}\n                    </React.Fragment>\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default PersonalDetailsForm;\n\nconst PhoneField = ({ value, editable_fields, has_real_account, required }) => (\n    <FormInputField\n        name='phone'\n        label={required ? localize('Phone number*') : localize('Phone number')}\n        placeholder={required ? localize('Phone number*') : localize('Phone number')}\n        disabled={\n            isFieldImmutable('phone', editable_fields) ||\n            (value && has_real_account && validPhone(value) && value?.length >= 9 && value?.length <= 35)\n        }\n        maxLength={50}\n        data-testid='phone'\n    />\n);\n\nconst PlaceOfBirthField = ({ handleChange, setFieldValue, disabled, residence_list, required }) => {\n    const { isDesktop } = useDevice();\n    return (\n        <Field name='place_of_birth'>\n            {({ field, meta }) => (\n                <React.Fragment>\n                    {isDesktop ? (\n                        <Autocomplete\n                            {...field}\n                            disabled={disabled}\n                            data-lpignore='true'\n                            autoComplete='none' // prevent chrome autocomplete\n                            type='text'\n                            label={required ? localize('Place of birth*') : localize('Place of birth')}\n                            error={meta.touched && meta.error}\n                            list_items={residence_list}\n                            onItemSelection={({ value, text }) =>\n                                setFieldValue('place_of_birth', value ? text : '', true)\n                            }\n                            required\n                            data-testid='place_of_birth'\n                        />\n                    ) : (\n                        <SelectNative\n                            placeholder={required ? localize('Place of birth') : localize('Place of birth')}\n                            name={field.name}\n                            disabled={disabled}\n                            label={required ? localize('Place of birth*') : localize('Place of birth')}\n                            list_items={residence_list}\n                            value={field.value}\n                            use_text\n                            error={meta.touched && meta.error}\n                            onChange={e => {\n                                handleChange(e);\n                                setFieldValue('place_of_birth', e.target.value, true);\n                            }}\n                            {...field}\n                            list_portal_id='modal_root'\n                            required\n                            should_hide_disabled_options={false}\n                            data_testid='place_of_birth_mobile'\n                        />\n                    )}\n                </React.Fragment>\n            )}\n        </Field>\n    );\n};\n","import React from 'react';\nimport { GetAccountStatus, ResidenceList } from '@deriv/api-types';\nimport { IDV_ERROR_STATUS, getIDVError } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { DerivLightNameDobPoiIcon, DerivLightDobPoiIcon, DerivLightNamePoiIcon } from '@deriv/quill-icons';\nimport { getIDVDocumentType } from '../Helpers/utils';\nimport { Chat } from '@deriv/utils';\n\nconst handleOnClick = () => Chat.open();\n\nexport const GENERIC_ERROR_MESSAGE = (\n    <Localize i18n_default_text='Sorry, an internal error occurred. Hit the above checkbox to try again.' />\n);\n\nexport const DUPLICATE_ACCOUNT_ERROR_MESSAGE = (\n    <Localize\n        i18n_default_text='An account with these details already exists. Please make sure the details you entered are correct as only one real account is allowed per client. If this is a mistake, contact us via <0>live chat</0>.'\n        components={[<span key={0} className='link link--orange' onClick={handleOnClick} onKeyDown={handleOnClick} />]}\n    />\n);\n\nexport const CLAIMED_DOCUMENT_ERROR_MESSAGE = (\n    <Localize\n        i18n_default_text=\"This document number was already submitted for a different account. It seems you have an account with us that doesn't need further verification. Please contact us via <0>live chat</0> if you need help.\"\n        components={[<span key={0} className='link link--orange' onClick={handleOnClick} onKeyDown={handleOnClick} />]}\n    />\n);\n\nexport const generateIDVError = (\n    is_document_upload_required: boolean,\n    latest_status: DeepRequired<GetAccountStatus>['authentication']['attempts']['latest'],\n    chosen_country: ResidenceList[0],\n    mismatch_status: keyof typeof IDV_ERROR_STATUS\n) => {\n    const document_name = is_document_upload_required\n        ? 'identity document'\n        : getIDVDocumentType(latest_status, chosen_country);\n\n    switch (mismatch_status) {\n        case IDV_ERROR_STATUS.NameMismatch.code:\n            return {\n                required_fields: ['first_name', 'last_name'],\n                side_note_image: <DerivLightNamePoiIcon height='195px' width='285px' />,\n                inline_note_text: (\n                    <Localize\n                        i18n_default_text='To avoid delays, enter your <0>name</0> exactly as it appears on your {{document_name}}.'\n                        components={[<strong key={0} />]}\n                        values={{ document_name }}\n                    />\n                ),\n                failure_message: IDV_ERROR_STATUS.NameMismatch.message,\n            };\n        case IDV_ERROR_STATUS.DobMismatch.code:\n            return {\n                required_fields: ['date_of_birth'],\n                side_note_image: <DerivLightDobPoiIcon height='195px' width='285px' />,\n                inline_note_text: (\n                    <Localize\n                        i18n_default_text='To avoid delays, enter your <0>date of birth</0> exactly as it appears on your {{document_name}}.'\n                        components={[<strong key={0} />]}\n                        values={{ document_name }}\n                    />\n                ),\n                failure_message: IDV_ERROR_STATUS.DobMismatch.message,\n            };\n        default:\n            return {\n                required_fields: ['first_name', 'last_name', 'date_of_birth'],\n                side_note_image: <DerivLightNameDobPoiIcon height='195px' width='285px' />,\n                inline_note_text: (\n                    <Localize\n                        i18n_default_text='To avoid delays, enter your <0>name</0> and <0>date of birth</0> exactly as they appear on your {{document_name}}.'\n                        components={[<strong key={0} />]}\n                        values={{ document_name }}\n                    />\n                ),\n                failure_message: getIDVError(mismatch_status),\n            };\n    }\n};\n","import PoiConfirmWithExampleFormContainer from './poi-confirm-with-example-form-container';\n\nexport default PoiConfirmWithExampleFormContainer;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikHelpers } from 'formik';\nimport { GetSettings } from '@deriv/api-types';\nimport { Checkbox, HintBox, Loading, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    filterObjProperties,\n    isEmptyObject,\n    isMobile,\n    removeEmptyPropertiesFromObject,\n    toMoment,\n    WS,\n} from '@deriv/shared';\nimport { DerivLightNameDobPoiIcon } from '@deriv/quill-icons';\nimport FormBody from '../../form-body';\nimport LoadErrorMessage from '../../load-error-message';\nimport PersonalDetailsForm from '../../forms/personal-details-form.jsx';\nimport { GENERIC_ERROR_MESSAGE, DUPLICATE_ACCOUNT_ERROR_MESSAGE } from '../../../Configs/poi-error-config';\nimport { API_ERROR_CODES } from '../../../Constants/api-error-codes';\nimport { makeSettingsRequest, validate, validateName } from '../../../Helpers/utils';\nimport { TInputFieldValues } from '../../../Types';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TRestState = {\n    api_error: string;\n    show_form: boolean;\n    errors?: boolean;\n    form_initial_values: TInputFieldValues;\n    changeable_fields: string[];\n};\n\ntype TPoiConfirmWithExampleFormContainer = {\n    account_settings: GetSettings;\n    getChangeableFields: () => string[];\n    onFormConfirm?: () => void;\n};\n\nconst PoiConfirmWithExampleFormContainer = ({\n    account_settings,\n    getChangeableFields,\n    onFormConfirm,\n}: TPoiConfirmWithExampleFormContainer) => {\n    const { isDesktop } = useDevice();\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [checked, setChecked] = React.useState(false);\n    const [rest_state, setRestState] = React.useState<TRestState>({\n        show_form: true,\n        form_initial_values: { first_name: '', last_name: '', date_of_birth: '' },\n        changeable_fields: [],\n        api_error: '',\n    });\n\n    const side_note_image = <DerivLightNameDobPoiIcon height='195px' width='285px' />;\n\n    React.useEffect(() => {\n        const initializeFormValues = async () => {\n            try {\n                await WS?.wait('get_settings');\n                const visible_settings = ['first_name', 'last_name', 'date_of_birth'];\n                const form_initial_values = filterObjProperties(account_settings, visible_settings);\n                if (form_initial_values.date_of_birth) {\n                    form_initial_values.date_of_birth = toMoment(form_initial_values.date_of_birth).format(\n                        'YYYY-MM-DD'\n                    );\n                }\n                setRestState({\n                    ...rest_state,\n                    changeable_fields: getChangeableFields(),\n                    form_initial_values,\n                });\n                setIsLoading(false);\n            } catch (e) {\n                // eslint-disable-next-line no-console\n                console.error(e);\n            }\n        };\n\n        initializeFormValues();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [account_settings]);\n\n    const onSubmit = async (\n        values: TInputFieldValues,\n        { setStatus, setSubmitting }: FormikHelpers<TInputFieldValues>\n    ) => {\n        if (checked) return;\n        setStatus({ error_msg: '' });\n        const request = makeSettingsRequest(\n            values,\n            rest_state?.changeable_fields ? [...rest_state.changeable_fields] : []\n        );\n        const data = await WS.setSettings(request);\n\n        if (data?.error) {\n            const response_error =\n                data.error?.code === API_ERROR_CODES.DUPLICATE_ACCOUNT\n                    ? DUPLICATE_ACCOUNT_ERROR_MESSAGE\n                    : GENERIC_ERROR_MESSAGE;\n            setStatus({ error_msg: response_error });\n            setSubmitting(false);\n        } else {\n            const response = await WS.authorized.storage.getSettings();\n            if (response?.error) {\n                setRestState({ ...rest_state, api_error: response.error.message });\n                return;\n            }\n            const { first_name, last_name, date_of_birth } = response?.get_settings ?? {\n                ...rest_state.form_initial_values,\n            };\n            setRestState({ ...rest_state, form_initial_values: { first_name, last_name, date_of_birth } });\n            setChecked(true);\n            setIsLoading(false);\n\n            if (onFormConfirm) {\n                setTimeout(() => {\n                    onFormConfirm();\n                }, 500);\n            }\n        }\n    };\n\n    const validateFields = (values: TInputFieldValues) => {\n        const errors: TInputFieldValues = {};\n        const validateValues = validate(errors, values);\n\n        const required_fields = ['first_name', 'last_name', 'date_of_birth'];\n\n        validateValues(val => val, required_fields, localize('This field is required'));\n\n        if (values.first_name) {\n            errors.first_name = validateName(values.first_name);\n        }\n        if (values.last_name) {\n            errors.last_name = validateName(values.last_name);\n        }\n\n        setRestState({ ...rest_state, errors: !isEmptyObject(removeEmptyPropertiesFromObject(errors)) });\n        return removeEmptyPropertiesFromObject(errors);\n    };\n\n    const {\n        form_initial_values: { ...form_initial_values },\n        api_error,\n    } = rest_state;\n\n    if (api_error) return <LoadErrorMessage error_message={api_error} />;\n\n    if (is_loading) {\n        return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    }\n\n    return (\n        <Formik initialValues={form_initial_values} enableReinitialize onSubmit={onSubmit} validate={validateFields}>\n            {({ errors, handleSubmit, isSubmitting, status }) => (\n                <Form className='account-form__poi-confirm-example' onSubmit={handleSubmit}>\n                    <FormBody>\n                        <PersonalDetailsForm\n                            editable_fields={rest_state.changeable_fields}\n                            is_rendered_for_onfido\n                            side_note={side_note_image}\n                            inline_note_text={\n                                <Localize\n                                    i18n_default_text='To avoid delays, enter your <0>name</0> and <0>date of birth</0> exactly as they appear on your identity document.'\n                                    components={[<strong key={0} />]}\n                                />\n                            }\n                        />\n                        <button\n                            type='submit'\n                            className={clsx('account-form__poi-confirm-example--button', {\n                                'account-form__poi-confirm-example--button__disabled':\n                                    checked || !isEmptyObject(errors),\n                            })}\n                        >\n                            <Checkbox\n                                value={checked}\n                                label={\n                                    <Text size={isDesktop ? 'xs' : 'xxs'}>\n                                        {localize(\n                                            'I confirm that the name and date of birth above match my chosen identity document (see below)'\n                                        )}\n                                    </Text>\n                                }\n                                disabled={isSubmitting}\n                            />\n                        </button>\n                        {status?.error_msg && (\n                            <div className='account-form__poi-confirm-example--status-message'>\n                                <HintBox\n                                    icon='IcAlertDanger'\n                                    message={\n                                        <Text as='p' size='xxxs'>\n                                            {status?.error_msg}\n                                        </Text>\n                                    }\n                                    is_danger\n                                    className='hint-box-layout'\n                                />\n                            </div>\n                        )}\n                    </FormBody>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default PoiConfirmWithExampleFormContainer;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { CSSTransition } from 'react-transition-group';\nimport { HintBox, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\ntype TOnfidoSdkView = {\n    is_onfido_disabled: boolean;\n    is_onfido_container_hidden?: boolean;\n    onfido_element_id?: string;\n    is_confirmed: boolean;\n    data_testid?: string;\n    is_onfido_initialized?: boolean;\n};\n\nconst OnfidoSdkView = ({\n    is_onfido_disabled,\n    is_onfido_container_hidden,\n    onfido_element_id = 'onfido',\n    is_confirmed,\n    data_testid,\n    is_onfido_initialized,\n}: TOnfidoSdkView) => {\n    const [is_status_message_visible, setIsStatusMessageVisible] = React.useState(false);\n    const transition_in_timeout_ref = React.useRef<ReturnType<typeof setTimeout>>();\n    const transition_out_timeout_ref = React.useRef<ReturnType<typeof setTimeout>>();\n\n    React.useEffect(() => {\n        const onConfirm = () => {\n            transition_in_timeout_ref.current = setTimeout(() => {\n                setIsStatusMessageVisible(true);\n            }, 800);\n            transition_out_timeout_ref.current = setTimeout(() => {\n                setIsStatusMessageVisible(false);\n                // the requirement is to hide the message after 5 sec, 4650 here + 350 in CSSTransition to make it smoother\n            }, 4650);\n        };\n\n        if (is_confirmed) {\n            onConfirm();\n        }\n    }, [is_confirmed]);\n\n    React.useEffect(() => {\n        return () => {\n            clearTimeout(transition_in_timeout_ref.current);\n            clearTimeout(transition_out_timeout_ref.current);\n        };\n    }, []);\n\n    return (\n        <div className='onfido-container-view_wrapper'>\n            <div className={clsx({ 'onfido-container__status-message_container': !is_onfido_disabled })}>\n                <CSSTransition\n                    appear={is_status_message_visible}\n                    in={is_status_message_visible}\n                    timeout={{\n                        exit: 350,\n                    }}\n                    classNames={{\n                        exit: 'onfido-container__status-message--exit',\n                    }}\n                    unmountOnExit\n                >\n                    <HintBox\n                        className='onfido-container__status-message'\n                        icon='IcAlertAnnounce'\n                        message={\n                            <Text as='p' size='xxxs'>\n                                <Localize i18n_default_text='Your personal details have been saved successfully.' />\n                            </Text>\n                        }\n                        is_info\n                    />\n                </CSSTransition>\n            </div>\n            <section>\n                {is_onfido_disabled && is_onfido_initialized && (\n                    <div className='onfido-container__info-message'>\n                        <HintBox\n                            icon='IcInfoBlue'\n                            message={\n                                <Text as='p' size='xxxs'>\n                                    <Localize i18n_default_text='Hit the checkbox above to choose your document.' />\n                                </Text>\n                            }\n                            is_info\n                        />\n                    </div>\n                )}\n                <div\n                    data-testid={data_testid}\n                    id={onfido_element_id}\n                    className={clsx({\n                        'onfido-container__disabled': is_onfido_disabled,\n                        'onfido-container__hidden': is_onfido_container_hidden,\n                    })}\n                />\n            </section>\n        </div>\n    );\n};\n\nexport default OnfidoSdkView;\n","import React, { useCallback } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { useSettings } from '@deriv/api';\nimport { ResidenceList } from '@deriv/api-types';\nimport { Loading, ThemedScrollbars } from '@deriv/components';\nimport { useNotificationEvent, useServiceToken } from '@deriv/hooks';\nimport { observer, useStore } from '@deriv/stores';\nimport ErrorMessage from '../../../Components/error-component';\nimport MissingPersonalDetails from '../../../Components/poi/missing-personal-details';\nimport PoiConfirmWithExampleFormContainer from '../../../Components/poi/poi-confirm-with-example-form-container';\nimport OnfidoSdkView from './onfido-sdk-view';\nimport type { SdkError, SdkHandle, SdkResponse, SupportedLanguages } from '../../../Types';\nimport { convertAlpha2toAlpha3, convertAlpha3toAlpha2, getOnfidoSupportedLocaleCode } from '../../../Helpers/utils';\nimport { getOnfidoPhrases } from '../../../Constants/onfido';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TAPIError = {\n    code?: string;\n    message?: string;\n    type?: string;\n};\n\ntype TOnfidoSdkViewContainer = {\n    country_code: string;\n    documents_supported:\n        | string[]\n        | DeepRequired<ResidenceList>[0]['identity']['services']['onfido']['documents_supported'];\n    getChangeableFields: () => string[];\n    handleViewComplete: () => void;\n    height?: number | string;\n    is_default_enabled?: boolean;\n};\n\nconst OnfidoSdkViewContainer = observer(\n    ({\n        country_code,\n        documents_supported,\n        getChangeableFields,\n        handleViewComplete,\n        height,\n        is_default_enabled,\n    }: TOnfidoSdkViewContainer) => {\n        const [api_error, setAPIError] = React.useState<string>();\n        const [missing_personal_details, setMissingPersonalDetails] = React.useState('');\n        const [is_onfido_disabled, setIsOnfidoDisabled] = React.useState(true);\n        const [is_confirmed, setIsConfirmed] = React.useState(false);\n        const [is_onfido_initialized, setIsOnfidoInitialized] = React.useState(false);\n        // used to check that we only initialize and load the onfido script once\n        const [is_onfido_loaded, setIsOnfidoLoaded] = React.useState(false);\n        const { data: account_settings } = useSettings();\n\n        const { send, isSuccess: isNotified } = useNotificationEvent();\n        const { common } = useStore();\n        const { current_language } = common;\n        const { isMobile } = useDevice();\n\n        // IDV country code - Alpha ISO2. Onfido country code - Alpha ISO3\n        const onfido_country_code = convertAlpha2toAlpha3(country_code);\n\n        // Service Token country code - Alpha ISO2\n        const token_country_code = convertAlpha3toAlpha2(country_code);\n\n        const { service_token, isSuccess, isError, error, isLoading } = useServiceToken({\n            service: 'onfido',\n            country: token_country_code,\n        });\n\n        const onfido_init = React.useRef<SdkHandle>();\n\n        // Onfido `document_supported` checks are made for an array of string.\n        // Ensure that `document_supported` passed respects this no the matter source.\n        const onfido_documents = Array.isArray(documents_supported)\n            ? documents_supported\n            : Object.keys(documents_supported).map(d => documents_supported[d].display_name);\n\n        let component_to_load: React.ReactNode;\n\n        const onComplete = React.useCallback(\n            (data: Omit<SdkResponse, 'data'> & { data?: { id?: string } }) => {\n                onfido_init?.current?.tearDown();\n                const document_ids = Object.keys(data).map(key => data[key as keyof SdkResponse]?.id);\n                if (document_ids?.length) {\n                    send({\n                        category: 'authentication',\n                        event: 'poi_documents_uploaded',\n                        args: {\n                            documents: document_ids as Array<string>,\n                        },\n                    });\n                }\n            },\n            [send]\n        );\n\n        const initOnfido = React.useCallback(\n            async (service_token: string) => {\n                if (!service_token) return;\n                try {\n                    onfido_init.current = await window.Onfido.init({\n                        containerId: 'onfido',\n                        language: {\n                            locale: getOnfidoSupportedLocaleCode(current_language) as SupportedLanguages,\n                            phrases: getOnfidoPhrases(),\n                            mobilePhrases: getOnfidoPhrases(),\n                        },\n                        token: service_token,\n                        useModal: false,\n                        useMemoryHistory: true,\n                        onComplete,\n                        steps: [\n                            {\n                                type: 'document',\n                                options: {\n                                    documentTypes: {\n                                        passport: onfido_documents.some(doc => /Passport/g.test(doc)),\n                                        driving_licence: onfido_documents.some(doc => /Driving Licence/g.test(doc))\n                                            ? {\n                                                  country: onfido_country_code,\n                                              }\n                                            : false,\n                                        national_identity_card: onfido_documents.some(doc =>\n                                            /National Identity Card/g.test(doc)\n                                        )\n                                            ? {\n                                                  country: onfido_country_code,\n                                              }\n                                            : false,\n                                    },\n                                    hideCountrySelection: true,\n                                },\n                            },\n                            'face',\n                        ],\n                    });\n                    setIsOnfidoInitialized(true);\n                } catch (err) {\n                    setAPIError((err as SdkError)?.message ?? err);\n                    setIsOnfidoDisabled(true);\n                    onfido_init.current = undefined;\n                } finally {\n                    setIsOnfidoLoaded(true);\n                }\n            },\n            [onComplete, onfido_documents, onfido_country_code, current_language]\n        );\n\n        const loadOnfidoSdkScript = React.useCallback(\n            (token: string) => {\n                document.getElementById('onfido_sdk')?.remove();\n                document.getElementById('onfido_style')?.remove();\n\n                // check if the onfido sdk script has been loaded, and if its still loading the onfido script, don't re-attempt to load the script again\n                const script_node = document.createElement('script');\n                const link_node = document.createElement('link');\n\n                // [TODO] - Need to lock version of onfido sdk - Current version in CDN is 13.8.4\n                script_node.id = 'onfido_sdk';\n                script_node.src = 'https://assets.onfido.com/web-sdk-releases/13.8.4/onfido.min.js';\n                link_node.href = 'https://assets.onfido.com/web-sdk-releases/13.8.4/style.css';\n                link_node.rel = 'stylesheet';\n                link_node.id = 'onfido_style';\n\n                document.body.appendChild(script_node);\n                document.body.appendChild(link_node);\n\n                script_node.addEventListener('load', () => {\n                    initOnfido(token);\n                });\n            },\n            [initOnfido]\n        );\n\n        const handleError = (error: TAPIError) => {\n            switch (error.code) {\n                case 'MissingPersonalDetails':\n                    setMissingPersonalDetails('all');\n                    break;\n                case 'InvalidPostalCode':\n                    setMissingPersonalDetails('postal_code');\n                    break;\n                default:\n                    setAPIError(error.message);\n                    break;\n            }\n        };\n\n        const onConfirm = useCallback(() => {\n            setIsConfirmed(true);\n            setIsOnfidoDisabled(false);\n        }, []);\n\n        React.useEffect(() => {\n            if (isSuccess && service_token?.onfido?.token && !is_onfido_loaded) {\n                loadOnfidoSdkScript(service_token?.onfido?.token);\n            } else if (isError) {\n                handleError(error as TAPIError);\n            }\n        }, [error, isError, isSuccess, is_onfido_loaded, loadOnfidoSdkScript, service_token?.onfido?.token]);\n\n        React.useEffect(() => {\n            /**\n             * Enables onfido sdk\n             * Pass is_default_enabled to enable onfido immediately if personal detail component is not required\n             * so no user prompt will be there so submit the details in i.e. in case of flow for nigerian clients ATM\n             */\n            if (is_default_enabled) {\n                setIsOnfidoDisabled(false);\n            }\n        }, [is_default_enabled]);\n\n        React.useEffect(() => {\n            /**\n             * Handles cleanup operations when document submission is completed\n             */\n            if (isNotified) {\n                handleViewComplete();\n            }\n        }, [handleViewComplete, isNotified]);\n\n        if (isLoading || !is_onfido_loaded) {\n            component_to_load = <Loading is_fullscreen={false} />;\n        } else if (missing_personal_details) {\n            component_to_load = (\n                <MissingPersonalDetails\n                    has_invalid_postal_code={missing_personal_details === 'postal_code'}\n                    from='proof_of_identity'\n                />\n            );\n        } else if (api_error) {\n            // Error message will only display if retry count exceeds 3\n            component_to_load = <ErrorMessage message={api_error} />;\n        }\n\n        return (\n            <ThemedScrollbars is_bypassed={isMobile} height={height}>\n                <div className='onfido-container'>\n                    {component_to_load || (\n                        <CSSTransition\n                            appear={is_onfido_disabled}\n                            in={is_onfido_disabled}\n                            timeout={{\n                                exit: 350,\n                            }}\n                            classNames={{\n                                exit: 'account-form__poi-confirm-example_wrapper--exit',\n                            }}\n                            unmountOnExit\n                        >\n                            <div className='account-form__poi-confirm-example_wrapper account-form__poi-confirm-example_container'>\n                                <PoiConfirmWithExampleFormContainer\n                                    account_settings={account_settings}\n                                    getChangeableFields={getChangeableFields}\n                                    onFormConfirm={onConfirm}\n                                />\n                            </div>\n                        </CSSTransition>\n                    )}\n                    <OnfidoSdkView\n                        is_onfido_disabled={is_onfido_disabled}\n                        is_confirmed={is_confirmed}\n                        is_onfido_container_hidden={!!component_to_load}\n                        is_onfido_initialized={is_onfido_initialized}\n                    />\n                </div>\n            </ThemedScrollbars>\n        );\n    }\n);\n\nOnfidoSdkViewContainer.displayName = 'OnfidoSdkViewContainer';\n\nexport default OnfidoSdkViewContainer;\n","import { localize } from '@deriv/translations';\nimport { FormikValues } from 'formik';\n\nexport const ROOT_CLASS = 'manual-poi-details';\n\nexport const DOCUMENT_TYPES = {\n    NATIONAL_IDENTITY_CARD: 'national_identity_card',\n    NIMC_SLIP: 'nimc_slip',\n    PASSPORT: 'passport',\n    DRIVING_LICENCE: 'driving_licence',\n    BIRTH_CERTIFICATE: 'birth_certificate',\n    SELFIE_WITH_ID: 'selfie_with_id',\n    OTHER: 'other',\n};\n\nconst PAGE_TYPE = {\n    FRONT: 'front',\n    BACK: 'back',\n    PHOTO: 'photo',\n};\n\nexport const SELFIE_DOCUMENT = {\n    document_type: DOCUMENT_TYPES.SELFIE_WITH_ID,\n    pageType: PAGE_TYPE.PHOTO,\n    name: 'selfie_with_id',\n    icon: 'IcSelfie',\n    info: localize('Upload your selfie.'),\n};\n\nexport const date_field = {\n    name: 'expiry_date',\n    label: localize('Expiry date'),\n    type: 'date',\n    required: true,\n};\n\nexport const getDocumentIndex = ({ country_code }: FormikValues) => [\n    {\n        onfido_name: 'Passport',\n        card: {\n            title: localize('Passport'),\n            description: localize('Upload the page that contains your photo.'),\n            icon: 'IcPoiPassport',\n        },\n        details: {\n            fields: [\n                {\n                    name: 'document_id',\n                    label: localize('Passport number'),\n                    type: 'text',\n                    required: true,\n                },\n                { ...date_field },\n            ],\n            documents_title: localize('Next, upload the page of your passport that contains your photo.'),\n            documents: [\n                {\n                    document_type: DOCUMENT_TYPES.PASSPORT,\n                    pageType: PAGE_TYPE.FRONT,\n                    name: 'passport',\n                    icon: 'IcPassport',\n                    info: localize('Upload the page of your passport that contains your photo.'),\n                },\n            ],\n        },\n    },\n    {\n        onfido_name: 'Driving Licence',\n        card: {\n            title: localize('Driving licence'),\n            description: localize('Upload the front and back of your driving licence.'),\n            icon: 'IcPoiDrivingLicence',\n        },\n        details: {\n            fields_title: localize('First, enter your driving licence number and the expiry date.'),\n            fields: [\n                {\n                    name: 'document_id',\n                    label: localize('Driving licence number'),\n                    type: 'text',\n                    required: true,\n                },\n                { ...date_field },\n            ],\n            documents_title: localize('Next, upload the front and back of your driving licence.'),\n            documents: [\n                {\n                    document_type: DOCUMENT_TYPES.DRIVING_LICENCE,\n                    pageType: PAGE_TYPE.FRONT,\n                    name: 'driving_licence_front',\n                    icon: 'IcDrivingLicenceFront',\n                    info: localize('Upload the front of your driving licence.'),\n                },\n                {\n                    document_type: DOCUMENT_TYPES.DRIVING_LICENCE,\n                    pageType: PAGE_TYPE.BACK,\n                    name: 'driving_licence_back',\n                    icon: 'IcIdCardBack',\n                    info: localize('Upload the back of your driving licence.'),\n                },\n            ],\n        },\n    },\n    {\n        onfido_name: 'National Identity Card',\n        card: {\n            title: localize('Identity card'),\n            description: localize('Upload the front and back of your identity card.'),\n            icon: 'IcPoiIdentityCard',\n        },\n        details: {\n            fields_title: localize('First, enter your identity card number and the expiry date.'),\n            fields: [\n                {\n                    name: 'document_id',\n                    label: localize('Identity card number'),\n                    type: 'text',\n                    required: true,\n                },\n                { ...date_field },\n            ],\n            documents_title: localize('Next, upload the front and back of your identity card.'),\n            documents: [\n                {\n                    document_type: DOCUMENT_TYPES.NATIONAL_IDENTITY_CARD,\n                    pageType: PAGE_TYPE.FRONT,\n                    name: 'identity_card_front',\n                    icon: 'IcIdCardFront',\n                    info: localize('Upload the front of your identity card.'),\n                },\n                {\n                    document_type: DOCUMENT_TYPES.NATIONAL_IDENTITY_CARD,\n                    pageType: PAGE_TYPE.BACK,\n                    name: 'identity_card_back',\n                    icon: 'IcIdCardBack',\n                    info: localize('Upload the back of your identity card.'),\n                },\n            ],\n        },\n    },\n    ...(country_code === 'ng'\n        ? [\n              {\n                  card: {\n                      title: localize('NIMC slip and proof of age'),\n                      description: localize('Upload both of these documents to prove your identity.'),\n                      icon: 'IcPoiNimcSlip',\n                  },\n                  details: {\n                      fields: [\n                          {\n                              name: 'document_id',\n                              label: localize('NIMC slip number'),\n                              type: 'text',\n                              required: true,\n                          },\n                      ],\n                      documents_title: localize('Next, upload both of the following documents.'),\n                      documents: [\n                          {\n                              document_type: DOCUMENT_TYPES.NIMC_SLIP,\n                              lifetime_valid: true,\n                              pageType: PAGE_TYPE.FRONT,\n                              name: 'nimc_slip',\n                              icon: 'IcPoiNimcSlipHorizontal',\n                              info: localize('Upload your NIMC slip.'),\n                          },\n                          {\n                              document_type: DOCUMENT_TYPES.BIRTH_CERTIFICATE,\n                              pageType: PAGE_TYPE.PHOTO,\n                              name: 'birth_certificate_front',\n                              icon: 'IcDop',\n                              info: localize(\n                                  'Upload your proof of age: birth certificate or age declaration document.'\n                              ),\n                          },\n                      ],\n                  },\n              },\n          ]\n        : []),\n];\n","import React from 'react';\nimport { Field, FormikValues } from 'formik';\nimport { DatePicker, Input } from '@deriv/components';\nimport { toMoment } from '@deriv/shared';\nimport { ROOT_CLASS } from '../constants';\n\nconst InputField = ({ data }: FormikValues) => {\n    const min_date = toMoment().add(6, 'months').format('YYYY-MM-DD');\n    switch (data.type) {\n        case 'text':\n            return (\n                <Field name={data.name}>\n                    {({ field, form: { errors, touched } }: FormikValues) => (\n                        <Input\n                            {...field}\n                            className={`${ROOT_CLASS}__field`}\n                            type='text'\n                            label={`${data.label}${data.required ? '*' : ''}`}\n                            error={touched[field.name] && errors[field.name]}\n                        />\n                    )}\n                </Field>\n            );\n        case 'date':\n            return (\n                <Field name={data.name}>\n                    {({ field, form: { errors, touched } }: FormikValues) => (\n                        <DatePicker\n                            {...field}\n                            className={`${ROOT_CLASS}__field`}\n                            date_format='YYYY-MM-DD'\n                            display_format='DD-MM-YYYY'\n                            start_date={min_date}\n                            min_date={min_date}\n                            name={data.name}\n                            label={`${data.label}${data.required ? '*' : ''}`}\n                            error={touched[field.name] && errors[field.name]}\n                            readOnly\n                        />\n                    )}\n                </Field>\n            );\n        default:\n            return null;\n    }\n};\n\nexport default InputField;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Field, FieldProps, FormikProps, FormikValues } from 'formik';\nimport { localize } from '@deriv/translations';\nimport { supported_filetypes, max_document_size } from '@deriv/shared';\nimport { Button, Icon, Text, FileDropzone } from '@deriv/components';\nimport { ROOT_CLASS } from '../constants';\nimport { useDevice } from '@deriv-com/ui';\n\nconst DROPZONE_ERRORS = {\n    'file-too-large': localize('File size should be 8MB or less'),\n    'file-invalid-type': localize('File uploaded is not supported'),\n    'too-many-files': localize('Please select one file only'),\n    GENERAL: localize('Sorry, an error occured. Please select another file.'),\n};\ntype TDROPZONE_ERRORS = Readonly<typeof DROPZONE_ERRORS>;\n\ntype TUploader = {\n    data: FormikValues;\n    value: FormikValues;\n    is_full?: boolean;\n    has_frame?: boolean;\n    onChange?: (e: unknown) => void;\n    setFieldValue: FormikProps<FormikValues>['setFieldValue'];\n    handleChange: (file: object | null, setFieldValue: FormikProps<FormikValues>['setFieldValue']) => void;\n};\n\ntype TMessage = {\n    data?: FormikValues;\n    open?: () => void;\n};\n\ntype THandleRejectFiles = Array<{\n    file: File;\n    errors: [\n        {\n            message: string;\n            code: string;\n        }\n    ];\n}>;\n\nconst Message = ({ data, open }: TMessage) => {\n    const { isDesktop } = useDevice();\n    return (\n        <div className={`${ROOT_CLASS}__uploader-details`}>\n            <Icon className={`${ROOT_CLASS}__uploader-icon`} icon={data?.icon} size={236} />\n            <Text as='p' size='xs' color='general' align='center'>\n                {data?.info}\n            </Text>\n            <Button\n                medium\n                secondary\n                text={isDesktop ? localize('Drop file or click here to upload') : localize('Tap here to upload')}\n                onClick={open}\n            />\n        </div>\n    );\n};\n\nconst Preview = ({ data, setFieldValue, value, has_frame, handleChange }: Omit<TUploader, 'is_full' | 'onChange'>) => {\n    const [background_url, setBackgroundUrl] = React.useState('');\n\n    React.useEffect(() => {\n        setBackgroundUrl(value?.file ? URL.createObjectURL(value?.file) : '');\n    }, [value]);\n\n    return (\n        <div className={`${ROOT_CLASS}__uploader-details ${ROOT_CLASS}__uploader-details--preview`}>\n            <div\n                className={clsx(`${ROOT_CLASS}__uploader-image`, {\n                    [`${ROOT_CLASS}__uploader-image--has-frame`]: has_frame,\n                })}\n                style={{ backgroundImage: `url(${background_url})` }}\n            >\n                {has_frame && <Icon icon='IcPoiFrame' className={`${ROOT_CLASS}__uploader-frame`} />}\n                {(!background_url || value?.file.type.indexOf('pdf') !== -1) && (\n                    <React.Fragment>\n                        <Icon icon='IcCloudUpload' size={50} />\n                        <Text as='p' size='xs' color='general' align='center'>\n                            {value?.file.name}\n                        </Text>\n                    </React.Fragment>\n                )}\n                <Icon\n                    icon='IcCloseCircle'\n                    className={`${ROOT_CLASS}__uploader-remove`}\n                    onClick={() => {\n                        handleChange?.(null, setFieldValue);\n                    }}\n                    size={16}\n                />\n            </div>\n            <Text as='p' size='xs' color='general' align='center'>\n                {data?.info}\n            </Text>\n        </div>\n    );\n};\n\nconst Uploader = ({ data, value, is_full, onChange, has_frame }: Omit<TUploader, 'setFieldValue' | 'handleChange'>) => {\n    const { isDesktop } = useDevice();\n    const [image, setImage] = React.useState<FormikValues>();\n\n    React.useEffect(() => {\n        setImage(value);\n    }, [value]);\n\n    const handleChange = (file: object | null, setFieldValue: FormikProps<FormikValues>['setFieldValue']) => {\n        onChange?.(file);\n        setFieldValue?.(data?.name, file);\n    };\n\n    const handleAccept = (files: object[], setFieldValue: FormikProps<FormikValues>['setFieldValue']) => {\n        const file = { file: files[0], errors: [], ...data };\n        handleChange(file, setFieldValue);\n    };\n\n    const handleReject = (files: THandleRejectFiles, setFieldValue: FormikProps<FormikValues>['setFieldValue']) => {\n        const errors = files[0].errors?.map((error: { code: string }) =>\n            DROPZONE_ERRORS[error.code as keyof TDROPZONE_ERRORS]\n                ? DROPZONE_ERRORS[error.code as keyof TDROPZONE_ERRORS]\n                : DROPZONE_ERRORS.GENERAL\n        );\n        const file = { ...files[0], errors, ...data };\n        handleChange(file, setFieldValue);\n    };\n\n    const ValidationErrorMessage: React.ComponentProps<typeof FileDropzone>['validation_error_message'] = open => (\n        <div className={`${ROOT_CLASS}__uploader-details`}>\n            {image?.errors?.map((error: string, index: number) => (\n                <Text key={index} as='p' size='xs' color='secondary' align='center'>\n                    {error}\n                </Text>\n            ))}\n            <Button\n                medium\n                secondary\n                text={isDesktop ? localize('Drop file or click here to upload') : localize('Tap here to upload')}\n                onClick={open}\n            />\n        </div>\n    );\n\n    return (\n        <Field name={data?.name}>\n            {({ form: { setFieldValue } }: FieldProps) => (\n                <div\n                    className={clsx(`${ROOT_CLASS}__uploader`, {\n                        [`${ROOT_CLASS}__uploader--full`]: is_full,\n                    })}\n                >\n                    <FileDropzone\n                        accept={supported_filetypes}\n                        error_message={localize('Please upload supported file type.')}\n                        filename_limit={32}\n                        hover_message={localize('Drop files here..')}\n                        max_size={max_document_size}\n                        message={(open?: () => void) => <Message open={open} data={data} />}\n                        preview_single={\n                            image && (\n                                <Preview\n                                    data={data}\n                                    value={image}\n                                    has_frame={has_frame}\n                                    setFieldValue={setFieldValue}\n                                    handleChange={handleChange}\n                                />\n                            )\n                        }\n                        multiple={false}\n                        onDropAccepted={(files: object[]) => handleAccept(files, setFieldValue)}\n                        onDropRejected={(files: THandleRejectFiles) => handleReject(files, setFieldValue)}\n                        validation_error_message={value?.errors?.length ? ValidationErrorMessage : undefined}\n                        noClick\n                        value={(image ? [image] : []) as unknown as React.ComponentProps<typeof FileDropzone>['value']}\n                    />\n                </div>\n            )}\n        </Field>\n    );\n};\n\nexport default Uploader;\n","import { localize } from '@deriv/translations';\nimport { FormikErrors, FormikValues } from 'formik';\n\nexport const setInitialValues = (fields: FormikValues) => {\n    const values: FormikValues = {};\n    fields.forEach((field: FormikValues) => {\n        values[field.name] = '';\n    });\n    return values;\n};\n\nexport const checkIsEmpty = (value: unknown) => {\n    return typeof value === 'string' ? !value.trim() : !value;\n};\n\ntype TFields = {\n    name: string;\n    label: string;\n    type: string;\n    required: boolean;\n}[];\n\ntype TDocument = {\n    document_type: string;\n    pageType: string;\n    name: string;\n    icon: string;\n    info: string;\n}[];\n\nexport const validateFields = (values: FormikValues, fields: TFields = [], documents: TDocument = []) => {\n    const errors: FormikErrors<FormikValues> = {};\n\n    fields.forEach((field: { name: string; label: string; type: string; required: boolean }) => {\n        const { name, label, type } = field;\n        const value = values[name];\n\n        if (field.required && checkIsEmpty(value)) {\n            errors[name] = localize('{{label}} is required.', {\n                label,\n            });\n        } else if (type === 'text' && value.length > 30) {\n            errors[name] = localize('{{label}} must be less than 30 characters.', {\n                label,\n            });\n        } else if (type === 'text' && !/^[\\w\\s-]{0,30}$/g.test(value)) {\n            errors[name] = localize('Only letters, numbers, space, underscore, and hyphen are allowed for {{label}}.', {\n                label,\n            });\n        }\n    });\n\n    documents.forEach((document: { name: string }) => {\n        const { name } = document;\n        const value = values[name];\n\n        if (checkIsEmpty(value)) {\n            errors[name] = localize('{{name}} is required.', {\n                name,\n            });\n        } else if (value.errors?.length) {\n            errors[name] = value.errors[0];\n        }\n    });\n\n    return errors;\n};\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Formik, Form, FormikValues } from 'formik';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport { Button, Icon, Text } from '@deriv/components';\nimport InputField from './input-field';\nimport Uploader from './uploader';\nimport { setInitialValues, validateFields } from './utils';\nimport { ROOT_CLASS, date_field, getDocumentIndex } from '../constants';\nimport FormFooter from '../../../../form-footer';\nimport FormBody from '../../../../form-body';\n\nconst icons = [\n    {\n        icon: 'IcPoiClearPhoto',\n        text: localize('A clear colour photo or scanned image'),\n    },\n    {\n        icon: 'IcPoiFileFormat',\n        text: localize('JPEG, JPG, PNG, PDF, or GIF'),\n    },\n    {\n        icon: 'IcPoiFileSize',\n        text: localize('Less than 8MB'),\n    },\n    {\n        icon: 'IcPoiDocExpiry',\n        text: localize('Must be valid for at least 6 months'),\n    },\n];\n\ntype TDocumentsUpload = {\n    initial_values?: FormikValues;\n    is_from_external?: boolean;\n    goToCards: () => void;\n    onSubmit: () => void;\n    data: ReturnType<typeof getDocumentIndex>[number]['details'];\n};\n\ntype TIconsItem = {\n    data: FormikValues;\n};\n\nconst IconsItem = ({ data }: TIconsItem) => (\n    <div className={`${ROOT_CLASS}__icons-item`}>\n        <Icon icon={data.icon} size={24} />\n        <Text as='p' size='xxxs' align='center'>\n            {data.text}\n        </Text>\n    </div>\n);\n\nconst DocumentsUpload = ({ initial_values, is_from_external, data, goToCards, onSubmit }: TDocumentsUpload) => {\n    const { isDesktop } = useDevice();\n    const { fields, documents_title, documents } = data;\n    const is_expiry_date_required = fields.some(field => field.name === date_field.name);\n\n    const fields_title = is_expiry_date_required ? (\n        <Localize\n            i18n_default_text='First, enter your {{label}} and the expiry date.'\n            values={{\n                label: fields?.[0].label,\n            }}\n        />\n    ) : (\n        <Localize\n            i18n_default_text='First, enter your {{label}}.'\n            values={{\n                label: fields?.[0].label,\n            }}\n        />\n    );\n\n    return (\n        <div\n            className={clsx(ROOT_CLASS, {\n                [`${ROOT_CLASS}--mobile`]: !isDesktop,\n            })}\n        >\n            <Formik\n                initialValues={initial_values || setInitialValues([...(fields || []), ...(documents || [])])}\n                validate={values => validateFields(values, fields, documents)}\n                onSubmit={onSubmit}\n            >\n                {({ values, isValid, touched }: FormikValues) => {\n                    const is_form_touched = Object.keys(touched).length > 0;\n                    const is_form_empty = Object.values(values).some(\n                        (field, key) => (field === null || field === '') && fields?.[key]?.required\n                    );\n\n                    return (\n                        <Form className={`${ROOT_CLASS}__form`}>\n                            <FormBody className='form-body' scroll_offset={isDesktop ? '80px' : '180px'}>\n                                <div className={`${ROOT_CLASS}__fields-content`}>\n                                    <Text as='h3' size='s' color='prominent'>\n                                        {fields_title}\n                                    </Text>\n                                    <div className={`${ROOT_CLASS}__fields-wrap`}>\n                                        {fields?.map((field: FormikValues) => (\n                                            <InputField key={field.name} data={field} />\n                                        ))}\n                                    </div>\n                                    <div className={`${ROOT_CLASS}__divider`} />\n                                    <Text as='h3' size='s' color='prominent'>\n                                        {documents_title}\n                                    </Text>\n                                    <div className={`${ROOT_CLASS}__uploaders-wrap`}>\n                                        {documents?.map((item: FormikValues) => (\n                                            <Uploader\n                                                key={item.name}\n                                                data={item}\n                                                value={values[item.name]}\n                                                is_full={documents.length === 1 || is_from_external}\n                                            />\n                                        ))}\n                                    </div>\n                                    <div className={`${ROOT_CLASS}__icons`}>\n                                        {icons.map(item =>\n                                            item.icon === 'IcPoiDocExpiry' && !is_expiry_date_required ? null : (\n                                                <IconsItem key={item.icon} data={item} />\n                                            )\n                                        )}\n                                    </div>\n                                </div>\n                            </FormBody>\n                            <FormFooter>\n                                <div className={`${ROOT_CLASS}__btns`}>\n                                    <Button onClick={goToCards} secondary large text={localize('Back')} />\n                                    <Button\n                                        type='submit'\n                                        primary\n                                        large\n                                        is_disabled={!isValid || (!is_form_touched && is_form_empty)}\n                                        text={localize('Next')}\n                                    />\n                                </div>\n                            </FormFooter>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </div>\n    );\n};\n\nexport default DocumentsUpload;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikProps, FormikValues } from 'formik';\nimport { Localize, localize } from '@deriv/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport { Button, Text } from '@deriv/components';\nimport Uploader from './uploader';\nimport { setInitialValues, validateFields } from './utils';\nimport { ROOT_CLASS, SELFIE_DOCUMENT } from '../constants';\nimport FormBody from '../../../../form-body';\nimport FormFooter from '../../../../form-footer';\n\ntype TSelfieUpload = {\n    initial_values?: FormikValues;\n    goBack: () => void;\n    onConfirm: () => void;\n    onFileDrop: () => void;\n};\n\nconst SelfieUpload = ({ initial_values, goBack, onConfirm, onFileDrop }: TSelfieUpload) => {\n    const { isDesktop } = useDevice();\n    return (\n        <div\n            className={clsx(ROOT_CLASS, {\n                [`${ROOT_CLASS}--mobile`]: !isDesktop,\n            })}\n        >\n            <Formik\n                initialValues={initial_values || setInitialValues([SELFIE_DOCUMENT])}\n                validate={values => validateFields(values, undefined, [SELFIE_DOCUMENT])}\n                onSubmit={onConfirm}\n            >\n                {({ values, isValid, isSubmitting, touched }: Partial<FormikProps<FormikValues>>) => {\n                    let is_form_touched, is_form_empty;\n                    if (touched) {\n                        is_form_touched = Object.keys(touched).length > 0;\n                    }\n                    if (values) {\n                        is_form_empty = Object.values(values).some(field => field === null || field === '');\n                    }\n\n                    return (\n                        <Form className={`${ROOT_CLASS}__form`}>\n                            <FormBody className='form-body' scroll_offset={isDesktop ? '8rem' : '18rem'}>\n                                <div className={`${ROOT_CLASS}__fields-content`}>\n                                    <Text as='h3' size='s' weight='bold' color='prominent'>\n                                        <Localize i18n_default_text='Upload your selfie' />\n                                    </Text>\n                                    <div className={`${ROOT_CLASS}__uploaders-wrap`}>\n                                        <Uploader\n                                            data={SELFIE_DOCUMENT}\n                                            value={values ? values[SELFIE_DOCUMENT.name] : ''}\n                                            is_full\n                                            onChange={onFileDrop}\n                                            has_frame\n                                        />\n                                    </div>\n                                    <div className={`${ROOT_CLASS}__notice`}>\n                                        <Text as='p' size='xs' color='general'>\n                                            <Localize i18n_default_text='Before uploading, please ensure that you’re facing forward in the selfie, your face is within the frame, and your eyes are clearly visible even if you’re wearing glasses.' />\n                                        </Text>\n                                    </div>\n                                </div>\n                            </FormBody>\n                            <FormFooter>\n                                <div className={`${ROOT_CLASS}__btns`}>\n                                    <Button onClick={goBack} secondary large text={localize('Back')} />\n                                    <Button\n                                        type='submit'\n                                        primary\n                                        large\n                                        is_disabled={!isValid || isSubmitting || (!is_form_touched && is_form_empty)}\n                                        text={localize('Confirm and upload')}\n                                    />\n                                </div>\n                            </FormFooter>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        </div>\n    );\n};\n\nexport default SelfieUpload;\n","import CardDetails from './card-details';\n\nexport default CardDetails;\n","import React from 'react';\nimport DocumentsUpload from './documents-upload';\nimport SelfieUpload from './selfie-upload';\nimport { SELFIE_DOCUMENT, getDocumentIndex } from '../constants';\nimport './card-details.scss';\nimport { FormikValues } from 'formik';\n\ntype TCardDetails = {\n    data: ReturnType<typeof getDocumentIndex>[number]['details'];\n    onComplete: (e: object) => void;\n    goToCards: () => void;\n    is_from_external?: boolean;\n};\n\nconst CardDetails = ({ data, goToCards, onComplete, is_from_external }: TCardDetails) => {\n    const [documents, setDocuments] = React.useState<FormikValues>();\n    const [selfie, setSelfie] = React.useState<FormikValues>();\n    const [is_selfie_upload, setIsSelfieUpload] = React.useState(false);\n\n    const onSubmitDocuments = (values?: FormikValues) => {\n        setDocuments(values);\n        setIsSelfieUpload(true);\n    };\n\n    const onConfirmDocuments = (values?: FormikValues) => {\n        onComplete({ ...documents, ...values });\n    };\n\n    return (\n        <React.Fragment>\n            {!is_selfie_upload ? (\n                <DocumentsUpload\n                    initial_values={documents}\n                    is_from_external={is_from_external}\n                    data={data}\n                    goToCards={goToCards}\n                    onSubmit={onSubmitDocuments}\n                />\n            ) : (\n                <SelfieUpload\n                    initial_values={selfie}\n                    goBack={() => setIsSelfieUpload(false)}\n                    onConfirm={onConfirmDocuments}\n                    onFileDrop={(value?: string) => setSelfie({ [SELFIE_DOCUMENT.name]: value })}\n                />\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default CardDetails;\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors in OnfidoUpload component\nimport React from 'react';\nimport { Loading, Icon, Text, Button } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\nimport { WS } from '@deriv/shared';\nimport { UploadComplete } from '../upload-complete/upload-complete';\nimport POIManualUploadFailed from '../../../poi-manual-upload-failed';\nimport { API_ERROR_CODES } from '../../../../Constants/api-error-codes';\nimport uploadFile from '../../../file-uploader-container/upload-file';\nimport OnfidoUpload from '../../../../Sections/Verification/ProofOfIdentity/onfido-sdk-view-container';\n\nimport CardDetails from './card-details';\nimport { SELFIE_DOCUMENT, getDocumentIndex } from './constants';\nimport { FormikValues } from 'formik';\n\nconst STATUS = {\n    IS_UPLOADING: 'IS_UPLOADING',\n    IS_COMPLETED: 'IS_COMPLETED',\n    IS_FAILED: 'IS_FAILED',\n};\n\ntype TDetailComponent = {\n    document: ReturnType<typeof getDocumentIndex>[number];\n    onClickBack: () => void;\n    root_class: string;\n    country_code_key?: string;\n    height?: string | number;\n    handleComplete?: () => void;\n    is_onfido_supported?: boolean;\n    is_from_external?: boolean;\n    is_for_mt5?: boolean;\n    handlePOIforMT5Complete?: () => void;\n    needs_poa?: boolean;\n};\n\nconst DetailComponent = ({\n    document,\n    onClickBack,\n    root_class,\n    country_code_key,\n    height,\n    handleComplete,\n    is_onfido_supported,\n    is_from_external,\n    is_for_mt5,\n    handlePOIforMT5Complete,\n    needs_poa,\n    ...props\n}: TDetailComponent) => {\n    const [status, setStatus] = React.useState('');\n    const [response_error, setError] = React.useState('');\n\n    let is_any_failed = false;\n\n    const uploadFiles = (data: FormikValues) =>\n        new Promise((resolve, reject) => {\n            const docs = document.details.documents.map((item: FormikValues) => item.name);\n            const files = Object.values(data).filter(item => [...docs, SELFIE_DOCUMENT.name].includes(item.name));\n            const files_length = files.length;\n            let file_to_upload_index = 0;\n            const results: object[] = [];\n            const uploadNext = () => {\n                const item = files[file_to_upload_index];\n                const { file, document_type, pageType, lifetime_valid } = item;\n                const expiration_date =\n                    typeof data.expiry_date?.format === 'function' ? data.expiry_date.format('YYYY-MM-DD') : undefined;\n                uploadFile(file, WS.getSocket, {\n                    document_type,\n                    page_type: pageType,\n                    expiration_date,\n                    document_id: data.document_id || '',\n                    lifetime_valid: +(lifetime_valid && !expiration_date),\n                    document_issuing_country: country_code_key,\n                })\n                    .then(response => {\n                        file_to_upload_index += 1;\n                        if (response?.warning === API_ERROR_CODES.DUPLICATE_DOCUMENT) {\n                            setStatus(STATUS.IS_DUPLICATE_UPLOAD);\n                        } else if (response?.warning || response.error) {\n                            is_any_failed = true;\n                            setStatus(STATUS.IS_FAILED);\n                            setError(\n                                response.message || (response.error ? response.error.message : localize('Failed'))\n                            );\n                            if (file_to_upload_index < files_length) {\n                                uploadNext();\n                            }\n                        } else if (file_to_upload_index < files_length) {\n                            results.push(response);\n                            uploadNext();\n                        } else {\n                            resolve(results);\n                        }\n                    })\n                    .catch(error => {\n                        reject(error);\n                    });\n            };\n\n            uploadNext();\n        });\n\n    const onComplete = (values: FormikValues) => {\n        setStatus(STATUS.IS_UPLOADING);\n        uploadFiles(values)\n            .then(() => {\n                if (!is_any_failed) {\n                    if (is_for_mt5) {\n                        handlePOIforMT5Complete?.();\n                    } else {\n                        setStatus(STATUS.IS_COMPLETED);\n                    }\n                }\n            })\n            .catch(error => {\n                setStatus(STATUS.IS_FAILED);\n                setError(error.message);\n            });\n    };\n\n    switch (status) {\n        case STATUS.IS_UPLOADING:\n            return <Loading is_fullscreen={false} is_slow_loading status={[localize('Uploading documents')]} />;\n        case STATUS.IS_COMPLETED:\n            return <UploadComplete is_from_external needs_poa={needs_poa} is_manual_upload />;\n        case STATUS.IS_FAILED:\n            return <POIManualUploadFailed error={response_error} />;\n        case STATUS.IS_DUPLICATE_UPLOAD:\n            return (\n                <POIManualUploadFailed\n                    error={\n                        <Localize i18n_default_text='It seems you’ve submitted this document before. Upload a new document.' />\n                    }\n                >\n                    <Button onClick={onClickBack} large primary className='upload_error_btn'>\n                        <Localize i18n_default_text='Try Again' />\n                    </Button>\n                </POIManualUploadFailed>\n            );\n\n        default:\n            return (\n                <React.Fragment>\n                    {is_onfido_supported ? (\n                        <React.Fragment>\n                            <div className={`${root_class}__detail-header`} onClick={onClickBack}>\n                                <Icon icon='IcArrowLeftBold' />\n                                <Text\n                                    as='p'\n                                    size='xs'\n                                    weight='bold'\n                                    color='prominent'\n                                    className={`${root_class}__back-title`}\n                                >\n                                    {localize('Back')}\n                                </Text>\n                            </div>\n                            <OnfidoUpload\n                                country_code={country_code_key}\n                                documents_supported={[document.onfido_name]}\n                                height={height ?? null}\n                                handleComplete={is_for_mt5 ? handlePOIforMT5Complete : handleComplete}\n                                is_default_enabled\n                                handleViewComplete={is_for_mt5 ? handlePOIforMT5Complete : handleComplete}\n                                {...props}\n                            />\n                        </React.Fragment>\n                    ) : (\n                        <CardDetails\n                            data={document.details}\n                            onComplete={onComplete}\n                            goToCards={onClickBack}\n                            is_from_external={is_from_external}\n                        />\n                    )}\n                </React.Fragment>\n            );\n    }\n};\n\nexport default DetailComponent;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TCardWithArrow = {\n    onClick: () => void;\n    title: string;\n    description: string;\n    icon: string;\n};\n\nconst CardWithArrow = ({ onClick, title, description, icon }: TCardWithArrow) => {\n    const { isDesktop } = useDevice();\n    return (\n        <div className='manual-poi__card' onClick={onClick}>\n            <Icon className='manual-poi__card-icon' icon={icon} size={64} />\n            <div className='manual-poi__card-content'>\n                <Text as='p' size='xs' weight='bold' color='prominent'>\n                    {title}\n                </Text>\n                <Text as='p' size={isDesktop ? 'xxs' : 'xxxs'}>\n                    {description}\n                </Text>\n            </div>\n\n            <Icon icon='IcChevronRight' size={isDesktop ? 31 : 23} />\n        </div>\n    );\n};\n\nexport { CardWithArrow };\n","import React from 'react';\nimport { Card } from '@deriv/components';\nimport { CardWithArrow } from './card-with-arrow';\nimport { getDocumentIndex } from './constants';\n\ntype TDocument = {\n    toggleDetail: (index: number) => void;\n    documents: ReturnType<typeof getDocumentIndex>;\n};\n\nexport const Documents = ({ toggleDetail, documents }: TDocument) => (\n    <React.Fragment>\n        {documents.map((item, index: number) => (\n            <Card\n                key={item.card?.icon}\n                renderContent={() => <CardWithArrow onClick={() => toggleDetail(index)} {...item.card} />}\n            />\n        ))}\n    </React.Fragment>\n);\n","import React from 'react';\nimport { Button, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { identity_status_codes } from '../../../../Sections/Verification/ProofOfIdentity/proof-of-identity-utils';\nimport DetailComponent from './detail-component';\nimport { Documents } from './documents';\nimport { getDocumentIndex, DOCUMENT_TYPES } from './constants';\nimport UploadComplete from '../upload-complete';\nimport { FormikValues } from 'formik';\nimport Verified from '../verified';\nimport Limited from '../limited';\nimport Expired from '../expired';\nimport FormFooter from '../../../form-footer';\n\nconst checkNimcStep = (documents: FormikValues) => {\n    let has_nimc = false;\n    documents.forEach((document: FormikValues) => {\n        if (document.document_type === DOCUMENT_TYPES.NIMC_SLIP) {\n            has_nimc = true;\n        }\n    });\n    return has_nimc;\n};\n\ntype TUnsupported = {\n    country_code: string;\n    handlePOIforMT5Complete: () => void;\n    manual: {\n        status: string;\n    };\n    redirect_button: React.ReactElement;\n    needs_poa: boolean;\n    handleBack: () => void;\n    handleRequireSubmission: () => void;\n    handleViewComplete: () => void;\n    allow_poi_resubmission: boolean;\n    onfido: {\n        submissions_left: number;\n    };\n    is_for_mt5?: boolean;\n    is_resubmission?: boolean;\n};\n\nconst Unsupported = ({\n    country_code,\n    handlePOIforMT5Complete,\n    manual,\n    redirect_button,\n    needs_poa,\n    handleBack,\n    handleRequireSubmission,\n    allow_poi_resubmission,\n    handleViewComplete,\n    onfido,\n    is_for_mt5,\n    is_resubmission,\n    ...props\n}: TUnsupported) => {\n    const [detail, setDetail] = React.useState<number | null>(null);\n    const toggleDetail = (index: number) => setDetail(index);\n\n    const documents = getDocumentIndex({\n        country_code,\n    });\n\n    if (manual) {\n        if (manual.status === identity_status_codes.pending)\n            return <UploadComplete is_manual_upload needs_poa={needs_poa} redirect_button={redirect_button} />;\n        else if (\n            [identity_status_codes.rejected, identity_status_codes.suspected].some(status => status === manual.status)\n        ) {\n            if (!allow_poi_resubmission) return <Limited />;\n        } else if (manual.status === identity_status_codes.verified) {\n            return <Verified needs_poa={needs_poa} redirect_button={redirect_button} />;\n        } else if (manual.status === identity_status_codes.expired) {\n            return <Expired redirect_button={redirect_button} handleRequireSubmission={handleRequireSubmission} />;\n        }\n    }\n\n    if (detail !== null) {\n        const is_onfido_supported =\n            country_code === 'ng' &&\n            !checkNimcStep(documents[detail ?? 0].details.documents) &&\n            onfido &&\n            onfido.submissions_left > 0;\n        return (\n            <DetailComponent\n                is_onfido_supported={is_onfido_supported}\n                country_code_key={country_code}\n                document={documents[detail]}\n                root_class='manual-poi'\n                onClickBack={() => setDetail(null)}\n                handlePOIforMT5Complete={handlePOIforMT5Complete}\n                handleComplete={handleViewComplete}\n                is_for_mt5={is_for_mt5}\n                needs_poa={needs_poa}\n                {...props}\n            />\n        );\n    }\n\n    return (\n        <div className='manual-poi'>\n            <Text as='h2' color='prominent' size='xs' className='manual-poi__title'>\n                <Localize i18n_default_text='Please upload one of the following documents:' />\n            </Text>\n            <Documents documents={documents} toggleDetail={toggleDetail} />\n            {!is_for_mt5 && !is_resubmission && (\n                <FormFooter className='proof-of-identity__footer'>\n                    <Button className='back-btn' onClick={handleBack} type='button' has_effect large secondary>\n                        <Localize i18n_default_text='Back' />\n                    </Button>\n                </FormFooter>\n            )}\n        </div>\n    );\n};\nexport default Unsupported;\n","import Unsupported from './unsupported';\nimport './unsupported.scss';\n\nexport default Unsupported;\n","import React from 'react';\nimport { formatOnfidoError } from '@deriv/shared';\nimport UploadComplete from '../../../Components/poi/status/upload-complete';\nimport Verified from '../../../Components/poi/status/verified';\nimport RejectedReasons from '../../../Components/poi/status/rejected-reasons';\nimport Unsupported from '../../../Components/poi/status/unsupported';\nimport { identity_status_codes, service_code } from './proof-of-identity-utils';\n\nconst Onfido = ({\n    handleRequireSubmission,\n    is_from_external,\n    needs_poa,\n    onfido,\n    redirect_button,\n    manual,\n    country_code,\n    handleViewComplete,\n}) => {\n    const { status, submissions_left, last_rejected: rejected_reasons } = onfido;\n\n    switch (status) {\n        case identity_status_codes.pending:\n            return (\n                <UploadComplete\n                    is_from_external={is_from_external}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                />\n            );\n        case identity_status_codes.rejected:\n        case identity_status_codes.suspected:\n        case identity_status_codes.expired: {\n            const submission_errors = formatOnfidoError(status, rejected_reasons);\n            if (Number(submissions_left) < 1) {\n                return (\n                    <Unsupported\n                        manual={manual}\n                        is_from_external={is_from_external}\n                        country_code={country_code}\n                        handleViewComplete={handleViewComplete}\n                        onfido={onfido}\n                    />\n                );\n            }\n            return (\n                <RejectedReasons\n                    rejected_reasons={submission_errors}\n                    handleRequireSubmission={handleRequireSubmission}\n                />\n            );\n        }\n        case identity_status_codes.verified:\n            return (\n                <Verified\n                    is_from_external={is_from_external}\n                    needs_poa={needs_poa}\n                    redirect_button={redirect_button}\n                    service={service_code.onfido}\n                />\n            );\n        default:\n            return null;\n    }\n};\n\nexport default Onfido;\n","import PoiCountrySelector from './poi-country-selector';\n\nexport default PoiCountrySelector;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Formik, Field, FormikErrors, FormikValues, FormikHelpers } from 'formik';\nimport { Autocomplete, Button, HintBox, Text, SelectNative } from '@deriv/components';\nimport { IDV_ERROR_STATUS, TIDVErrorStatus, POIContext } from '@deriv/shared';\nimport { Localize, localize } from '@deriv/translations';\nimport FormFooter from '../../form-footer';\nimport { useDevice } from '@deriv-com/ui';\nimport { useResidenceList } from '@deriv/api';\n\ntype TCountrySelector = {\n    handleSelectionNext?: () => void;\n    is_from_external: boolean;\n    mismatch_status?: TIDVErrorStatus;\n};\n\nconst CountrySelector = ({ handleSelectionNext, is_from_external, mismatch_status }: TCountrySelector) => {\n    const { setSelectedCountry } = React.useContext(POIContext);\n    const { data: country_list, isLoading } = useResidenceList();\n\n    const initial_form_values: FormikValues = {\n        country_input: '',\n    };\n\n    const validateFields = (values: FormikValues) => {\n        const errors: FormikErrors<FormikValues> = {};\n        const { country_input } = values;\n\n        if (!country_input) {\n            errors.country_input = localize('Please select the country of document issuance.');\n        } else if (!country_list.find((c: FormikValues) => c.text === country_input)) {\n            errors.country_input = localize('Please select a valid country of document issuance.');\n        }\n\n        return errors;\n    };\n    const { isDesktop } = useDevice();\n\n    const updateSelectedCountry = (country_name: string) => {\n        const matching_country = country_list?.find((c: FormikValues) => c.text === country_name);\n        if (matching_country) {\n            setSelectedCountry?.(matching_country);\n        }\n    };\n\n    const submitHandler = (values: FormikValues, { setSubmitting }: FormikHelpers<FormikValues>) => {\n        updateSelectedCountry(values.country_input);\n        setSubmitting(false);\n        handleSelectionNext?.();\n    };\n\n    const failed_message: React.ReactNode = mismatch_status ? IDV_ERROR_STATUS[mismatch_status]?.message ?? null : null;\n\n    return (\n        <Formik initialValues={initial_form_values} validate={validateFields} onSubmit={submitHandler}>\n            {({\n                dirty,\n                errors,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                isSubmitting,\n                isValid,\n                setFieldValue,\n                touched,\n                values,\n            }) => (\n                <React.Fragment>\n                    <div\n                        className={clsx('proof-of-identity__container proof-of-identity__country-container', {\n                            'min-height': !is_from_external,\n                        })}\n                    >\n                        {failed_message ? (\n                            <React.Fragment>\n                                <Text align='center' weight='bold' size={isDesktop ? 's' : 'xs'}>\n                                    <Localize i18n_default_text='Your identity verification failed because:' />\n                                </Text>\n                                <HintBox\n                                    className={clsx('proof-of-identity__failed-message', 'hint-box-layout')}\n                                    icon='IcAlertDanger'\n                                    message={\n                                        <Text as='p' size={isDesktop ? 'xs' : 'xxs'}>\n                                            {failed_message}\n                                        </Text>\n                                    }\n                                    is_danger\n                                />\n                            </React.Fragment>\n                        ) : (\n                            <Text className='proof-of-identity__header' align='center' weight='bold'>\n                                <Localize i18n_default_text='Proof of identity' />\n                            </Text>\n                        )}\n\n                        <Text className='proof-of-identity__country-text ' size='xs'>\n                            <Localize i18n_default_text='In which country was your document issued?' />\n                        </Text>\n                        <fieldset className='proof-of-identity__fieldset'>\n                            <Field name='country_input'>\n                                {({ field }: FormikValues) => (\n                                    <React.Fragment>\n                                        {isDesktop ? (\n                                            <Autocomplete\n                                                className={clsx({ 'external-dropdown': is_from_external })}\n                                                {...field}\n                                                data_testid='dt_external_dropdown'\n                                                name='country_input'\n                                                data-lpignore='true'\n                                                error={touched.country_input && errors.country_input}\n                                                autoComplete='off'\n                                                type='text'\n                                                label={localize('Country')}\n                                                list_items={country_list}\n                                                value={values.country_input}\n                                                onBlur={(e: FormikValues) => {\n                                                    handleBlur(e);\n                                                    const current_input = e.target.value;\n                                                    if (\n                                                        !country_list.find(\n                                                            (c: FormikValues) => c.text === current_input\n                                                        )\n                                                    ) {\n                                                        setFieldValue('country_input', '', true);\n                                                        updateSelectedCountry('');\n                                                    }\n                                                }}\n                                                onChange={handleChange}\n                                                onItemSelection={({ text }: FormikValues) => {\n                                                    const select_value =\n                                                        text === 'No results found' || !text ? '' : text;\n                                                    setFieldValue('country_input', select_value, true);\n                                                    updateSelectedCountry(text);\n                                                }}\n                                                required\n                                            />\n                                        ) : (\n                                            <div className='proof-of-identity__dropdown-container'>\n                                                <SelectNative\n                                                    {...field}\n                                                    name='country_input'\n                                                    error={touched.country_input && errors.country_input}\n                                                    label={localize('Country')}\n                                                    placeholder={localize('Please select')}\n                                                    list_items={country_list}\n                                                    value={values.country_input}\n                                                    onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                                                        handleChange(e);\n                                                        updateSelectedCountry(e.target.value);\n                                                    }}\n                                                    use_text={true}\n                                                    required\n                                                />\n                                            </div>\n                                        )}\n                                    </React.Fragment>\n                                )}\n                            </Field>\n                        </fieldset>\n                    </div>\n                    <FormFooter className={clsx('proof-of-identity__footer', { 'external-footer': is_from_external })}>\n                        <Button\n                            className='proof-of-identity__submit-button'\n                            type='submit'\n                            onClick={() => handleSubmit()}\n                            has_effect\n                            is_disabled={!dirty || isSubmitting || !isValid || isLoading}\n                            is_loading={false}\n                            text={localize('Next')}\n                            large\n                            primary\n                        />\n                    </FormFooter>\n                </React.Fragment>\n            )}\n        </Formik>\n    );\n};\n\nexport default CountrySelector;\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport { Field, FormikProps, FieldProps, useFormikContext } from 'formik';\nimport { ResidenceList } from '@deriv/api-types';\nimport { Autocomplete, Input, SelectNative } from '@deriv/components';\nimport { formatInput, getIDVNotApplicableOption } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport {\n    getDocumentData,\n    preventEmptyClipboardPaste,\n    generatePlaceholderText,\n    getExampleFormat,\n} from '../../Helpers/utils';\nimport { TDocument, TIDVFormValues } from '../../Types';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TIDVFormProps = {\n    selected_country: ResidenceList[0];\n    hide_hint?: boolean;\n    class_name?: string;\n    is_for_real_account_signup_modal?: boolean;\n    is_for_mt5?: boolean;\n};\n\nconst IDVForm = ({\n    class_name,\n    selected_country,\n    hide_hint,\n    is_for_real_account_signup_modal = false,\n    is_for_mt5 = false,\n}: TIDVFormProps) => {\n    const [document_list, setDocumentList] = React.useState<Array<TDocument>>([]);\n    const [selected_doc, setSelectedDoc] = React.useState('');\n    const { isDesktop } = useDevice();\n\n    const { documents_supported: document_data } = selected_country?.identity?.services?.idv ?? {};\n\n    const { errors, touched, values, handleBlur, handleChange, setFieldValue }: FormikProps<TIDVFormValues> =\n        useFormikContext();\n    const default_document = {\n        id: '',\n        text: '',\n        value: '',\n        example_format: '',\n    };\n\n    const IDV_NOT_APPLICABLE_OPTION = React.useMemo(\n        () => getIDVNotApplicableOption(is_for_real_account_signup_modal),\n        [is_for_real_account_signup_modal]\n    );\n\n    React.useEffect(() => {\n        if (document_data && selected_country && selected_country.value) {\n            const document_types = Object.keys(document_data);\n            if (document_types.length === 0) return;\n\n            const new_document_list = document_types.map(key => {\n                const { display_name, format } = document_data[key];\n                const { new_display_name, example_format, additional_document_example_format } = getDocumentData(\n                    selected_country.value ?? '',\n                    key\n                );\n                const needs_additional_document = !!document_data[key].additional;\n\n                if (needs_additional_document) {\n                    return {\n                        id: key,\n                        text: display_name ?? new_display_name, // Display document name from API if available, else use the one from the helper function\n                        additional: {\n                            display_name: document_data[key].additional?.display_name,\n                            format: document_data[key].additional?.format,\n                            example_format: additional_document_example_format,\n                        },\n                        value: format,\n                        example_format,\n                    };\n                }\n                return {\n                    id: key,\n                    text: display_name ?? new_display_name, // Display document name from API if available, else use the one from the helper function\n                    value: format,\n                    example_format,\n                };\n            });\n\n            setDocumentList([...new_document_list, IDV_NOT_APPLICABLE_OPTION]);\n        }\n    }, [document_data, selected_country, IDV_NOT_APPLICABLE_OPTION, is_for_mt5]);\n\n    const resetDocumentItemSelected = () => {\n        setFieldValue('document_type', default_document, true);\n    };\n\n    const getDocument = (text: string) => {\n        return document_list.find(d => d.text === text) ?? default_document;\n    };\n\n    const onKeyUp = (e: { target: HTMLInputElement }, document_name: string) => {\n        const example_format =\n            document_name === 'document_number'\n                ? values?.document_type?.example_format\n                : values?.document_type?.additional?.example_format;\n        let current_input: string | null = null;\n        current_input = example_format?.includes('-')\n            ? formatInput(example_format, current_input ?? e.target.value, '-')\n            : e.target.value;\n        setFieldValue(document_name, current_input, true);\n    };\n\n    const bindDocumentData = (item: TDocument) => {\n        setFieldValue('document_type', item, true);\n        setSelectedDoc(item?.id);\n        if (item?.id === IDV_NOT_APPLICABLE_OPTION.id) {\n            setFieldValue('document_number', '', false);\n            setFieldValue('document_additional', '', false);\n        }\n    };\n    return (\n        <section className={clsx('idv-form', class_name)}>\n            <div className='details-form'>\n                <div className='poi-form-on-signup__fields'>\n                    <div\n                        className={clsx('proof-of-identity__container', {\n                            'proof-of-identity__container--idv': hide_hint,\n                        })}\n                    >\n                        <div className={clsx('proof-of-identity__inner-container')}>\n                            <div className='proof-of-identity__fieldset-container'>\n                                <fieldset className={clsx({ 'proof-of-identity__fieldset': !hide_hint })}>\n                                    <Field name='document_type'>\n                                        {({ field }: FieldProps) => (\n                                            <React.Fragment>\n                                                {isDesktop ? (\n                                                    <Autocomplete\n                                                        {...field}\n                                                        data-lpignore='true'\n                                                        error={touched.document_type && errors.document_type}\n                                                        autoComplete='off'\n                                                        type='text'\n                                                        label={localize('Choose the document type')}\n                                                        list_items={document_list}\n                                                        value={values.document_type.text}\n                                                        onBlur={(e: { target: HTMLInputElement }) => {\n                                                            handleBlur(e);\n                                                            if (!getDocument(e.target.value)) {\n                                                                resetDocumentItemSelected();\n                                                            }\n                                                        }}\n                                                        onChange={handleChange}\n                                                        onItemSelection={(item: TDocument) => {\n                                                            if (item.text === 'No results found' || !item.text) {\n                                                                setSelectedDoc('');\n                                                                resetDocumentItemSelected();\n                                                            } else {\n                                                                bindDocumentData(item);\n                                                            }\n                                                        }}\n                                                        required\n                                                    />\n                                                ) : (\n                                                    <SelectNative\n                                                        {...field}\n                                                        name='document_type'\n                                                        error={\n                                                            touched.document_type &&\n                                                            (errors.document_type as string | undefined)\n                                                        }\n                                                        label={localize('Choose the document type')}\n                                                        placeholder={localize('Please select')}\n                                                        list_items={document_list}\n                                                        value={values.document_type.text}\n                                                        onChange={e => {\n                                                            handleChange(e);\n                                                            const selected_document = getDocument(e.target.value);\n                                                            bindDocumentData(selected_document);\n                                                        }}\n                                                        use_text={true}\n                                                        required\n                                                    />\n                                                )}\n                                            </React.Fragment>\n                                        )}\n                                    </Field>\n                                </fieldset>\n                                {values?.document_type?.id !== IDV_NOT_APPLICABLE_OPTION.id && (\n                                    <React.Fragment>\n                                        <fieldset\n                                            className={clsx('additional-field', {\n                                                'proof-of-identity__fieldset-input': !hide_hint,\n                                            })}\n                                        >\n                                            <Field name='document_number'>\n                                                {({ field }: FieldProps) => (\n                                                    <Input\n                                                        {...field}\n                                                        name='document_number'\n                                                        bottom_label={\n                                                            values.document_type &&\n                                                            getExampleFormat(values.document_type.example_format ?? '')\n                                                        }\n                                                        disabled={!values.document_type.id}\n                                                        error={\n                                                            (values.document_type.id &&\n                                                                touched.document_number &&\n                                                                errors.document_number) ||\n                                                            errors.error_message\n                                                        }\n                                                        autoComplete='off'\n                                                        placeholder={generatePlaceholderText(selected_doc)}\n                                                        value={values.document_number}\n                                                        onPaste={preventEmptyClipboardPaste}\n                                                        onBlur={handleBlur}\n                                                        onChange={handleChange}\n                                                        onKeyUp={(e: { target: HTMLInputElement }) =>\n                                                            onKeyUp(e, 'document_number')\n                                                        }\n                                                        required\n                                                        label={\n                                                            values.document_type.id &&\n                                                            generatePlaceholderText(selected_doc)\n                                                        }\n                                                    />\n                                                )}\n                                            </Field>\n                                        </fieldset>\n                                        {values.document_type.additional?.display_name && (\n                                            <fieldset className='additional-field'>\n                                                <Field name='document_additional'>\n                                                    {({ field }: FieldProps) => {\n                                                        const additional_document_placeholder = localize(\n                                                            'Enter your {{document_name}}',\n                                                            {\n                                                                document_name:\n                                                                    values.document_type?.additional?.display_name?.toLowerCase() ??\n                                                                    localize('additional document number'),\n                                                            }\n                                                        );\n                                                        return (\n                                                            <Input\n                                                                {...field}\n                                                                name='document_additional'\n                                                                bottom_label={\n                                                                    values.document_type.additional &&\n                                                                    getExampleFormat(\n                                                                        values.document_type.additional?.example_format\n                                                                    )\n                                                                }\n                                                                disabled={!values.document_type.id}\n                                                                error={\n                                                                    (touched.document_additional &&\n                                                                        errors.document_additional) ||\n                                                                    errors.error_message\n                                                                }\n                                                                autoComplete='off'\n                                                                placeholder={additional_document_placeholder}\n                                                                value={values.document_additional}\n                                                                onPaste={preventEmptyClipboardPaste}\n                                                                onBlur={handleBlur}\n                                                                onChange={handleChange}\n                                                                onKeyUp={(e: { target: HTMLInputElement }) =>\n                                                                    onKeyUp(e, 'document_additional')\n                                                                }\n                                                                required\n                                                            />\n                                                        );\n                                                    }}\n                                                </Field>\n                                            </fieldset>\n                                        )}\n                                    </React.Fragment>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    );\n};\n\nexport default IDVForm;\n","import IdvDocumentSubmit from './idv-document-submit';\n\nexport default IdvDocumentSubmit;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikErrors, FormikHelpers } from 'formik';\nimport { Button, HintBox, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport {\n    filterObjProperties,\n    formatIDVFormValues,\n    getIDVNotApplicableOption,\n    removeEmptyPropertiesFromObject,\n    toMoment,\n    WS,\n} from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { useDevice } from '@deriv-com/ui';\nimport {\n    isAdditionalDocumentValid,\n    isDocumentNumberValid,\n    isDocumentTypeValid,\n    makeSettingsRequest,\n    shouldHideHelperImage,\n    validate,\n    validateName,\n} from '../../../Helpers/utils';\nimport { DerivLightNameDobPoiIcon } from '@deriv/quill-icons';\nimport IDVForm from '../../forms/idv-form';\nimport PersonalDetailsForm from '../../forms/personal-details-form';\nimport FormBody from '../../form-body';\nimport FormFooter from '../../form-footer';\nimport FormSubHeader from '../../form-sub-header';\nimport { ResidenceList } from '@deriv/api-types';\nimport {\n    CLAIMED_DOCUMENT_ERROR_MESSAGE,\n    DUPLICATE_ACCOUNT_ERROR_MESSAGE,\n    GENERIC_ERROR_MESSAGE,\n} from '../../../Configs/poi-error-config';\nimport { TIDVFormValues, TConfirmPersonalDetailsForm } from 'Types';\nimport { API_ERROR_CODES } from '../../../Constants/api-error-codes';\n\ntype TIDVDocumentSubmitProps = {\n    handleBack: React.MouseEventHandler;\n    handleViewComplete: () => void;\n    selected_country: ResidenceList[0];\n    getChangeableFields: () => Array<string>;\n    handleSelectionNext?: (should_show_manual: boolean) => void;\n};\n\nexport type TIdvDocumentSubmitForm = TIDVFormValues & TConfirmPersonalDetailsForm;\n\nconst IdvDocumentSubmit = observer(\n    ({ handleBack, handleViewComplete, handleSelectionNext, selected_country }: TIDVDocumentSubmitProps) => {\n        const { client } = useStore();\n        const { account_settings, getChangeableFields } = client;\n        const { isDesktop } = useDevice();\n\n        const IDV_NOT_APPLICABLE_OPTION = React.useMemo(() => getIDVNotApplicableOption(), []);\n        const shouldSkipIdv = (document_id?: string) => document_id === IDV_NOT_APPLICABLE_OPTION.id;\n        const visible_settings = ['first_name', 'last_name', 'date_of_birth'];\n        const side_note_image = <DerivLightNameDobPoiIcon height='195px' width='285px' />;\n\n        const form_initial_values = filterObjProperties(account_settings, visible_settings) as {\n            [Property in keyof TConfirmPersonalDetailsForm]: string;\n        };\n\n        if (form_initial_values.date_of_birth) {\n            form_initial_values.date_of_birth = toMoment(form_initial_values.date_of_birth).format('YYYY-MM-DD');\n        }\n\n        const changeable_fields = getChangeableFields();\n\n        const initial_values: TIdvDocumentSubmitForm = {\n            document_type: {\n                id: '',\n                text: '',\n                value: '',\n                example_format: '',\n            },\n            document_number: '',\n            ...form_initial_values,\n            confirmation_checkbox: false,\n        };\n\n        const validateFields = (values: TIdvDocumentSubmitForm) => {\n            const errors: FormikErrors<Record<keyof TIdvDocumentSubmitForm, string>> = {};\n            const { document_type, document_number, document_additional } = values;\n\n            if (shouldSkipIdv(document_type.id)) {\n                return errors;\n            }\n\n            const needs_additional_document = !!document_type.additional;\n\n            errors.document_type = isDocumentTypeValid(document_type);\n            if (!shouldHideHelperImage(document_type?.id)) {\n                if (needs_additional_document) {\n                    errors.document_additional = isAdditionalDocumentValid(document_type, document_additional);\n                }\n                errors.document_number = isDocumentNumberValid(document_number, document_type);\n            }\n            const required_fields = ['first_name', 'last_name', 'date_of_birth'];\n            const validateValues = validate(errors, values);\n            validateValues(val => val, required_fields, localize('This field is required'));\n\n            if (values.first_name) {\n                errors.first_name = validateName(values.first_name);\n            }\n            if (values.last_name) {\n                errors.last_name = validateName(values.last_name);\n            }\n\n            if (!values.confirmation_checkbox) {\n                errors.confirmation_checkbox = 'error';\n            }\n\n            return removeEmptyPropertiesFromObject(errors);\n        };\n\n        const submitHandler = async (\n            values: TIdvDocumentSubmitForm,\n            { setSubmitting, setStatus }: FormikHelpers<TIdvDocumentSubmitForm>\n        ) => {\n            if (shouldSkipIdv(values?.document_type?.id)) {\n                handleSelectionNext?.(true);\n                return;\n            }\n\n            setSubmitting(true);\n\n            const request = makeSettingsRequest(values, changeable_fields);\n\n            const data = await WS.setSettings(request);\n\n            if (data?.error) {\n                const response_error =\n                    data.error?.code === API_ERROR_CODES.DUPLICATE_ACCOUNT\n                        ? DUPLICATE_ACCOUNT_ERROR_MESSAGE\n                        : GENERIC_ERROR_MESSAGE;\n                setStatus({ error_message: response_error });\n                setSubmitting(false);\n                return;\n            }\n            const get_settings = await WS.authorized.storage.getSettings();\n            if (get_settings?.error) {\n                setStatus({ error_message: get_settings?.error?.message ?? GENERIC_ERROR_MESSAGE });\n                setSubmitting(false);\n                return;\n            }\n\n            const submit_data = {\n                identity_verification_document_add: 1,\n                ...formatIDVFormValues(values, selected_country.value as string),\n            };\n\n            const idv_update_response = await WS.send(submit_data);\n\n            if (idv_update_response?.error) {\n                const response_error =\n                    idv_update_response.error?.code === API_ERROR_CODES.CLAIMED_DOCUMENT\n                        ? CLAIMED_DOCUMENT_ERROR_MESSAGE\n                        : idv_update_response.error?.message ?? GENERIC_ERROR_MESSAGE;\n                setStatus({ error_message: response_error });\n                setSubmitting(false);\n                return;\n            }\n            setSubmitting(false);\n            handleViewComplete();\n        };\n\n        return (\n            <Formik\n                initialValues={{ ...initial_values }}\n                validate={validateFields}\n                onSubmit={submitHandler}\n                enableReinitialize\n            >\n                {({ dirty, isSubmitting, isValid, values, status }) => {\n                    const should_skip_idv = shouldSkipIdv(values?.document_type?.id);\n                    const is_button_disabled = should_skip_idv ? false : !dirty || isSubmitting || !isValid;\n                    const getButtonText = () =>\n                        should_skip_idv ? (\n                            <Localize i18n_default_text='Next' />\n                        ) : (\n                            <Localize i18n_default_text='Verify' />\n                        );\n                    return (\n                        <Form\n                            className={clsx('proof-of-identity__container proof-of-identity__container--reset', {\n                                'min-height': shouldSkipIdv(values?.document_type?.id),\n                            })}\n                        >\n                            {status?.error_message && (\n                                <div className='account-form__poi-confirm-example--generic-error-msg'>\n                                    <HintBox\n                                        icon='IcAlertDanger'\n                                        message={\n                                            <Text as='p' size='xxxs'>\n                                                {status.error_message}\n                                            </Text>\n                                        }\n                                        is_danger\n                                        className='hint-box-layout'\n                                    />\n                                </div>\n                            )}\n                            <FormBody className='form-body' scroll_offset={isDesktop ? '80px' : '180px'}>\n                                <FormSubHeader title={localize('Identity verification')} />\n                                <IDVForm selected_country={selected_country} class_name='idv-layout' />\n                                {!shouldSkipIdv(values?.document_type?.id) && (\n                                    <React.Fragment>\n                                        <FormSubHeader title={localize('Details')} />\n                                        <PersonalDetailsForm\n                                            class_name='account-form__poi-confirm-example_container'\n                                            is_rendered_for_idv\n                                            editable_fields={values.confirmation_checkbox ? [] : changeable_fields}\n                                            side_note={side_note_image}\n                                            inline_note_text={\n                                                <Localize\n                                                    i18n_default_text='To avoid delays, enter your <0>name</0> and <0>date of birth</0> exactly as they appear on your identity document.'\n                                                    components={[<strong key={0} />]}\n                                                />\n                                            }\n                                        />\n                                    </React.Fragment>\n                                )}\n                            </FormBody>\n                            <FormFooter className='proof-of-identity__footer '>\n                                {isDesktop && (\n                                    <Button\n                                        className='back-btn'\n                                        onClick={handleBack}\n                                        type='button'\n                                        has_effect\n                                        large\n                                        secondary\n                                    >\n                                        <Localize i18n_default_text='Back' />\n                                    </Button>\n                                )}\n                                <Button\n                                    className='proof-of-identity__submit-button'\n                                    type='submit'\n                                    has_effect\n                                    is_disabled={is_button_disabled}\n                                    large\n                                    primary\n                                >\n                                    {getButtonText()}\n                                </Button>\n                            </FormFooter>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        );\n    }\n);\n\nexport default IdvDocumentSubmit;\n","import IdvRejected from './idv-failed';\n\nexport default IdvRejected;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Form, Formik, FormikHelpers, FormikValues } from 'formik';\nimport { GetAccountStatus, GetSettings, ResidenceList } from '@deriv/api-types';\nimport { Button, HintBox, Loading, Text } from '@deriv/components';\nimport {\n    filterObjProperties,\n    getIDVNotApplicableOption,\n    IDV_ERROR_STATUS,\n    isEmptyObject,\n    removeEmptyPropertiesFromObject,\n    TIDVErrorStatus,\n    toMoment,\n    WS,\n} from '@deriv/shared';\nimport { useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport { DerivLightNameDobPoiIcon } from '@deriv/quill-icons';\nimport FormBody from '../../../form-body';\nimport IDVForm from '../../../forms/idv-form';\nimport FormFooter from '../../../form-footer';\nimport FormSubHeader from '../../../form-sub-header';\nimport PersonalDetailsForm from '../../../forms/personal-details-form.jsx';\nimport {\n    isAdditionalDocumentValid,\n    isDocumentNumberValid,\n    isDocumentTypeValid,\n    makeSettingsRequest,\n    shouldHideHelperImage,\n    validate,\n    validateName,\n} from '../../../../Helpers/utils';\nimport {\n    GENERIC_ERROR_MESSAGE,\n    DUPLICATE_ACCOUNT_ERROR_MESSAGE,\n    CLAIMED_DOCUMENT_ERROR_MESSAGE,\n    generateIDVError,\n} from '../../../../Configs/poi-error-config';\nimport { API_ERROR_CODES } from '../../../../Constants/api-error-codes';\nimport { TIDVFormValues, TConfirmPersonalDetailsForm } from '../../../../Types';\nimport LoadErrorMessage from '../../../load-error-message';\nimport { TIdvDocumentSubmitForm } from '../../idv-document-submit/idv-document-submit';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TRestState = {\n    api_error: string;\n    errors?: boolean;\n    form_initial_values: TIdvFailedForm;\n    changeable_fields: string[];\n};\n\ntype TIdvFailed = {\n    account_settings: GetSettings;\n    getChangeableFields: () => string[];\n    handleSubmit: () => void;\n    is_from_external: boolean;\n    mismatch_status: TIDVErrorStatus;\n    residence_list: ResidenceList;\n    latest_status: DeepRequired<GetAccountStatus>['authentication']['attempts']['latest'];\n    selected_country?: ResidenceList[0];\n    handleSelectionNext?: (should_show_manual: boolean) => void;\n};\n\ntype TIDVFailureConfig = {\n    required_fields: string[];\n    side_note_image: JSX.Element;\n    failure_message: React.ReactNode;\n    inline_note_text: React.ReactNode;\n};\n\ntype TIdvFailedForm = Partial<TIDVFormValues> & Partial<TConfirmPersonalDetailsForm>;\n\nconst IdvFailed = ({\n    getChangeableFields,\n    is_from_external,\n    residence_list,\n    account_settings,\n    handleSubmit,\n    mismatch_status = IDV_ERROR_STATUS.Failed.code,\n    latest_status,\n    selected_country,\n    handleSelectionNext,\n}: TIdvFailed) => {\n    const { client } = useStore();\n    const { setIsAlreadyAttempted } = client;\n    const { isMobile, isDesktop } = useDevice();\n\n    const [idv_failure, setIdvFailure] = React.useState<TIDVFailureConfig>({\n        required_fields: [],\n        side_note_image: <DerivLightNameDobPoiIcon height='195px' width='285px' />,\n        failure_message: null,\n        inline_note_text: null,\n    });\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [rest_state, setRestState] = React.useState<TRestState>({\n        api_error: '',\n        errors: false,\n        form_initial_values: {},\n        changeable_fields: [],\n    });\n\n    // Document upload not required for the below error codes\n    const is_document_upload_required = React.useMemo(\n        () =>\n            ![\n                IDV_ERROR_STATUS.DobMismatch.code,\n                IDV_ERROR_STATUS.NameMismatch.code,\n                IDV_ERROR_STATUS.NameDobMismatch.code,\n            ].includes(mismatch_status),\n        [mismatch_status]\n    );\n\n    /**\n     * If user needs to resubmit IDV document, the country should be the new selected country\n     * If user needs to update Personal info, the country should be the country of the latest status\n     */\n    const chosen_country = React.useMemo(\n        () =>\n            is_document_upload_required && !is_from_external\n                ? selected_country ?? {}\n                : residence_list.find(residence_data => residence_data.value === latest_status?.country_code) ?? {},\n        [selected_country, is_document_upload_required, latest_status?.country_code, residence_list, is_from_external]\n    );\n\n    const IDV_NOT_APPLICABLE_OPTION = React.useMemo(() => getIDVNotApplicableOption(), []);\n    const shouldSkipIdv = (document_id?: string) => document_id === IDV_NOT_APPLICABLE_OPTION.id;\n\n    React.useEffect(() => {\n        const initializeFormValues = async (required_fields: string[]) => {\n            await WS?.wait('get_settings');\n            const form_data = filterObjProperties(account_settings, required_fields);\n            if (form_data.date_of_birth) {\n                form_data.date_of_birth = toMoment(form_data.date_of_birth).format('YYYY-MM-DD');\n            }\n            // Remove the checkbox value as it is used only for moving cursor to the error field\n            form_data.confirmation_checkbox = false;\n            let initial_form_values = form_data;\n            if (is_document_upload_required) {\n                initial_form_values = {\n                    document_type: {\n                        id: '',\n                        text: '',\n                        value: '',\n                        example_format: '',\n                        sample_image: '',\n                    },\n                    document_number: '',\n                    ...initial_form_values,\n                };\n            }\n            setRestState({\n                form_initial_values: { ...initial_form_values },\n                changeable_fields: [...getChangeableFields()],\n                api_error: '',\n            });\n            setIsLoading(false);\n        };\n\n        setIsAlreadyAttempted(true);\n\n        const error_config = generateIDVError(\n            is_document_upload_required,\n            latest_status,\n            chosen_country,\n            mismatch_status\n        );\n        setIdvFailure(error_config);\n        initializeFormValues(error_config?.required_fields ?? []).catch(e => {\n            setRestState({\n                form_initial_values: {},\n                changeable_fields: [],\n                api_error: e?.error?.message,\n            });\n        });\n    }, [\n        mismatch_status,\n        account_settings,\n        is_document_upload_required,\n        getChangeableFields,\n        generateIDVError,\n        setIsAlreadyAttempted,\n    ]);\n\n    const onSubmit = async (values: TIdvFailedForm, { setStatus, setSubmitting }: FormikHelpers<TIdvFailedForm>) => {\n        if (shouldSkipIdv(values?.document_type?.id)) {\n            handleSelectionNext?.(true);\n            return;\n        }\n\n        delete values.confirmation_checkbox;\n        setSubmitting(true);\n        setStatus({ error_msg: null });\n        const { document_number, document_type } = values;\n        const request = makeSettingsRequest(\n            values,\n            rest_state?.changeable_fields ? [...rest_state.changeable_fields] : []\n        );\n        const data = await WS.setSettings(request);\n\n        if (data.error) {\n            const response_error =\n                data.error?.code === API_ERROR_CODES.DUPLICATE_ACCOUNT\n                    ? DUPLICATE_ACCOUNT_ERROR_MESSAGE\n                    : GENERIC_ERROR_MESSAGE;\n            setStatus({ error_msg: response_error });\n            setSubmitting(false);\n        } else {\n            const response = await WS.authorized.storage.getSettings();\n            if (response.error) {\n                setRestState(prev_state => ({ ...prev_state, api_error: response.error.message }));\n                setSubmitting(false);\n                return;\n            }\n            const submit_data = {\n                identity_verification_document_add: 1,\n                document_number,\n                document_type: document_type?.id,\n                issuing_country: chosen_country.value,\n            };\n\n            if (!submit_data.document_type || shouldSkipIdv(submit_data.document_type)) {\n                setSubmitting(false);\n                handleSubmit();\n                return;\n            }\n            const idv_update_response = await WS.send(submit_data);\n            if (idv_update_response?.error) {\n                const response_error =\n                    idv_update_response.error?.code === API_ERROR_CODES.CLAIMED_DOCUMENT\n                        ? CLAIMED_DOCUMENT_ERROR_MESSAGE\n                        : idv_update_response?.error?.message ?? GENERIC_ERROR_MESSAGE;\n                setStatus({ error_msg: response_error });\n                setSubmitting(false);\n                return;\n            }\n            setSubmitting(false);\n            handleSubmit();\n        }\n    };\n\n    const validateFields = (values: TIdvFailedForm) => {\n        const errors: Record<string, unknown> = {};\n        if (is_document_upload_required) {\n            const { document_type, document_number, document_additional } = values;\n\n            if (shouldSkipIdv(document_type?.id)) {\n                return errors;\n            }\n\n            const needs_additional_document = !!document_type?.additional;\n            errors.document_type = isDocumentTypeValid(document_type as FormikValues);\n            if (!shouldHideHelperImage(document_type?.id as string)) {\n                if (needs_additional_document) {\n                    errors.document_additional = isAdditionalDocumentValid(document_type, document_additional);\n                }\n                errors.document_number = isDocumentNumberValid(document_number ?? '', document_type as FormikValues);\n            }\n        }\n\n        const validateValues = validate(errors as Record<string, string>, values);\n\n        validateValues(val => val, idv_failure?.required_fields ?? [], localize('This field is required'));\n\n        if (values.first_name) {\n            errors.first_name = validateName(values.first_name);\n        }\n        if (values.last_name) {\n            errors.last_name = validateName(values.last_name);\n        }\n\n        if (!values.confirmation_checkbox) {\n            errors.confirmation_checkbox = 'error';\n        }\n\n        setRestState(prev_state => ({\n            ...prev_state,\n            errors: !isEmptyObject(removeEmptyPropertiesFromObject(errors)),\n        }));\n\n        return removeEmptyPropertiesFromObject(errors);\n    };\n\n    if (rest_state?.api_error) return <LoadErrorMessage error_message={rest_state.api_error} />;\n\n    if (is_loading && Object.keys(rest_state?.form_initial_values ?? {}).length === 0) {\n        return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    }\n\n    const setScrollOffset = () => {\n        if (!isDesktop) {\n            if (is_from_external) {\n                return '140px';\n            }\n            return '180px';\n        }\n        return '80px';\n    };\n\n    const buttonText = (is_idv_skipping: boolean) => {\n        if (is_idv_skipping) return localize('Next');\n        if (is_document_upload_required) return localize('Verify');\n        return localize('Update profile');\n    };\n\n    return (\n        <Formik\n            initialValues={rest_state?.form_initial_values ?? {}}\n            onSubmit={onSubmit}\n            validate={validateFields}\n            className='proof-of-identity__container'\n        >\n            {({ isSubmitting, isValid, dirty, status, values }) => (\n                <Form\n                    className={clsx('proof-of-identity__mismatch-container', {\n                        'upload-layout': is_document_upload_required,\n                        'min-height': shouldSkipIdv(values?.document_type?.id),\n                    })}\n                >\n                    <FormBody className='form-body' scroll_offset={setScrollOffset()}>\n                        <Text size={isMobile ? 'xs' : 's'} weight='bold' align='center'>\n                            <Localize i18n_default_text='Your identity verification failed because:' />\n                        </Text>\n                        {(status?.error_msg || idv_failure?.failure_message) && (\n                            <HintBox\n                                className={clsx('proof-of-identity__failed-message', 'hint-box-layout')}\n                                icon='IcAlertDanger'\n                                message={\n                                    <Text as='p' size={isMobile ? 'xxs' : 'xs'} data-testid={mismatch_status}>\n                                        {status?.error_msg ?? idv_failure?.failure_message}\n                                    </Text>\n                                }\n                                is_danger\n                            />\n                        )}\n                        {is_document_upload_required && (\n                            <div>\n                                <Text size='xs' align={isMobile ? 'left' : 'center'}>\n                                    <Localize i18n_default_text='Let’s try again. Choose another document and enter the corresponding details.' />\n                                </Text>\n                                <FormSubHeader title={localize('Identity verification')} />\n                                <IDVForm selected_country={chosen_country} class_name='idv-layout idv-resubmit' />\n                                {!shouldSkipIdv(values?.document_type?.id) && (\n                                    <FormSubHeader title={localize('Details')} />\n                                )}\n                            </div>\n                        )}\n                        {!shouldSkipIdv(values?.document_type?.id) && (\n                            <PersonalDetailsForm\n                                class_name='account-form__poi-confirm-example_container'\n                                editable_fields={values.confirmation_checkbox ? [] : rest_state?.changeable_fields}\n                                is_rendered_for_idv\n                                side_note={idv_failure?.side_note_image}\n                                inline_note_text={idv_failure?.inline_note_text}\n                                mismatch_status={mismatch_status}\n                            />\n                        )}\n                    </FormBody>\n                    <FormFooter className='proof-of-identity__footer'>\n                        <Button\n                            className='proof-of-identity__submit-button'\n                            type='submit'\n                            has_effect\n                            is_disabled={!dirty || isSubmitting || !isValid}\n                            text={buttonText(shouldSkipIdv(values?.document_type?.id))}\n                            large\n                            primary\n                        />\n                    </FormFooter>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default IdvFailed;\n","import React from 'react';\nimport { formatIDVError, WS, IDV_ERROR_STATUS, POIContext, isIDVReportNotAvailable } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport CountrySelector from '../../../Components/poi/poi-country-selector';\nimport IdvDocumentSubmit from '../../../Components/poi/idv-document-submit';\nimport IdvFailed from '../../../Components/poi/idv-status/idv-failed';\nimport IdvSubmitComplete from '../../../Components/poi/idv-status/idv-submit-complete';\nimport Unsupported from '../../../Components/poi/status/unsupported';\nimport UploadComplete from '../../../Components/poi/status/upload-complete';\nimport OnfidoSdkViewContainer from './onfido-sdk-view-container';\nimport { identity_status_codes, submission_status_code, service_code } from './proof-of-identity-utils';\n\nconst POISubmission = observer(\n    ({\n        allow_poi_resubmission,\n        has_require_submission,\n        height,\n        identity_last_attempt,\n        idv,\n        is_from_external,\n        is_idv_disallowed,\n        needs_poa,\n        onfido,\n        onStateChange,\n        redirect_button,\n        residence_list,\n        should_show_mismatch_form,\n    }) => {\n        const {\n            submission_service,\n            setSubmissionService,\n            submission_status,\n            setSubmissionStatus,\n            selected_country,\n            setSelectedCountry,\n        } = React.useContext(POIContext);\n\n        const { client, notifications } = useStore();\n\n        const { account_settings, getChangeableFields, account_status } = client;\n        const { refreshNotifications } = notifications;\n        const is_high_risk = account_status.risk_classification === 'high';\n\n        const handleSelectionNext = (should_show_manual = false) => {\n            if (Object.keys(selected_country).length) {\n                const { submissions_left: idv_submissions_left } = idv;\n                const { submissions_left: onfido_submissions_left } = onfido;\n                const is_idv_supported = selected_country.identity.services.idv.is_country_supported;\n                const is_onfido_supported =\n                    selected_country.identity.services.onfido.is_country_supported && selected_country.value !== 'ng';\n\n                if (!should_show_manual && is_idv_supported && Number(idv_submissions_left) > 0 && !is_idv_disallowed) {\n                    setSubmissionService(service_code.idv);\n                } else if (!should_show_manual && Number(onfido_submissions_left) > 0 && is_onfido_supported) {\n                    setSubmissionService(service_code.onfido);\n                } else {\n                    setSubmissionService(service_code.manual);\n                }\n                setSubmissionStatus(submission_status_code.submitting);\n            }\n        };\n\n        const handleViewComplete = () => {\n            if (onStateChange && typeof onStateChange === 'function') {\n                onStateChange(identity_status_codes.pending);\n            }\n            setSubmissionStatus(submission_status_code.complete);\n\n            WS.authorized.getAccountStatus().then(() => {\n                refreshNotifications();\n            });\n        };\n\n        const handleBack = () => setSubmissionStatus(submission_status_code.selecting);\n\n        const getCountryFromResidence = React.useCallback(\n            country_code => residence_list.find(residence => residence.value === country_code),\n            [residence_list]\n        );\n\n        const needs_resubmission = has_require_submission || allow_poi_resubmission;\n        const is_report_not_available = isIDVReportNotAvailable(idv);\n        const mismatch_status = formatIDVError(idv.last_rejected, idv.status, is_high_risk, is_report_not_available);\n\n        const setIdentityService = React.useCallback(\n            identity_last_attempt => {\n                const { service, country_code } = identity_last_attempt;\n                setSelectedCountry(getCountryFromResidence(country_code));\n                switch (service) {\n                    case service_code.idv:\n                    case service_code.onfido: {\n                        if (Number(idv.submissions_left) > 0 || Number(onfido.submissions_left) > 0) {\n                            setSubmissionStatus(submission_status_code.selecting);\n                        } else {\n                            setSubmissionService(service_code.manual);\n                            setSubmissionStatus(submission_status_code.submitting);\n                        }\n                        break;\n                    }\n                    case service_code.manual: {\n                        setSubmissionService(service_code.manual);\n                        setSubmissionStatus(submission_status_code.submitting);\n                        break;\n                    }\n                    default:\n                        break;\n                }\n            },\n            [\n                getCountryFromResidence,\n                idv.submissions_left,\n                onfido.submissions_left,\n                setSelectedCountry,\n                setSubmissionService,\n                setSubmissionStatus,\n                is_idv_disallowed,\n            ]\n        );\n\n        React.useEffect(() => {\n            if (submission_status != submission_status_code.selecting) {\n                return;\n            }\n            if (needs_resubmission && identity_last_attempt) {\n                setIdentityService(identity_last_attempt);\n            } else if (\n                mismatch_status &&\n                [\n                    IDV_ERROR_STATUS.DobMismatch.code,\n                    IDV_ERROR_STATUS.NameMismatch.code,\n                    IDV_ERROR_STATUS.NameDobMismatch.code,\n                ].includes(mismatch_status) &&\n                idv.submissions_left > 0\n            ) {\n                setSubmissionService(service_code.idv);\n                setSubmissionStatus(submission_status_code.submitting);\n            } else {\n                setSubmissionStatus(submission_status_code.selecting);\n            }\n        }, [\n            allow_poi_resubmission,\n            identity_last_attempt,\n            needs_resubmission,\n            setIdentityService,\n            submission_status,\n            idv,\n            mismatch_status,\n            setSubmissionService,\n            setSubmissionStatus,\n        ]);\n\n        switch (submission_status) {\n            case submission_status_code.selecting: {\n                return (\n                    <CountrySelector\n                        handleSelectionNext={handleSelectionNext}\n                        is_from_external={is_from_external}\n                        mismatch_status={mismatch_status}\n                    />\n                );\n            }\n\n            case submission_status_code.submitting: {\n                switch (submission_service) {\n                    case service_code.idv:\n                        return should_show_mismatch_form ? (\n                            <IdvFailed\n                                account_settings={account_settings}\n                                getChangeableFields={getChangeableFields}\n                                mismatch_status={mismatch_status}\n                                residence_list={residence_list}\n                                handleSubmit={handleViewComplete}\n                                latest_status={identity_last_attempt}\n                                selected_country={selected_country}\n                                handleSelectionNext={handleSelectionNext}\n                                report_available={!!idv?.report_available}\n                            />\n                        ) : (\n                            <IdvDocumentSubmit\n                                handleSelectionNext={handleSelectionNext}\n                                handleViewComplete={handleViewComplete}\n                                handleBack={handleBack}\n                                selected_country={selected_country}\n                            />\n                        );\n                    case service_code.onfido: {\n                        const country_code = selected_country.value;\n                        const doc_obj = selected_country.identity.services.onfido.documents_supported;\n                        const documents_supported = Object.keys(doc_obj).map(d => doc_obj[d].display_name);\n                        return (\n                            <OnfidoSdkViewContainer\n                                country_code={country_code}\n                                documents_supported={documents_supported}\n                                getChangeableFields={getChangeableFields}\n                                handleViewComplete={handleViewComplete}\n                                height={height}\n                            />\n                        );\n                    }\n                    case service_code.manual:\n                        return (\n                            <Unsupported\n                                country_code={selected_country.value}\n                                is_from_external={is_from_external}\n                                allow_poi_resubmission={allow_poi_resubmission}\n                                handleViewComplete={handleViewComplete}\n                                onfido={onfido}\n                                handleBack={handleBack}\n                                is_resubmission={needs_resubmission}\n                            />\n                        );\n                    default:\n                        return null;\n                }\n            }\n            case submission_status_code.complete: {\n                switch (submission_service) {\n                    case service_code.idv:\n                        return (\n                            <IdvSubmitComplete\n                                is_from_external={is_from_external}\n                                mismatch_status={mismatch_status}\n                                needs_poa={needs_poa}\n                                redirect_button={redirect_button}\n                            />\n                        );\n                    // This will be replaced in the next Manual Upload Project\n                    case service_code.manual:\n                        return (\n                            <UploadComplete\n                                is_from_external={is_from_external}\n                                needs_poa={needs_poa}\n                                redirect_button={redirect_button}\n                                is_manual_upload\n                            />\n                        );\n                    case service_code.onfido:\n                        return (\n                            <UploadComplete\n                                is_from_external={is_from_external}\n                                needs_poa={needs_poa}\n                                redirect_button={redirect_button}\n                            />\n                        );\n                    default:\n                        return null;\n                }\n            }\n            default:\n                return null;\n        }\n    }\n);\n\nexport default POISubmission;\n","export const populateVerificationStatus = account_status => {\n    if (!account_status || !account_status.authentication) return {};\n\n    const { attempts, document, identity, income, needs_verification } = account_status.authentication;\n\n    const identity_status = identity.status;\n    const document_status = document.status;\n    const income_status = income.status;\n\n    const allow_document_upload = account_status.status.some(status => status === 'allow_document_upload');\n    const allow_poi_resubmission = account_status.status.some(status => status === 'allow_poi_resubmission');\n    const allow_poa_resubmission = account_status.status.some(status => status === 'allow_poa_resubmission');\n    const allow_poinc_resubmission = account_status.status.some(status => status === 'allow_poinc_resubmission');\n    const is_age_verified = account_status.status.some(status => status === 'age_verification');\n    const is_fully_authenticated = account_status.status.some(status => status === 'authenticated');\n    const is_idv_disallowed = account_status.status.some(status => status === 'idv_disallowed');\n    const poa_address_mismatch = account_status.status.some(status => status === 'poa_address_mismatch');\n    const poi_expiring_soon = account_status.status.some(status => status === 'poi_expiring_soon');\n    const poa_authenticated_with_idv = account_status.status.some(status => status === 'poa_authenticated_with_idv');\n    const poa_authenticated_with_idv_photo = account_status.status.some(\n        status => status === 'poa_authenticated_with_idv_photo'\n    );\n    const poa_expiring_soon = account_status.status.some(status => status === 'poa_expiring_soon');\n    const poi_acknowledged = ['pending', 'verified'].includes(identity_status);\n    const has_poa = !(document && document.status === 'none');\n    const has_poi = !(identity && identity.status === 'none');\n    const has_poinc = !(income && income.status === 'none');\n    const has_submitted_poa = document_status === 'pending' && !allow_poa_resubmission;\n    const needs_poa =\n        !(has_submitted_poa || document_status === 'verified') ||\n        (needs_verification.length && needs_verification.includes('document'));\n    const needs_poi =\n        !poi_acknowledged || (Boolean(needs_verification.length) && needs_verification.includes('identity'));\n    const needs_poinc = needs_verification.length && needs_verification.includes('income');\n\n    const { idv, onfido, manual } = identity.services;\n    const identity_last_attempt = attempts.latest;\n    const has_attempted_idv = Boolean(attempts.history.length && attempts.history.find(h => h.service === 'idv'));\n\n    return {\n        allow_document_upload,\n        allow_poa_resubmission,\n        allow_poi_resubmission,\n        allow_poinc_resubmission,\n        has_attempted_idv,\n        has_poa,\n        has_poi,\n        has_poinc,\n        has_submitted_poa,\n        identity_last_attempt,\n        identity_status,\n        document_status,\n        income_status,\n        idv,\n        is_age_verified,\n        is_fully_authenticated,\n        is_idv_disallowed,\n        manual,\n        needs_poa,\n        needs_poi,\n        needs_poinc,\n        needs_verification,\n        onfido,\n        poa_address_mismatch,\n        poa_authenticated_with_idv,\n        poa_authenticated_with_idv_photo,\n        poi_expiring_soon,\n        poa_expiring_soon,\n    };\n};\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { Button, Loading } from '@deriv/components';\nimport { isEmptyObject, WS, getPlatformRedirect, platforms } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { identity_status_codes, service_code } from './proof-of-identity-utils';\nimport DemoMessage from '../../../Components/demo-message';\nimport ErrorMessage from '../../../Components/error-component';\nimport Expired from '../../../Components/poi/status/expired';\nimport IdvContainer from './idv.jsx';\nimport Limited from '../../../Components/poi/status/limited';\nimport { Localize } from '@deriv/translations';\nimport NotRequired from '../../../Components/poi/status/not-required';\nimport Onfido from './onfido.jsx';\nimport POISubmission from './proof-of-identity-submission.jsx';\nimport Unsupported from '../../../Components/poi/status/unsupported';\nimport UploadComplete from '../../../Components/poi/status/upload-complete';\nimport Verified from '../../../Components/poi/status/verified';\nimport { populateVerificationStatus } from '../Helpers/verification';\n\nconst ProofOfIdentityContainer = observer(\n    ({ height, is_from_external, onStateChange, getChangeableFields, updateAccountStatus }) => {\n        const history = useHistory();\n        const [api_error, setAPIError] = React.useState();\n        const [has_require_submission, setHasRequireSubmission] = React.useState(false);\n        const [residence_list, setResidenceList] = React.useState([]);\n        const [is_status_loading, setStatusLoading] = React.useState(true);\n\n        const { client, common, notifications } = useStore();\n\n        const {\n            account_settings,\n            account_status,\n            fetchResidenceList,\n            is_switching,\n            is_high_risk,\n            is_withdrawal_lock,\n            should_allow_authentication,\n            is_virtual,\n        } = client;\n        const { app_routing_history, routeBackInApp, is_language_changing } = common;\n        const { refreshNotifications } = notifications;\n\n        const from_platform = getPlatformRedirect(app_routing_history);\n\n        const should_show_redirect_btn = Object.keys(platforms).includes(from_platform?.ref);\n\n        const routeBackTo = redirect_route => routeBackInApp(history, [redirect_route]);\n        const handleRequireSubmission = () => setHasRequireSubmission(true);\n        const country_code = account_settings?.citizen || account_settings?.country_code;\n\n        const handleManualSubmit = () => {\n            WS.authorized.getAccountStatus().then(() => {\n                refreshNotifications();\n            });\n        };\n\n        const loadResidenceList = React.useCallback(() => {\n            fetchResidenceList().then(response_residence_list => {\n                if (response_residence_list.error) {\n                    setAPIError(response_residence_list.error);\n                } else {\n                    setResidenceList(response_residence_list.residence_list);\n                }\n            });\n        }, [fetchResidenceList]);\n\n        React.useEffect(() => {\n            if (is_language_changing) {\n                loadResidenceList();\n            }\n        }, [is_language_changing, loadResidenceList]);\n\n        React.useEffect(() => {\n            // only re-mount logic when switching is done\n            if (!is_switching) {\n                setAPIError(null);\n                WS.authorized.getAccountStatus().then(response_account_status => {\n                    if (response_account_status.error) {\n                        setAPIError(response_account_status.error);\n                        setStatusLoading(false);\n                        return;\n                    }\n                    loadResidenceList();\n                    setStatusLoading(false);\n                });\n            }\n        }, [loadResidenceList, is_switching]);\n\n        if (api_error) {\n            return <ErrorMessage error_message={api_error?.message || api_error} />;\n        } else if (is_status_loading || is_switching || isEmptyObject(account_status) || residence_list.length === 0) {\n            /**\n             * Display loader while waiting for the account status and residence list to be populated\n             */\n            return <Loading is_fullscreen={false} />;\n        } else if (is_virtual) {\n            return <DemoMessage />;\n        }\n\n        const verification_status = populateVerificationStatus(account_status);\n        const {\n            identity,\n            idv,\n            allow_poi_resubmission,\n            identity_last_attempt,\n            identity_status,\n            is_age_verified,\n            is_idv_disallowed,\n            manual,\n            needs_poa,\n            onfido,\n            poi_expiring_soon,\n        } = verification_status;\n        const should_ignore_idv = is_high_risk && is_withdrawal_lock;\n\n        if (!should_allow_authentication && !is_age_verified && !poi_expiring_soon) {\n            return <NotRequired />;\n        }\n        const onClickRedirectButton = () => {\n            const platform = platforms[from_platform.ref];\n            const { is_hard_redirect = false, url = '' } = platform ?? {};\n            if (is_hard_redirect) {\n                window.location.href = url;\n                window.sessionStorage.removeItem('config.platform');\n            } else {\n                routeBackTo(from_platform.route);\n            }\n        };\n\n        const redirect_button = should_show_redirect_btn && (\n            <Button primary className='proof-of-identity__redirect' onClick={onClickRedirectButton}>\n                <Localize\n                    i18n_default_text='Back to {{platform_name}}'\n                    values={{ platform_name: from_platform.name }}\n                />\n            </Button>\n        );\n        const should_show_mismatch_form =\n            identity_status != identity_status_codes.verified &&\n            idv.submissions_left > 0 &&\n            [identity_status_codes.rejected, identity_status_codes.suspected, identity_status_codes.expired].includes(\n                idv.status\n            );\n\n        if (\n            identity_status === identity_status_codes.none ||\n            has_require_submission ||\n            allow_poi_resubmission ||\n            should_show_mismatch_form ||\n            poi_expiring_soon\n        ) {\n            return (\n                <POISubmission\n                    account_settings={account_settings}\n                    allow_poi_resubmission={allow_poi_resubmission}\n                    has_require_submission={has_require_submission}\n                    height={height ?? null}\n                    getChangeableFields={getChangeableFields}\n                    identity_last_attempt={identity_last_attempt}\n                    idv={idv}\n                    is_from_external={!!is_from_external}\n                    is_idv_disallowed={is_idv_disallowed || should_ignore_idv}\n                    manual={manual}\n                    needs_poa={needs_poa}\n                    onfido={onfido}\n                    onStateChange={onStateChange}\n                    redirect_button={redirect_button}\n                    refreshNotifications={refreshNotifications}\n                    residence_list={residence_list}\n                    updateAccountStatus={updateAccountStatus}\n                    should_show_mismatch_form={should_show_mismatch_form}\n                />\n            );\n        } else if (\n            !identity_last_attempt ||\n            // Prioritise verified status from back office. How we know this is if there is mismatch between current statuses (Should be refactored)\n\n            (identity_status === identity_status_codes.verified &&\n                identity_status !== identity?.services[identity_last_attempt?.service].status)\n        ) {\n            switch (identity_status) {\n                case identity_status_codes.pending:\n                    return (\n                        <UploadComplete\n                            is_from_external={!!is_from_external}\n                            needs_poa={needs_poa}\n                            redirect_button={redirect_button}\n                            is_manual_upload={manual?.status === 'pending'}\n                        />\n                    );\n                case identity_status_codes.verified:\n                    return (\n                        <Verified\n                            is_from_external={!!is_from_external}\n                            needs_poa={needs_poa}\n                            redirect_button={redirect_button}\n                            service={identity_last_attempt?.service}\n                        />\n                    );\n                case identity_status_codes.expired:\n                    return (\n                        <Expired\n                            is_from_external={!!is_from_external}\n                            redirect_button={redirect_button}\n                            handleRequireSubmission={handleRequireSubmission}\n                        />\n                    );\n                case identity_status_codes.rejected:\n                case identity_status_codes.suspected:\n                    return <Limited handleRequireSubmission={handleRequireSubmission} />;\n                default:\n                    break;\n            }\n        }\n\n        switch (identity_last_attempt.service) {\n            case service_code.idv:\n                return (\n                    <IdvContainer\n                        account_settings={account_settings}\n                        handleRequireSubmission={handleRequireSubmission}\n                        getChangeableFields={getChangeableFields}\n                        idv={idv}\n                        is_from_external={!!is_from_external}\n                        needs_poa={needs_poa}\n                        redirect_button={redirect_button}\n                        residence_list={residence_list}\n                    />\n                );\n            case service_code.onfido:\n                return (\n                    <Onfido\n                        handleRequireSubmission={handleRequireSubmission}\n                        is_from_external={!!is_from_external}\n                        needs_poa={needs_poa}\n                        onfido={onfido}\n                        manual={manual}\n                        redirect_button={redirect_button}\n                        country_code={country_code}\n                        handleViewComplete={handleManualSubmit}\n                    />\n                );\n            case service_code.manual:\n                return (\n                    <Unsupported\n                        manual={manual}\n                        country_code={country_code}\n                        is_from_external={is_from_external}\n                        needs_poa={needs_poa}\n                        redirect_button={redirect_button}\n                        handleRequireSubmission={handleRequireSubmission}\n                        handleViewComplete={handleManualSubmit}\n                        onfido={onfido}\n                    />\n                );\n            default:\n                return null;\n        }\n    }\n);\n\nexport default ProofOfIdentityContainer;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { AutoHeightWrapper } from '@deriv/components';\nimport ProofOfIdentityContainer from './proof-of-identity-container.jsx';\n\nconst ProofOfIdentity = ({ is_from_external, onStateChange }) => {\n    return (\n        <AutoHeightWrapper>\n            {({ setRef, height }) => (\n                <div ref={setRef} className='proof-of-identity'>\n                    <div className='proof-of-identity__main-container'>\n                        <ProofOfIdentityContainer\n                            height={height}\n                            is_from_external={is_from_external}\n                            onStateChange={onStateChange}\n                        />\n                    </div>\n                </div>\n            )}\n        </AutoHeightWrapper>\n    );\n};\n\nexport default withRouter(ProofOfIdentity);\n","import React from 'react';\n\nimport { Loading } from '@deriv/components';\nimport { useGrowthbookGetFeatureValue } from '@deriv/hooks';\nimport { ACCOUNTS_OS_POI_STATUS_URL, ACCOUNTS_OS_POI_URL, getAppId, getSocketURL } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\nimport { useKycAuthStatus } from '../../../hooks';\n\nimport ProofOfIdentity from './proof-of-identity';\n\nconst ProofOfIdentityFlow = observer(() => {\n    const {\n        client: { getToken, residence },\n        common: { is_from_tradershub_os },\n    } = useStore();\n    const { kyc_auth_status } = useKycAuthStatus({ country: residence });\n    const [shouldRedirectToAccountsOSApp, isRedirectToAccountsOSAppFFLoaded] = useGrowthbookGetFeatureValue({\n        featureFlag: 'redirect_to_poi_in_accounts_os',\n    });\n\n    const getFormattedURL = url_link => {\n        const url = new URL(url_link);\n        const urlParams = new URLSearchParams(location.search);\n        const platform = urlParams.get('platform') ?? (is_from_tradershub_os ? 'tradershub_os' : 'deriv_app');\n\n        const params = {\n            platform,\n            appid: getAppId(),\n            lang: 'en',\n            server: getSocketURL(),\n            token: getToken(),\n        };\n\n        Object.entries(params).forEach(([key, value]) => {\n            url.searchParams.append(key, value);\n        });\n\n        return url.toString();\n    };\n\n    if (isRedirectToAccountsOSAppFFLoaded) {\n        if (shouldRedirectToAccountsOSApp && kyc_auth_status) {\n            const { identity } = kyc_auth_status;\n            const redirect_url =\n                identity.status === 'none' || identity.status === 'required'\n                    ? ACCOUNTS_OS_POI_URL\n                    : ACCOUNTS_OS_POI_STATUS_URL;\n            window.location.href = getFormattedURL(redirect_url);\n        } else {\n            return <ProofOfIdentity />;\n        }\n    }\n\n    return <Loading is_fullscreen={false} className='account__initial-loader' />;\n});\n\nexport default ProofOfIdentityFlow;\n","import { Expired as PoaExpired } from './expired';\n\nexport default PoaExpired;\n","import { Button, Icon, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport React from 'react';\nimport IconMessageContent from '../../../icon-message-content';\n\ntype TExpired = {\n    onClick: () => void;\n};\n\nexport const Expired = ({ onClick }: TExpired) => (\n    <div className='account-management__container'>\n        <IconMessageContent\n            message={<Localize i18n_default_text='New proof of address is needed' />}\n            text={\n                <Localize\n                    i18n_default_text='Your document for proof of address is expired. <0/>Please submit again.'\n                    components={[<br key={0} />]}\n                />\n            }\n            icon={<Icon icon='IcPoaUpload' size={128} />}\n        >\n            <Button onClick={onClick} has_effect primary>\n                <Text className='dc-btn__text' size='xs' weight='bold' as='p'>\n                    <Localize i18n_default_text='Resubmit' />\n                </Text>\n            </Button>\n        </IconMessageContent>\n    </div>\n);\n","import { NotRequired as PoaNotRequired } from './not-required';\n\nexport default PoaNotRequired;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\nexport const NotRequired = () => (\n    <IconMessageContent\n        message={localize('Proof of address verification not required')}\n        text={localize(\n            'Your account does not need address verification at this time. We will inform you if address verification is required in the future.'\n        )}\n        icon={<Icon icon='IcPoaVerified' size={128} />}\n    />\n);\n","import React from 'react';\nimport clsx from 'clsx';\nimport { FileDropzone, Icon, Text } from '@deriv/components';\nimport { Localize, localize } from '@deriv/translations';\nimport { getSupportedFiles, max_document_size, supported_filetypes } from '@deriv/shared';\nimport { DropzoneOptions } from 'react-dropzone';\nimport { useDevice } from '@deriv-com/ui';\nimport { TFile } from '../../Types';\n\ntype THandleRejectedFiles = DropzoneOptions['onDropRejected'];\n\ntype TFileUploaderProps = {\n    onFileDrop: (files: File[]) => void;\n    onError?: (error_message: string) => void;\n};\n\nconst UploadMessage = () => {\n    const { isDesktop, isMobile } = useDevice();\n\n    return (\n        <React.Fragment>\n            <Icon icon='IcUpload' className='dc-file-dropzone__message-icon' size={30} />\n            <div className='dc-file-dropzone__message-subtitle'>\n                <Text size='xxs' align='center' weight='bold' color='less-prominent'>\n                    {isDesktop ? (\n                        <Localize i18n_default_text='Drag and drop a file or click to browse your files.' />\n                    ) : (\n                        <Localize i18n_default_text='Click here to browse your files.' />\n                    )}\n                </Text>\n                <Text size={isMobile ? 'xxxxs' : 'xxxs'} align='center' color='less-prominent'>\n                    <Localize i18n_default_text='Remember, selfies, pictures of houses, or non-related images will be rejected.' />\n                </Text>\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst FileUploader = ({ onFileDrop, onError }: TFileUploaderProps) => {\n    const [document_files, setDocumentFiles] = React.useState<File[]>([]);\n    const [file_error, setFileError] = React.useState<string | null>(null);\n\n    React.useEffect(() => {\n        if (document_files) {\n            onFileDrop(document_files);\n            onError?.('');\n        }\n    }, [document_files, onFileDrop, onError]);\n\n    const handleAcceptedFiles = (files: File[]) => {\n        if (files.length > 0) {\n            setDocumentFiles(files);\n            setFileError(null);\n            onError?.('');\n        }\n    };\n\n    const handleRejectedFiles: THandleRejectedFiles = files => {\n        const is_file_too_large = files.length > 0 && files[0].file.size > max_document_size;\n        const supported_files = files.filter(each_file => getSupportedFiles(each_file.file.name));\n        const error_message =\n            is_file_too_large && supported_files.length > 0\n                ? localize('File size should be 8MB or less')\n                : localize('File uploaded is not supported');\n\n        setDocumentFiles([]);\n        onError?.(error_message);\n        setFileError(error_message);\n    };\n\n    const removeFile = () => {\n        setDocumentFiles([]);\n        setFileError(null);\n        onError?.('');\n    };\n\n    return (\n        <React.Fragment>\n            <FileDropzone\n                accept={supported_filetypes}\n                error_message={localize('Please upload supported file type.')}\n                filename_limit={26}\n                hover_message={localize('Drop files here..')}\n                max_size={max_document_size}\n                message={<UploadMessage />}\n                multiple={false}\n                onDropAccepted={handleAcceptedFiles}\n                onDropRejected={handleRejectedFiles}\n                validation_error_message={file_error}\n                value={document_files as TFile[]}\n            />\n            {((document_files && document_files?.length > 0) || file_error) && (\n                <div className='file-uploader__remove-btn-container'>\n                    <Icon\n                        icon='IcCloseCircle'\n                        className={clsx('file-uploader__remove-btn', {\n                            'file-uploader__remove-btn--error': file_error,\n                        })}\n                        onClick={removeFile}\n                        color='secondary'\n                        data_testid='dt_remove_file_icon'\n                    />\n                </div>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default FileUploader;\n","import React from 'react';\nimport { TFilesDescription, TListItem } from '../Types';\nimport { localize, Localize } from '@deriv-com/translations';\n\nexport const getFileUploaderDescriptions = (page: string, is_eu?: boolean): TFilesDescription => {\n    const proof_of_income_descriptions = {\n        title: <Localize i18n_default_text='The document must be recent and include your name and address:' />,\n        descriptions: [\n            {\n                id: 'signed_document',\n                value: (\n                    <Localize i18n_default_text='The document must be up-to-date and signed by the issuance authority.' />\n                ),\n            },\n            {\n                id: 'contains_letterhead',\n                value: <Localize i18n_default_text='The document must contain a letterhead.' />,\n            },\n            {\n                id: 'invalid_rejected',\n                value: <Localize i18n_default_text='Invalid or incomplete documents shall be rejected.' />,\n            },\n        ],\n    };\n    const proof_of_address_descriptions = {\n        title: (\n            <Localize\n                i18n_default_text='Upload an original (unaltered) document that clearly shows your name and address, issued within the past {{expiry_in_months}} months. We accept:'\n                values={{ expiry_in_months: is_eu ? 6 : 12 }}\n            />\n        ),\n        descriptions: [\n            {\n                id: 'utility_bill',\n                value: (\n                    <Localize\n                        i18n_default_text='<0>Utility bill:</0> Electricity, water, gas, or landline phone bill.'\n                        components={[<strong key={0} />]}\n                    />\n                ),\n            },\n            {\n                id: 'financial_legal_government_document',\n                value: (\n                    <Localize\n                        i18n_default_text='<0>Financial, legal, or government document:</0> Recent bank statement, affidavit, or government-issued letter.'\n                        components={[<strong key={0} />]}\n                    />\n                ),\n            },\n            {\n                id: 'tenancy_agreement',\n                value: (\n                    <Localize\n                        i18n_default_text='<0>Tenancy agreement:</0> Valid and current agreement.'\n                        components={[<strong key={0} />]}\n                    />\n                ),\n            },\n        ],\n    };\n\n    if (page === 'poinc') return proof_of_income_descriptions;\n    if (page === 'poa') return proof_of_address_descriptions;\n    return { title: '', descriptions: [] };\n};\n\nexport const getSupportedProofOfAddressDocuments = (): Required<TListItem>[] => {\n    return [\n        {\n            value: 'utility_bill',\n            text: localize('Utility bill (electricity, water, gas)'),\n        },\n        {\n            value: 'phone_bill',\n            text: localize('Landline phone bill'),\n        },\n        {\n            value: 'bank_statement',\n            text: localize('Bank statement'),\n        },\n        {\n            value: 'affidavit',\n            text: localize('Official residence declaration or affidavit'),\n        },\n        {\n            value: 'official_letter',\n            text: localize('Official letter issued by the government or solicitor'),\n        },\n        {\n            value: 'rental_agreement',\n            text: localize('Rental/tenancy agreement'),\n        },\n        {\n            text: localize('Others'),\n            value: 'poa_others',\n        },\n    ];\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors in this file\nimport React from 'react';\nimport { Autocomplete, Loading, Text } from '@deriv/components';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport FileUploader from './file-uploader';\nimport { useDevice } from '@deriv-com/ui';\nimport { useKycAuthStatus } from '../../hooks';\nimport { getSupportedProofOfAddressDocuments } from '../../Constants/file-uploader';\nimport { TListItem } from 'Types';\nimport { Field, FieldProps } from 'formik';\n\ntype TFileUploaderContainer = {\n    onFileDrop: (files: File[]) => void;\n    country_of_residence?: string;\n    files_description?: React.ReactNode;\n    examples?: React.ReactNode;\n    onError?: (error_message: string) => void;\n    placeholder?: string;\n};\n\nconst FileUploaderContainer = ({\n    examples,\n    files_description,\n    country_of_residence,\n    onFileDrop,\n    onError,\n    placeholder,\n}: TFileUploaderContainer) => {\n    const { isMobile } = useDevice();\n    const { localize } = useTranslations();\n    const { kyc_auth_status, isLoading } = useKycAuthStatus({ country: country_of_residence });\n    const [document_list, setDocumentList] = React.useState<Required<TListItem>[]>([]);\n\n    React.useEffect(() => {\n        if (kyc_auth_status) {\n            const { address } = kyc_auth_status;\n            const { supported_documents } = address;\n            const doc_list = getSupportedProofOfAddressDocuments().filter(doc =>\n                supported_documents?.includes(doc.value)\n            );\n            setDocumentList(doc_list);\n        }\n    }, [kyc_auth_status]);\n\n    if (isLoading) {\n        return <Loading is_fullscreen={false} />;\n    }\n\n    return (\n        <div className='file-uploader__container' data-testid='dt_file_uploader_container'>\n            {files_description}\n            {examples}\n            {country_of_residence && (\n                <React.Fragment>\n                    <Text size={isMobile ? 'xxs' : 'xs'} as='div' className='file-uploader__file-title' weight='bold'>\n                        <Localize i18n_default_text='Select the type of document:' />\n                    </Text>\n                    <Field name='document_type'>\n                        {({ field, form: { setFieldValue } }: FieldProps<string>) => (\n                            <Autocomplete\n                                {...field}\n                                data-lpignore='true'\n                                autoComplete='off'\n                                list_items={document_list}\n                                type='text'\n                                value={field.value}\n                                label={placeholder}\n                                placeholder={placeholder ?? localize('Select a document')}\n                                onItemSelection={(item: TListItem) => {\n                                    setFieldValue('document_type', item.text, true);\n                                }}\n                                required\n                            />\n                        )}\n                    </Field>\n                </React.Fragment>\n            )}\n            <Text size={isMobile ? 'xxs' : 'xs'} as='div' className='file-uploader__file-title' weight='bold'>\n                <Localize i18n_default_text='Upload file' />\n            </Text>\n            <div className='file-uploader__file-dropzone-wrapper'>\n                <FileUploader onError={onError} onFileDrop={onFileDrop} />\n            </div>\n            <div className='file-uploader__file-supported-formats'>\n                <Text size={isMobile ? 'xxxs' : 'xxs'}>\n                    <Localize i18n_default_text='Supported formats: JPEG, JPG, PNG, PDF, and GIF only' />\n                </Text>\n                <Text size={isMobile ? 'xxxs' : 'xxs'}>\n                    <Localize i18n_default_text='Maximum size: 8MB' />\n                </Text>\n            </div>\n        </div>\n    );\n};\n\nexport default FileUploaderContainer;\n","import FileUploaderContainer from './file-uploader-container';\n\nexport default FileUploaderContainer;\n","import { Text } from '@deriv/components';\nimport React from 'react';\nimport { TFilesDescription } from '../../Types';\nimport { useDevice } from '@deriv-com/ui';\n\nconst FilesDescription = ({ descriptions, title }: TFilesDescription) => {\n    const { isMobile } = useDevice();\n\n    return (\n        <div className='files-description'>\n            <Text size={isMobile ? 'xxs' : 'xs'} as='div' className='files-description__title' weight='bold'>\n                {title}\n            </Text>\n            <ul>\n                {descriptions.map(item => (\n                    <li key={item.id}>\n                        <Text size={isMobile ? 'xxs' : 'xs'} line_height={isMobile ? 'l' : 'xl'}>\n                            {item.value}\n                        </Text>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default FilesDescription;\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { Localize } from '@deriv/translations';\nimport { useStore } from '@deriv/stores';\nimport { getExampleImagesConfig } from '../../../Configs/poa-common-mistake-examples-config';\nimport { LegacyLossIcon } from '@deriv/quill-icons';\nimport './common-mistake-examples.scss';\n\ntype TCommonMistakeExamplePartialsProps = {\n    description: JSX.Element;\n    image: React.ReactElement;\n};\n\n/**\n * Wrapper for displaying the image and description of the mistake\n * @name CommonMistakeExamplePartials\n * @param description - description of the mistake\n * @param image - Sample image\n * @returns  React.ReactElement\n */\nconst CommonMistakeExamplePartials = ({ description, image }: TCommonMistakeExamplePartialsProps) => (\n    <div className='common-mistake-examples__content-layout'>\n        {image}\n        <div className='common-mistake-examples__content-description'>\n            <LegacyLossIcon iconSize='xs' />\n            <Text size='xxxs' line_height='s' role='document'>\n                {description}\n            </Text>\n        </div>\n    </div>\n);\n\n/**\n * Displays the image and description of the mistake\n * @returns React.ReactElement\n */\nconst CommonMistakeExamples = () => {\n    const { isDesktop } = useDevice();\n    const { client } = useStore();\n    const { is_eu } = client;\n    const example_images = getExampleImagesConfig(is_eu);\n    return (\n        <React.Fragment>\n            <Text as='div' weight='bold' size={isDesktop ? 'xs' : 'xxs'} className='common-mistake-examples__title'>\n                <Localize i18n_default_text='Common mistakes' />\n            </Text>\n            <div className='common-mistake-examples__content'>\n                {example_images.map(config => (\n                    <CommonMistakeExamplePartials\n                        key={config.ref}\n                        description={config.description}\n                        image={<config.image />}\n                    />\n                ))}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default CommonMistakeExamples;\n","import React from 'react';\nimport { Localize } from '@deriv/translations';\nimport {\n    DerivLightIcBlurryDocumentIcon,\n    DerivLightIcCroppedDocumentIcon,\n    DerivLightIcDocumentAddressMismatchIcon,\n    DerivLightIcDocumentNameMismatchIcon,\n    DerivLightIcEnvelopeIcon,\n    DerivLightIcOldIssuedDocumentMoreThan12Icon,\n    DerivLightIcOldIssuedDocumentMoreThan6Icon,\n} from '@deriv/quill-icons';\n\ntype TExampleImageConfig = {\n    image: React.ComponentType<React.SVGAttributes<SVGElement>>;\n    description: JSX.Element;\n    ref: string;\n};\n/**\n * Returns a configuration containing images and descriptions for common POA document upload mistakes\n * @returns Array of objects containing image and description\n */\nexport const getExampleImagesConfig = (is_eu: boolean): Array<TExampleImageConfig> => [\n    {\n        image: DerivLightIcDocumentNameMismatchIcon,\n        description: <Localize i18n_default_text='Name in document doesn’t match your Deriv profile.' />,\n        ref: 'name_mismatch',\n    },\n    {\n        image: DerivLightIcDocumentAddressMismatchIcon,\n        description: <Localize i18n_default_text='Address in document doesn’t match address you entered above.' />,\n        ref: 'address_mismatch',\n    },\n    {\n        ...(is_eu\n            ? {\n                  image: DerivLightIcOldIssuedDocumentMoreThan6Icon,\n                  description: <Localize i18n_default_text='Document issued more than 6-months ago.' />,\n                  ref: 'old_6_month_issued_document',\n              }\n            : {\n                  image: DerivLightIcOldIssuedDocumentMoreThan12Icon,\n                  description: <Localize i18n_default_text='Document issued more than 12-months ago.' />,\n                  ref: 'old_12_month_issued_document',\n              }),\n    },\n    {\n        image: DerivLightIcBlurryDocumentIcon,\n        description: <Localize i18n_default_text='Blurry document. All information must be clear and visible.' />,\n        ref: 'blurry_document',\n    },\n    {\n        image: DerivLightIcCroppedDocumentIcon,\n        description: <Localize i18n_default_text='Cropped document. All information must be clear and visible.' />,\n        ref: 'cropped_document',\n    },\n    {\n        image: DerivLightIcEnvelopeIcon,\n        description: <Localize i18n_default_text='An envelope with your name and address.' />,\n        ref: 'envelope',\n    },\n];\n","// Need to import React since it is used in CFD\nimport React from 'react';\nimport { useDevice } from '@deriv-com/ui';\nimport { ThemedScrollbars, FormSubmitButton, Button, InlineMessage, Modal, Text } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport FileUploaderContainer from '../../../Components/file-uploader-container';\nimport FilesDescription from '../../../Components/file-uploader-container/files-descriptions';\nimport FormBody from '../../../Components/form-body';\nimport FormBodySection from '../../../Components/form-body-section';\nimport FormFooter from '../../../Components/form-footer';\nimport FormSubHeader from '../../../Components/form-sub-header';\nimport CommonMistakeExamples from '../../../Components/poa/common-mistakes/common-mistake-examples';\nimport { Form, useFormikContext } from 'formik';\nimport PersonalDetailsForm from '../../../Components/forms/personal-details-form.jsx';\nimport { getFileUploaderDescriptions } from '../../../Constants/file-uploader';\nimport { TPOAFormState } from '../../../Types';\nimport { useTranslations, Localize } from '@deriv-com/translations';\n\ntype TPOADesktopLayout = {\n    className?: string;\n    setOffset: (status: { msg: string }) => string;\n    is_for_cfd_modal?: boolean;\n    is_resubmit?: boolean;\n    setDocumentFiles: (files: File[]) => void;\n    document_files: File[];\n    form_state: TPOAFormState;\n};\n\nconst POADesktopLayout = observer(\n    ({\n        className,\n        setOffset,\n        is_for_cfd_modal,\n        is_resubmit,\n        setDocumentFiles,\n        document_files,\n        form_state,\n    }: TPOADesktopLayout) => {\n        const { status, handleSubmit, isSubmitting, isValid } = useFormikContext();\n        const { isDesktop } = useDevice();\n        const { client } = useStore();\n        const [file_selection_error, setFileSelectionError] = React.useState<string | null>(null);\n        const { localize } = useTranslations();\n        const { states_list, account_settings, is_eu, getChangeableFields } = client;\n        const changeable_fields = getChangeableFields();\n        const poa_uploader_files_descriptions = React.useMemo(() => getFileUploaderDescriptions('poa', is_eu), []);\n\n        return (\n            <Form noValidate className='account-form account-form_poa' onSubmit={handleSubmit}>\n                <ThemedScrollbars height='572px' is_bypassed={!is_for_cfd_modal || !isDesktop} className={className}>\n                    <FormBody scroll_offset={setOffset(status)} isFullHeight={!isDesktop}>\n                        {(status?.msg || is_resubmit) && (\n                            <InlineMessage\n                                type='error'\n                                message={\n                                    <Text as='p' size='xs'>\n                                        {!status?.msg && is_resubmit && (\n                                            <Localize i18n_default_text='We were unable to verify your address with the details you provided. Please check and resubmit or choose a different document type.' />\n                                        )}\n                                        {status?.msg}\n                                    </Text>\n                                }\n                                id='dt_poa_submit-error'\n                            />\n                        )}\n                        <FormSubHeader title={localize('Enter your address')} title_text_size='s' />\n                        <PersonalDetailsForm\n                            /* eslint-disable @typescript-eslint/ban-ts-comment */\n                            // @ts-nocheck This needs to fixed in PersonalDetailsForm\n                            is_qualified_for_poa\n                            editable_fields={changeable_fields}\n                            states_list={states_list}\n                        />\n                        <FormSubHeader title={localize('Submit your document')} title_text_size='s' />\n                        <FormBodySection>\n                            <FileUploaderContainer\n                                onFileDrop={files => {\n                                    setDocumentFiles(files);\n                                }}\n                                onError={setFileSelectionError}\n                                files_description={\n                                    <FilesDescription\n                                        title={poa_uploader_files_descriptions.title}\n                                        descriptions={poa_uploader_files_descriptions.descriptions}\n                                    />\n                                }\n                                examples={<CommonMistakeExamples />}\n                                country_of_residence={account_settings?.country_code as string}\n                                placeholder={localize('Type of document')}\n                            />\n                        </FormBodySection>\n                    </FormBody>\n                </ThemedScrollbars>\n                {is_for_cfd_modal ? (\n                    <Modal.Footer has_separator>\n                        <FormSubmitButton\n                            is_disabled={\n                                isSubmitting ||\n                                !isValid ||\n                                (document_files && document_files.length < 1) ||\n                                !!file_selection_error\n                            }\n                            label={localize('Continue')}\n                            is_loading={isSubmitting}\n                        />\n                    </Modal.Footer>\n                ) : (\n                    <FormFooter className='account-form__footer-poa'>\n                        <Button\n                            className='account-form__footer-btn'\n                            type='submit'\n                            is_disabled={\n                                isSubmitting ||\n                                !isValid ||\n                                (document_files && document_files.length < 1) ||\n                                !!file_selection_error\n                            }\n                            has_effect\n                            is_loading={form_state.is_btn_loading}\n                            is_submit_success={form_state.is_submit_success}\n                            text={localize('Save and submit')}\n                            primary\n                        />\n                    </FormFooter>\n                )}\n            </Form>\n        );\n    }\n);\n\nexport default POADesktopLayout;\n","import React from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport { Text, InlineMessage, Button } from '@deriv/components';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport clsx from 'clsx';\nimport { useFormikContext, Form } from 'formik';\nimport FormBody from '../../../Components/form-body';\nimport PersonalDetailsForm from '../../../Components/forms/personal-details-form.jsx';\nimport { TPOAFormState } from '../../../Types';\nimport FormFooter from '../../../Components/form-footer';\nimport FileUploaderContainer from '../../../Components/file-uploader-container';\nimport FilesDescription from '../../../Components/file-uploader-container/files-descriptions';\nimport CommonMistakeExamples from '../../../Components/poa/common-mistakes/common-mistake-examples';\nimport { getFileUploaderDescriptions } from '../../../Constants/file-uploader';\nimport { LabelPairedArrowLeftMdBoldIcon } from '@deriv/quill-icons';\nimport './poa-mobile-layout.scss';\n\ntype TPOAMobileLayout = {\n    className?: string;\n    setOffset: (status: { msg: string }) => string;\n    is_for_cfd_modal?: boolean;\n    is_resubmit?: boolean;\n    setDocumentFiles: (files: File[]) => void;\n    document_files: File[];\n    form_state: TPOAFormState;\n};\n\ntype TFormInitialValues = Record<\n    'address_line_1' | 'address_line_2' | 'address_city' | 'address_state' | 'address_postcode',\n    string\n> & {\n    document_type?: Record<'text' | 'value', string>;\n};\n\nconst ProgressBar = ({ is_active }: { is_active: boolean }) => (\n    <div className='progress-container'>\n        <div className={clsx('progress-bar', { 'progress-bar--animate': is_active })} />\n    </div>\n);\n\nconst POAMobileLayout = observer(\n    ({ setOffset, is_resubmit, form_state, document_files, setDocumentFiles, is_for_cfd_modal }: TPOAMobileLayout) => {\n        const { localize } = useTranslations();\n        const { status, handleSubmit, isSubmitting, isValid, values, errors } = useFormikContext<TFormInitialValues>();\n        const { client } = useStore();\n        const [file_selection_error, setFileSelectionError] = React.useState<string | null>(null);\n        const [step, setStep] = React.useState({ id: 1, text: localize('Enter your address') });\n\n        const { states_list, account_settings, is_eu, getChangeableFields } = client;\n\n        const changeable_fields = getChangeableFields();\n        const poa_uploader_files_descriptions = React.useMemo(() => getFileUploaderDescriptions('poa', is_eu), [is_eu]);\n\n        const isNextBtnDisabled = React.useMemo(() => {\n            if (step.id === 2) {\n                return false;\n            }\n            return (\n                !values.address_line_1 ||\n                !!errors.address_line_1 ||\n                !!errors.address_line_2 ||\n                !values.address_city ||\n                !!errors.address_city ||\n                !!errors.address_state ||\n                !!errors.address_postcode\n            );\n        }, [values, errors, step.id]);\n\n        return (\n            <div className='poa-mobile-layout'>\n                <div className={clsx('poa-header', { 'poa-header--non-modal': !is_for_cfd_modal })}>\n                    <div className='timeline'>\n                        {step.id === 2 && (\n                            <LabelPairedArrowLeftMdBoldIcon\n                                onClick={() => setStep({ id: 1, text: localize('Enter your address') })}\n                            />\n                        )}\n                        <Text as='p' size='xxs'>\n                            <Localize\n                                i18n_default_text='<0>Step {{step}}/2:&nbsp;</0> {{title}}'\n                                values={{ step: step.id, title: step.text }}\n                                components={[<strong key={0} />]}\n                            />\n                        </Text>\n                    </div>\n                    <div className='timeline-item'>\n                        <ProgressBar is_active={step.id <= 2} />\n                        <ProgressBar is_active={step.id === 2} />\n                    </div>\n                </div>\n                <Form noValidate className='account-form account-form_poa' onSubmit={handleSubmit}>\n                    <FormBody scroll_offset={setOffset(status)}>\n                        {(status?.msg || is_resubmit) && (\n                            <InlineMessage\n                                type='error'\n                                message={\n                                    <Text as='p' size='xxxs'>\n                                        {!status?.msg && is_resubmit && (\n                                            <Localize i18n_default_text='We were unable to verify your address with the details you provided. Please check and resubmit or choose a different document type.' />\n                                        )}\n                                        {status?.msg}\n                                    </Text>\n                                }\n                                className='poa-error-banner'\n                                id='dt_poa_submit-error'\n                            />\n                        )}\n                        {step.id === 1 && (\n                            <React.Fragment>\n                                <PersonalDetailsForm\n                                    /* eslint-disable @typescript-eslint/ban-ts-comment */\n                                    // @ts-nocheck This needs to fixed in PersonalDetailsForm\n                                    is_qualified_for_poa\n                                    editable_fields={changeable_fields}\n                                    states_list={states_list}\n                                />\n                                <FormFooter className='account-form__footer-poa'>\n                                    <Button\n                                        className='account-form__footer-btn'\n                                        type='button'\n                                        has_effect\n                                        text={localize('Next')}\n                                        primary\n                                        is_disabled={isNextBtnDisabled}\n                                        onClick={() =>\n                                            setStep(prev_step => ({\n                                                ...prev_step,\n                                                id: 2,\n                                                text: localize(' Document submission'),\n                                            }))\n                                        }\n                                    />\n                                </FormFooter>\n                            </React.Fragment>\n                        )}\n                        {step.id === 2 && (\n                            <React.Fragment>\n                                <FileUploaderContainer\n                                    onFileDrop={files => {\n                                        setDocumentFiles(files);\n                                    }}\n                                    onError={setFileSelectionError}\n                                    files_description={\n                                        <FilesDescription\n                                            title={poa_uploader_files_descriptions.title}\n                                            descriptions={poa_uploader_files_descriptions.descriptions}\n                                        />\n                                    }\n                                    examples={<CommonMistakeExamples />}\n                                    country_of_residence={account_settings?.country_code as string}\n                                    placeholder={localize('Type of document')}\n                                />\n                                <FormFooter className='account-form__footer-poa'>\n                                    <Button\n                                        className='account-form__footer-btn'\n                                        type='submit'\n                                        has_effect\n                                        text={localize('Submit')}\n                                        primary\n                                        is_disabled={\n                                            isSubmitting ||\n                                            !isValid ||\n                                            (document_files && document_files.length < 1) ||\n                                            !!file_selection_error\n                                        }\n                                        is_loading={form_state.is_btn_loading}\n                                        is_submit_success={form_state.is_submit_success}\n                                    />\n                                </FormFooter>\n                            </React.Fragment>\n                        )}\n                    </FormBody>\n                </Form>\n            </div>\n        );\n    }\n);\n\nexport default POAMobileLayout;\n","import React from 'react';\nimport { Formik, FormikErrors, FormikHelpers, FormikValues } from 'formik';\nimport { useDevice } from '@deriv-com/ui';\nimport { Loading } from '@deriv/components';\nimport { useFileUploader } from '@deriv/hooks';\nimport { validAddress, validPostCode, validLetterSymbol, validLength, getLocation, WS } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport LoadErrorMessage from '../../../Components/load-error-message';\nimport LeaveConfirm from '../../../Components/leave-confirm';\nimport { isServerError, validate } from '../../../Helpers/utils';\nimport { API_ERROR_CODES } from '../../../Constants/api-error-codes';\nimport { DocumentUploadRequest } from '@deriv/api-types';\nimport POADesktopLayout from './poa-desktop-layout';\nimport { TPOAFormState } from '../../../Types';\nimport { useTranslations } from '@deriv-com/translations';\nimport POAMobileLayout from './poa-mobile-layout';\nimport { getSupportedProofOfAddressDocuments } from '../../../Constants/file-uploader';\n\ntype TProofOfAddressForm = {\n    className: string;\n    is_resubmit: boolean;\n    is_for_cfd_modal: boolean;\n    onCancel: () => void;\n    onSubmit: (needs_poi: boolean, has_submitted_duplicate_poa?: boolean) => void;\n    onSubmitForCFDModal: (values: FormikValues, has_submitted_duplicate_poa?: boolean) => void;\n};\n\ntype TFormInitialValues = Record<\n    'address_line_1' | 'address_line_2' | 'address_city' | 'address_state' | 'address_postcode',\n    string\n> & {\n    document_type?: string;\n};\n\nconst ProofOfAddressForm = observer(\n    ({ is_resubmit, is_for_cfd_modal, onSubmit, onSubmitForCFDModal, className }: Partial<TProofOfAddressForm>) => {\n        const { isMobile, isDesktop } = useDevice();\n        const { client, notifications } = useStore();\n        const { account_settings, fetchResidenceList, fetchStatesList, states_list } = client;\n        const {\n            addNotificationMessageByKey: addNotificationByKey,\n            removeNotificationMessage,\n            removeNotificationByKey,\n        } = notifications;\n        const [document_files, setDocumentFiles] = React.useState<File[]>([]);\n        const [is_loading, setIsLoading] = React.useState(true);\n        const [form_values, setFormValues] = React.useState<TFormInitialValues>({\n            address_line_1: '',\n            address_line_2: '',\n            address_city: '',\n            address_state: '',\n            address_postcode: '',\n        });\n        const [api_initial_load_error, setAPIInitialLoadError] = React.useState(null);\n        const [form_state, setFormState] = React.useState<TPOAFormState>({\n            is_btn_loading: false,\n            is_submit_success: false,\n            should_allow_submit: true,\n            should_show_form: true,\n        });\n\n        const [should_scroll_to_top, setShouldScrollToTop] = React.useState(false);\n\n        const { upload } = useFileUploader();\n        const { localize } = useTranslations();\n\n        React.useEffect(() => {\n            fetchResidenceList?.().then(async () => {\n                Promise.all([fetchStatesList(), WS.wait('get_settings')]).then(() => {\n                    setFormValues({\n                        address_line_1: account_settings.address_line_1 ?? '',\n                        address_line_2: account_settings.address_line_2 ?? '',\n                        address_city: account_settings.address_city ?? '',\n                        address_state: account_settings.address_state ?? '',\n                        address_postcode: account_settings.address_postcode ?? '',\n                    });\n                    setIsLoading(false);\n                });\n            });\n        }, [account_settings, fetchResidenceList, fetchStatesList]);\n\n        React.useEffect(() => {\n            if (should_scroll_to_top) {\n                // Scroll to the top of the page\n                const el = document.querySelector('#dt_poa_submit-error') as HTMLInputElement;\n                const target_element = el?.parentElement ?? el;\n                if (typeof target_element?.scrollIntoView === 'function') {\n                    target_element?.scrollIntoView({ behavior: 'smooth', block: 'start' });\n                }\n\n                // Reset the condition\n                setShouldScrollToTop(false);\n            }\n        }, [should_scroll_to_top]);\n\n        const validateFields = (values: TFormInitialValues) => {\n            setFormState({ ...form_state, ...{ should_allow_submit: false } });\n            const errors: FormikErrors<TFormInitialValues> = {};\n            const validateValues = validate(errors, values);\n\n            const required_fields = ['address_line_1', 'address_city'];\n            validateValues(val => val, required_fields, localize('This field is required'));\n\n            const address_line_1_validation_result = validAddress(values.address_line_1, { is_required: true });\n            if (!address_line_1_validation_result.is_ok) {\n                errors.address_line_1 = address_line_1_validation_result.message;\n            }\n            const address_line_2_validation_result = validAddress(values.address_line_2);\n            if (!address_line_2_validation_result.is_ok) {\n                errors.address_line_2 = address_line_2_validation_result.message;\n            }\n\n            const validation_letter_symbol_message = localize(\n                'Only letters, space, hyphen, period, and apostrophe are allowed.'\n            );\n\n            if (values.address_city && !validLetterSymbol(values.address_city)) {\n                errors.address_city = validation_letter_symbol_message;\n            }\n\n            if (values.address_state && !validLetterSymbol(values.address_state) && states_list?.length < 1) {\n                errors.address_state = validation_letter_symbol_message;\n            }\n\n            if (values.address_postcode) {\n                if (!validLength(values.address_postcode, { min: 0, max: 20 })) {\n                    errors.address_postcode = localize(\n                        'Please enter a {{field_name}} under {{max_number}} characters.',\n                        {\n                            field_name: localize('Postal/ZIP code'),\n                            max_number: 20,\n                            interpolation: { escapeValue: false },\n                        }\n                    );\n                } else if (!validPostCode(values.address_postcode)) {\n                    errors.address_postcode = localize('Only letters, numbers, space, and hyphen are allowed.');\n                }\n            }\n\n            if (!values.document_type) {\n                errors.document_type = localize('Document type is required.');\n            }\n\n            return errors;\n        };\n\n        const showForm = (should_show_form: boolean) => {\n            setFormState({ ...form_state, ...{ should_show_form } });\n        };\n\n        const onSubmitValues = async (\n            values: TFormInitialValues,\n            { setStatus, setSubmitting }: FormikHelpers<TFormInitialValues>\n        ) => {\n            setStatus({ msg: '' });\n            setFormState({ ...form_state, ...{ is_btn_loading: true } });\n            const settings_values = { ...values };\n            if (values.address_state && states_list.length) {\n                settings_values.address_state = getLocation(states_list, values.address_state, 'value') || '';\n            }\n            delete settings_values?.document_type;\n\n            const data = await WS.setSettings(settings_values);\n\n            if (data.error) {\n                setStatus({ msg: data.error.message });\n                setFormState({ ...form_state, ...{ is_btn_loading: false } });\n                setSubmitting(false);\n                setShouldScrollToTop(true);\n                return;\n            }\n\n            const get_settings_response = await WS.authorized.storage.getSettings();\n\n            if (get_settings_response.error) {\n                setAPIInitialLoadError(get_settings_response.error.message);\n                setSubmitting(false);\n                return;\n            }\n            const get_settings = get_settings_response.get_settings;\n            const { address_line_1, address_line_2, address_city, address_state, address_postcode } = get_settings;\n\n            setFormValues({\n                address_line_1,\n                address_line_2,\n                address_city,\n                address_state,\n                address_postcode,\n            });\n\n            // upload files\n            try {\n                // This is required as AutoComplate displays only the selected value\n                const selected_doc_type = getSupportedProofOfAddressDocuments().find(\n                    doc => doc.text === values.document_type\n                );\n                const api_response = await upload(document_files, {\n                    document_type: selected_doc_type?.value as DocumentUploadRequest['document_type'],\n                });\n\n                if (api_response?.warning) {\n                    setFormState({ ...form_state, ...{ is_btn_loading: false } });\n\n                    if (api_response.warning === API_ERROR_CODES.DUPLICATE_DOCUMENT) {\n                        if (is_for_cfd_modal) {\n                            onSubmitForCFDModal?.(values, true);\n                        } else {\n                            onSubmit?.(false, true);\n                        }\n                    } else {\n                        setStatus({ msg: api_response?.message });\n                        setShouldScrollToTop(true);\n                    }\n                    return;\n                }\n\n                const get_account_status_response = await WS.authorized.getAccountStatus();\n\n                if (!get_account_status_response || get_account_status_response.error) {\n                    setAPIInitialLoadError(get_account_status_response.error.message);\n                    setSubmitting(false);\n                    return;\n                }\n                const get_account_status = get_account_status_response.get_account_status;\n\n                setFormState({\n                    ...form_state,\n                    ...{ is_submit_success: true, is_btn_loading: false },\n                });\n\n                const { needs_verification } = get_account_status.authentication;\n                const needs_poi = Boolean(needs_verification.length) && needs_verification.includes('identity');\n                onSubmit?.(needs_poi);\n\n                ['authenticate', 'needs_poa', 'poa_expired'].forEach(key => {\n                    removeNotificationMessage({ key });\n                    removeNotificationByKey({ key });\n                });\n\n                if (needs_poi) {\n                    addNotificationByKey('needs_poi');\n                }\n            } catch (error) {\n                if (isServerError(error)) {\n                    setStatus({ msg: error.message });\n                    setSubmitting(false);\n                    setFormState({ ...form_state, ...{ is_btn_loading: false } });\n                    setShouldScrollToTop(true);\n                }\n            }\n            if (is_for_cfd_modal) {\n                onSubmitForCFDModal?.(values);\n            }\n        };\n\n        const { address_line_1, address_line_2, address_city, address_state, address_postcode } = form_values;\n\n        const form_initial_values = {\n            address_line_1,\n            address_line_2,\n            address_city,\n            address_state,\n            address_postcode,\n            document_type: '',\n        };\n\n        if (api_initial_load_error) return <LoadErrorMessage error_message={api_initial_load_error} />;\n        if (is_loading) return <Loading is_fullscreen={false} className='account__initial-loader' />;\n\n        if (form_initial_values.address_state) {\n            const current_value = getLocation(states_list, form_initial_values.address_state, 'text');\n            form_initial_values.address_state =\n                states_list.length && current_value ? current_value : form_initial_values.address_state;\n        } else {\n            form_initial_values.address_state = '';\n        }\n        const setOffset = (status: { msg: string }) => {\n            const mobile_scroll_offset = status?.msg ? '200px' : '166px';\n            return !isDesktop && !is_for_cfd_modal ? mobile_scroll_offset : '94px';\n        };\n\n        return (\n            <Formik\n                initialValues={form_initial_values}\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                onSubmit={onSubmitValues}\n                validate={validateFields}\n                enableReinitialize\n                validateOnMount\n            >\n                {() => (\n                    <React.Fragment>\n                        <LeaveConfirm onDirty={!isDesktop ? showForm : undefined} />\n                        {form_state.should_show_form &&\n                            (isMobile ? (\n                                <POAMobileLayout\n                                    setOffset={setOffset}\n                                    is_for_cfd_modal={is_for_cfd_modal}\n                                    is_resubmit={is_resubmit}\n                                    setDocumentFiles={setDocumentFiles}\n                                    document_files={document_files}\n                                    form_state={form_state}\n                                />\n                            ) : (\n                                <POADesktopLayout\n                                    className={className}\n                                    setOffset={setOffset}\n                                    is_for_cfd_modal={is_for_cfd_modal}\n                                    is_resubmit={is_resubmit}\n                                    setDocumentFiles={setDocumentFiles}\n                                    document_files={document_files}\n                                    form_state={form_state}\n                                />\n                            ))}\n                    </React.Fragment>\n                )}\n            </Formik>\n        );\n    }\n);\n\nexport default ProofOfAddressForm;\n","import { Submitted as PoaSubmitted } from './submitted';\n\nexport default PoaSubmitted;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { isNavigationFromP2P, isNavigationFromDerivGO, routes } from '@deriv/shared';\nimport IconMessageContent from '../../../icon-message-content';\nimport RouteButton from '../../../route-button';\nimport { TPoaStatusProps } from '../../../../Types';\n\nexport const Submitted = ({ needs_poi, redirect_button }: TPoaStatusProps) => {\n    const message = localize('Review in progress');\n    const is_redirected_from_platform = isNavigationFromP2P() || isNavigationFromDerivGO();\n    if (needs_poi) {\n        return (\n            <div className='account-management__container'>\n                <IconMessageContent message={message} icon={<Icon icon='IcPoaVerified' size={128} />}>\n                    <div className='account-management__text-container'>\n                        <Text align='center' size='xs' as='p'>\n                            {localize(\n                                'Your proof of address is under review. We’ll get back to you in 1–3 working days.'\n                            )}\n                        </Text>\n                        <Text align='center' size='xs' as='p'>\n                            {localize('To start trading, you also need to verify your identity.')}\n                        </Text>\n                    </div>\n                    <RouteButton button_label={localize('Next')} route={routes.proof_of_identity} />\n                </IconMessageContent>\n            </div>\n        );\n    }\n    return (\n        <div className='account-management__container'>\n            <IconMessageContent\n                message={message}\n                text={localize('Your proof of address is under review. We’ll get back to you in 1–3 working days.')}\n                icon={<Icon icon='IcPoaVerified' size={128} />}\n            >\n                {redirect_button ||\n                    (!is_redirected_from_platform && (\n                        <RouteButton button_label={localize(\"Return to Trader's Hub\")} route={routes.traders_hub} />\n                    ))}\n            </IconMessageContent>\n        </div>\n    );\n};\n","import { Unverified as PoaUnverified } from './unverified';\n\nexport default PoaUnverified;\n","import React, { ReactNode } from 'react';\nimport { Button, Icon, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../../../icon-message-content';\n\ntype TUnverified = {\n    title?: ReactNode;\n    description?: ReactNode;\n    onClick: () => void;\n    button_text?: ReactNode;\n};\n\nexport const Unverified = ({ title, description, button_text, onClick }: TUnverified) => {\n    return (\n        <IconMessageContent\n            message={title ?? localize('We could not verify your proof of address')}\n            text={description ?? localize('Please check your email for details.')}\n            icon={<Icon icon='IcPoaError' size={128} />}\n        >\n            <Button onClick={onClick} has_effect primary>\n                <Text className='dc-btn__text' size='xs' weight='bold' as='p'>\n                    {button_text ?? localize('Resubmit')}\n                </Text>\n            </Button>\n        </IconMessageContent>\n    );\n};\n","import { ButtonLink, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport React from 'react';\n\nexport const PoiButton = () => (\n    <ButtonLink className='account-management__button' to='/account/proof-of-identity'>\n        <Text className='dc-btn__text' weight='bold' as='p'>\n            {localize('Proof of identity')}\n        </Text>\n    </ButtonLink>\n);\n","import { Icon } from '@deriv/components';\nimport { isNavigationFromP2P, isNavigationFromDerivGO } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { ContinueTradingButton } from '../../continue-trading-button/continue-trading-button';\nimport IconMessageContent from '../../../icon-message-content';\nimport { PoiButton } from '../../../poi/poi-button/poi-button';\nimport { TPoaStatusProps } from '../../../../Types';\n\nexport const Verified = ({ needs_poi, redirect_button }: TPoaStatusProps) => {\n    const message = localize('Your proof of address is verified');\n    const is_redirected_from_platform = isNavigationFromP2P() || isNavigationFromDerivGO();\n    if (needs_poi) {\n        return (\n            <div className='account-management__container'>\n                <IconMessageContent\n                    message={message}\n                    text={localize('To continue trading, you must also submit a proof of identity.')}\n                    icon={<Icon icon='IcPoaVerified' size={128} />}\n                >\n                    <PoiButton />\n                </IconMessageContent>\n            </div>\n        );\n    }\n    return (\n        <div className='account-management__container'>\n            <IconMessageContent message={message} icon={<Icon icon='IcPoaVerified' size={128} />}>\n                {redirect_button || (!is_redirected_from_platform && <ContinueTradingButton />)}\n            </IconMessageContent>\n        </div>\n    );\n};\n\nexport default Verified;\n","import { Verified as PoaVerified } from './verified';\n\nexport default PoaVerified;\n","import React from 'react';\nimport { AccountStatusResponse, GetAccountStatus } from '@deriv/api-types';\nimport { Button, Loading } from '@deriv/components';\nimport { WS, getPlatformRedirect, platforms, routes, AUTH_STATUS_CODES } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport Expired from '../../../Components/poa/status/expired';\nimport NotRequired from '../../../Components/poa/status/not-required';\nimport ProofOfAddressForm from './proof-of-address-form';\nimport Submitted from '../../../Components/poa/status/submitted';\nimport Unverified from '../../../Components/poa/status/unverified';\nimport Verified from '../../../Components/poa/status/verified';\nimport { populateVerificationStatus } from '../Helpers/verification.js';\n\ntype TProofOfAddressContainer = {\n    onSubmit?: () => void;\n};\n\ntype TAuthenticationStatus = Record<\n    | 'allow_document_upload'\n    | 'allow_poi_resubmission'\n    | 'allow_poa_resubmission'\n    | 'is_age_verified'\n    | 'has_poi'\n    | 'has_submitted_poa'\n    | 'needs_poa'\n    | 'needs_poi'\n    | 'poa_address_mismatch'\n    | 'resubmit_poa'\n    | 'poa_expiring_soon'\n    | 'poa_authenticated_with_idv'\n    | 'poa_authenticated_with_idv_photo'\n    | 'has_submitted_duplicate_poa',\n    boolean\n> & { document_status?: DeepRequired<GetAccountStatus>['authentication']['document']['status'] };\n\nconst ProofOfAddressContainer = observer(({ onSubmit }: TProofOfAddressContainer) => {\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [authentication_status, setAuthenticationStatus] = React.useState<TAuthenticationStatus>({\n        allow_document_upload: false,\n        allow_poi_resubmission: false,\n        allow_poa_resubmission: false,\n        needs_poi: false,\n        needs_poa: false,\n        has_poi: false,\n        resubmit_poa: false,\n        has_submitted_poa: false,\n        document_status: undefined,\n        is_age_verified: false,\n        poa_address_mismatch: false,\n        poa_expiring_soon: false,\n        poa_authenticated_with_idv: false,\n        poa_authenticated_with_idv_photo: false,\n        has_submitted_duplicate_poa: false,\n    });\n\n    const { client, notifications, common, ui } = useStore();\n    const { app_routing_history } = common;\n    const { has_restricted_mt5_account, is_switching } = client;\n    const { is_verification_modal_visible } = ui;\n    const { refreshNotifications } = notifications;\n    const mt5_poa_status = localStorage.getItem('mt5_poa_status');\n\n    React.useEffect(() => {\n        if (!is_switching) {\n            WS.authorized.getAccountStatus().then((response: AccountStatusResponse) => {\n                const { get_account_status } = response;\n                if (get_account_status) {\n                    const {\n                        allow_document_upload,\n                        allow_poa_resubmission,\n                        document_status,\n                        has_submitted_poa,\n                        is_age_verified,\n                        needs_poa,\n                        needs_poi,\n                        poa_address_mismatch,\n                        poa_authenticated_with_idv,\n                        poa_authenticated_with_idv_photo,\n                        poa_expiring_soon,\n                    } = populateVerificationStatus(get_account_status);\n\n                    setAuthenticationStatus(authentication_status => ({\n                        ...authentication_status,\n                        allow_document_upload,\n                        allow_poa_resubmission,\n                        document_status,\n                        has_submitted_poa: has_submitted_poa as boolean,\n                        is_age_verified,\n                        needs_poa,\n                        needs_poi,\n                        poa_address_mismatch,\n                        poa_authenticated_with_idv,\n                        poa_authenticated_with_idv_photo,\n                        poa_expiring_soon,\n                    }));\n                    setIsLoading(false);\n                    refreshNotifications();\n                }\n            });\n        }\n    }, [is_switching, refreshNotifications]);\n    React.useEffect(() => {\n        return () => {\n            localStorage.removeItem('mt5_poa_status');\n        };\n    }, []);\n\n    const handleResubmit = () => {\n        setAuthenticationStatus(authentication_status => ({\n            ...authentication_status,\n            ...{ resubmit_poa: true },\n        }));\n    };\n\n    const handleDuplicatePOASubmission = () => {\n        setAuthenticationStatus(authentication_status => ({\n            ...authentication_status,\n            ...{ resubmit_poa: true, has_submitted_duplicate_poa: false, has_submitted_poa: false },\n        }));\n    };\n\n    const onSubmitDocument = (needs_poi: boolean, has_submitted_duplicate_poa?: boolean) => {\n        setAuthenticationStatus(authentication_status => ({\n            ...authentication_status,\n            ...{\n                has_submitted_poa: true,\n                needs_poi,\n                poa_expiring_soon: false,\n                has_submitted_duplicate_poa: has_submitted_duplicate_poa ?? false,\n            },\n        }));\n        if (is_verification_modal_visible) {\n            onSubmit?.();\n        }\n    };\n\n    const {\n        allow_document_upload,\n        allow_poa_resubmission,\n        document_status,\n        needs_poi,\n        resubmit_poa,\n        has_submitted_poa,\n        poa_address_mismatch,\n        poa_expiring_soon,\n        poa_authenticated_with_idv,\n        poa_authenticated_with_idv_photo,\n        has_submitted_duplicate_poa,\n    } = authentication_status;\n\n    const from_platform = getPlatformRedirect(app_routing_history);\n\n    const should_show_redirect_btn = Object.keys(platforms).includes(from_platform?.ref ?? '');\n\n    const should_allow_resubmit =\n        resubmit_poa ||\n        allow_poa_resubmission ||\n        (has_restricted_mt5_account &&\n            document_status &&\n            ['expired', 'rejected', 'suspected'].includes(document_status)) ||\n        poa_address_mismatch ||\n        poa_expiring_soon ||\n        ((poa_authenticated_with_idv || poa_authenticated_with_idv_photo) &&\n            from_platform?.route === routes.cashier_p2p);\n\n    const redirect_button = should_show_redirect_btn && (\n        <Button\n            primary\n            className='proof-of-identity__redirect'\n            onClick={() => {\n                const url = platforms[from_platform.ref as keyof typeof platforms]?.url;\n                if (url) {\n                    window.location.href = url;\n                    window.sessionStorage.removeItem('config.platform');\n                }\n            }}\n        >\n            <Localize i18n_default_text='Back to {{platform_name}}' values={{ platform_name: from_platform.name }} />\n        </Button>\n    );\n\n    if (is_loading) return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    if (!allow_document_upload) return <NotRequired />;\n    if (has_submitted_duplicate_poa)\n        return (\n            <Unverified\n                title={<Localize i18n_default_text='Proof of address documents upload failed' />}\n                description={\n                    <Localize i18n_default_text='It seems you’ve submitted this document before. Upload a new document.' />\n                }\n                button_text={<Localize i18n_default_text='Try again' />}\n                onClick={handleDuplicatePOASubmission}\n            />\n        );\n    if (has_submitted_poa && !poa_address_mismatch)\n        return <Submitted needs_poi={needs_poi} redirect_button={redirect_button} />;\n    if (should_allow_resubmit) {\n        return <ProofOfAddressForm is_resubmit={!poa_expiring_soon} onSubmit={onSubmitDocument} />;\n    }\n    const getDocumentStatus = (\n        document_status: DeepRequired<GetAccountStatus>['authentication']['document']['status'] | string\n    ) => {\n        switch (document_status) {\n            case AUTH_STATUS_CODES.NONE:\n                return <ProofOfAddressForm onSubmit={onSubmitDocument} />;\n            case AUTH_STATUS_CODES.PENDING:\n                return <Submitted needs_poi={needs_poi} redirect_button={redirect_button} />;\n            case AUTH_STATUS_CODES.VERIFIED:\n                return <Verified needs_poi={needs_poi} redirect_button={redirect_button} />;\n            case AUTH_STATUS_CODES.EXPIRED:\n                return <Expired onClick={handleResubmit} />;\n            case AUTH_STATUS_CODES.REJECTED:\n            case AUTH_STATUS_CODES.SUSPECTED:\n                return <Unverified onClick={handleResubmit} />;\n            default:\n                return null;\n        }\n    };\n    if (mt5_poa_status) return getDocumentStatus(mt5_poa_status);\n    else if (document_status) return getDocumentStatus(document_status);\n    return null;\n});\n\nexport default ProofOfAddressContainer;\n","import ProofOfAddress from './proof-of-address';\n\nexport default ProofOfAddress;\n","import React from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport DemoMessage from '../../../Components/demo-message';\nimport ProofOfAddressContainer from './proof-of-address-container';\n\nconst ProofOfAddress = observer(() => {\n    const { client } = useStore();\n    const { is_virtual } = client;\n\n    if (is_virtual) return <DemoMessage has_button />;\n\n    return <ProofOfAddressContainer />;\n});\n\nexport default ProofOfAddress;\n","export const IDENTIFIER_TYPES = Object.freeze({\n    ACCOUNT_ID: 'account_id',\n    ACCOUNT_NUMBER: 'account_number',\n    BANK_ACCOUNT_NUMBER: 'bank_account_number',\n    CARD_NUMBER: 'card_number',\n    EMAIL_ADDRESS: 'email_address',\n    MOBILE_NUMBER: 'mobile_number',\n    USER_ID: 'user_id',\n});\n\nexport const CARD_NUMBER = {\n    MAX_LENGTH: 19,\n    MIN_LENGTH: 16,\n};\n\nexport const MAX_FILE_SIZE = 8000; // 8MB\n","import React from 'react';\nimport clsx from 'clsx';\nimport { FormikErrors, useFormikContext } from 'formik';\nimport { Button, Input, Icon } from '@deriv/components';\nimport { compressImageFiles } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { TFile, TPaymentMethod, TProofOfOwnershipFormValue } from 'Types';\n\ntype TFileUploaderProps = {\n    class_name?: string;\n    name: TPaymentMethod;\n    sub_index: number;\n    payment_id: number;\n};\n\n/**\n * Field to upload files for Payment methods in proof of ownership form\n * @name FileUploader\n * @param class_name - To add custom styles to class\n * @param name - Payment method name\n * @param sub_index - Index of the file\n * @param payment_id - Index of the payment method\n * @returns React Component\n */\n\nconst FileUploader = ({ class_name, name, sub_index, payment_id }: TFileUploaderProps) => {\n    const { values, setFieldValue, errors, setFieldError } = useFormikContext<TProofOfOwnershipFormValue>();\n\n    const [show_browse_button, setShowBrowseButton] = React.useState(\n        !values[name]?.[payment_id]?.files?.[sub_index]?.name\n    );\n    // Create a reference to the hidden file input element\n    const hidden_file_input = React.useRef<HTMLInputElement>(null);\n    const handleClick = (e: React.MouseEvent) => {\n        e.nativeEvent.preventDefault();\n        e.nativeEvent.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n        hidden_file_input?.current?.click();\n    };\n\n    const handleChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        event.nativeEvent.preventDefault();\n        event.nativeEvent.stopPropagation();\n        event.nativeEvent.stopImmediatePropagation();\n        // Check if files exist before proceeding\n        if (!event.target.files || event.target.files.length === 0) {\n            return;\n        }\n        const file_to_upload = await compressImageFiles([event.target.files[0]]);\n        const payment_file_data = [...(values[name]?.[payment_id]?.files ?? [])];\n        payment_file_data[sub_index] = file_to_upload[0] as TFile;\n        const selected_payment_method = values?.[name];\n        if (!selected_payment_method) {\n            return;\n        }\n        selected_payment_method[payment_id] = {\n            ...selected_payment_method[payment_id],\n            files: payment_file_data ?? [],\n        };\n        await setFieldValue(name, { ...selected_payment_method });\n        setShowBrowseButton(!file_to_upload[0]);\n    };\n\n    const updateError = () => {\n        const payment_method_error = { ...(errors?.[name] ?? {}) };\n        const payment_method_file_error = (payment_method_error?.[payment_id]?.files as FormikErrors<TFile>[]) ?? {};\n        delete payment_method_file_error?.[sub_index];\n        payment_method_error[payment_id] = {\n            ...(payment_method_error[payment_id] ?? {}),\n            files: payment_method_file_error,\n        };\n        // @ts-expect-error Error is an array\n        setFieldError(name, { ...payment_method_error });\n    };\n\n    const handleIconClick = async (e: React.MouseEvent) => {\n        e.nativeEvent.preventDefault();\n        e.nativeEvent.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n        if (hidden_file_input.current && 'value' in hidden_file_input.current) {\n            hidden_file_input.current.value = '';\n        }\n        const payment_file_data = values[name]?.[payment_id]?.files ?? [];\n        const filtered_file_data = payment_file_data.filter((_, i) => i !== sub_index);\n        const selected_payment_method = values?.[name];\n        if (!selected_payment_method) {\n            return;\n        }\n        selected_payment_method[payment_id] = {\n            ...selected_payment_method[payment_id],\n            files: filtered_file_data ?? [],\n        };\n        await setFieldValue(name, { ...selected_payment_method });\n        setShowBrowseButton(prevState => !prevState);\n        updateError();\n    };\n    return (\n        <div className={clsx('poo-file-uploader', class_name)}>\n            <input\n                type='file'\n                accept='image/png, image/jpeg, image/jpg, application/pdf'\n                ref={hidden_file_input}\n                onChange={handleChange}\n                className='hidden-input'\n                name={name}\n            />\n            <Input\n                name='cardImgName'\n                required\n                label={localize('Choose a photo')}\n                maxLength={255}\n                hint={localize('Accepted formats: pdf, jpeg, jpg, and png. Max file size: 8MB')}\n                value={values[name]?.[payment_id]?.files?.[sub_index]?.name ?? ''}\n                readOnly\n                color='less-prominent'\n                type={'text'}\n                tabIndex={-1}\n                error={errors?.[name]?.[payment_id]?.files?.[sub_index] as string}\n                trailing_icon={\n                    <Icon\n                        onClick={handleIconClick}\n                        icon='IcCross'\n                        height='100%'\n                        size={20}\n                        className={clsx('stack-top ', {\n                            'remove-element': show_browse_button,\n                        })}\n                    />\n                }\n            />\n            <Button\n                className={clsx('proof-of-ownership__card-open-inputs-photo-btn ', {\n                    'remove-element': !show_browse_button,\n                })}\n                text={localize('Browse')}\n                onClick={handleClick}\n                primary\n            />\n        </div>\n    );\n};\n\nexport default FileUploader;\n","import { SampleCreditCardModal } from './sample-credit-card-modal';\n\nexport default SampleCreditCardModal;\n","import React from 'react';\nimport { Modal, Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport { getUrlBase } from '@deriv/shared';\n\ntype TSampleCreditCardModalProps = {\n    is_open: boolean;\n    onClose: () => void;\n};\n\n/**\n * Display a modal with a sample credit card image and instructions on how to mask the card.\n * @name SampleCreditCardModal\n * @param is_open - boolean to determine if the modal should be open or not\n * @param onClose - function to close the modal\n * @returns React component\n */\nexport const SampleCreditCardModal = ({ is_open, onClose }: TSampleCreditCardModalProps) => {\n    return (\n        <Modal\n            className='sample-credit-card-modal'\n            is_open={is_open}\n            should_header_stick_body\n            title={<Localize i18n_default_text='How to mask your card?' />}\n            toggleModal={onClose}\n        >\n            <React.Fragment>\n                <Text className='sample-credit-card-modal-text' size='xs'>\n                    <Localize i18n_default_text='Black out digits 7 to 12 of the card number that’s shown on the front of your debit/credit card.⁤' />\n                </Text>\n                <img\n                    src={getUrlBase('/public/images/common/sample-credit-card.png')}\n                    alt='creditcardsample'\n                    className='sample-credit-card-modal-img'\n                />\n            </React.Fragment>\n        </Modal>\n    );\n};\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport SampleCreditCardModal from '../../Components/sample-credit-card-modal';\n\n/**\n * Renders Text with link to Example Credit card modal\n * @name ExampleLink\n * @returns React Component\n */\nconst ExampleLink = () => {\n    const [is_sample_modal_open, setIsSampleModalOpen] = React.useState(false);\n\n    return (\n        <React.Fragment>\n            <Text className='proof-of-ownership__card-open-desc-link' onClick={() => setIsSampleModalOpen(true)}>\n                <Localize i18n_default_text='See example' />\n            </Text>\n            <SampleCreditCardModal\n                is_open={is_sample_modal_open}\n                onClose={() => {\n                    setIsSampleModalOpen(false);\n                }}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default ExampleLink;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { useFormikContext } from 'formik';\nimport { Input, Text } from '@deriv/components';\nimport { hasInvalidCharacters } from '@deriv/shared';\nimport { IDENTIFIER_TYPES } from '../../Constants/poo-identifier';\nimport { isSpecialPaymentMethod } from '../../Helpers/utils';\nimport FileUploader from './file-uploader';\nimport { TPaymentMethod, TPaymentMethodInfo, TProofOfOwnershipData, TProofOfOwnershipFormValue } from '../../Types';\nimport ExampleLink from './example-link';\n\ntype TExpandedCardProps = {\n    card_details: TPaymentMethodInfo;\n};\n\n/**\n *\n * @param card_details Details of payment method\n * @param index Index of payment method\n * @returns React Component\n */\nconst ExpandedCard = ({ card_details }: TExpandedCardProps) => {\n    const { values, setFieldValue, errors } = useFormikContext<TProofOfOwnershipFormValue>();\n\n    const payment_method = card_details.payment_method.toLowerCase() as TPaymentMethod;\n\n    const handleBlur = (payment_method_identifier: string, identifier_type: string, payment_id: number) => {\n        handleIdentifierChange(formatIdentifier(payment_method_identifier, identifier_type), payment_id);\n    };\n    const handleIdentifierChange = (payment_method_identifier: string, payment_id: number) => {\n        const selected_payment_method = values[payment_method] as Record<number, TProofOfOwnershipData>;\n\n        selected_payment_method[payment_id] = {\n            ...selected_payment_method[payment_id],\n            payment_method_identifier,\n        };\n\n        setFieldValue(payment_method, { ...selected_payment_method });\n    };\n\n    const formatIdentifier = (payment_method_identifier: string, identifier_type: string) => {\n        let formatted_id = payment_method_identifier?.replace(/\\s/g, '') || '';\n        if (identifier_type === IDENTIFIER_TYPES.CARD_NUMBER) {\n            if (formatted_id.length !== 16 || (formatted_id.length === 16 && hasInvalidCharacters(formatted_id))) {\n                return formatted_id;\n            }\n            formatted_id = `${formatted_id.substring(0, 6)}XXXXXX${formatted_id.substring(12)}`;\n        } else if ([IDENTIFIER_TYPES.EMAIL_ADDRESS, IDENTIFIER_TYPES.USER_ID].some(s => s === identifier_type)) {\n            return formatted_id;\n        }\n        return formatted_id.replace(/(\\w{4})/g, '$1 ').trim();\n    };\n\n    return (\n        <div>\n            {card_details?.instructions?.map(instruction => (\n                <Text\n                    className='proof-of-ownership__card-open-desc'\n                    as='p'\n                    color='general'\n                    size='xs'\n                    key={typeof instruction !== 'string' ? instruction.key : instruction}\n                >\n                    {instruction} {card_details?.identifier_type === IDENTIFIER_TYPES.CARD_NUMBER && <ExampleLink />}\n                </Text>\n            ))}\n            <fieldset>\n                {card_details?.items &&\n                    card_details?.items.map(item => {\n                        const controls_to_show = [...Array(item?.documents_required).keys()];\n                        const payment_id = item.id;\n                        return (\n                            <div\n                                className='proof-of-ownership__card-open-inputs'\n                                key={`${item.payment_method}-${item.id}`}\n                            >\n                                {card_details?.input_label && isSpecialPaymentMethod(card_details?.icon) && (\n                                    <div className='proof-of-ownership__card-open-inputs-field'>\n                                        <Input\n                                            label={card_details?.input_label}\n                                            data-lpignore='true'\n                                            className={clsx('proof-of-ownership__card-open-inputs-cardnumber', {\n                                                'proof-of-ownership-valid-identifier':\n                                                    values?.[payment_method]?.[payment_id]?.payment_method_identifier &&\n                                                    !errors?.[payment_method]?.[payment_id]?.payment_method_identifier,\n                                            })}\n                                            type='text'\n                                            onChange={e => {\n                                                handleIdentifierChange(e.target.value, payment_id);\n                                            }}\n                                            value={values?.[payment_method]?.[payment_id]?.payment_method_identifier}\n                                            onBlur={e => {\n                                                handleBlur(\n                                                    e.target.value.trim(),\n                                                    card_details?.identifier_type,\n                                                    payment_id\n                                                );\n                                            }}\n                                            data-testid='dt_payment_method_identifier'\n                                            error={errors?.[payment_method]?.[payment_id]?.payment_method_identifier}\n                                        />\n                                    </div>\n                                )}\n                                {controls_to_show.map(i => (\n                                    <React.Fragment key={`${item?.id}-${i}`}>\n                                        {card_details?.input_label && !isSpecialPaymentMethod(card_details?.icon) && (\n                                            <div className='proof-of-ownership__card-open-inputs-field'>\n                                                <Input\n                                                    label={card_details?.input_label}\n                                                    data-lpignore='true'\n                                                    className={clsx('proof-of-ownership__card-open-inputs-cardnumber', {\n                                                        'proof-of-ownership-valid-identifier':\n                                                            values?.[payment_method]?.[payment_id]\n                                                                ?.payment_method_identifier &&\n                                                            !errors?.[payment_method]?.[payment_id]\n                                                                ?.payment_method_identifier,\n                                                    })}\n                                                    type='text'\n                                                    onChange={e => {\n                                                        handleIdentifierChange(e.target.value.trim(), payment_id);\n                                                    }}\n                                                    value={\n                                                        values?.[payment_method]?.[payment_id]\n                                                            ?.payment_method_identifier ?? ''\n                                                    }\n                                                    onBlur={e => {\n                                                        handleBlur(\n                                                            e.target.value.trim(),\n                                                            card_details?.identifier_type,\n                                                            payment_id\n                                                        );\n                                                    }}\n                                                    data-testid='dt_payment_method_identifier'\n                                                    error={\n                                                        errors?.[payment_method]?.[payment_id]\n                                                            ?.payment_method_identifier ?? ''\n                                                    }\n                                                />\n                                            </div>\n                                        )}\n                                        <div\n                                            className={clsx('proof-of-ownership__card-open-inputs-upload', {\n                                                expand: !card_details?.input_label,\n                                                organise: card_details?.input_label !== null,\n                                            })}\n                                        >\n                                            <FileUploader\n                                                class_name='proof-of-ownership__card-open-inputs-photo'\n                                                sub_index={i}\n                                                name={payment_method}\n                                                payment_id={payment_id}\n                                            />\n                                        </div>\n                                    </React.Fragment>\n                                ))}\n                            </div>\n                        );\n                    })}\n            </fieldset>\n        </div>\n    );\n};\n\nexport default ExpandedCard;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Button, Icon, Text } from '@deriv/components';\nimport ExpandedCard from './expanded-card';\nimport { TPaymentMethodInfo } from '../../Types';\n\ntype TCardProps = {\n    details: TPaymentMethodInfo;\n};\n\n/**\n * Renders Chevron Icon which is used to expand card\n * @name ExpansionIcon\n * @param is_open - status to check if card is open\n * @returns React Component\n */\nconst ExpansionIcon = ({ is_open }: { is_open: boolean }) => (\n    <Icon\n        icon='IcChevronUpBold'\n        className={clsx('proof-of-ownership__card-item-icon', {\n            'proof-of-ownership__card-item-icon--invert': !is_open,\n        })}\n    />\n);\n\n/**\n * Renders payment method\n * @name Card\n * @param details - payment method details\n * @returns React Component\n */\nconst Card = ({ details }: TCardProps) => {\n    const [is_open, setIsOpen] = React.useState(false);\n\n    const onClickHandler = () => {\n        setIsOpen(!is_open);\n    };\n\n    return (\n        <div\n            className={clsx('proof-of-ownership__card', { 'proof-of-ownership__card-open': is_open })}\n            data-testid={details?.payment_method}\n        >\n            <div className='proof-of-ownership__card-item' onClick={onClickHandler} onKeyDown={onClickHandler}>\n                {details?.icon && (\n                    <Icon icon={details?.icon} className='proof-of-ownership__card-item-logo' width={68} height={58} />\n                )}\n                <Text className='proof-of-ownership__card-item-text' as='p' color='general' size='s' weight='bold'>\n                    {details?.payment_method}\n                </Text>\n                <Button\n                    id='proof-of-ownership'\n                    icon={<ExpansionIcon is_open={is_open} />}\n                    className='proof-of-ownership__card-item-icon'\n                    onClick={onClickHandler}\n                    transparent\n                    data-testid='dt_proof_of_ownership_button'\n                    type='button'\n                />\n            </div>\n            {is_open && <ExpandedCard card_details={details} />}\n        </div>\n    );\n};\n\nexport default Card;\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors\n\nimport React from 'react';\nimport { Form, Formik, FormikHelpers } from 'formik';\nimport DocumentUploader from '@binary-com/binary-document-uploader';\nimport { Button } from '@deriv/components';\nimport { readFiles, WS, UPLOAD_FILE_TYPE } from '@deriv/shared';\nimport { useDevice } from '@deriv-com/ui';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport FormFooter from '../../../Components/form-footer';\nimport FormBody from '../../../Components/form-body';\nimport FormSubHeader from '../../../Components/form-sub-header';\nimport FormBodySection from '../../../Components/form-body-section';\nimport Card from '../../../Containers/proof-of-ownership/card';\nimport {\n    TPaymentMethod,\n    TPaymentMethodInfo,\n    TProofOfOwnershipData,\n    TProofOfOwnershipErrors,\n    TProofOfOwnershipFormValue,\n} from '../../../Types';\nimport { isValidPaymentMethodIdentifier, isValidFile } from './validation';\nimport { API_ERROR_CODES } from 'Constants/api-error-codes';\n\ntype TProofOfOwnershipFormProps = {\n    grouped_payment_method_data: Partial<Record<TPaymentMethod, TPaymentMethodInfo>>;\n};\n\nconst ProofOfOwnershipForm = observer(({ grouped_payment_method_data }: TProofOfOwnershipFormProps) => {\n    const { client, notifications } = useStore();\n    const { refreshNotifications } = notifications;\n    const { email: client_email, updateAccountStatus } = client;\n    const { isDesktop } = useDevice();\n\n    const grouped_payment_method_data_keys = Object.keys(grouped_payment_method_data) as Array<TPaymentMethod>;\n\n    const fileReadErrorMessage = (filename: string) => {\n        return localize('Unable to read file {{name}}', { name: filename });\n    };\n\n    const getScrollOffset = React.useCallback(\n        (items_count = 0) => {\n            if (!isDesktop) return '20rem';\n            if (items_count <= 2) return '0rem';\n            return '8rem';\n        },\n        [isDesktop]\n    );\n\n    const initial_values = React.useMemo(() => {\n        if (!grouped_payment_method_data_keys?.length) {\n            return {};\n        }\n        const default_value: TProofOfOwnershipData = {\n            documents_required: 0,\n            id: 0,\n            identifier_type: '',\n            is_generic_pm: false,\n            payment_method_identifier: '',\n            files: [],\n        };\n        const form_value = grouped_payment_method_data_keys.reduce<Partial<TProofOfOwnershipFormValue>>(\n            (acc, payment_method) => {\n                const documents_required = grouped_payment_method_data[payment_method]?.documents_required;\n                const is_generic_pm = grouped_payment_method_data[payment_method]?.is_generic_pm;\n                const items = grouped_payment_method_data[payment_method]?.items;\n                const identifier_type = grouped_payment_method_data[payment_method]?.identifier_type;\n                acc[payment_method] = {};\n                items?.forEach(item => {\n                    acc[payment_method][item.id] = {\n                        ...default_value,\n                        id: item.id,\n                        documents_required: documents_required ?? 0,\n                        is_generic_pm: is_generic_pm ?? false,\n                        identifier_type: identifier_type ?? '',\n                    };\n                });\n\n                return acc;\n            },\n            {}\n        );\n\n        return form_value;\n    }, [grouped_payment_method_data_keys, grouped_payment_method_data]);\n\n    const validateFields = (values: TProofOfOwnershipFormValue) => {\n        let errors = {} as TProofOfOwnershipErrors;\n\n        Object.keys(values).forEach(card_key => {\n            const card_data = values[card_key as TPaymentMethod];\n            Object.keys(card_data)?.forEach(payment_id => {\n                const payment_method_data = card_data[payment_id];\n                const is_payment_method_identifier_provided =\n                    payment_method_data?.is_generic_pm ||\n                    !!payment_method_data?.payment_method_identifier.trim()?.length;\n                const are_files_uploaded =\n                    payment_method_data?.files?.filter(file => file?.name).length ===\n                    payment_method_data?.documents_required;\n                if (are_files_uploaded && !is_payment_method_identifier_provided) {\n                    errors = {\n                        ...errors,\n                        [card_key]: { ...(errors[card_key as TPaymentMethod] ?? {}) },\n                    };\n                    errors[card_key as TPaymentMethod] = {\n                        ...errors[card_key as TPaymentMethod],\n                        [payment_id]: {\n                            ...(errors[card_key as TPaymentMethod]?.[payment_id] ?? {}),\n                            payment_method_identifier: localize('Please complete this field.'),\n                        },\n                    };\n                } else {\n                    delete errors[card_key as TPaymentMethod]?.[payment_id]?.payment_method_identifier;\n                }\n                if (is_payment_method_identifier_provided) {\n                    const verify_payment_method_identifier = isValidPaymentMethodIdentifier(\n                        payment_method_data.payment_method_identifier.trim(),\n                        payment_method_data.identifier_type\n                    );\n                    if (verify_payment_method_identifier) {\n                        errors = {\n                            ...errors,\n                            [card_key]: { ...(errors[card_key as TPaymentMethod] ?? {}) },\n                        };\n                        errors[card_key as TPaymentMethod] = {\n                            ...errors[card_key as TPaymentMethod],\n                            [payment_id]: {\n                                ...(errors[card_key as TPaymentMethod]?.[payment_id] ?? {}),\n                                payment_method_identifier: verify_payment_method_identifier,\n                            },\n                        };\n                    } else {\n                        delete errors[card_key as TPaymentMethod]?.[payment_id]?.payment_method_identifier;\n                    }\n                    if (!are_files_uploaded) {\n                        errors = {\n                            ...errors,\n                            [card_key]: { ...(errors[card_key as TPaymentMethod] ?? {}) },\n                        };\n                        errors[card_key as TPaymentMethod] = {\n                            ...errors[card_key as TPaymentMethod],\n                            [payment_id]: {\n                                ...(errors[card_key as TPaymentMethod]?.[payment_id] ?? {}),\n                                files: {},\n                            },\n                        };\n                    }\n                }\n                payment_method_data?.files?.forEach((file, i) => {\n                    if (!file?.name) {\n                        return;\n                    }\n                    const verify_file = isValidFile(file);\n                    if (verify_file) {\n                        errors = {\n                            ...errors,\n                            [card_key]: { ...(errors[card_key as TPaymentMethod] ?? {}) },\n                        };\n                        errors[card_key as TPaymentMethod] = {\n                            ...errors[card_key as TPaymentMethod],\n                            [payment_id]: {\n                                ...(errors[card_key as TPaymentMethod]?.[payment_id] ?? {}),\n                                files: {\n                                    ...errors[card_key as TPaymentMethod]?.[payment_id]?.files,\n                                    [i]: verify_file,\n                                },\n                            },\n                        };\n                    } else {\n                        delete errors?.[card_key as TPaymentMethod]?.[payment_id]?.files?.[i];\n                    }\n                });\n            });\n        });\n        return errors;\n    };\n\n    const handleFormSubmit = async (\n        values: Partial<TProofOfOwnershipFormValue>,\n        action: FormikHelpers<Partial<TProofOfOwnershipFormValue>>\n    ) => {\n        const { setFieldError, setSubmitting } = action;\n        try {\n            const uploader = new DocumentUploader({ connection: WS.getSocket() });\n            setSubmitting(true);\n            await Object.keys(values).reduce(async (promise, card_key) => {\n                await promise;\n                const payment_method_details = values[card_key];\n                await Object.keys(payment_method_details)?.reduce(async (promise, payment_id) => {\n                    await promise;\n                    const payment_method_detail = payment_method_details[payment_id];\n                    if (payment_method_detail?.files?.length) {\n                        const processed_files = await readFiles(payment_method_detail.files, fileReadErrorMessage, {\n                            document_type: UPLOAD_FILE_TYPE.proof_of_ownership,\n                            proof_of_ownership: {\n                                details: {\n                                    email: client_email,\n                                    payment_identifier: payment_method_detail.payment_method_identifier,\n                                },\n                                id: payment_method_detail.id,\n                            },\n                        });\n                        await processed_files.reduce(async (promise, processed_file, index) => {\n                            await promise;\n                            const response = await uploader.upload(processed_file);\n                            const upload_error: Array<string> = [];\n                            if (response?.warning) {\n                                if (\n                                    response?.warning?.trim() === API_ERROR_CODES.DUPLICATE_DOCUMENT &&\n                                    response?.message\n                                ) {\n                                    upload_error[index] = response?.message;\n                                    const error_obj = {\n                                        [payment_id]: {\n                                            files: upload_error,\n                                        },\n                                    };\n                                    // @ts-expect-error Error is an array\n                                    setFieldError(card_key, { ...error_obj });\n                                }\n                            } else {\n                                updateAccountStatus();\n                                refreshNotifications();\n                            }\n                        }, Promise.resolve());\n                    }\n                }, Promise.resolve());\n            }, Promise.resolve());\n        } catch (err) {\n            console.warn(err); // eslint-disable-line no-console\n        } finally {\n            setSubmitting(false);\n        }\n    };\n\n    return (\n        <Formik initialValues={initial_values} validate={validateFields} onSubmit={handleFormSubmit}>\n            {({ isValid, dirty, isSubmitting }) => (\n                <Form data-testid='dt_poo_form' className='proof-of-ownership'>\n                    <FormBody scroll_offset={getScrollOffset(grouped_payment_method_data_keys.length)}>\n                        <FormSubHeader title={localize('Please upload the following document(s).')} />\n                        <FormBodySection>\n                            <fieldset>\n                                {grouped_payment_method_data_keys?.map((grouped_payment_method_data_key, index) => (\n                                    <div\n                                        className='proof-of-ownership__form-content'\n                                        key={grouped_payment_method_data_key}\n                                    >\n                                        {grouped_payment_method_data_keys.length > 1 && (\n                                            <div className='proof-of-ownership__progress'>\n                                                <div className='proof-of-ownership__progress-number'>{index + 1}</div>\n                                                {index !== grouped_payment_method_data_keys.length - 1 && (\n                                                    <div className='proof-of-ownership__progress-bar' />\n                                                )}\n                                            </div>\n                                        )}\n                                        <Card\n                                            details={\n                                                grouped_payment_method_data[\n                                                    grouped_payment_method_data_key\n                                                ] as TPaymentMethodInfo\n                                            }\n                                        />\n                                    </div>\n                                ))}\n                            </fieldset>\n                        </FormBodySection>\n                    </FormBody>\n                    <FormFooter>\n                        <Button\n                            type='submit'\n                            className='account-form__footer-btn'\n                            is_disabled={!dirty || !isValid}\n                            has_effect\n                            large\n                            primary\n                            is_loading={isSubmitting}\n                        >\n                            <Localize i18n_default_text='Submit' />\n                        </Button>\n                    </FormFooter>\n                </Form>\n            )}\n        </Formik>\n    );\n});\n\nProofOfOwnershipForm.displayName = 'ProofOfOwnershipForm';\n\nexport default ProofOfOwnershipForm;\n","import { hasInvalidCharacters, isFormattedCardNumber, validFile } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport { CARD_NUMBER, IDENTIFIER_TYPES, MAX_FILE_SIZE } from 'Constants/poo-identifier';\nimport { TPaymentMethodIdentifier } from 'Types';\n\nexport const isValidPaymentMethodIdentifier = (\n    payment_method_identifier: string,\n    identifier_type: TPaymentMethodIdentifier | ''\n) => {\n    const default_error_message = localize('Enter your full card number');\n\n    if (identifier_type === IDENTIFIER_TYPES.CARD_NUMBER) {\n        if (payment_method_identifier.length < CARD_NUMBER.MIN_LENGTH) {\n            return default_error_message;\n        } else if (payment_method_identifier.length === CARD_NUMBER.MIN_LENGTH) {\n            return !hasInvalidCharacters(payment_method_identifier) ? null : default_error_message;\n        } else if (\n            payment_method_identifier.length !== CARD_NUMBER.MIN_LENGTH ||\n            payment_method_identifier.length > CARD_NUMBER.MAX_LENGTH\n        ) {\n            return isFormattedCardNumber(payment_method_identifier) ? null : default_error_message;\n        }\n        return null;\n    }\n    return null;\n};\n\nexport const isValidFile = (file: File) => {\n    if (!validFile(file)) {\n        return localize(\"That file format isn't supported. Please upload .pdf, .png, .jpg, or .jpeg files only.\");\n    } else if (file?.size / 1024 > MAX_FILE_SIZE) {\n        return localize('That file is too big (only up to 8MB allowed). Please upload another file.');\n    }\n    return null;\n};\n","import POONotRequired from './poo-not-required';\n\nexport default POONotRequired;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport IconMessageContent from 'Components/icon-message-content';\n\nconst POONotRequired = () => (\n    <div className='proof-of-ownership__container'>\n        <IconMessageContent\n            icon={<Icon icon='IcPooVerified' size={128} />}\n            message={<Localize i18n_default_text=\"Your proof of ownership isn't required.\" />}\n            text={\n                <Localize i18n_default_text='You are not required to submit proof of ownership at this time. We will inform you if proof of ownership is required in the future.' />\n            }\n        />\n    </div>\n);\n\nexport default POONotRequired;\n","import POOVerified from './poo-verified';\n\nexport default POOVerified;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport IconMessageContent from 'Components/icon-message-content';\n\nconst POOVerified = () => (\n    <div className='proof-of-ownership__container'>\n        <IconMessageContent\n            message={<Localize i18n_default_text='Proof of ownership verification passed.' />}\n            icon={<Icon icon='IcPooVerified' size={128} />}\n        />\n    </div>\n);\n\nexport default POOVerified;\n","import POORejected from './poo-rejected';\n\nexport default POORejected;\n","import React from 'react';\nimport { Button, Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport IconMessageContent from 'Components/icon-message-content';\n\ntype TPOORejected = {\n    onTryAgain: () => void;\n};\n\nconst POORejected = ({ onTryAgain }: TPOORejected) => (\n    <div className='proof-of-ownership__container'>\n        <div className='proof-of-ownership__container--content'>\n            <IconMessageContent\n                icon={<Icon icon='IcPooRejected' size={128} />}\n                is_disabled_for_mobile\n                message={<Localize i18n_default_text='Proof of ownership verification failed' />}\n                text={<Localize i18n_default_text='We were unable to verify your proof of ownership.' />}\n            />\n            <Button\n                className='proof-of-ownership__try-again-button'\n                data-testid='dt_try-again-button'\n                large\n                onClick={onTryAgain}\n                primary\n                type='button'\n            >\n                <Localize i18n_default_text='Try again' />\n            </Button>\n        </div>\n    </div>\n);\n\nexport default POORejected;\n","import POOSubmitted from './poo-submitted';\n\nexport default POOSubmitted;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport IconMessageContent from 'Components/icon-message-content';\n\nconst POOSubmitted = () => (\n    <div className='proof-of-ownership__container'>\n        <IconMessageContent\n            icon={<Icon icon='IcPooSubmitted' size={128} />}\n            message={<Localize i18n_default_text='We’ve received your proof of ownership.' />}\n            text={\n                <Localize i18n_default_text='We’ll review your documents and notify you of its status within 3 days.' />\n            }\n        />\n    </div>\n);\n\nexport default POOSubmitted;\n","import React from 'react';\nimport { Localize, localize } from '@deriv/translations';\n\nconst getPaymentMethodsConfig = () => ({\n    advcash: {\n        icon_light: 'IcAdvcashLight',\n        icon_dark: 'IcAdvcashDark',\n        instructions: [\n            <Localize\n                key={0}\n                i18n_default_text='Upload a screenshot of your name and email address from the personal information section.'\n            />,\n        ],\n        input_label: localize('Email address'),\n        identifier_type: 'email_address',\n    },\n    astropay: {\n        icon_light: 'IcAstroPayLight',\n        icon_dark: 'IcAstroPayDark',\n        instructions: [\n            <Localize\n                key={0}\n                i18n_default_text='Upload 2 separate screenshots from the personal details page and the account page via <0>https://app.astropay.com/profile</0>'\n                components={[\n                    <a\n                        key={0}\n                        className='link  proof-of-ownership-link'\n                        target='_blank'\n                        rel='noreferrer'\n                        href='https://app.astropay.com/profile'\n                        aria-label='Read more on AstroPay'\n                    />,\n                ]}\n            />,\n        ],\n        input_label: localize('Account number'),\n        identifier_type: 'account_number',\n    },\n    beyonic: {\n        icon_light: 'IcBeyonic',\n        icon_dark: 'IcBeyonic',\n        instructions: [\n            <Localize\n                key={0}\n                i18n_default_text='Upload your mobile bill statement showing your name and phone number.'\n            />,\n        ],\n        input_label: localize('Mobile number'),\n        identifier_type: 'mobile_number',\n    },\n    'boleto (d24 voucher)': {\n        icon_light: 'IcBoletoD24VoucherLight',\n        icon_dark: 'IcBoletoD24VoucherDark',\n        instructions: [\n            <Localize key={0} i18n_default_text='Upload your bank statement showing your name and account details.' />,\n        ],\n        input_label: localize('Bank account number'),\n        identifier_type: 'bank_account_number',\n    },\n    visa: {\n        icon_light: 'IcVisaLight',\n        icon_dark: 'IcVisaDark',\n        instructions: [\n            <Localize\n                key={0}\n                i18n_default_text='Upload a photo showing your name and the first six and last four digits of your card number. If the card does not display your name, upload the bank statement showing your name and card number in the transaction history.'\n            />,\n        ],\n        input_label: localize('Card number'),\n        identifier_type: 'card_number',\n    },\n    mastercard: {\n        icon_light: 'IcMasterCardLight',\n        icon_dark: 'IcMasterCardDark',\n        instructions: [\n            <Localize\n                key={0}\n                i18n_default_text='Upload a photo showing your name and the first six and last four digits of your card number. If the card does not display your name, upload the bank statement showing your name and card number in the transaction history.'\n            />,\n        ],\n        input_label: localize('Card number'),\n        identifier_type: 'card_number',\n    },\n    pix: {\n        icon_light: 'IcPixLight',\n        icon_dark: 'IcPixDark',\n        instructions: [\n            <Localize\n                key={0}\n                i18n_default_text='Upload a screenshot of either of the following to process the transaction:'\n            />,\n            <Localize key={1} i18n_default_text='- your account profile section on the website' />,\n            <Localize key={2} i18n_default_text='- the Account Information page on the app' />,\n            <Localize key={3} i18n_default_text='- your account details of the bank linked to your account' />,\n        ],\n        input_label: localize('User ID'),\n        identifier_type: 'user_id',\n    },\n    skrill: {\n        icon_light: 'IcSkrillLight',\n        icon_dark: 'IcSkrillDark',\n        instructions: [\n            <Localize\n                key={0}\n                i18n_default_text='Upload a screenshot of your name, account number, and email address from the personal details section of the app or profile section of your account on the website.'\n            />,\n        ],\n        input_label: localize('Email address'),\n        identifier_type: 'email_address',\n    },\n    neteller: {\n        icon_light: 'IcNetellerLight',\n        icon_dark: 'IcNetellerDark',\n        instructions: [\n            localize(\n                'Upload a screenshot of your name, account number, and email address from the personal details section of the app or profile section of your account on the website.'\n            ),\n        ],\n        input_label: localize('Email address'),\n        identifier_type: 'email_address',\n    },\n    onlinenaira: {\n        icon_light: 'IcOnlineNaira',\n        icon_dark: 'IcOnlineNaira',\n        instructions: [\n            <Localize\n                key={0}\n                i18n_default_text='Upload a screenshot of your username on the General Information page at <0>https://onlinenaira.com/members/index.htm</0>'\n                components={[\n                    <a\n                        key={0}\n                        className='link proof-of-ownership-link'\n                        target='_blank'\n                        rel='noreferrer'\n                        href='https://onlinenaira.com/members/index.htm'\n                        aria-label='Read more on OnlineNaira'\n                    />,\n                ]}\n            />,\n            <Localize\n                key={1}\n                i18n_default_text='Upload a screenshot of your account number and phone number on the Bank Account/Mobile wallet page at <0>https://onlinenaira.com/members/bank.htm</0>'\n                components={[\n                    <a\n                        key={0}\n                        className='link  proof-of-ownership-link'\n                        target='_blank'\n                        rel='noreferrer'\n                        href='https://onlinenaira.com/members/bank.htm'\n                        aria-label='Read more on OnlineNaira'\n                    />,\n                ]}\n            />,\n        ],\n        input_label: localize('Account ID'),\n        identifier_type: 'account_id',\n    },\n    webmoney: {\n        icon_light: 'IcWebMoneyLight',\n        icon_dark: 'IcWebMoneyDark',\n        instructions: [\n            <Localize\n                key={0}\n                i18n_default_text='Upload a screenshot of your account and personal details page with your name, account number, phone number, and email address.'\n            />,\n        ],\n        input_label: localize('Account number'),\n        identifier_type: 'account_number',\n    },\n    zingpay: {\n        icon_light: 'IcZingpay',\n        icon_dark: 'IcZingpay',\n        instructions: [\n            <Localize\n                key={0}\n                i18n_default_text='Upload your bank statement showing your name, account number, and transaction history.'\n            />,\n        ],\n        input_label: localize('Bank account number'),\n        identifier_type: 'bank_account_number',\n    },\n    sticpay: {\n        icon_light: 'IcSticpayLight',\n        icon_dark: 'IcSticpayDark',\n        instructions: [\n            <Localize\n                key={0}\n                i18n_default_text='Upload a screenshot of your name and email address from the personal details section.'\n            />,\n        ],\n        input_label: localize('Email address'),\n        identifier_type: 'email_address',\n    },\n    jeton: {\n        icon_light: 'IcJetonLight',\n        icon_dark: 'IcJetonDark',\n        instructions: [\n            <Localize\n                key={0}\n                i18n_default_text='Upload a screenshot of your name and account number from the personal details section.'\n            />,\n        ],\n        input_label: localize('Account number'),\n        identifier_type: 'account_number',\n    },\n    other: {\n        icon_light: 'IcOtherPaymentMethod',\n        icon_dark: 'IcOtherPaymentMethod',\n        instructions: [\n            <Localize\n                key={0}\n                i18n_default_text='Upload a document showing your name and bank account number or account details.'\n            />,\n        ],\n        input_label: null,\n        identifier_type: 'none',\n    },\n});\n\nexport default getPaymentMethodsConfig;\n","import React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { GetAccountStatus } from '@deriv/api-types';\nimport { Loading } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport { AUTH_STATUS_CODES } from '@deriv/shared';\nimport ProofOfOwnershipForm from './proof-of-ownership-form';\nimport { POONotRequired, POOVerified, POORejected, POOSubmitted } from '../../../Components/poo/statuses';\nimport getPaymentMethodsConfig from '../../../Configs/payment-method-config';\nimport { TPaymentMethod, TPaymentMethodIdentifier, TPaymentMethodInfo, TAuthStatusCodes } from '../../../Types';\n\ntype TPaymentData = DeepRequired<GetAccountStatus>['authentication']['ownership']['requests'];\n\nexport const ProofOfOwnership = observer(() => {\n    const { client, ui } = useStore();\n    const { account_status } = client;\n    const { is_dark_mode_on: is_dark_mode } = ui;\n    const cards = account_status?.authentication?.ownership?.requests;\n    const [status, setStatus] = useState<TAuthStatusCodes>();\n    const [retry, setRetry] = useState(false);\n\n    const grouped_payment_method_data = React.useMemo(() => {\n        const groups: Partial<Record<TPaymentMethod, TPaymentMethodInfo>> = {};\n        const payment_methods_config = getPaymentMethodsConfig();\n        cards?.forEach(card => {\n            const card_payment_method = card?.payment_method?.toLowerCase();\n            const card_details =\n                payment_methods_config[card_payment_method as TPaymentMethod] || payment_methods_config.other;\n\n            if (groups[card_payment_method as TPaymentMethod]) {\n                groups[card_payment_method as TPaymentMethod]?.items?.push(card as TPaymentData[number]);\n            } else {\n                groups[card_payment_method as TPaymentMethod] = {\n                    documents_required: (card as TPaymentData[number])?.documents_required,\n                    icon: is_dark_mode ? card_details?.icon_dark : card_details?.icon_light,\n                    payment_method: (card as TPaymentData[number])?.payment_method,\n                    items: [card as TPaymentData[number]],\n                    instructions: card_details.instructions,\n                    input_label: card_details?.input_label,\n                    identifier_type: card_details.identifier_type as TPaymentMethodIdentifier,\n                    is_generic_pm: !card_details?.input_label,\n                };\n            }\n        });\n        return { groups };\n    }, [cards, is_dark_mode]);\n\n    useEffect(() => {\n        setStatus(account_status?.authentication?.ownership?.status?.toLowerCase() as TAuthStatusCodes);\n    }, [account_status]);\n\n    const onTryAgain = () => {\n        setRetry(true);\n    };\n\n    if (cards?.length && (status !== AUTH_STATUS_CODES.REJECTED || retry)) {\n        return <ProofOfOwnershipForm grouped_payment_method_data={grouped_payment_method_data.groups} />;\n    }\n    if (status === AUTH_STATUS_CODES.VERIFIED) return <POOVerified />;\n    if (status === AUTH_STATUS_CODES.PENDING) return <POOSubmitted />;\n    if (status === AUTH_STATUS_CODES.NONE) return <POONotRequired />;\n    if (status === AUTH_STATUS_CODES.REJECTED) return <POORejected onTryAgain={onTryAgain} />;\n    return <Loading is_fullscreen={false} className='account__initial-loader' />;\n});\n\nProofOfOwnership.displayName = 'ProofOfOwnership';\n\nexport default withRouter(ProofOfOwnership);\n","import POO from './proof-of-ownership';\n\nexport default POO;\n","import { localize } from '@deriv/translations';\n\nexport const income_status_codes = {\n    NONE: 'none',\n    PENDING: 'pending',\n    REJECTED: 'rejected',\n    VERIFIED: 'verified',\n    LOCKED: 'locked',\n} as const;\n\nexport const getPoincDocumentsList = () =>\n    [\n        { text: localize('Tax return'), value: 'tax_return' },\n        { text: localize('Employment contract'), value: 'employment_contract' },\n        { text: localize('Payslip'), value: 'payslip' },\n        { text: localize('Certificate of incorporation'), value: 'coi' },\n        { text: localize('Business proof of address'), value: 'business_poa' },\n        { text: localize('Article of association'), value: 'article_of_association' },\n        { text: localize('Memorandum'), value: 'memorandum' },\n        { text: localize('Authorization letter'), value: 'authorisation_letter' },\n        { text: localize('Declarations'), value: 'declarations' },\n    ] as const;\n","import React from 'react';\nimport { Field, Formik, Form, FormikErrors, FormikHelpers, FormikValues } from 'formik';\nimport { AccountStatusResponse, DocumentUploadRequest } from '@deriv/api-types';\nimport { Autocomplete, Button, FormSubmitErrorMessage, SelectNative } from '@deriv/components';\nimport { useFileUploader } from '@deriv/hooks';\nimport { useTranslations, Localize } from '@deriv-com/translations';\nimport { isEqualArray, WS } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport FilesDescription from 'Components/file-uploader-container/files-descriptions';\nimport FormBody from 'Components/form-body';\nimport FormFooter from 'Components/form-footer';\nimport FormSubHeader from 'Components/form-sub-header';\nimport FileUploaderContainer from '../../../Components/file-uploader-container';\nimport { getFileUploaderDescriptions } from '../../../Constants/file-uploader';\nimport { isServerError } from 'Helpers/utils';\nimport { income_status_codes, getPoincDocumentsList } from 'Sections/Verification/ProofOfIncome/proof-of-income-utils';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TProofOfIncomeForm = {\n    onSubmit: (status: typeof income_status_codes[keyof typeof income_status_codes]) => void;\n};\n\ntype TInitialValues = {\n    document_type: DocumentUploadRequest['document_type'] | '';\n};\n\nconst ProofOfIncomeForm = observer(({ onSubmit }: TProofOfIncomeForm) => {\n    const [document_file, setDocumentFile] = React.useState<File[]>([]);\n    const [file_selection_error, setFileSelectionError] = React.useState<string | null>(null);\n    const { localize } = useTranslations();\n    const { notifications } = useStore();\n    const { addNotificationMessageByKey, removeNotificationMessage, removeNotificationByKey } = notifications;\n    const { isMobile, isDesktop } = useDevice();\n\n    const { upload } = useFileUploader();\n\n    const poinc_documents_list = React.useMemo(() => getPoincDocumentsList(), []);\n    const poinc_uploader_files_descriptions = React.useMemo(() => getFileUploaderDescriptions('poinc'), []);\n\n    const initial_form_values: TInitialValues = {\n        document_type: '',\n    };\n\n    const validateFields = (values: TInitialValues) => {\n        const errors: FormikErrors<TInitialValues> = {};\n        const { document_type } = values;\n        const is_document_type_supported = Boolean(poinc_documents_list.find(c => c.text === document_type));\n\n        if (!document_type || !is_document_type_supported) {\n            errors.document_type = localize('This field is required.');\n        }\n\n        return errors;\n    };\n\n    const onSubmitValues = async (\n        values: TInitialValues,\n        { setStatus, setSubmitting }: FormikHelpers<TInitialValues>\n    ) => {\n        const uploading_value = poinc_documents_list.find(doc => doc.text === values.document_type)?.value ?? '';\n\n        if (uploading_value) {\n            setSubmitting(true);\n            try {\n                const api_response = await upload(document_file, { document_type: uploading_value });\n                if (api_response.warning) {\n                    setStatus({ msg: api_response.message });\n                } else {\n                    const get_account_status_response: DeepRequired<AccountStatusResponse> =\n                        await WS.authorized.getAccountStatus();\n\n                    const { income, needs_verification } =\n                        get_account_status_response?.get_account_status?.authentication || {};\n                    const needs_poinc =\n                        needs_verification.includes('income') &&\n                        [income_status_codes.REJECTED, income_status_codes.NONE].some(\n                            status => status === income?.status\n                        );\n                    removeNotificationMessage({ key: 'needs_poinc' });\n                    removeNotificationByKey({ key: 'needs_poinc' });\n                    removeNotificationMessage({ key: 'poinc_upload_limited' });\n                    removeNotificationByKey({ key: 'poinc_upload_limited' });\n                    onSubmit(income?.status);\n                    if (needs_poinc) {\n                        addNotificationMessageByKey('needs_poinc');\n                    }\n                }\n            } catch (error) {\n                if (isServerError(error)) {\n                    setStatus({ msg: error.message });\n                }\n            } finally {\n                setSubmitting(false);\n            }\n        }\n    };\n\n    return (\n        <Formik initialValues={initial_form_values} onSubmit={onSubmitValues} validate={validateFields}>\n            {({\n                errors,\n                handleChange,\n                handleSubmit,\n                isSubmitting,\n                isValid,\n                setFieldValue,\n                setStatus,\n                status,\n                touched,\n                values,\n            }) => (\n                <Form noValidate className='proof-of-income__form' onSubmit={handleSubmit}>\n                    <FormBody scroll_offset={isDesktop ? '0' : '20rem'}>\n                        <fieldset className='proof-of-income__form-field'>\n                            <FormSubHeader\n                                title={localize('Select document')}\n                                title_text_size={isMobile ? 'xs' : 's'}\n                            />\n                            <Field name='document_type'>\n                                {({ field }: FormikValues) => (\n                                    <React.Fragment>\n                                        {isDesktop ? (\n                                            <Autocomplete\n                                                {...field}\n                                                name='document_type'\n                                                data-lpignore='true'\n                                                autoComplete='off'\n                                                type='text'\n                                                list_height='36rem'\n                                                placeholder={localize('Select your document*')}\n                                                error={touched.document_type && errors.document_type}\n                                                list_items={poinc_documents_list}\n                                                value={values.document_type}\n                                                onChange={handleChange}\n                                                onItemSelection={({\n                                                    value,\n                                                    text,\n                                                }: typeof poinc_documents_list[number]) => {\n                                                    setFieldValue('document_type', value ? text : '', true);\n                                                    setStatus({ msg: '' });\n                                                }}\n                                                required\n                                            />\n                                        ) : (\n                                            <SelectNative\n                                                name='document_type'\n                                                placeholder={localize('Select your document*')}\n                                                label={localize('Select your document*')}\n                                                value={values.document_type}\n                                                // @ts-expect-error [TODO]:Fix types for SelectNative\n                                                list_items={poinc_documents_list}\n                                                error={touched.document_type ? errors.document_type : undefined}\n                                                use_text\n                                                onChange={e => {\n                                                    setFieldValue('document_type', e.target.value, true);\n                                                    setStatus({ msg: '' });\n                                                }}\n                                                required\n                                                hide_top_placeholder\n                                            />\n                                        )}\n                                    </React.Fragment>\n                                )}\n                            </Field>\n                        </fieldset>\n                        <div className='proof-of-income__form-field'>\n                            <FormSubHeader\n                                title={localize('Document submission')}\n                                title_text_size={isMobile ? 'xs' : 's'}\n                            />\n                            <FileUploaderContainer\n                                onFileDrop={files => {\n                                    setDocumentFile(prevFiles => {\n                                        if (!isEqualArray(prevFiles, files)) setStatus({ msg: '' });\n                                        return files;\n                                    });\n                                }}\n                                onError={setFileSelectionError}\n                                files_description={\n                                    <FilesDescription\n                                        descriptions={poinc_uploader_files_descriptions.descriptions}\n                                        title={poinc_uploader_files_descriptions.title}\n                                    />\n                                }\n                            />\n                        </div>\n                    </FormBody>\n                    <FormFooter>\n                        {status?.msg && <FormSubmitErrorMessage message={status.msg} />}\n                        <Button\n                            className='account-form__footer-btn'\n                            type='submit'\n                            is_disabled={\n                                !values.document_type ||\n                                isSubmitting ||\n                                !isValid ||\n                                !document_file.length ||\n                                !!file_selection_error ||\n                                !!status.msg\n                            }\n                            is_loading={isSubmitting}\n                            has_effect\n                            primary\n                        >\n                            <Localize i18n_default_text='Save and submit' />\n                        </Button>\n                    </FormFooter>\n                </Form>\n            )}\n        </Formik>\n    );\n});\n\nexport default ProofOfIncomeForm;\n","import { PoincFailed } from './failed';\n\nexport default PoincFailed;\n","import React from 'react';\nimport { Button, Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport IconMessageContent from 'Components/icon-message-content';\nimport { income_status_codes } from 'Sections/Verification/ProofOfIncome/proof-of-income-utils';\n\ntype TPoincUnverified = {\n    onReSubmit: (status: typeof income_status_codes[keyof typeof income_status_codes]) => void;\n};\n\nexport const PoincFailed = ({ onReSubmit }: TPoincUnverified) => (\n    <IconMessageContent\n        message={<Localize i18n_default_text='Income verification failed' />}\n        text={\n            <Localize\n                i18n_default_text=\"We were unable to verify your income. <0 /> Please check the email we've sent you for further information.\"\n                components={[<br key={0} />]}\n            />\n        }\n        icon={<Icon icon='IcPoincFailed' size={128} />}\n    >\n        <Button\n            type='button'\n            className='account-management__continue'\n            onClick={() => onReSubmit(income_status_codes.NONE)}\n            large\n            primary\n        >\n            <Localize i18n_default_text='Try Again' />\n        </Button>\n    </IconMessageContent>\n);\n","import { PoincReceived } from './received';\n\nexport default PoincReceived;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport IconMessageContent from 'Components/icon-message-content';\n\nexport const PoincReceived = () => (\n    <IconMessageContent\n        message={<Localize i18n_default_text=\"We've received your proof of income\" />}\n        text={\n            <Localize i18n_default_text=\"We'll review your documents and notify you of its status within 7 working days.\" />\n        }\n        icon={<Icon icon='IcPoincReceived' size={128} />}\n    />\n);\n","import { PoincLimited } from './limited';\n\nexport default PoincLimited;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport IconMessageContent from 'Components/icon-message-content';\n\nexport const PoincLimited = () => (\n    <IconMessageContent\n        message={<Localize i18n_default_text='Limit reached' />}\n        text={\n            <Localize\n                i18n_default_text=\"You have reached the maximum number of allowed attempts for submitting proof of income. <0 /> Please check the email we've sent you for further information.\"\n                components={[<br key={0} />]}\n            />\n        }\n        icon={<Icon icon='IcPoincLimited' size={128} />}\n    />\n);\n","import { PoincVerified } from './verified';\n\nexport default PoincVerified;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\nimport IconMessageContent from 'Components/icon-message-content';\n\nexport const PoincVerified = () => (\n    <IconMessageContent\n        message={<Localize i18n_default_text='Proof of income verification passed' />}\n        icon={<Icon icon='IcPoincVerified' size={128} />}\n    />\n);\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Loading } from '@deriv/components';\nimport { routes, WS } from '@deriv/shared';\nimport { AccountStatusResponse } from '@deriv/api-types';\nimport ProofOfIncomeForm from './proof-of-income-form';\nimport { income_status_codes } from './proof-of-income-utils';\nimport { populateVerificationStatus } from '../Helpers/verification';\nimport PoincFailed from '../../../Components/poinc/statuses/poinc-failed';\nimport PoincReceived from '../../../Components/poinc/statuses/poinc-received';\nimport PoincLimited from '../../../Components/poinc/statuses/poinc-limited';\nimport PoincVerified from '../../../Components/poinc/statuses/poinc-verified';\n\ntype TProofOfIncomeContainer = {\n    is_switching?: boolean;\n    refreshNotifications: () => void;\n};\n\nconst ProofOfIncomeContainer = ({ is_switching, refreshNotifications }: TProofOfIncomeContainer) => {\n    const [is_loading, setIsLoading] = React.useState(true);\n    const [authentication_status, setAuthenticationStatus] = React.useState<\n        Partial<ReturnType<typeof populateVerificationStatus>>\n    >({\n        allow_document_upload: false,\n        allow_poinc_resubmission: false,\n        needs_poinc: false,\n        income_status: income_status_codes.NONE,\n        is_age_verified: false,\n        is_fully_authenticated: false,\n    });\n\n    React.useEffect(() => {\n        if (!is_switching) {\n            WS.authorized.getAccountStatus().then((response: DeepRequired<AccountStatusResponse>) => {\n                const { get_account_status } = response;\n                const {\n                    allow_document_upload,\n                    allow_poinc_resubmission,\n                    income_status,\n                    needs_poinc,\n                    is_age_verified,\n                    is_fully_authenticated,\n                } = populateVerificationStatus(get_account_status);\n\n                setAuthenticationStatus({\n                    ...authentication_status,\n                    ...{\n                        allow_document_upload,\n                        allow_poinc_resubmission,\n                        needs_poinc,\n                        income_status,\n                        is_age_verified,\n                        is_fully_authenticated,\n                    },\n                });\n                setIsLoading(false);\n                refreshNotifications();\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [is_switching]);\n\n    const handleSubmit = (status: typeof income_status_codes[keyof typeof income_status_codes]) => {\n        setAuthenticationStatus({ ...authentication_status, ...{ income_status: status } });\n    };\n\n    const {\n        allow_document_upload,\n        allow_poinc_resubmission,\n        income_status,\n        needs_poinc,\n        is_age_verified,\n        is_fully_authenticated,\n    } = authentication_status;\n\n    const should_show_poinc_form =\n        allow_document_upload &&\n        needs_poinc &&\n        is_age_verified &&\n        ((allow_poinc_resubmission && income_status === income_status_codes.LOCKED) ||\n            income_status === income_status_codes.NONE);\n\n    if (is_loading) return <Loading is_fullscreen={false} className='account__initial-loader' />;\n    if (!needs_poinc || !is_fully_authenticated) return <Redirect to={routes.account} />;\n    if (should_show_poinc_form) return <ProofOfIncomeForm onSubmit={handleSubmit} />;\n    if (income_status === income_status_codes.PENDING) return <PoincReceived />;\n    if (income_status === income_status_codes.VERIFIED) return <PoincVerified />;\n    if (income_status === income_status_codes.REJECTED) return <PoincFailed onReSubmit={handleSubmit} />;\n    if (income_status === income_status_codes.LOCKED) return <PoincLimited />;\n\n    return null;\n};\n\nexport default ProofOfIncomeContainer;\n","import ProofOfIncome from './proof-of-income';\n\nexport default ProofOfIncome;\n","import React from 'react';\nimport { observer, useStore } from '@deriv/stores';\nimport DemoMessage from 'Components/demo-message';\nimport ProofOfIncomeContainer from './proof-of-income-container';\n\nconst ProofOfIncome = observer(() => {\n    const { client, notifications } = useStore();\n    const { is_switching, is_virtual } = client;\n    const { refreshNotifications } = notifications;\n\n    if (is_virtual) return <DemoMessage has_button />;\n\n    return (\n        <div className='proof-of-income'>\n            <ProofOfIncomeContainer is_switching={is_switching} refreshNotifications={refreshNotifications} />\n        </div>\n    );\n});\n\nexport default ProofOfIncome;\n","import React from 'react';\nimport { useOauth2 } from '@deriv/hooks';\nimport { Text, Icon } from '@deriv/components';\nimport { Localize } from '@deriv/translations';\n\n/**\n * Content to be displayed in  the side bar\n * @name TradingHubLogout\n * @param handleOnLogout - function to handle action when user click on logout\n * @returns React Component\n */\nconst TradingHubLogout = ({ handleOnLogout }: { handleOnLogout: () => Promise<void> }) => {\n    const { oAuthLogout } = useOauth2({ handleLogout: handleOnLogout });\n    return (\n        <div\n            className='dc-vertical-tab__header-account__logout-tab'\n            onClick={oAuthLogout}\n            data-testid='dt_logout_tab'\n            onKeyDown={e => {\n                if (e.key === 'Enter' || e.key === ' ') {\n                    oAuthLogout();\n                }\n            }}\n            role='button'\n            tabIndex={0}\n        >\n            <div className='dc-vertical-tab__header-account__logout'>\n                <Icon icon='IcLogout' className='dc-vertical-tab__header-account__logout--icon' />\n                <Text size='xs' weight='bold'>\n                    <Localize i18n_default_text='Log out' />\n                </Text>\n            </div>\n        </div>\n    );\n};\n\nexport default TradingHubLogout;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Analytics } from '@deriv-com/analytics';\nimport { PageOverlay, VerticalTab } from '@deriv/components';\nimport { getOSNameWithUAParser, getSelectedRoute, routes as shared_routes, platforms } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport TradingHubLogout from './tradinghub-logout';\nimport { TRoute } from '../../Types';\nimport { useDevice } from '@deriv-com/ui';\n\ntype RouteItems = React.ComponentProps<typeof VerticalTab>['list'];\n\ntype PageOverlayWrapperProps = {\n    routes: Array<TRoute>;\n    subroutes: TRoute[];\n};\n\n/**\n * @name PageOverlayWrapper\n * @param routes - routes object pased by react-router-dom\n * @param subroutes - list of subroutes\n */\nconst PageOverlayWrapper = observer(({ routes, subroutes }: PageOverlayWrapperProps) => {\n    const history = useHistory();\n    const { client, common, ui } = useStore();\n    const { logout } = client;\n    const { is_from_derivgo, is_from_tradershub_os } = common;\n    const { setIsForcedToExitPnv } = ui;\n    const { isDesktop } = useDevice();\n\n    const passkeysMenuCloseActionEventTrack = React.useCallback(() => {\n        Analytics.trackEvent('ce_passkey_account_settings_form', {\n            action: 'close',\n            form_name: 'ce_passkey_account_settings_form',\n            operating_system: getOSNameWithUAParser(),\n        });\n    }, []);\n\n    const list_groups = routes.map(route_group => ({\n        icon: route_group.icon,\n        label: route_group?.getTitle?.(),\n        subitems: route_group?.subroutes?.length ? route_group.subroutes.map(sub => subroutes.indexOf(sub)) : [],\n    }));\n\n    const onClickClose = React.useCallback(() => {\n        if (location.pathname === shared_routes.passkeys) {\n            passkeysMenuCloseActionEventTrack();\n        }\n\n        history.push(shared_routes.traders_hub);\n    }, [history]);\n\n    //@ts-expect-error as component type conflicts with VerticalTab type\n    const selected_route = getSelectedRoute({ routes: subroutes, pathname: location.pathname });\n\n    const onClickLogout = async () => {\n        if (window.location.pathname.startsWith(shared_routes.phone_verification)) {\n            setIsForcedToExitPnv(true);\n            // Add a small delay to ensure state is updated before navigation because adding await doesn't work here\n            await new Promise(resolve => setTimeout(resolve, 0));\n        }\n        history.push(shared_routes.traders_hub);\n        await logout();\n    };\n\n    if (!isDesktop && selected_route) {\n        const RouteComponent = selected_route.component as React.ElementType<{ component_icon: string | undefined }>;\n        return (\n            <PageOverlay\n                header={selected_route?.getTitle?.()}\n                onClickClose={onClickClose}\n                is_from_app={is_from_derivgo}\n                is_from_tradershub_os={is_from_tradershub_os}\n            >\n                <RouteComponent component_icon={selected_route.icon_component} />\n            </PageOverlay>\n        );\n    }\n\n    return (\n        <PageOverlay\n            header={<Localize i18n_default_text='Settings' />}\n            onClickClose={onClickClose}\n            is_from_app={is_from_derivgo}\n            is_from_tradershub_os={is_from_tradershub_os}\n        >\n            <VerticalTab\n                is_floating\n                current_path={location.pathname}\n                is_routed\n                is_full_width\n                list={subroutes as RouteItems}\n                list_groups={list_groups}\n                extra_content={<TradingHubLogout handleOnLogout={onClickLogout} />}\n                is_sidebar_enabled={isDesktop}\n            />\n        </PageOverlay>\n    );\n});\n\nPageOverlayWrapper.displayName = 'PageOverlayWrapper';\n\nexport default PageOverlayWrapper;\n","import React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { FadeWrapper, Loading } from '@deriv/components';\nimport { flatten, matchRoute, routes as shared_routes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport PageOverlayWrapper from './page-overlay-wrapper';\nimport { TRoute } from '../../Types';\nimport 'Styles/account.scss';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TAccountProps = RouteComponentProps & {\n    routes: Array<TRoute>;\n};\n\n/**\n * Component that renders the account section\n * @name Account\n * @param history - history object passed from react-router-dom\n * @param location - location object passed from react-router-dom\n * @param routes - routes object passed from react-router-dom\n * @returns React component\n */\nconst Account = observer(({ history, location, routes }: TAccountProps) => {\n    const { client, ui } = useStore();\n    const {\n        is_virtual,\n        is_logged_in,\n        is_logging_in,\n        is_proof_of_ownership_enabled,\n        landing_company_shortcode,\n        should_allow_authentication,\n        should_allow_poinc_authentication,\n        is_passkey_supported,\n    } = client;\n    const { toggleAccountSettings, is_account_settings_visible } = ui;\n    const { isMobile } = useDevice();\n    // subroutes of a route is structured as an array of arrays\n    const subroutes = flatten(routes.map(i => i.subroutes));\n    const selected_content = subroutes.find(r => matchRoute(r, location.pathname));\n    const should_remove_passkeys_route = !isMobile || (isMobile && !is_passkey_supported);\n\n    React.useEffect(() => {\n        toggleAccountSettings(true);\n    }, [toggleAccountSettings]);\n\n    routes.forEach(menu_item => {\n        if (menu_item?.subroutes?.length) {\n            menu_item.subroutes.forEach(route => {\n                if (route.path === shared_routes.financial_assessment) {\n                    route.is_disabled = is_virtual;\n                }\n\n                if (route.path === shared_routes.trading_assessment) {\n                    route.is_disabled = is_virtual || landing_company_shortcode !== 'maltainvest';\n                }\n\n                if (route.path === shared_routes.proof_of_identity || route.path === shared_routes.proof_of_address) {\n                    route.is_disabled = !should_allow_authentication;\n                }\n\n                if (route.path === shared_routes.proof_of_ownership) {\n                    route.is_disabled = is_virtual || !is_proof_of_ownership_enabled;\n                }\n\n                if (route.path === shared_routes.proof_of_income) {\n                    route.is_disabled = !should_allow_poinc_authentication;\n                }\n\n                if (route.path === shared_routes.passkeys) {\n                    route.is_hidden = should_remove_passkeys_route;\n                }\n            });\n        }\n    });\n\n    if (!selected_content) {\n        history.push(shared_routes.personal_details);\n    }\n\n    if (!is_logged_in && is_logging_in) {\n        return <Loading is_fullscreen className='account__initial-loader' />;\n    }\n\n    return (\n        <FadeWrapper\n            is_visible={is_account_settings_visible}\n            className='account-page-wrapper'\n            keyname='account-page-wrapper'\n        >\n            <div className='account'>\n                <PageOverlayWrapper routes={routes} subroutes={subroutes} />\n            </div>\n        </FadeWrapper>\n    );\n});\n\nAccount.displayName = 'Account';\n\nexport default withRouter(Account);\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors in Autocomplete & SelectNative components\n\nimport { useMemo, useRef } from 'react';\nimport { Form, Formik, FormikValues } from 'formik';\nimport clsx from 'clsx';\nimport { localize } from '@deriv-com/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport EmploymentTaxDetailsContainer from '../employment-tax-details-container';\nimport { getEmploymentAndTaxValidationSchema } from '../../Configs/user-profile-validation-config';\nimport ScrollToFieldWithError from '../../Components/forms/scroll-to-field-with-error';\nimport { Div100vhContainer, FormSubmitButton, Modal, ThemedScrollbars } from '@deriv/components';\nimport { useTinValidations } from '@deriv/hooks';\nimport { observer, useStore } from '@deriv/stores';\nimport './employment-tax-info.scss';\n\ntype TEmploymentTaxInfoProps = {\n    disabled_items: string[];\n    getCurrentStep: () => number;\n    onSave: (current_step: number, values: FormikValues) => void;\n    onCancel: (current_step: number, goToPreviousStep: () => void) => void;\n    onSubmit: (\n        current_step: number,\n        values: FormikValues,\n        setSubmitting: (is_submitting: boolean) => void,\n        goToNextStep: () => void\n    ) => void;\n    goToPreviousStep: () => void;\n    goToNextStep: () => void;\n    real_account_signup_target: string;\n    value: FormikValues;\n};\n\nconst EmploymentTaxInfo = observer(\n    ({\n        disabled_items,\n        value,\n        getCurrentStep,\n        onSave,\n        onCancel,\n        onSubmit,\n        goToPreviousStep,\n        goToNextStep,\n        real_account_signup_target,\n    }: TEmploymentTaxInfoProps) => {\n        const { isMobile, isDesktop } = useDevice();\n        const scroll_div_ref = useRef(null);\n        const { tin_validation_config, mutate } = useTinValidations();\n        const { client } = useStore();\n\n        const editable_fields = useMemo(\n            () =>\n                ['employment_status', 'tax_residence', 'tax_identification_number'].filter(\n                    field => !disabled_items.includes(field)\n                ) || [],\n            [disabled_items]\n        );\n\n        const is_eu = real_account_signup_target === 'maltainvest';\n\n        const schema = getEmploymentAndTaxValidationSchema({\n            tin_config: tin_validation_config,\n            is_mf: is_eu,\n            is_real: !client.is_virtual,\n            is_duplicate_account:\n                client.account_settings.immutable_fields?.includes('tax_identification_number') ||\n                client.account_settings.immutable_fields?.includes('tax_residence'),\n            is_employment_status_tin_mandatory: true, // Override the value to true as we need to make Employment status mandatory for Real account creation\n        });\n\n        const handleCancel = (values: FormikValues) => {\n            const current_step = (getCurrentStep?.() || 1) - 1;\n            onSave(current_step, values);\n            onCancel(current_step, goToPreviousStep);\n        };\n\n        return (\n            <Formik\n                initialValues={{ ...value }}\n                validationSchema={schema}\n                validateOnMount\n                onSubmit={(values, actions) => {\n                    const current_step = getCurrentStep() - 1;\n                    onSave(current_step, values);\n                    onSubmit(current_step, values, actions.setSubmitting, goToNextStep);\n                }}\n            >\n                {({ handleSubmit, isSubmitting, values }) => {\n                    return (\n                        <Form onSubmit={handleSubmit} noValidate className='employment-tax-info__layout'>\n                            <ScrollToFieldWithError />\n                            <Div100vhContainer\n                                height_offset='110px'\n                                is_disabled={!isMobile}\n                                className={clsx('details-form')}\n                            >\n                                <ThemedScrollbars\n                                    refSetter={scroll_div_ref}\n                                    className={clsx('details-form__elements', 'employment-tax-info__form')}\n                                >\n                                    <EmploymentTaxDetailsContainer\n                                        editable_fields={editable_fields}\n                                        parent_ref={scroll_div_ref}\n                                        should_display_long_message={is_eu}\n                                        handleChange={mutate}\n                                        tin_validation_config={tin_validation_config}\n                                    />\n                                </ThemedScrollbars>\n                            </Div100vhContainer>\n                            <Modal.Footer has_separator is_bypassed={!isDesktop}>\n                                <FormSubmitButton\n                                    is_disabled={isSubmitting}\n                                    label={localize('Next')}\n                                    is_absolute={!isDesktop}\n                                    has_cancel\n                                    cancel_label={localize('Previous')}\n                                    onCancel={() => handleCancel(values)}\n                                />\n                            </Modal.Footer>\n                        </Form>\n                    );\n                }}\n            </Formik>\n        );\n    }\n);\n\nexport default EmploymentTaxInfo;\n","// TODO: Remove once mobile team has changed this link\nimport DeactivateAccount from './deactivate-account';\n\nexport default DeactivateAccount;\n","// TODO: Remove once mobile team has changed this link\nimport { Redirect } from 'react-router-dom';\nimport { routes } from '@deriv/shared';\n\nconst DeactivateAccount = () => {\n    return <Redirect to={routes.closing_account} />;\n};\n\nexport default DeactivateAccount;\n","// /* eslint-disable @typescript-eslint/ban-ts-comment */\n// // @ts-nocheck [TODO] - Need to update the types of routes\n\nimport { routes, moduleLoader, makeLazyLoader } from '@deriv/shared';\nimport { localize } from '@deriv/translations';\nimport {\n    PersonalDetails,\n    ProofOfIdentityFlow,\n    ProofOfAddress,\n    ProofOfOwnership,\n    Account,\n    DeactivateAccount,\n    ProofOfIncome,\n} from '../Sections';\n\nimport { TRoute, TRouteConfig } from '../Types';\nimport { Loading } from '@deriv/components';\n// Error Routes\nconst Page404 = makeLazyLoader(\n    () => moduleLoader(() => import(/* webpackChunkName: \"404\" */ 'Modules/Page404')),\n    () => <Loading />\n)();\n\nconst Passwords = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Security/Passwords')),\n    () => <Loading />\n)();\n\nconst PhoneVerificationPage = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Profile/PhoneVerification')),\n    () => <Loading />\n)();\n\nconst Passkeys = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Security/Passkeys')),\n    () => <Loading />\n)();\n\nconst AccountLimits = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Security/AccountLimits')),\n    () => <Loading />\n)();\n\nconst AccountClosed = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Security/AccountClosed')),\n    () => <Loading />\n)();\n\nconst LanguageSettings = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Profile/LanguageSettings')),\n    () => <Loading />\n)();\n\nconst LoginHistory = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Security/LoginHistory')),\n    () => <Loading />\n)();\n\nconst ConnectedApps = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Security/ConnectedApps')),\n    () => <Loading />\n)();\nconst FinancialAssessment = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Assessment/FinancialAssessment')),\n    () => <Loading />\n)();\nconst TradingAssessment = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Assessment/TradingAssessment')),\n    () => <Loading />\n)();\n\nconst ApiToken = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Security/ApiToken')),\n    () => <Loading />\n)();\n\nconst TwoFactorAuthentication = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Security/TwoFactorAuthentication')),\n    () => <Loading />\n)();\nconst SelfExclusion = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Security/SelfExclusion')),\n    () => <Loading />\n)();\nconst ClosingAccount = makeLazyLoader(\n    () => moduleLoader(() => import('../Sections/Security/ClosingAccount')),\n    () => <Loading />\n)();\n\nexport type TPage404 = typeof Page404;\n\n// Order matters\nconst initRoutesConfig = () => [\n    {\n        path: routes.account_closed,\n        component: AccountClosed,\n        is_authenticated: false,\n        // Don't use `Localize` component since native html tag like `option` cannot render them\n        getTitle: () => localize('Account closed'),\n    },\n    {\n        // TODO: Remove once mobile team has changed this link\n        path: routes.deactivate_account,\n        component: DeactivateAccount,\n    },\n    {\n        path: routes.account,\n        component: Account,\n        is_authenticated: true,\n        getTitle: () => localize('Account Settings'),\n        icon_component: 'IcUserOutline',\n        routes: [\n            {\n                getTitle: () => localize('Profile'),\n                icon: 'IcUserOutline',\n                subroutes: [\n                    {\n                        path: routes.phone_verification,\n                        component: PhoneVerificationPage,\n                        getTitle: () => localize('Phone number verification'),\n                        is_hidden: true,\n                    },\n                    {\n                        path: routes.personal_details,\n                        component: PersonalDetails,\n                        getTitle: () => localize('Personal details'),\n                        default: true,\n                    },\n                    {\n                        path: routes.languages,\n                        component: LanguageSettings,\n                        getTitle: () => localize('Languages'),\n                    },\n                ],\n            },\n            {\n                getTitle: () => localize('Assessments'),\n                icon: 'IcAssessment',\n                subroutes: [\n                    {\n                        path: routes.trading_assessment,\n                        component: TradingAssessment,\n                        getTitle: () => localize('Trading assessment'),\n                    },\n                    {\n                        path: routes.financial_assessment,\n                        component: FinancialAssessment,\n                        getTitle: () => localize('Financial assessment'),\n                    },\n                ],\n            },\n            {\n                getTitle: () => localize('Verification'),\n                icon: 'IcVerification',\n                subroutes: [\n                    {\n                        path: routes.proof_of_identity,\n                        component: ProofOfIdentityFlow,\n                        getTitle: () => localize('Proof of identity'),\n                    },\n                    {\n                        path: routes.proof_of_address,\n                        component: ProofOfAddress,\n                        getTitle: () => localize('Proof of address'),\n                    },\n                    {\n                        path: routes.proof_of_ownership,\n                        component: ProofOfOwnership,\n                        getTitle: () => localize('Proof of ownership'),\n                    },\n                    {\n                        path: routes.proof_of_income,\n                        component: ProofOfIncome,\n                        getTitle: () => localize('Proof of income'),\n                    },\n                ],\n            },\n            {\n                getTitle: () => localize('Security and safety'),\n                icon: 'IcSecurity',\n                id: 'security_routes',\n                subroutes: [\n                    {\n                        path: routes.passwords,\n                        component: Passwords,\n                        getTitle: () => localize('Email and passwords'),\n                    },\n                    {\n                        path: routes.passkeys,\n                        component: Passkeys,\n                        getTitle: () => localize('Passkeys'),\n                    },\n                    {\n                        path: routes.self_exclusion,\n                        component: SelfExclusion,\n                        getTitle: () => localize('Self exclusion'),\n                    },\n                    {\n                        path: routes.account_limits,\n                        component: AccountLimits,\n                        getTitle: () => localize('Account limits'),\n                    },\n                    {\n                        path: routes.login_history,\n                        component: LoginHistory,\n                        getTitle: () => localize('Login history'),\n                    },\n                    ...[\n                        {\n                            path: routes.api_token,\n                            component: ApiToken,\n                            getTitle: () => localize('API token'),\n                        },\n                    ],\n                    {\n                        path: routes.connected_apps,\n                        component: ConnectedApps,\n                        getTitle: () => localize('Connected apps'),\n                    },\n                    {\n                        path: routes.two_factor_authentication,\n                        component: TwoFactorAuthentication,\n                        getTitle: () => localize('Two-factor authentication'),\n                    },\n                    {\n                        path: routes.closing_account,\n                        component: ClosingAccount,\n                        getTitle: () => localize('Close your account'),\n                    },\n                ],\n            },\n        ],\n    },\n];\n\nlet routesConfig: TRouteConfig[] | undefined;\n\n// For default page route if page/path is not found, must be kept at the end of routes_config array\nconst route_default: TRoute = { component: Page404, getTitle: () => localize('Error 404') };\n\nconst getRoutesConfig = (): TRouteConfig[] => {\n    if (!routesConfig) {\n        routesConfig = initRoutesConfig() as TRouteConfig[];\n        routesConfig.push(route_default);\n    }\n    return routesConfig;\n};\n\nexport default getRoutesConfig;\n","import React from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { Redirect, Route } from 'react-router-dom';\nimport { redirectToLogin, isEmptyObject, routes, removeBranchName, default_title } from '@deriv/shared';\nimport { getLanguage } from '@deriv/translations';\nimport { TBinaryRoutes, TRoute, TRouteConfig } from '../../Types';\n\ntype TRouteWithSubRoutesProps = TRouteConfig & TBinaryRoutes;\n\nconst RouteWithSubRoutes = (route: TRouteWithSubRoutesProps) => {\n    const renderFactory = (props: RouteComponentProps) => {\n        let result = null;\n\n        if (route.component === Redirect) {\n            let to = route.to;\n\n            // This if clause has been added just to remove '/index' from url in localhost env.\n            if (route.path === routes.index) {\n                const { location } = props;\n                to = location.pathname.toLowerCase().replace(route.path, '');\n            }\n            result = <Redirect to={to} />;\n        } else if (route.is_authenticated && !route.is_logged_in && !route.is_logging_in) {\n            redirectToLogin(route.is_logged_in, getLanguage());\n        } else {\n            const default_subroute: TRoute = (route.routes ?? []).reduce(\n                (acc: TRoute, cur: TRoute) => ({\n                    ...acc,\n                    ...cur.subroutes?.find((subroute: TRoute) => subroute.default),\n                }),\n                {}\n            );\n            const has_default_subroute = !isEmptyObject(default_subroute);\n            const pathname = removeBranchName(location.pathname);\n\n            const RouteComponent = route.component as React.ElementType;\n\n            result = (\n                <React.Fragment>\n                    {has_default_subroute && pathname === route.path && <Redirect to={default_subroute?.path} />}\n                    <RouteComponent {...props} routes={route.routes} />\n                </React.Fragment>\n            );\n        }\n\n        const title = route.getTitle?.() ?? '';\n        document.title = `${title} | ${default_title}`;\n\n        return result;\n    };\n\n    return <Route exact={route.exact} path={route.path} render={renderFactory} />;\n};\n\nexport { RouteWithSubRoutes as RouteWithSubRoutesRender }; // For tests\n\nexport default RouteWithSubRoutes;\n","import React from 'react';\nimport { Switch } from 'react-router-dom';\n\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\n\nimport getRoutesConfig from '../../Constants/routes-config';\nimport { TBinaryRoutes, TRoute } from '../../Types';\n\nimport RouteWithSubRoutes from './route-with-sub-routes';\n\nconst BinaryRoutes = observer((props: TBinaryRoutes) => {\n    const { common } = useStore();\n    const { current_language } = common;\n    return (\n        <React.Suspense\n            fallback={\n                <div>\n                    <Localize i18n_default_text='Loading...' />\n                </div>\n            }\n        >\n            <Switch>\n                {getRoutesConfig().map((route: TRoute, idx: number) => (\n                    <RouteWithSubRoutes key={`${idx}_${current_language}`} {...route} {...props} />\n                ))}\n            </Switch>\n        </React.Suspense>\n    );\n});\n\nexport default BinaryRoutes;\n","import { withRouter } from 'react-router';\nimport { observer, useStore } from '@deriv/stores';\nimport { BinaryRoutes } from '../Components/Routes';\nimport ErrorComponent from '../Components/error-component';\nimport { ThemeProvider } from '@deriv-com/quill-ui';\n\nconst Routes = observer(() => {\n    const { client, common, ui } = useStore();\n    const { is_logged_in, is_logging_in } = client;\n    const { error, has_error } = common;\n    const { is_dark_mode_on } = ui;\n    if (has_error) {\n        return <ErrorComponent {...error} />;\n    }\n\n    return (\n        <ThemeProvider theme={is_dark_mode_on ? 'dark' : 'light'}>\n            <BinaryRoutes is_logged_in={is_logged_in} is_logging_in={is_logging_in} />\n        </ThemeProvider>\n    );\n});\n\n// need to wrap withRouter\n// to prevent updates on <BinaryRoutes /> from being blocked\nexport default withRouter(Routes);\n","import React, { ChangeEvent } from 'react';\nimport { Formik, Form, FormikValues, FormikErrors } from 'formik';\nimport { useHistory } from 'react-router-dom';\nimport { Button, Dialog, Icon, PasswordInput, PasswordMeter, Text, FormSubmitButton } from '@deriv/components';\nimport {\n    getErrorMessages,\n    validPassword,\n    validLength,\n    WS,\n    getCFDPlatformLabel,\n    CFD_PLATFORMS,\n    validMT5Password,\n} from '@deriv/shared';\nimport { localize, Localize } from '@deriv/translations';\nimport { TPlatforms } from '../../Types';\nimport './reset-trading-password-modal.scss';\n\ntype TResetTradingPassword = {\n    setDialogTitleFunc?: (value: boolean) => void;\n    toggleResetTradingPasswordModal: (value: boolean) => void;\n    verification_code: string;\n    platform: TPlatforms;\n};\n\nconst ResetTradingPassword = ({\n    setDialogTitleFunc,\n    toggleResetTradingPasswordModal,\n    verification_code,\n    platform,\n}: TResetTradingPassword) => {\n    const handleSubmit = (values: FormikValues, actions: FormikValues) => {\n        actions.setSubmitting(true);\n\n        const params = {\n            new_password: values.password,\n            verification_code,\n            platform,\n        };\n\n        WS.tradingPlatformPasswordReset(params).then(async (response: FormikValues) => {\n            if (response.error) {\n                actions.setStatus({ error_msg: response.error.message, error_code: response.error.code });\n                setDialogTitleFunc?.(true);\n            } else {\n                actions.resetForm({ password: '' });\n                actions.setStatus({ reset_complete: true });\n                WS.getAccountStatus();\n            }\n            actions.setSubmitting(false);\n        });\n    };\n\n    const validateReset = (values: FormikValues) => {\n        const errors: FormikErrors<FormikValues> = {};\n        const max_length = platform === CFD_PLATFORMS.MT5 ? 16 : 25;\n\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: max_length,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: max_length,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        } else if (platform === CFD_PLATFORMS.MT5 && !validMT5Password(values.password)) {\n            errors.password = localize(\n                'Please include at least 1 special character such as ( _ @ ? ! / # ) in your password.'\n            );\n        }\n\n        return errors;\n    };\n\n    const reset_initial_values = { password: '' };\n\n    return (\n        <div className='reset-trading-password'>\n            <Formik\n                initialValues={reset_initial_values}\n                initialStatus={{ reset_complete: false, error_msg: '', error_code: '' }}\n                validate={validateReset}\n                onSubmit={handleSubmit}\n            >\n                {({\n                    handleBlur,\n                    errors,\n                    values,\n                    resetForm,\n                    touched,\n                    isSubmitting,\n                    setFieldTouched,\n                    handleChange,\n                    status,\n                }) => (\n                    <Form>\n                        <React.Fragment>\n                            {status.error_msg && (\n                                <div className='reset-trading-password__error'>\n                                    <Icon icon='IcMt5Expired' size={128} />\n                                    <Text\n                                        as='p'\n                                        size='xs'\n                                        weight='bold'\n                                        align='center'\n                                        className='reset-trading-password__lead'\n                                    >\n                                        {status.error_msg}\n                                    </Text>\n                                    {status.error_code === 'InvalidToken' && (\n                                        <Text\n                                            as='p'\n                                            color='prominent'\n                                            size='xs'\n                                            align='center'\n                                            className='reset-trading-password__description--is-centered'\n                                        >\n                                            <Localize i18n_default_text='Please request a new password and check your email for the new token.' />\n                                        </Text>\n                                    )}\n                                    <Button\n                                        className='reset-trading-password__confirm-button'\n                                        primary\n                                        large\n                                        onClick={() => {\n                                            resetForm();\n                                            toggleResetTradingPasswordModal(false);\n                                        }}\n                                    >\n                                        <Localize i18n_default_text='Ok' />\n                                    </Button>\n                                </div>\n                            )}\n                            {status.reset_complete && (\n                                <div className='reset-trading-password__password-success'>\n                                    <Icon\n                                        className='reset-trading-password__icon'\n                                        icon='IcSuccessResetTradingPassword'\n                                        size={128}\n                                    />\n                                    <Text as='p' weight='bold' className='reset-trading-password__heading'>\n                                        <Localize i18n_default_text='Success' />\n                                    </Text>\n                                    <Text align='center' as='p' size='xs' className='reset-trading-password__subtext'>\n                                        {localize(\n                                            'You have a new {{platform}} password to log in to your {{platform}} accounts on the web and mobile apps.',\n                                            {\n                                                platform: getCFDPlatformLabel(platform),\n                                            }\n                                        )}\n                                    </Text>\n                                    <Button\n                                        type='button'\n                                        onClick={() => {\n                                            resetForm();\n                                            toggleResetTradingPasswordModal(false);\n                                        }}\n                                        primary\n                                        large\n                                    >\n                                        <Localize i18n_default_text='Done' />\n                                    </Button>\n                                </div>\n                            )}\n                            {!status.error_msg && !status.reset_complete && (\n                                <div className='reset-trading-password__set-password'>\n                                    <Text as='p' weight='bold' className='reset-trading-password__heading'>\n                                        <Localize\n                                            i18n_default_text='Create a new {{platform}} password'\n                                            values={{\n                                                platform: getCFDPlatformLabel(platform),\n                                            }}\n                                        />\n                                    </Text>\n                                    <Text as='p' size='xs' className='reset-trading-password__details'>\n                                        <Localize\n                                            i18n_default_text='You can use this password for all your {{platform}} accounts.'\n                                            values={{\n                                                platform: getCFDPlatformLabel(platform),\n                                            }}\n                                        />\n                                    </Text>\n                                    <fieldset className='reset-trading-password__input-field'>\n                                        <PasswordMeter\n                                            input={values.password}\n                                            has_error={!!(touched.password && errors.password)}\n                                            custom_feedback_messages={\n                                                getErrorMessages().password_warnings as unknown as Record<\n                                                    string,\n                                                    string\n                                                >\n                                            }\n                                        >\n                                            <PasswordInput\n                                                autoComplete='new-password'\n                                                className='reset-trading-password__password-field'\n                                                name='password'\n                                                label={localize('{{platform}} password', {\n                                                    platform: getCFDPlatformLabel(platform),\n                                                })}\n                                                onChange={(e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n                                                    setFieldTouched('password', true);\n                                                    handleChange(e);\n                                                }}\n                                                onBlur={handleBlur}\n                                                error={touched.password ? errors.password : ''}\n                                                value={values.password}\n                                                data-lpignore='true'\n                                                required\n                                            />\n                                        </PasswordMeter>\n                                    </fieldset>\n                                    <Text as='p' size='xs' className='reset-trading-password__hint'>\n                                        {platform === CFD_PLATFORMS.MT5 ? (\n                                            <Localize i18n_default_text='Your password must contain between 8-16 characters that include uppercase and lowercase letters, and at least one number and special character such as ( _ @ ? ! / # ).' />\n                                        ) : (\n                                            <Localize i18n_default_text='Strong passwords contain at least 8 characters, combine uppercase and lowercase letters, numbers, and symbols.' />\n                                        )}\n                                    </Text>\n                                    <FormSubmitButton\n                                        is_disabled={!values.password || !!errors.password || isSubmitting}\n                                        has_cancel\n                                        cancel_label={localize('Cancel')}\n                                        onCancel={() => toggleResetTradingPasswordModal(false)}\n                                        is_loading={isSubmitting}\n                                        label={localize('Create')}\n                                    />\n                                </div>\n                            )}\n                        </React.Fragment>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\ntype TResetTradingPasswordModal = {\n    disableApp: () => void;\n    enableApp: () => void;\n    is_loading: boolean;\n    is_visible: boolean;\n} & TResetTradingPassword;\n\nexport const ResetTradingPasswordModal = ({\n    disableApp,\n    enableApp,\n    is_loading,\n    is_visible,\n    toggleResetTradingPasswordModal,\n    verification_code,\n    platform,\n}: TResetTradingPasswordModal) => {\n    const [dialog_title, setDialogTitle] = React.useState('');\n    const history = useHistory();\n    React.useEffect(() => {\n        if (is_visible && history.location.search !== '') {\n            history.replace({\n                search: '',\n                hash: location.hash,\n            });\n        }\n    }, [history, is_visible]);\n\n    const setDialogTitleFunc = (is_invalid_token: boolean) => {\n        setDialogTitle(\n            is_invalid_token\n                ? localize('Reset {{platform}} password', {\n                      platform: getCFDPlatformLabel(platform),\n                  })\n                : ''\n        );\n    };\n\n    return (\n        <Dialog\n            className='reset-trading-password__dialog'\n            disableApp={disableApp}\n            enableApp={enableApp}\n            has_close_icon={!!dialog_title}\n            is_loading={is_loading}\n            is_visible={is_visible}\n            onConfirm={() => toggleResetTradingPasswordModal(false)}\n            title={dialog_title}\n        >\n            <ResetTradingPassword\n                toggleResetTradingPasswordModal={toggleResetTradingPasswordModal}\n                verification_code={verification_code}\n                setDialogTitleFunc={setDialogTitleFunc}\n                platform={platform}\n            />\n        </Dialog>\n    );\n};\n","import { ResetTradingPasswordModal } from './reset-trading-password-modal';\n\nexport default ResetTradingPasswordModal;\n","import { useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { CFD_PLATFORMS } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport ResetTradingPasswordModal from '../Components/reset-trading-password-modal';\nimport { TPlatforms } from '../Types';\n\nconst ResetTradingPassword = observer(() => {\n    const { ui, client } = useStore();\n    const { enableApp, disableApp, is_loading, setCFDPasswordResetModal, is_cfd_reset_password_modal_enabled } = ui;\n    const location = useLocation();\n    const platform = useRef('');\n    const query_params = new URLSearchParams(location.search);\n    const cfd_platform = /^trading_platform_(.*)_password_reset$/.exec(query_params.get('action') ?? '')?.[1];\n    if (cfd_platform) {\n        /**\n         * Keep the platform value reference to avoid value loss when modal re-renders due to route re-direction\n         */\n        platform.current = cfd_platform;\n    }\n\n    const verification_code =\n        platform.current === CFD_PLATFORMS.MT5\n            ? client.verification_code.trading_platform_mt5_password_reset\n            : client.verification_code.trading_platform_dxtrade_password_reset;\n\n    return (\n        <ResetTradingPasswordModal\n            platform={platform.current as TPlatforms}\n            enableApp={enableApp}\n            disableApp={disableApp}\n            toggleResetTradingPasswordModal={setCFDPasswordResetModal}\n            is_visible={is_cfd_reset_password_modal_enabled}\n            is_loading={is_loading}\n            verification_code={verification_code}\n        />\n    );\n});\n\nResetTradingPassword.displayName = 'ResetTradingPassword';\n\nexport default ResetTradingPassword;\n","import { useEffect, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { observer, useStore } from '@deriv/stores';\nimport { useDevice } from '@deriv-com/ui';\nimport { Snackbar } from '@deriv-com/quill-ui';\nimport './network-status-toast-popup.scss';\n\ntype TNetworkStatusToast = {\n    status: string;\n    portal_id: string;\n    message: string;\n};\n\nconst NetworkStatusToast = ({ status, portal_id, message }: TNetworkStatusToast) => {\n    const [is_visible, setIsVisible] = useState(false);\n    const { isMobile } = useDevice();\n    const new_portal_id = document.getElementById(portal_id);\n\n    useEffect(() => {\n        if (!new_portal_id || !message || !isMobile) return;\n        if (!is_visible && status !== 'online') {\n            setIsVisible(true);\n        } else if (is_visible && status === 'online') {\n            setTimeout(() => {\n                setIsVisible(false);\n            }, 1500);\n        }\n    }, [isMobile, is_visible, message, new_portal_id, status]);\n\n    if (!new_portal_id || !message || !isMobile) return null;\n\n    return createPortal(\n        <div className='network-status__container'>\n            <Snackbar hasCloseButton={false} message={message} isVisible={is_visible} />\n        </div>,\n        new_portal_id\n    );\n};\n\nconst NetworkStatusToastPopup = observer(() => {\n    const {\n        common: { network_status },\n    } = useStore();\n    return <NetworkStatusToast portal_id='popup_root' message={network_status.tooltip} status={network_status.class} />;\n});\n\nexport default NetworkStatusToastPopup;\n","import Routes from './Containers/routes';\nimport ResetTradingPassword from './Containers/reset-trading-password';\nimport NetworkStatusToastPopup from './Components/network-status-toast-popup/network-status-toast-popup';\nimport { APIProvider } from '@deriv/api';\nimport { StoreProvider } from '@deriv/stores';\nimport { TCoreStores } from '@deriv/stores/types';\nimport { POIProvider } from '@deriv/shared';\nimport { BreakpointProvider } from '@deriv-com/quill-ui';\n\n// TODO: add correct types for WS after implementing them\ntype TAppProps = {\n    passthrough: {\n        root_store: TCoreStores;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        WS: Record<string, any>;\n    };\n};\n\nconst App = ({ passthrough }: TAppProps) => {\n    const { root_store } = passthrough;\n\n    const { notification_messages_ui: Notifications } = root_store.ui;\n\n    return (\n        <StoreProvider store={root_store}>\n            <APIProvider>\n                <POIProvider>\n                    <BreakpointProvider>\n                        {Notifications && <Notifications />}\n                        <Routes />\n                        <ResetTradingPassword />\n                    </BreakpointProvider>\n                </POIProvider>\n            </APIProvider>\n            <NetworkStatusToastPopup />\n        </StoreProvider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport { Icon, Text, Button } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { observer, useStore } from '@deriv/stores';\nimport { localize } from '@deriv/translations';\n\ntype TIconWithMessage = {\n    icon: string;\n    has_button?: boolean;\n    message: string;\n};\n\nconst IconWithMessage = observer(({ has_button, icon, message }: TIconWithMessage) => {\n    const { client, ui } = useStore();\n    const { isDesktop } = useDevice();\n    const { has_any_real_account: has_real_account } = client;\n    const { toggleAccountsDialog, toggleShouldShowRealAccountsList } = ui;\n\n    return (\n        <div className='da-icon-with-message'>\n            <Icon icon={icon} size={128} />\n            <Text\n                className='da-icon-with-message__text'\n                as='p'\n                color='general'\n                size={isDesktop ? 's' : 'xs'}\n                line_height='m'\n                weight='bold'\n            >\n                {message}\n            </Text>\n            {has_button && (\n                <Button\n                    primary\n                    onClick={() => {\n                        toggleShouldShowRealAccountsList(true);\n                        toggleAccountsDialog();\n                    }}\n                    className='account__demo-message-button'\n                    data-testid='icon-with-message-button'\n                >\n                    {has_real_account ? localize('Switch to real account') : localize('Add a real account')}\n                </Button>\n            )}\n        </div>\n    );\n});\n\nexport default IconWithMessage;\n","import IconWithMessage from './icon-with-message';\nimport './icon-with-message.scss';\n\nexport default IconWithMessage;\n","import DemoMessage from './demo-message';\n\nexport default DemoMessage;\n","import { useTranslations } from '@deriv-com/translations';\nimport IconWithMessage from '../icon-with-message';\n\ntype TDemoMessage = {\n    has_button?: boolean;\n};\n\nconst DemoMessage = ({ has_button }: TDemoMessage) => {\n    const { localize } = useTranslations();\n    return (\n        <IconWithMessage\n            icon='IcPoaLock'\n            message={localize('This feature is not available for demo accounts.')}\n            has_button={has_button}\n        />\n    );\n};\n\nexport default DemoMessage;\n","import { PageError } from '@deriv/components';\nimport { Localize } from '@deriv-com/translations';\nimport { routes } from '@deriv/shared';\n\ntype TErrorComponent = {\n    header: JSX.Element | string;\n    message: JSX.Element | string;\n    redirect_label: string;\n    redirectOnClick: (() => void) | null;\n    should_show_refresh: boolean;\n};\n\nconst ErrorComponent = ({\n    header,\n    message,\n    redirect_label,\n    redirectOnClick,\n    should_show_refresh = true,\n}: Partial<TErrorComponent>) => {\n    const refresh_message: JSX.Element | string = should_show_refresh ? (\n        <Localize i18n_default_text='Please refresh this page to continue.' />\n    ) : (\n        ''\n    );\n\n    return (\n        <PageError\n            header={header || <Localize i18n_default_text='Oops, something went wrong.' />}\n            messages={\n                message\n                    ? [message, refresh_message]\n                    : [\n                          <Localize\n                              i18n_default_text='Sorry, an error occurred while processing your request.'\n                              key={0}\n                          />,\n                          refresh_message,\n                      ]\n            }\n            redirect_urls={[routes.trade]}\n            redirect_labels={[redirect_label ?? <Localize i18n_default_text='Refresh' />]}\n            buttonOnClick={redirectOnClick ?? (() => location.reload())}\n        />\n    );\n};\n\nexport default ErrorComponent;\n","import ErrorComponent from './error-component';\n\nexport default ErrorComponent;\n","import React from 'react';\nimport clsx from 'clsx';\n\nimport { Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { Localize } from '@deriv/translations';\n\nexport type TFormBodySection = {\n    /**\n     *  A boolean value indicating whether the section has a side note.\n     */\n    has_side_note?: boolean;\n    /**\n     * The side note to display next to the main content.\n     */\n    side_note?: string | React.ReactElement;\n    /**\n     * The position of the side note relative to the main content.\n     * @default 'left'\n     * */\n    side_note_position?: 'left' | 'right';\n    /**\n     * The type of the side note either it can be locaziled string (`localize or Localize`) component or image as JSX element.\n     * @default 'text'\n     * */\n    type?: 'text' | 'image';\n};\n\n/**\n *  A component that renders a form body section with an optional side note.\n *\n *  This component renders a section of a form body. It can optionally display a side note\n *  and allows reversing the order of the side note and the main content.\n *  @returns {JSX.Element} A React component that renders a form body section.\n */\nconst FormBodySection = ({\n    children,\n    has_side_note,\n    side_note,\n    side_note_position = 'left',\n    type = 'text',\n}: React.PropsWithChildren<TFormBodySection>): JSX.Element => {\n    const { isDesktop } = useDevice();\n    if (has_side_note) {\n        return (\n            <div\n                data-testid='dt_side_note_container'\n                className={clsx('account-form__section', {\n                    'account-form__section--reversed': side_note_position === 'right',\n                })}\n            >\n                <div\n                    className={clsx('account-form__section-side-note', {\n                        'account-form__section-side-note__example': type !== 'text',\n                    })}\n                >\n                    {type === 'text' ? (\n                        <Text color='less-prominent' size={isDesktop ? 'xs' : 'xxs'} data-testid='dt_side_note_text'>\n                            {side_note}\n                        </Text>\n                    ) : (\n                        <React.Fragment>\n                            <Text as='p' size={isDesktop ? 'xs' : 'xxs'} weight='bold'>\n                                <Localize i18n_default_text='Example :' />\n                            </Text>\n                            <div className='account-form__section-side-note__example-image'>{side_note}</div>\n                        </React.Fragment>\n                    )}\n                </div>\n                <div className='account-form__section-content'>{children}</div>\n            </div>\n        );\n    }\n    return children as JSX.Element;\n};\n\nexport default FormBodySection;\n","import FormBodySection from './form-body-section';\n\nexport default FormBodySection;\n","import clsx from 'clsx';\nimport React from 'react';\nimport { ThemedScrollbars } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TScrollbarsContainer = {\n    className?: string;\n    scroll_offset?: string;\n    isFullHeight?: boolean;\n};\n\nexport const ScrollbarsContainer = ({\n    children,\n    className,\n    scroll_offset,\n    isFullHeight = false,\n}: React.PropsWithChildren<TScrollbarsContainer>) => {\n    const { isDesktop } = useDevice();\n    const height_unit = isFullHeight ? '100vh' : '100%';\n    return (\n        <ThemedScrollbars\n            is_bypassed={!isDesktop}\n            height={scroll_offset ? `calc(${height_unit} - ${scroll_offset})` : '100%'}\n        >\n            <div className={clsx('account__scrollbars_container', className)} data-testid='dt_scrollbar_container_div'>\n                {children}\n            </div>\n        </ThemedScrollbars>\n    );\n};\n","import { FormBody } from './form-body';\n\nexport default FormBody;\n","// [TODO] - To be removed once CFD is configured to use the new form-body component\nimport React, { PropsWithChildren, Fragment } from 'react';\nimport { ScrollbarsContainer } from '../scrollbars-container/scrollbars-container';\nimport { Div100vhContainer } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport clsx from 'clsx';\n\ntype TFormBody = {\n    scroll_offset?: string;\n    className?: string;\n    isFullHeight?: boolean;\n};\n\nexport const FormBody = ({ children, scroll_offset, className, isFullHeight }: PropsWithChildren<TFormBody>) => {\n    const { isDesktop } = useDevice();\n    return (\n        <Fragment>\n            {isDesktop ? (\n                <ScrollbarsContainer\n                    className={clsx('account__scrollbars_container--grid-layout', className)}\n                    scroll_offset={scroll_offset}\n                    isFullHeight={isFullHeight}\n                >\n                    {children}\n                </ScrollbarsContainer>\n            ) : (\n                <Div100vhContainer\n                    className={clsx('account__scrollbars_container--grid-layout', className)}\n                    height_offset={scroll_offset || '100%'}\n                >\n                    {children}\n                </Div100vhContainer>\n            )}\n        </Fragment>\n    );\n};\n","import React from 'react';\nimport clsx from 'clsx';\n\nexport type TFormFooter = {\n    className?: string;\n};\n\nconst FormFooter = ({ children, className }: React.PropsWithChildren<TFormFooter>) => (\n    <div className={clsx('account-form__footer', className)} data-testid='form-footer-container'>\n        {children}\n    </div>\n);\n\nexport default FormFooter;\n","import FormFooter from './form-footer';\n\nexport default FormFooter;\n","// [TODO] - To be removed once CFD is configured to use the new form-body component\nimport React, { Fragment } from 'react';\nimport clsx from 'clsx';\nimport { Text } from '@deriv/components';\n\nexport type TFormSubHeader = {\n    description?: string;\n    subtitle?: string;\n    title: string;\n    title_text_size?: string;\n};\n\nexport const FormSubHeader = ({ description, subtitle, title, title_text_size = 'xs' }: TFormSubHeader) => {\n    const title_as_class = title.replace(/\\s+/g, '-').toLowerCase();\n\n    return (\n        <Fragment>\n            <div\n                className={clsx('account-form__header', title_as_class, {\n                    'account-form__header--has-description': !!description,\n                })}\n                data-testid='form-sub-header'\n            >\n                <div className='account-form__header-section'>\n                    <Text\n                        as='h1'\n                        color='prominent'\n                        weight='bold'\n                        size={title_text_size}\n                        className='account-form__title'\n                    >\n                        {title}\n                    </Text>\n                    {subtitle && (\n                        <Text as='h2' size='xxxs' color='prominent' className='account-form__subtitle'>\n                            {subtitle}\n                        </Text>\n                    )}\n                </div>\n            </div>\n            {description && (\n                <Text as='p' className='account-form__description'>\n                    {description}\n                </Text>\n            )}\n        </Fragment>\n    );\n};\n","import { FormSubHeader } from './form-sub-header';\n\nexport default FormSubHeader;\n","import React from 'react';\nimport { FieldInputProps, FormikHelpers, FormikState, Field } from 'formik';\nimport { Input } from '@deriv/components';\n\ntype FormInputFieldProps = {\n    name: string;\n    optional?: boolean;\n    warn?: string;\n} & React.ComponentProps<typeof Input>;\n\ntype TFormInputFieldHelpers<T> = {\n    field: FieldInputProps<string>;\n    form: FormikHelpers<T> & FormikState<T>;\n};\n\n/**\n * FormInputField is a wrapper around Input that can be used with Formik.\n * @name FormInputField\n * @param name - Name of the field\n * @param [optional] - Whether the field is optional\n * @param [warn] - Display a warning message\n * @param [props] - Other props to pass to Input\n * @returns ReactNode\n */\nconst FormInputField = ({ name, warn, ...rest }: FormInputFieldProps) => (\n    <Field name={name}>\n        {({ field, form: { errors, touched, setFieldTouched } }: TFormInputFieldHelpers<Record<string, string>>) => {\n            return (\n                <Input\n                    {...field}\n                    {...rest}\n                    type='text'\n                    autoComplete='off'\n                    error={touched[field.name] && errors[field.name] ? errors[field.name] : undefined}\n                    warn={warn}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                        !touched[field.name] && setFieldTouched(field.name);\n                        field.onChange(e);\n                    }}\n                />\n            );\n        }}\n    </Field>\n);\n\nexport default FormInputField;\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors\n// [TODO] - Remove React after CFD is configured with new JSX transformer\nimport React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { DateOfBirthPicker } from '@deriv/components';\nimport { toMoment } from '@deriv/shared';\n\ntype TDateOfBirthFieldProps = {\n    name: string;\n    portal_id: string;\n} & Omit<React.ComponentProps<typeof DateOfBirthPicker>, 'onBlur' | 'onChange' | 'error'>;\n\n/**\n * DateOfBirthField is a wrapper around DateOfBirthPicker that can be used with Formik.\n * @name DateOfBirthField\n * @param name - Name of the field\n * @param portal_id - Portal ID\n * @param [props] - Other props to pass to DateOfBirthPicker\n * @returns {ReactNode}\n */\nconst DateOfBirthField = ({ name, portal_id, ...rest }: TDateOfBirthFieldProps) => (\n    <Field name={name}>\n        {({ field, form: { setFieldValue }, meta: { error, touched } }: FieldProps<string | moment.Moment>) => (\n            <DateOfBirthPicker\n                {...rest}\n                {...field}\n                error={touched ? error : undefined}\n                name={name}\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onChange={({ target }: any) =>\n                    setFieldValue(name, target?.value ? toMoment(target.value).format('YYYY-MM-DD') : '', true)\n                }\n                portal_id={portal_id}\n            />\n        )}\n    </Field>\n);\n\nexport default DateOfBirthField;\n","import React from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { Dropdown, SelectNative } from '@deriv/components';\nimport { useTranslations } from '@deriv-com/translations';\nimport { getEmploymentStatusList } from '../../../Constants/financial-information-list';\nimport { useDevice } from '@deriv-com/ui';\nimport clsx from 'clsx';\n\ntype TEmploymentStatusFieldProps = {\n    required: boolean;\n    is_disabled: boolean;\n    fieldFocused?: boolean;\n};\n\nconst EmploymentStatusField = ({ required, is_disabled, fieldFocused }: TEmploymentStatusFieldProps) => {\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    return (\n        <Field name='employment_status'>\n            {({ field, form: { setFieldValue, setFieldTouched, handleBlur, handleChange }, meta }: FieldProps) => (\n                <div className='employment-status-field'>\n                    {isDesktop ? (\n                        <Dropdown\n                            {...field}\n                            placeholder={required ? localize('Employment status*') : localize('Employment status')}\n                            is_align_text_left\n                            name={field.name}\n                            list={getEmploymentStatusList()}\n                            value={field.value}\n                            onChange={(e: { target: { name: string; value: string } }) => {\n                                setFieldValue('tin_skipped', 0, true);\n                                setFieldValue(field.name, e.target?.value, true);\n                                handleChange(e);\n                            }}\n                            handleBlur={handleBlur}\n                            error={meta.touched ? meta.error : undefined}\n                            disabled={is_disabled}\n                            className={clsx('dropdown-field', { 'focus-field': fieldFocused })}\n                        />\n                    ) : (\n                        <SelectNative\n                            {...field}\n                            placeholder={localize('Please select')}\n                            name={field.name}\n                            label={required ? localize('Employment status*') : localize('Employment status')}\n                            list_items={getEmploymentStatusList()}\n                            value={field.value}\n                            error={meta.touched ? meta.error : undefined}\n                            onChange={(e: React.ChangeEvent<HTMLSelectElement>) => {\n                                setFieldValue('tin_skipped', 0, true);\n                                setFieldTouched('employment_status', true);\n                                handleChange(e);\n                            }}\n                            disabled={is_disabled}\n                            className={clsx({ 'focus-field': fieldFocused })}\n                        />\n                    )}\n                </div>\n            )}\n        </Field>\n    );\n};\n\nexport default EmploymentStatusField;\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\n//@ts-nocheck [TODO] - Need to fix typescript errors in Autocomplete & SelectNative components\n\nimport { ChangeEvent } from 'react';\nimport { Field, FieldProps } from 'formik';\nimport { ResidenceList } from '@deriv/api-types';\nimport { Autocomplete, SelectNative, Popover } from '@deriv/components';\nimport { useResidenceList } from '@deriv/hooks';\nimport { TItem } from '@deriv/components/src/components/dropdown-list';\nimport { useTranslations } from '@deriv-com/translations';\nimport { useDevice } from '@deriv-com/ui';\nimport clsx from 'clsx';\n\ntype TTaxResidenceFieldProps = {\n    required?: boolean;\n    setIsTaxResidencePopoverOpen: (is_open: boolean) => void;\n    setIsTinPopoverOpen: (is_open: boolean) => void;\n    is_tax_residence_popover_open: boolean;\n    disabled: boolean;\n    fieldFocused?: boolean;\n};\n\nconst TaxResidenceField = ({\n    required = false,\n    setIsTaxResidencePopoverOpen,\n    setIsTinPopoverOpen,\n    is_tax_residence_popover_open,\n    disabled,\n    fieldFocused,\n}: TTaxResidenceFieldProps) => {\n    const { data: residence_list } = useResidenceList();\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    return (\n        <Field name='tax_residence'>\n            {({ field, form: { setFieldValue }, meta }: FieldProps) => (\n                <div className='details-form__tax'>\n                    {isDesktop ? (\n                        <Autocomplete\n                            {...field}\n                            data-lpignore='true'\n                            autoComplete='off' // prevent chrome autocomplete\n                            label={required ? localize('Tax residence*') : localize('Tax residence')}\n                            error={meta.touched ? meta.error : undefined}\n                            list_items={residence_list}\n                            onItemSelection={(item: TItem) => {\n                                setFieldValue(\n                                    'tax_residence',\n                                    (item as ResidenceList[0]).value ? (item as ResidenceList[0]).text : '',\n                                    true\n                                );\n                            }}\n                            data-testid='tax_residence'\n                            disabled={disabled}\n                            required={required}\n                            className={clsx({ 'focus-field': fieldFocused })}\n                        />\n                    ) : (\n                        <SelectNative\n                            {...field}\n                            placeholder={required ? localize('Tax residence*') : localize('Tax residence')}\n                            name={field.name}\n                            label={required ? localize('Tax residence*') : localize('Tax residence')}\n                            list_items={residence_list}\n                            value={field.value}\n                            use_text\n                            error={meta.touched ? meta.error : ''}\n                            onChange={(e: ChangeEvent<HTMLSelectElement>) => {\n                                field.onChange(e);\n                                setFieldValue('tax_residence', e.target.value, true);\n                            }}\n                            required={required}\n                            data_testid='tax_residence_mobile'\n                            disabled={disabled}\n                            className={clsx({ 'focus-field': fieldFocused })}\n                        />\n                    )}\n                    <div\n                        data-testid='tax_residence_pop_over'\n                        onClick={e => {\n                            setIsTaxResidencePopoverOpen(true);\n                            setIsTinPopoverOpen(false);\n                            e.stopPropagation();\n                        }}\n                    >\n                        <Popover\n                            alignment={isDesktop ? 'right' : 'left'}\n                            icon='info'\n                            message={localize(\n                                'The country in which you meet the criteria for paying taxes. Usually the country in which you physically reside.'\n                            )}\n                            zIndex='9998'\n                            disable_message_icon\n                            is_open={is_tax_residence_popover_open}\n                        />\n                    </div>\n                </div>\n            )}\n        </Field>\n    );\n};\n\nexport default TaxResidenceField;\n","import { Localize, useTranslations } from '@deriv-com/translations';\nimport FormInputField from './form-input-field';\nimport { Popover } from '@deriv/components';\nimport { OECD_TIN_FORMAT_URL } from '../../../Constants/external-urls';\nimport { useDevice } from '@deriv-com/ui';\nimport clsx from 'clsx';\n\ntype TTaxIdentificationNumberFieldProps = {\n    required?: boolean;\n    disabled: boolean;\n    is_tin_popover_open: boolean;\n    setIsTinPopoverOpen: (is_open: boolean) => void;\n    setIsTaxResidencePopoverOpen: (is_open: boolean) => void;\n    fieldFocused?: boolean;\n};\n\nconst TaxIdentificationNumberField = ({\n    required = false,\n    is_tin_popover_open,\n    setIsTinPopoverOpen,\n    setIsTaxResidencePopoverOpen,\n    disabled,\n    fieldFocused,\n}: TTaxIdentificationNumberFieldProps) => {\n    const { localize } = useTranslations();\n\n    const { isDesktop } = useDevice();\n\n    return (\n        <div className='details-form__tax'>\n            <FormInputField\n                name='tax_identification_number'\n                label={required ? localize('Tax identification number*') : localize('Tax identification number')}\n                placeholder={localize('Tax identification number')}\n                data-testid='tax_identification_number'\n                disabled={disabled}\n                required={required}\n                className={clsx({ 'focus-field': fieldFocused })}\n            />\n            <div\n                data-testid='tax_identification_number_pop_over'\n                onClick={e => {\n                    setIsTaxResidencePopoverOpen(false);\n                    setIsTinPopoverOpen(true);\n                    if ((e.target as HTMLElement).tagName !== 'A') e.stopPropagation();\n                }}\n            >\n                <Popover\n                    alignment={isDesktop ? 'right' : 'left'}\n                    icon='info'\n                    is_open={is_tin_popover_open}\n                    message={\n                        <Localize\n                            i18n_default_text={\n                                \"Don't know your tax identification number? Click <0>here</0> to learn more.\"\n                            }\n                            components={[\n                                <a\n                                    key={0}\n                                    className='link link--red'\n                                    rel='noopener noreferrer'\n                                    target='_blank'\n                                    href={OECD_TIN_FORMAT_URL}\n                                />,\n                            ]}\n                        />\n                    }\n                    zIndex='9998'\n                    disable_message_icon\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default TaxIdentificationNumberField;\n","export const OECD_TIN_FORMAT_URL =\n    'https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/';\n","import React from 'react';\nimport { useFormikContext } from 'formik';\n\ntype TScrollToFieldWithError = {\n    fields_to_scroll_top?: string[];\n    fields_to_scroll_bottom?: string[];\n    should_recollect_inputs_names?: boolean;\n};\n\nconst ScrollToFieldWithError = ({\n    fields_to_scroll_top,\n    fields_to_scroll_bottom,\n    should_recollect_inputs_names = false,\n}: TScrollToFieldWithError) => {\n    const [all_page_inputs_names, setAllPageInputsNames] = React.useState<string[]>([]);\n    const { errors, isSubmitting } = useFormikContext();\n    const scrollToElement = (element_name: string, block: ScrollLogicalPosition = 'center') => {\n        if (!element_name) return;\n        const el = document.querySelector(`[name=\"${element_name}\"]`) as HTMLInputElement;\n        const target_element = el?.parentElement ?? el;\n        if (typeof target_element?.scrollIntoView === 'function') {\n            target_element?.scrollIntoView({ behavior: 'smooth', block });\n        }\n        if (el?.type !== 'radio') el?.focus();\n    };\n\n    React.useEffect(() => {\n        const inputs = [...document.querySelectorAll('input, select')] as HTMLInputElement[];\n        setAllPageInputsNames(inputs.map(input => input.name));\n    }, [should_recollect_inputs_names]);\n    React.useEffect(() => {\n        const current_error_field_name =\n            all_page_inputs_names.find(input_name => Object.prototype.hasOwnProperty.call(errors, input_name)) || '';\n\n        if (fields_to_scroll_top?.includes(current_error_field_name)) {\n            scrollToElement(current_error_field_name, 'start');\n        } else if (fields_to_scroll_bottom?.includes(current_error_field_name)) {\n            scrollToElement(current_error_field_name, 'end');\n        } else {\n            scrollToElement(current_error_field_name);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isSubmitting]);\n\n    return null;\n};\n\nexport default ScrollToFieldWithError;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { Div100vhContainer, Text } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TIconMessageContent = {\n    className?: string;\n    full_width?: boolean;\n    icon: React.ReactElement;\n    is_disabled_for_mobile?: boolean;\n    message: React.ReactNode;\n    text?: React.ReactNode;\n};\n\nconst IconMessageContent = ({\n    children,\n    className,\n    full_width,\n    icon,\n    is_disabled_for_mobile = false,\n    message,\n    text,\n}: React.PropsWithChildren<TIconMessageContent>) => {\n    const { isDesktop } = useDevice();\n\n    return (\n        <Div100vhContainer\n            className={clsx('account-management__message-wrapper', {\n                'account-management__message-wrapper-full-width': full_width,\n            })}\n            is_disabled={isDesktop || is_disabled_for_mobile}\n            height_offset='110px'\n        >\n            <div\n                className={clsx('account-management__message-content', {\n                    [`${className}__message-content`]: className,\n                })}\n            >\n                {icon && (\n                    <div\n                        className={clsx('account-management__message-icon', {\n                            [`${className}__message-icon`]: className,\n                        })}\n                    >\n                        {icon}\n                    </div>\n                )}\n                <Text\n                    as='div'\n                    color='general'\n                    weight='bold'\n                    align='center'\n                    className={clsx('account-management__message', {\n                        [`${className}__message`]: className,\n                    })}\n                >\n                    {message}\n                </Text>\n                {text && (\n                    <div className='account-management__text-container'>\n                        <Text\n                            className={clsx({\n                                [`${className}__text`]: className,\n                            })}\n                            as='p'\n                            size='xs'\n                            align='center'\n                        >\n                            {text}\n                        </Text>\n                    </div>\n                )}\n                {children}\n            </div>\n        </Div100vhContainer>\n    );\n};\n\nexport default IconMessageContent;\n","import IconMessageContent from './icon-message-content';\n\nexport default IconMessageContent;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\n\ntype TInlineNoteWithIconExtend = {\n    icon?: string;\n    font_size?: string;\n    message: React.ReactNode;\n    title: React.ReactNode;\n};\n\nconst InlineNoteWithIcon = ({ icon, message, font_size = 'xxxs', title }: TInlineNoteWithIconExtend) => {\n    return (\n        <div className='da-inline-note-with-icon'>\n            {icon && (\n                <div>\n                    <Icon icon={icon} size={16} />\n                </div>\n            )}\n            <Text as='p' size={font_size} line_height='s'>\n                {title && <strong> {title} </strong>}\n                {message}\n            </Text>\n        </div>\n    );\n};\n\nexport default InlineNoteWithIcon;\n","import InlineNoteWithIcon from './inline-note-with-icon';\nimport './inline-note-with-icon.scss';\n\nexport default InlineNoteWithIcon;\n","import React from 'react';\nimport { useHistory, useLocation, RouteComponentProps, withRouter } from 'react-router-dom';\nimport { FormikConsumer } from 'formik';\nimport { Button, Icon, Modal } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport IconMessageContent from '../icon-message-content';\nimport { useDevice } from '@deriv-com/ui';\n\ntype TLeaveConfirmMessage = {\n    back: () => void;\n    leave: () => void;\n};\ntype TTransitionBlocker = RouteComponentProps & {\n    dirty: boolean;\n    onDirty?: (prop: boolean) => void;\n};\n\nconst LeaveConfirmMessage = ({ back, leave }: TLeaveConfirmMessage) => {\n    const { isMobile } = useDevice();\n\n    return (\n        <IconMessageContent\n            className='leave-confirm'\n            message={localize('Unsaved changes')}\n            text={localize('You have unsaved changes. Are you sure you want to discard changes and leave this page?')}\n            icon={<Icon icon='IcUnsavedChanges' size={isMobile ? 93 : 128} data_testid='dt_unsaved_changes_icon' />}\n            is_disabled_for_mobile={true}\n        >\n            <div className='account-management-flex-wrapper account-management-leave-confirm'>\n                <Button type='button' has_effect onClick={back} text={localize('Cancel')} secondary large={isMobile} />\n                <Button\n                    type='button'\n                    has_effect\n                    onClick={leave}\n                    text={localize('Leave Settings')}\n                    primary\n                    large={isMobile}\n                />\n            </div>\n        </IconMessageContent>\n    );\n};\n/**\n *\\ Blocks routing if Formik form is dirty\n * Has to be a child of <Formik> for FormikConsumer to work\n */\nexport const TransitionBlocker = ({ dirty, onDirty }: TTransitionBlocker) => {\n    const history = useHistory();\n    const location = useLocation();\n    const { isMobile } = useDevice();\n    const [showModal, setShowModal] = React.useState(false);\n    const [nextLocation, setNextLocation] = React.useState(location.pathname);\n    React.useEffect(() => {\n        const unblock = history.block((location: Location) => {\n            if (dirty && !showModal) {\n                if (onDirty) onDirty(false);\n                setNextLocation(location.pathname);\n                setShowModal(true);\n                return false;\n            }\n            return true;\n        });\n        return () => unblock();\n    }, [dirty, showModal, history, onDirty]);\n    const leave = React.useCallback(() => {\n        if (nextLocation) {\n            setShowModal(false);\n            history.push(nextLocation);\n            if (onDirty) {\n                onDirty(false);\n            }\n        }\n    }, [nextLocation, history, onDirty]);\n    const back = () => {\n        setShowModal(false);\n        setNextLocation(location.pathname);\n        if (onDirty) {\n            onDirty(true);\n        }\n    };\n    return (\n        <>\n            {showModal && isMobile ? (\n                <LeaveConfirmMessage back={back} leave={leave} />\n            ) : (\n                <Modal is_open={showModal} small toggleModal={back}>\n                    <Modal.Body>\n                        <LeaveConfirmMessage back={back} leave={leave} />\n                    </Modal.Body>\n                </Modal>\n            )}\n        </>\n    );\n};\n\nexport const TransitionBlockerWithRouter = withRouter(TransitionBlocker);\nconst LeaveConfirm = ({ onDirty }: { onDirty?: (prop: boolean) => void }) => {\n    return (\n        <FormikConsumer>\n            {formik => (\n                <TransitionBlockerWithRouter onDirty={onDirty} dirty={formik.dirty && formik.submitCount === 0} />\n            )}\n        </FormikConsumer>\n    );\n};\nexport default LeaveConfirm;\n","import LeaveConfirm from './leave-confirm';\n\nexport default LeaveConfirm;\n","import { ReactNode } from 'react';\nimport { Icon } from '@deriv/components';\nimport IconMessageContent from '../icon-message-content';\n\ntype TLoadErrorMessage = {\n    error_message: ReactNode;\n};\n\nconst LoadErrorMessage = ({ error_message }: TLoadErrorMessage) => (\n    <IconMessageContent message={error_message} icon={<Icon icon='IcPoaLock' size={128} />} />\n);\n\nexport default LoadErrorMessage;\n","import LoadErrorMessage from './load-error-message';\n\nexport default LoadErrorMessage;\n","import { localize } from '@deriv-com/translations';\n\nexport const getIncomeSourceList = () => [\n    {\n        text: localize('Salaried Employee'),\n        value: 'Salaried Employee',\n    },\n    {\n        text: localize('Self-Employed'),\n        value: 'Self-Employed',\n    },\n    {\n        text: localize('Investments & Dividends'),\n        value: 'Investments & Dividends',\n    },\n    {\n        text: localize('Pension'),\n        value: 'Pension',\n    },\n    {\n        text: localize('State Benefits'),\n        value: 'State Benefits',\n    },\n    {\n        text: localize('Savings & Inheritance'),\n        value: 'Savings & Inheritance',\n    },\n];\n\nexport const getEmploymentStatusList = () => [\n    {\n        text: localize('Employed'),\n        value: 'Employed',\n    },\n    {\n        text: localize('Pensioner'),\n        value: 'Pensioner',\n    },\n    {\n        text: localize('Self-Employed'),\n        value: 'Self-Employed',\n    },\n    {\n        text: localize('Student'),\n        value: 'Student',\n    },\n    {\n        text: localize('Unemployed'),\n        value: 'Unemployed',\n    },\n];\n\nexport const getEmploymentIndustryList = () => [\n    {\n        text: localize('Construction'),\n        value: 'Construction',\n    },\n    {\n        text: localize('Education'),\n        value: 'Education',\n    },\n    {\n        text: localize('Finance'),\n        value: 'Finance',\n    },\n    {\n        text: localize('Health'),\n        value: 'Health',\n    },\n    {\n        text: localize('Tourism'),\n        value: 'Tourism',\n    },\n    {\n        text: localize('Information & Communications Technology'),\n        value: 'Information & Communications Technology',\n    },\n    {\n        text: localize('Science & Engineering'),\n        value: 'Science & Engineering',\n    },\n    {\n        text: localize('Legal'),\n        value: 'Legal',\n    },\n    {\n        text: localize('Social & Cultural'),\n        value: 'Social & Cultural',\n    },\n    {\n        text: localize('Agriculture'),\n        value: 'Agriculture',\n    },\n    {\n        text: localize('Real Estate'),\n        value: 'Real Estate',\n    },\n    {\n        text: localize('Food Services'),\n        value: 'Food Services',\n    },\n    {\n        text: localize('Manufacturing'),\n        value: 'Manufacturing',\n    },\n    {\n        text: localize('Unemployed'),\n        value: 'Unemployed',\n    },\n];\n\nexport const getOccupationList = () => [\n    {\n        text: localize('Chief Executives, Senior Officials and Legislators'),\n        value: 'Chief Executives, Senior Officials and Legislators',\n    },\n    {\n        text: localize('Managers'),\n        value: 'Managers',\n    },\n    {\n        text: localize('Professionals'),\n        value: 'Professionals',\n    },\n    {\n        text: localize('Clerks'),\n        value: 'Clerks',\n    },\n    {\n        text: localize('Personal Care, Sales and Service Workers'),\n        value: 'Personal Care, Sales and Service Workers',\n    },\n    {\n        text: localize('Agricultural, Forestry and Fishery Workers'),\n        value: 'Agricultural, Forestry and Fishery Workers',\n    },\n    {\n        text: localize('Craft, Metal, Electrical and Electronics Workers'),\n        value: 'Craft, Metal, Electrical and Electronics Workers',\n    },\n    {\n        text: localize('Plant and Machine Operators and Assemblers'),\n        value: 'Plant and Machine Operators and Assemblers',\n    },\n    {\n        text: localize('Cleaners and Helpers'),\n        value: 'Cleaners and Helpers',\n    },\n    {\n        text: localize('Mining, Construction, Manufacturing and Transport Workers'),\n        value: 'Mining, Construction, Manufacturing and Transport Workers',\n    },\n    {\n        text: localize('Armed Forces'),\n        value: 'Armed Forces',\n    },\n    {\n        text: localize('Government Officers'),\n        value: 'Government Officers',\n    },\n    {\n        text: localize('Students'),\n        value: 'Students',\n    },\n    {\n        text: localize('Unemployed'),\n        value: 'Unemployed',\n    },\n];\n\nexport const getSourceOfWealthList = () => [\n    {\n        text: localize('Accumulation of Income/Savings'),\n        value: 'Accumulation of Income/Savings',\n    },\n    {\n        text: localize('Cash Business'),\n        value: 'Cash Business',\n    },\n    {\n        text: localize('Company Ownership'),\n        value: 'Company Ownership',\n    },\n    {\n        text: localize('Divorce Settlement'),\n        value: 'Divorce Settlement',\n    },\n    {\n        text: localize('Inheritance'),\n        value: 'Inheritance',\n    },\n    {\n        text: localize('Investment Income'),\n        value: 'Investment Income',\n    },\n    {\n        text: localize('Sale of Property'),\n        value: 'Sale of Property',\n    },\n];\n\nexport const getEducationLevelList = () => [\n    {\n        text: localize('Primary'),\n        value: 'Primary',\n    },\n    {\n        text: localize('Secondary'),\n        value: 'Secondary',\n    },\n    {\n        text: localize('Tertiary'),\n        value: 'Tertiary',\n    },\n];\n\nexport const getNetIncomeList = () => [\n    {\n        text: localize('Less than $25,000'),\n        value: 'Less than $25,000',\n    },\n    {\n        text: localize('$25,000 - $50,000'),\n        value: '$25,000 - $50,000',\n    },\n    {\n        text: localize('$50,001 - $100,000'),\n        value: '$50,001 - $100,000',\n    },\n    {\n        text: localize('$100,001 - $500,000'),\n        value: '$100,001 - $500,000',\n    },\n    {\n        text: localize('Over $500,000'),\n        value: 'Over $500,000',\n    },\n];\n\nexport const getEstimatedWorthList = () => [\n    {\n        text: localize('Less than $100,000'),\n        value: 'Less than $100,000',\n    },\n    {\n        text: localize('$100,000 - $250,000'),\n        value: '$100,000 - $250,000',\n    },\n    {\n        text: localize('$250,001 - $500,000'),\n        value: '$250,001 - $500,000',\n    },\n    {\n        text: localize('$500,001 - $1,000,000'),\n        value: '$500,001 - $1,000,000',\n    },\n    {\n        text: localize('Over $1,000,000'),\n        value: 'Over $1,000,000',\n    },\n];\n\nexport const getAccountTurnoverList = () => {\n    return [...getNetIncomeList()];\n};\n\nexport const getBinaryOptionsTradingExperienceList = () => [\n    {\n        text: localize('0-1 year'),\n        value: '0-1 year',\n    },\n    {\n        text: localize('1-2 years'),\n        value: '1-2 years',\n    },\n    {\n        text: localize('Over 3 years'),\n        value: 'Over 3 years',\n    },\n];\n\nexport const getBinaryOptionsTradingFrequencyList = () => [\n    {\n        text: localize('0-5 transactions in the past 12 months'),\n        value: '0-5 transactions in the past 12 months',\n    },\n    {\n        text: localize('6-10 transactions in the past 12 months'),\n        value: '6-10 transactions in the past 12 months',\n    },\n    {\n        text: localize('11-39 transactions in the past 12 months'),\n        value: '11-39 transactions in the past 12 months',\n    },\n    {\n        text: localize('40 transactions or more in the past 12 months'),\n        value: '40 transactions or more in the past 12 months',\n    },\n];\n\nexport const getCfdTradingExperienceList = () => {\n    return [...getBinaryOptionsTradingExperienceList()];\n};\n\nexport const getCfdTradingFrequencyList = () => {\n    return [...getBinaryOptionsTradingFrequencyList()];\n};\n\nexport const getForexTradingExperienceList = () => {\n    return [...getBinaryOptionsTradingExperienceList()];\n};\n\nexport const getForexTradingFrequencyList = () => {\n    return [...getBinaryOptionsTradingFrequencyList()];\n};\n\nexport const getOtherInstrumentsTradingExperienceList = () => {\n    return [...getBinaryOptionsTradingExperienceList()];\n};\n\nexport const getOtherInstrumentsTradingFrequencyList = () => {\n    return [...getBinaryOptionsTradingFrequencyList()];\n};\n","import { localize } from '@deriv/translations';\n\n//TODO: Check if these phrases are required;\nexport const getOnfidoPhrases = () => ({\n    country_select: {\n        alert_dropdown: {\n            country_not_found: localize('Country not found'),\n        },\n        alert: {\n            another_doc: localize(\n                'Documents from that country are not currently supported — <fallback>try another document type</fallback>'\n            ),\n        },\n        button_primary: localize('Submit document'),\n        search: {\n            accessibility: localize('Select country'),\n            input_placeholder: localize('e.g. United States'),\n            label: localize('Search for country'),\n        },\n        title: localize('Select issuing country'),\n    },\n    cross_device_checklist: {\n        button_primary: localize('Submit verification'),\n        info: localize('Tips'),\n        list_item_doc_multiple: localize('Documents uploaded'),\n        list_item_doc_one: localize('Document uploaded'),\n        list_item_selfie: localize('Selfie uploaded'),\n        subtitle: localize(\"We're now ready to verify your identity\"),\n        title: localize(\"Great, that's everything we need\"),\n    },\n    cross_device_error_desktop: {\n        subtitle: localize('The link only works on mobile devices'),\n        title: localize(\"Something's gone wrong\"),\n    },\n    cross_device_error_restart: {\n        subtitle: localize(\"You'll need to restart your verification on your computer\"),\n        title: localize(\"Something's gone wrong\"),\n    },\n    cross_device_intro: {\n        button_primary: localize('Get secure link'),\n        list_accessibility: localize('Steps required to continue verification on your mobile'),\n        list_item_finish: localize('Check back here to finish the submission'),\n        list_item_open_link: localize('Open the link and complete the tasks'),\n        list_item_send_phone: localize('Send a secure link to your phone'),\n        subtitle: localize(\"Here's how to do it:\"),\n        title: localize('Continue on your phone'),\n    },\n    cross_device_return: {\n        body: localize('Your computer may take a few seconds to update'),\n        subtitle: localize('You can now return to your computer to continue'),\n        title: localize('Uploads successful'),\n    },\n    doc_confirmation: {\n        alert: {\n            blur_detail: localize('Make sure everything is clear'),\n            blur_title: localize('Blurry photo detected'),\n            crop_detail: localize('Make sure full document is visible'),\n            crop_title: localize('Cut-off image detected'),\n            glare_detail: localize('Move away from direct light'),\n            glare_title: localize('Glare detected'),\n            no_doc_detail: localize('Make sure all of the document is in the photo'),\n            no_doc_title: localize('No document detected'),\n        },\n        body_id: localize('Make sure your card details are clear to read, with no blur or glare'),\n        body_image_medium: localize('It’ll take longer to verify you if we can’t read it'),\n        body_image_poor: localize('To smoothly verify you, we need a better photo'),\n        body_license: localize('Make sure your license details are clear to read, with no blur or glare'),\n        body_passport: localize('Make sure your passport details are clear to read, with no blur or glare'),\n        body_permit: localize('Make sure your permit details are clear to read, with no blur or glare'),\n        body_tax_letter: localize('Make sure details are clear to read, with no blur or glare'),\n        button_close: localize('Close'),\n        button_primary_redo: localize('Redo'),\n        button_primary_upload: localize('Confirm'),\n        button_primary_upload_anyway: localize('Upload anyway'),\n        button_secondary_redo: localize('Redo'),\n        button_zoom: localize('Enlarge image'),\n        image_accessibility: localize('Photo of your document'),\n        title: localize('Check your image'),\n    },\n    doc_select: {\n        button_id: localize('Identity card'),\n        button_id_detail: localize('Front and back'),\n        button_license: localize(\"Driver's license\"),\n        button_license_detail: localize('Front and back'),\n        button_passport: localize('Passport'),\n        button_passport_detail: localize('Face photo page'),\n        button_permit: localize('Residence permit'),\n        button_permit_detail: localize('Front and back'),\n        extra_no_mobile: localize('Sorry, no mobile phone bills'),\n        list_accessibility: localize('Documents you can use to verify your identity'),\n        subtitle: localize('It must be an official photo ID'),\n        subtitle_poa: localize('These are the documents most likely to show your current home address'),\n        title: localize('Choose document'),\n        title_poa: localize('Select a %{country} document'),\n    },\n    doc_submit: {\n        button_link_upload: localize('or upload photo – no scans or photocopies'),\n        button_primary: localize('Continue on phone'),\n        subtitle: localize('Take a photo with your phone'),\n        title_id_back: localize('Submit identity card (back)'),\n        title_id_front: localize('Submit identity card (front)'),\n        title_license_back: localize('Submit license (back)'),\n        title_license_front: localize('Submit license (front)'),\n        title_passport: localize('Submit passport photo pages'),\n        title_permit_back: localize('Submit residence permit (back)'),\n        title_permit_front: localize('Submit residence permit (front)'),\n    },\n    error_unsupported_browser: {\n        subtitle_android: localize('Restart the process on the latest version of Google Chrome'),\n        subtitle_ios: localize('Restart the process on the latest version of Safari'),\n        title_android: localize('Unsupported browser'),\n        title_ios: localize('Unsupported browser'),\n    },\n    generic: {\n        accessibility: {\n            close_sdk_screen: localize('Close identity verification screen'),\n            dismiss_alert: localize('Dismiss alert'),\n        },\n        back: localize('back'),\n        close: localize('close'),\n        errors: {\n            interrupted_flow_error: {\n                instruction: localize('Restart process on a different device'),\n                message: localize('Camera not detected'),\n            },\n            invalid_size: {\n                instruction: localize('Must be under 10MB.'),\n                message: localize('File size exceeded.'),\n            },\n            invalid_type: {\n                instruction: localize('Try using another file type.'),\n                message: localize('File not uploaded.'),\n            },\n            lazy_loading: {\n                message: localize('An error occurred while loading the component'),\n            },\n            multiple_faces: {\n                instruction: localize('Only your face can be in the selfie'),\n                message: localize('Multiple faces found'),\n            },\n            no_face: {\n                instruction: localize('Your face is needed in the selfie'),\n                message: localize('No face found'),\n            },\n            request_error: {\n                instruction: localize('Please try again'),\n                message: localize('Connection lost'),\n            },\n            sms_failed: {\n                instruction: localize('Copy the link to your phone'),\n                message: localize(\"Something's gone wrong\"),\n            },\n            sms_overuse: {\n                instruction: localize('Copy the link to your phone'),\n                message: localize('Too many failed attempts'),\n            },\n            unsupported_file: {\n                instruction: localize('Try using a JPG or PNG file'),\n                message: localize('File type not supported'),\n            },\n        },\n        lazy_load_placeholder: localize('Loading...'),\n        loading: localize('Loading'),\n    },\n    get_link: {\n        alert_wrong_number: localize('Check that your number is correct'),\n        button_copied: localize('Copied'),\n        button_copy: localize('Copy'),\n        button_submit: localize('Send link'),\n        info_qr_how: localize('How to scan a QR code'),\n        info_qr_how_list_item_camera: localize('Point your phone’s camera at the QR code'),\n        info_qr_how_list_item_download: localize(\n            'If it doesn’t work, download a QR code scanner from Google Play or the App Store'\n        ),\n        link_divider: localize('or'),\n        link_qr: localize('Scan QR code'),\n        link_sms: localize('Get link via SMS'),\n        link_url: localize('Copy link'),\n        loader_sending: localize('Sending'),\n        number_field_input_placeholder: localize('Enter mobile number'),\n        number_field_label: localize('Enter your mobile number:'),\n        subtitle_qr: localize('Scan the QR code with your phone'),\n        subtitle_sms: localize('Send this one-time link to your phone'),\n        subtitle_url: localize('Open the link on your mobile'),\n        title: localize('Get your secure link'),\n        url_field_label: localize('Copy the link to your mobile browser'),\n    },\n    linked_computer: {\n        button_primary: localize('Continue'),\n        info: localize('Make sure'),\n        list_item_desktop_open: localize('2. Your desktop window stays open'),\n        list_item_sent_by_you: localize('1. This link was sent by you'),\n        subtitle: localize('Continue with the verification'),\n        title: localize('Linked to your computer'),\n    },\n    mobilePhrases: {\n        photo_upload: {\n            body_id_back: localize('Take a photo of the back of your card'),\n            body_id_front: localize('Take a photo of the front of your card'),\n            body_license_back: localize('Take a photo of the back of your license'),\n            body_license_front: localize('Take a photo of the front of your license'),\n            body_passport: localize('Take a photo of your passport photo page'),\n            body_selfie: localize('Take a selfie showing your face'),\n        },\n        selfie_capture: {\n            alert: {\n                camera_inactive: {\n                    detail: localize('Take a photo using the <fallback>basic camera mode</fallback> instead'),\n                },\n                camera_not_working: {\n                    detail: localize('Take a photo using the <fallback>basic camera mode</fallback> instead'),\n                },\n            },\n        },\n        upload_guide: {\n            button_primary: localize('Take a photo'),\n            title: localize('Passport photo page'),\n        },\n    },\n    outro: {\n        body: localize('Thank you'),\n        title: localize('Verification complete'),\n    },\n    permission_recovery: {\n        button_primary: localize('Refresh'),\n        info: localize('Recovery'),\n        list_header_cam: localize('Follow these steps to recover camera access:'),\n        list_item_action_cam: localize('Refresh this page to restart the identity verification process'),\n        list_item_how_to_cam: localize('Grant access to your camera from your browser settings'),\n        subtitle_cam: localize('Recover camera access to continue face verification'),\n        title_cam: localize('Camera access is denied'),\n    },\n    permission: {\n        body_cam: localize('We cannot verify you without using your camera'),\n        button_primary_cam: localize('Enable camera'),\n        subtitle_cam: localize('When prompted, you must enable camera access to continue'),\n        title_cam: localize('Allow camera access'),\n    },\n    photo_upload: {\n        body_bank_statement: localize('Provide the whole document page for best results'),\n        body_benefits_letter: localize('Provide the whole document page for best results'),\n        body_bill: localize('Provide the whole document page for best results'),\n        body_government_letter: localize('Provide the whole document page for best results'),\n        body_id_back: localize('Upload back of card from your computer'),\n        body_id_front: localize('Upload front of card from your computer'),\n        body_license_back: localize('Upload back of license from your computer'),\n        body_license_front: localize('Upload front of license from your computer'),\n        body_passport: localize('Upload passport photo page from your computer'),\n        body_selfie: localize('Upload a selfie from your computer'),\n        body_tax_letter: localize('Provide the whole document page for best results'),\n        button_take_photo: localize('Take photo'),\n        button_upload: localize('Upload'),\n        title_selfie: localize('Selfie'),\n    },\n    selfie_capture: {\n        alert: {\n            camera_inactive: {\n                detail: localize(\n                    'Check that it is connected and functional. You can also <fallback>continue verification on your phone</fallback>'\n                ),\n                detail_no_fallback: localize('Make sure your device has a working camera'),\n                title: localize('Camera not working?'),\n            },\n            camera_not_working: {\n                detail: localize('It may be disconnected. <fallback>Try using your phone instead</fallback>.'),\n                detail_no_fallback: localize(\"Make sure your device's camera works\"),\n                title: localize('Camera not working'),\n            },\n            timeout: {\n                detail: localize(\"Remember to press stop when you're done. <fallback>Redo video actions</fallback>\"),\n                title: localize('Looks like you took too long'),\n            },\n        },\n        button_accessibility: localize('Take a photo'),\n        frame_accessibility: localize('View from camera'),\n        title: localize('Take a selfie'),\n    },\n    selfie_confirmation: {\n        image_accessibility: localize('Photo of your face'),\n        subtitle: localize('Make sure your selfie clearly shows your face'),\n        title: localize('Check selfie'),\n    },\n    selfie_intro: {\n        button_primary: localize('Continue'),\n        list_accessibility: localize('Tips to take a good selfie'),\n        list_item_face_forward: localize('Face forward and make sure your eyes are clearly visible'),\n        list_item_no_glasses: localize('Remove your glasses, if necessary'),\n        subtitle: localize(\"We'll compare it with your document\"),\n        title: localize('Take a selfie'),\n    },\n    sms_sent: {\n        info: localize('Tips'),\n        info_link_expire: localize('Your link will expire in one hour'),\n        info_link_window: localize('Keep this window open while using your mobile'),\n        link: localize('Resend link'),\n        subtitle: localize(\"We've sent a secure link to %{number}\"),\n        subtitle_minutes: localize('It may take a few minutes to arrive'),\n        title: localize('Check your mobile'),\n    },\n    switch_phone: {\n        info: localize('Tips'),\n        info_link_expire: localize('Your mobile link will expire in one hour'),\n        info_link_refresh: localize(\"Don't refresh this page\"),\n        info_link_window: localize('Keep this window open while using your mobile'),\n        link: localize('Cancel'),\n        subtitle: localize(\"Once you've finished we'll take you to the next step\"),\n        title: localize('Connected to your mobile'),\n    },\n    upload_guide: {\n        button_primary: localize('Upload photo'),\n        image_detail_blur_alt: localize('Example of a blurry document'),\n        image_detail_blur_label: localize('All details must be clear — nothing blurry'),\n        image_detail_cutoff_alt: localize('Example of a cut-off document'),\n        image_detail_cutoff_label: localize('Show all details — including the bottom 2 lines'),\n        image_detail_glare_alt: localize('Example of a document with glare'),\n        image_detail_glare_label: localize('Move away from direct light — no glare'),\n        image_detail_good_alt: localize('Document example'),\n        image_detail_good_label: localize('The photo should clearly show your document'),\n        subtitle: localize('Scans and photocopies are not accepted'),\n        title: localize('Upload passport photo page'),\n    },\n});\n\nexport const LANGUAGE_CODES = {\n    ID: 'id_ID',\n    EN: 'en_US',\n};\n","import { localize } from '@deriv/translations';\n\n// Note: Ensure that the object keys matches BE API's keys. This is simply a mapping for FE templates\n\nconst getIDVDocumentConfig = () => ({\n    ke: {\n        alien_card: {\n            new_display_name: '',\n            example_format: '123456',\n        },\n        national_id: {\n            new_display_name: '',\n            example_format: '12345678',\n        },\n        passport: {\n            new_display_name: '',\n            example_format: 'A12345678',\n        },\n    },\n    za: {\n        national_id: {\n            new_display_name: localize('National ID'),\n            example_format: '1234567890123',\n        },\n        national_id_no_photo: {\n            new_display_name: localize('National ID (No Photo)'),\n            example_format: '1234567890123',\n        },\n    },\n    ng: {\n        bvn: {\n            new_display_name: localize('Bank Verification Number'),\n            example_format: '12345678901',\n        },\n        cac: {\n            new_display_name: localize('Corporate Affairs Commission'),\n            example_format: '12345678',\n        },\n        drivers_license: {\n            new_display_name: '',\n            example_format: 'ABC123456789',\n        },\n        nin: {\n            new_display_name: localize('National Identity Number'),\n            example_format: '12345678901',\n        },\n        nin_slip: {\n            new_display_name: localize('National Identity Number Slip'),\n            example_format: '12345678901',\n        },\n        tin: {\n            new_display_name: localize('Taxpayer identification number'),\n            example_format: '12345678-1234',\n        },\n        voter_id: {\n            new_display_name: localize('Voter ID'),\n            example_format: '1234567890123456789',\n        },\n    },\n    gh: {\n        drivers_license: {\n            new_display_name: '',\n            example_format: 'B1234567',\n        },\n        national_id: {\n            new_display_name: localize('National ID'),\n            example_format: 'GHA-123456789-1',\n        },\n        passport: {\n            new_display_name: localize('Passport'),\n            example_format: 'G1234567',\n        },\n        ssnit: {\n            new_display_name: localize('Social Security and National Insurance Trust'),\n            example_format: 'C123456789012',\n        },\n        voter_id: {\n            new_display_name: localize('Voter ID'),\n            example_format: '01234567890',\n        },\n    },\n    br: {\n        cpf: {\n            new_display_name: localize('CPF'),\n            example_format: '123.456.789-12',\n        },\n    },\n    ug: {\n        national_id: {\n            new_display_name: localize('National ID'),\n            example_format: 'CM12345678PE1D',\n        },\n        national_id_no_photo: {\n            new_display_name: localize('National ID (No Photo)'),\n            example_format: 'CM12345678PE1D',\n            additional_document_example_format: '0123456789',\n        },\n    },\n    zw: {\n        national_id: {\n            new_display_name: localize('National ID'),\n            example_format: '081234567F53',\n        },\n    },\n    cl: {\n        national_id: {\n            example_format: '123456789',\n        },\n    },\n    ar: {\n        dni: {\n            example_format: '12345678',\n        },\n    },\n    mx: {\n        curp: {\n            example_format: 'ABCD123456HEFGIJ00',\n        },\n    },\n    id: {\n        nik: {\n            example_format: '1234567890123456',\n        },\n    },\n    in: {\n        aadhaar: {\n            example_format: '123456789012',\n            additional_document_example_format: 'ABCDE1234F',\n        },\n        drivers_license: {\n            example_format: 'AB1234567890123',\n        },\n        epic: {\n            example_format: 'ABC1234567',\n        },\n        pan: {\n            example_format: 'ABCDE1234F',\n        },\n        passport: {\n            example_format: 'A1234567',\n            additional_document_example_format: 'AB1234567890123',\n        },\n    },\n    pe: {\n        national_id: {\n            example_format: '12345678',\n        },\n    },\n    vn: {\n        national_id: {\n            example_format: '12345678901',\n        },\n    },\n});\n\nexport const getIDVDocuments = (country_code: string) => {\n    const IDV_DOCUMENT_DATA: { [key: string]: object } = getIDVDocumentConfig();\n    return IDV_DOCUMENT_DATA[country_code];\n};\n","import React from 'react';\nimport { FormikErrors, FormikValues } from 'formik';\nimport countries from 'i18n-iso-countries';\nimport { ResidenceList, GetAccountStatus } from '@deriv/api-types';\nimport {\n    filterObjProperties,\n    toMoment,\n    validLength,\n    validName,\n    getIDVNotApplicableOption,\n    IDV_ERROR_STATUS,\n    AUTH_STATUS_CODES,\n    VERIFICATION_SERVICES,\n} from '@deriv/shared';\nimport { localize } from '@deriv-com/translations';\nimport { getIDVDocuments } from '../Configs/idv-document-config';\nimport { TServerError } from '../Types';\nimport { LANGUAGE_CODES } from '../Constants/onfido';\n\nexport const documentAdditionalError = (\n    additional_document_value: string | undefined,\n    document_additional_config: FormikValues\n) => {\n    let error_message = null;\n    if (!additional_document_value) {\n        error_message = localize('Please enter your {{document_name}}. ', {\n            document_name: document_additional_config?.display_name?.toLowerCase() ?? localize('document number'),\n        });\n    } else {\n        const format_regex = getRegex(document_additional_config?.format);\n        if (!format_regex.test(additional_document_value)) {\n            error_message = localize('Please enter the correct format. ');\n        }\n    }\n\n    return error_message;\n};\n\n// Unsupported Regex List\nconst regex = [\n    {\n        regex_string: '^(?i)G[a-zA-Z0-9]{7,9}$',\n        value: '^G[a-zA-Z0-9]{7,9}$',\n        flags: 'i',\n    },\n];\n\nconst IDV_NOT_APPLICABLE_OPTION = getIDVNotApplicableOption();\n\ntype TIDVSupportCheck = {\n    residence_list: ResidenceList;\n    account_status: GetAccountStatus;\n    real_account_signup_target: string;\n    citizen: string;\n};\n\nexport const shouldShowIdentityInformation = ({\n    account_status,\n    citizen,\n    residence_list,\n    real_account_signup_target,\n}: TIDVSupportCheck) => {\n    const country = residence_list.find(item => item.value === citizen);\n    const maltainvest = real_account_signup_target === 'maltainvest';\n    const identity = account_status?.authentication?.identity;\n\n    const is_identity_verified = identity?.status === AUTH_STATUS_CODES.VERIFIED;\n    const should_skip_idv =\n        is_identity_verified || account_status?.status?.some((status: string) => status === 'skip_idv'); //status added by BE when idv should be skipped for the user\n    return Boolean(\n        !maltainvest && citizen && country?.identity?.services?.idv?.is_country_supported && !should_skip_idv\n    );\n};\n\nexport const getDocumentData = (country_code: string, document_type: string) => {\n    const DEFAULT_CONFIG = {\n        new_display_name: '',\n        example_format: '',\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const IDV_DOCUMENT_DATA: any = getIDVDocuments(country_code);\n    if (IDV_DOCUMENT_DATA) {\n        return IDV_DOCUMENT_DATA[document_type] ?? DEFAULT_CONFIG;\n    }\n    return DEFAULT_CONFIG;\n};\n\nexport const preventEmptyClipboardPaste = (e: React.ClipboardEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const clipboardData = (e.clipboardData ?? window.clipboardData).getData('text');\n    if (clipboardData.length === 0) {\n        e.preventDefault();\n    }\n};\n\nexport const getRegex = (target_regex: string) => {\n    const output_regex = regex.find(r => r.regex_string === target_regex);\n    if (output_regex) {\n        return new RegExp(output_regex.value, output_regex.flags);\n    }\n    return new RegExp(target_regex);\n};\n\n/**\n * @param {string} selected_doc  - Could be one of the following: 'drivers_license', 'ssnit', 'id_card', 'passport'\n * @returns {string} - Returns the placeholder text for the document number input\n */\nexport const generatePlaceholderText = (selected_doc: string): string => {\n    switch (selected_doc) {\n        case 'drivers_license':\n            return localize('Enter Driver License Reference number');\n        case 'ssnit':\n            return localize('Enter your SSNIT number');\n        case 'national_id_no_photo':\n            return localize('Enter your National Identification Number (NIN)');\n        default:\n            return localize('Enter your document number');\n    }\n};\n\nexport const isFieldImmutable = (field: string, mutable_fields: string[] = []) => !mutable_fields.includes(field);\n\nexport const makeSettingsRequest = (values: FormikValues, changeable_fields: string[]) => {\n    const request = filterObjProperties(values, changeable_fields);\n\n    if (request.first_name) {\n        request.first_name = request.first_name.trim();\n    }\n    if (request.last_name) {\n        request.last_name = request.last_name.trim();\n    }\n    if (request.date_of_birth) {\n        request.date_of_birth = toMoment(request.date_of_birth).format('YYYY-MM-DD');\n    }\n\n    return request;\n};\n\nexport const validateName = (name: string) => {\n    if (name) {\n        if (!validLength(name.trim(), { min: 1, max: 50 })) {\n            return localize('Enter no more than 50 characters.');\n        } else if (!validName(name)) {\n            return localize('Letters, spaces, periods, hyphens, apostrophes only.');\n        }\n    }\n    return '';\n};\n\nexport const getExampleFormat = (example_format?: string) =>\n    example_format ? localize('Example: ') + example_format : '';\n\nexport const isDocumentTypeValid = (document_type: FormikValues) => {\n    if (!document_type?.text) {\n        return localize('Please select a document type.');\n    }\n    return undefined;\n};\n\nexport const isAdditionalDocumentValid = (document_type: FormikValues, additional_document_value?: string) => {\n    const error_message = documentAdditionalError(additional_document_value, document_type?.additional);\n    if (error_message) {\n        return error_message + getExampleFormat(document_type?.additional?.example_format);\n    }\n    return undefined;\n};\n\nexport const isDocumentNumberValid = (document_number?: string, document_type?: FormikValues) => {\n    const is_document_number_invalid = document_number === document_type?.example_format;\n    if (!document_number && document_type?.text) {\n        let document_name = '';\n        const example_format = getExampleFormat(document_type.example_format);\n        switch (document_type.id) {\n            case 'drivers_license':\n                document_name = localize('Driver License Reference number');\n                break;\n            case 'ssnit':\n                document_name = localize('SSNIT number');\n                break;\n            case 'national_id_no_photo':\n                document_name = localize('NIN');\n                break;\n            default:\n                document_name = localize('document number');\n                break;\n        }\n        return localize('Please enter your {{document_name}}. {{example_format}}', { document_name, example_format });\n    } else if (is_document_number_invalid) {\n        return localize('Please enter a valid ID number.');\n    }\n    const format_regex = getRegex(document_type?.value);\n    if (document_number && !format_regex.test(document_number)) {\n        return localize('Please enter the correct format. ') + getExampleFormat(document_type?.example_format);\n    }\n    return undefined;\n};\n\nexport const shouldHideHelperImage = (document_id: string) => document_id === IDV_NOT_APPLICABLE_OPTION.id;\n\nexport const isServerError = (error: unknown): error is TServerError =>\n    typeof error === 'object' && error !== null && 'code' in error;\n\n/**\n *  Returns the alpha 3 code for a given country code\n * @name convertAlpha2toAlpha3\n * @param country_code  - country code\n * @returns alpha 3 code\n */\nexport const convertAlpha2toAlpha3 = (country_code: string) =>\n    country_code.length !== 3 ? countries.alpha2ToAlpha3(country_code.toUpperCase()) : country_code;\n\n/**\n * Returns the alpha 2 code for a given country code\n * @name convertAlpha3toAlpha2\n * @param country_code - country code\n * @returns alpha 2 code\n */\n\nexport const convertAlpha3toAlpha2 = (country_code: string) =>\n    country_code.length !== 2 ? countries.alpha3ToAlpha2(country_code.toUpperCase()) : country_code;\n\n/**\n * Generates a language code supported by Onfido\n * @name getOnfidoSupportedLocaleCode\n * @param language_code\n * @returns language code supported by Onfido\n */\nexport const getOnfidoSupportedLocaleCode = (language_code: string) => {\n    try {\n        const code = language_code.toLowerCase().split('_');\n        if (code[0] === 'id') {\n            return LANGUAGE_CODES.ID;\n        }\n        return code.length > 1 ? `${code[0]}_${code[1].toUpperCase()}` : code[0];\n    } catch (e) {\n        return LANGUAGE_CODES.EN;\n    }\n};\n\nexport const getIDVDocumentType = (\n    idv_latest_attempt: DeepRequired<GetAccountStatus>['authentication']['attempts']['latest'],\n    residence: ResidenceList[0]\n) => {\n    if (!idv_latest_attempt || !Object.keys(residence).length) return localize('identity document');\n    const { document_type } = idv_latest_attempt;\n    if (!document_type) return localize('identity document');\n    if (residence?.identity?.services?.idv?.documents_supported) {\n        const {\n            identity: {\n                services: {\n                    idv: { documents_supported },\n                },\n            },\n        } = residence;\n        return documents_supported[document_type as string].display_name;\n    }\n    return null;\n};\n\nexport const validate = <T,>(errors: FormikErrors<FormikValues>, values: T) => {\n    return (fn: (value: string) => string, arr: string[], err_msg: string) => {\n        arr.forEach(field => {\n            const value = values[field as keyof typeof values] as string;\n            if (!fn(value) && !errors[field]) errors[field] = err_msg;\n        });\n    };\n};\n\ntype TIDVErrorStatus = keyof typeof IDV_ERROR_STATUS;\nexport const verifyFields = (status: TIDVErrorStatus) => {\n    switch (status) {\n        case IDV_ERROR_STATUS.DobMismatch.code:\n            return ['date_of_birth'];\n        case IDV_ERROR_STATUS.NameMismatch.code:\n            return ['first_name', 'last_name'];\n        default:\n            return ['first_name', 'last_name', 'date_of_birth'];\n    }\n};\n\nexport const isSpecialPaymentMethod = (payment_method_icon: string) =>\n    ['IcOnlineNaira', 'IcAstroPayLight', 'IcAstroPayDark'].some(icon => icon === payment_method_icon);\n\nexport const convertPhoneTypeDisplay = (phone_verification_type: string) => {\n    if (phone_verification_type === VERIFICATION_SERVICES.SMS) return phone_verification_type.toUpperCase();\n\n    return 'WhatsApp';\n};\n"],"names":["_ref","required","account_opening_reason_list","setFieldValue","disabled","fieldFocused","is_modal","isDesktop","useDevice","localize","useTranslations","_jsx","React","children","Field","name","_ref2","field","meta","className","id","Dropdown","placeholder","is_align_text_left","list","error","touched","clsx","list_portal_id","SelectNative","label","list_items","onChange","e","target","value","data_testid","onItemSelection","list_height","is_country_code_dropdown","onSelect","text","_ref3","form","Fragment","Autocomplete","autoComplete","undefined","use_text","POAAddressMismatchHintBox","ref","useRef","useEffect","setTimeout","current","scrollIntoView","InlineMessage","type","size","message","Localize","i18n_default_text","observer","editable_fields","parent_ref","should_display_long_message","tin_validation_config","handleChange","should_focus_fields","values","errors","setValues","useFormikContext","data","residence_list","useResidenceList","client","useStore","is_virtual","account_settings","account_status","tin_employment_status_bypass","is_tin_mandatory","is_employment_status_mandatory","Boolean","status","includes","is_tin_required","employment_status","is_tax_residence_popover_open","setIsTaxResidencePopoverOpen","useState","is_tin_popover_open","setIsTinPopoverOpen","tax_residence_ref","tin_ref","validateClickOutside","event","tagName","stopPropagation","contains","closeToolTips","tax_residence","find","item","tax_identification_number","parent_element","addEventListener","removeEventListener","is_tax_details_confirm_disabled","useMemo","isFieldImmutable","tin_skipped","useOnClickOutside","should_show_no_tax_details_checkbox","should_show_tax_confirm_checkbox","isFieldDisabled","field_name","_jsxs","EmploymentStatusField","is_disabled","Checkbox","confirm_no_tax_details","tax_identification_confirm","withTabIndex","label_font_size","label_line_height","TaxResidenceField","residence","TaxIdentificationNumberField","legal_entity_name","getLegalEntityName","has_error","useKycAuthStatus","payload","is_authorize","kyc_auth_status_rest","useQuery","options","enabled","kyc_auth_status","taxIdentificationNumber","address","addressCity","addressState","postalCode","phoneNumber","postalOfficeBoxNumber","ValidationConstants","patterns","addressPermittedSpecialCharacters","messagesHints","Yup","isCountryCodeDropdownEnabled","this","test","startsWith","slice","tempPhoneNumberValidation","getEmploymentAndTaxValidationSchema","tin_config","is_mf","is_real","is_tin_auto_set","is_duplicate_account","is_employment_status_tin_mandatory","when","is","then","otherwise","notRequired","oneOf","default","is_required_for_tax_residence","check_if_tin_skipped","makeTinOptional","max","matches","excludeEmptyString","context","parent","createError","tin_format","length","some","tax_regex","RegExp","invalid_patterns","invalid_pattern","getPersonalDetailsInitialValues","states_list","selected_phone_code","is_carriers_supported","virtualAccountInitialValues","email_consent","initialValues","address_city","address_line_1","address_line_2","address_postcode","address_state","calling_country_code","is_carriers_available","date_of_birth","formatDate","first_name","last_name","phone","replace","account_opening_reason","forEach","key","Object","keys","getLocation","request_professional_status","makeSettingsRequest","settings","request","trim","toMoment","format","citizen","place_of_birth","getPersonalDetailsValidationSchema","is_svg","immutable_fields","personal_details_schema","getPersonalDetailsBaseValidationSchema","broker_code","salutation","dayjs","isValid","isBefore","subtract","validatePhoneNumberLength","pick","address_detail_schema","getAddressDetailValidationSchema","employment_tin_schema","concat","VerifyButton","is_verify_button_disabled","next_email_otp_request_timer","setStatus","ui","setShouldShowPhoneNumberOTP","setVerificationCode","is_phone_number_verified","useIsPhoneNumberVerified","history","useHistory","refetch","mutation","mutateAsync","updateSettings","isLoading","isSetSettingsLoading","useSettings","sendPhoneNumberVerifyEmail","WS","is_loading","useVerifyEmail","isSuccess","push","routes","phone_verification","msg","code","Button","onClick","preventDefault","localStorage","setItem","personal_details","catch","err","has_effect","green","primary","large","resendCode","verifyTimer","resendCodeTimer","Math","round","setIsLoading","is_btn_loading","setIsBtnLoading","is_submit_success","setIsSubmitSuccess","invalidate","useInvalidateQuery","isPhoneNumberVerificationEnabled","isPhoneNumberVerificationLoaded","useGrowthbookGetFeatureValue","featureFlag","isCountryCodeLoaded","is_email_otp_timer_loading","usePhoneNumberVerificationSetTimer","mutate","useTinValidations","scrollToTop","useCallback","rootEl","targetEl","offset","arguments","scrollTo","top","offsetTop","behavior","notifications","common","is_language_changing","authentication_status","current_landing_company","updateAccountStatus","fetchAccountSettings","is_mf_account","field_ref_to_focus","setFieldRefToFocus","is_loading_residence_list","is_global_sms_available","is_global_whatsapp_available","legacy_core_countries_list","selected_country_list","updatePhoneSettings","useGetPhoneNumberList","is_loading_state_list","useStatesList","refreshNotifications","showPOAAddressMismatchSuccessNotification","showPOAAddressMismatchFailureNotification","has_poa_address_mismatch","rest_state","setRestState","show_form","notification_timeout","scroll_div_ref","start_on_submit_timeout","setStartOnSubmitTimeout","is_timeout_started","timeout_callback","should_show_loader","async","wait","init","clearTimeout","timeout_id","showForm","employment_tax_editable_fields","fields_to_disable","filter","api_error","loadTimer","useLayoutEffect","parentRef","document","querySelector","targetRef","getElementById","LoadErrorMessage","error_message","Loading","is_fullscreen","is_poa_verified","document_status","AUTH_STATUS_CODES","VERIFIED","is_poi_verified","identity_status","is_account_verified","stripped_phone_number","PersonalDetailSchema","displayErrorMessage","FormSubmitErrorMessage","components","OpenLiveChatLink","text_size","text_color","weight","checkForInitialCarriersSupported","is_sms_carrier_available","carriers","is_whatsapp_carrier_available","Formik","enableReinitialize","onSubmit","setSubmitting","authorized","setSettings","set_settings","notification","response","storage","getSettings","prev_state","url_query_string","window","location","search","url_params","URLSearchParams","get","from","validationSchema","handleBlur","handleSubmit","isSubmitting","setFieldTouched","dirty","LeaveConfirm","onDirty","Form","noValidate","FormBody","scroll_offset","FormSubHeader","title","InputGroup","Input","onBlur","FormSelectField","DateOfBirthField","portal_id","country_list","inputMode","phone_number","Text","as","color","AccountOpeningReasonField","EmploymentTaxDetailsContainer","maxLength","support_professional_client","brand_website_name","getBrandWebsiteName","greyDisabled","HintBox","icon","icon_height","icon_width","rel","href","is_info","is_inline","defaultChecked","FormFooter","align","identity_status_codes","none","pending","rejected","verified","expired","suspected","submission_status_code","service_code","handleRequireSubmission","is_from_external","redirect_button","IconMessageContent","Icon","setSubmissionStatus","POIContext","DerivLightExclamationPoiIcon","DEFAULT_BTN_TEXT","custom_text","class_name","ButtonLink","to","proof_of_address","IdvSubmitComplete","mismatch_status","needs_poa","is_already_attempted","is_mismatch_error","IDV_ERROR_STATUS","NameDobMismatch","DobMismatch","NameMismatch","is_expired_or_failed_error","Expired","Failed","poa_button","PoaButton","DerivLightWaitingPoiIcon","getHeaderText","ContinueTradingButton","trade","header_Text","DerivLightApprovedPoiIcon","idv","submissions_left","last_rejected","formatIDVError","Number","IdvLimited","IdvVerified","POILimited","Chat","open","OnfidoNotRequired","button_label","route","UploadComplete","is_manual_upload","description","RouteButton","traders_hub","Verified","service","index","message_list","onContinue","isMobile","ThemedScrollbars","is_bypassed","Div100vhContainer","height_offset","ListItem","getOnfidoError","map","idx","rejected_reasons","IconMessageList","API_ERROR_CODES","freeze","DUPLICATE_ACCOUNT","CLAIMED_DOCUMENT","DUPLICATE_DOCUMENT","fileReadErrorMessage","filename","uploadFile","file","getSocket","Promise","resolve","reject","uploader","DocumentUploader","connection","is_file_error","compressImageFiles","files_to_process","readFiles","processed_files","total_to_upload","upload","console","GoToPersonalDetailsButton","anchor","from_string","anchor_string","has_invalid_postal_code","props","inline_note_text","is_eu_user","is_rendered_for_idv","has_real_account","is_fully_authenticated","closeRealAccountSignup","salutation_list","is_rendered_for_onfido","is_qualified_for_poa","side_note","no_confirmation_needed","is_svg_only","getNameAndDobLabels","is_asterisk_needed","first_name_label","last_name_label","dob_label","is_rendered_for_idv_or_onfido","getFieldHint","poa_clarification_message","is_confirmation_checkbox_disabled","verifyFields","InlineNoteWithIcon","font_size","FormBodySection","has_side_note","side_note_position","Link","RadioGroup","selected","onToggle","persist","Item","FormInputField","hint","PlaceOfBirthField","_ref4","should_hide_disabled_options","PhoneField","confirmation_checkbox","_ref5","validPhone","_ref6","_ref7","_ref8","handleOnClick","GENERIC_ERROR_MESSAGE","DUPLICATE_ACCOUNT_ERROR_MESSAGE","onKeyDown","CLAIMED_DOCUMENT_ERROR_MESSAGE","generateIDVError","is_document_upload_required","latest_status","chosen_country","document_name","getIDVDocumentType","required_fields","side_note_image","DerivLightNamePoiIcon","height","width","failure_message","DerivLightDobPoiIcon","DerivLightNameDobPoiIcon","getIDVError","getChangeableFields","onFormConfirm","checked","setChecked","form_initial_values","changeable_fields","visible_settings","filterObjProperties","initializeFormValues","error_msg","get_settings","validate","validateValues","val","validateName","isEmptyObject","removeEmptyPropertiesFromObject","PersonalDetailsForm","is_danger","is_onfido_disabled","is_onfido_container_hidden","onfido_element_id","is_confirmed","is_onfido_initialized","is_status_message_visible","setIsStatusMessageVisible","transition_in_timeout_ref","transition_out_timeout_ref","CSSTransition","appear","in","timeout","exit","classNames","unmountOnExit","OnfidoSdkViewContainer","country_code","documents_supported","handleViewComplete","is_default_enabled","setAPIError","missing_personal_details","setMissingPersonalDetails","setIsOnfidoDisabled","setIsConfirmed","setIsOnfidoInitialized","is_onfido_loaded","setIsOnfidoLoaded","send","isNotified","useNotificationEvent","current_language","onfido_country_code","convertAlpha2toAlpha3","token_country_code","convertAlpha3toAlpha2","service_token","isError","useServiceToken","country","onfido_init","onfido_documents","Array","isArray","d","display_name","component_to_load","onComplete","tearDown","document_ids","category","args","documents","initOnfido","Onfido","containerId","language","locale","getOnfidoSupportedLocaleCode","phrases","getOnfidoPhrases","mobilePhrases","token","useModal","useMemoryHistory","steps","documentTypes","passport","doc","driving_licence","national_identity_card","hideCountrySelection","loadOnfidoSdkScript","remove","script_node","createElement","link_node","src","body","appendChild","onConfirm","onfido","handleError","MissingPersonalDetails","ErrorMessage","PoiConfirmWithExampleFormContainer","OnfidoSdkView","displayName","ROOT_CLASS","DOCUMENT_TYPES","PAGE_TYPE","SELFIE_DOCUMENT","document_type","pageType","info","date_field","min_date","add","DatePicker","date_format","display_format","start_date","readOnly","DROPZONE_ERRORS","GENERAL","Message","medium","secondary","Preview","has_frame","background_url","setBackgroundUrl","URL","createObjectURL","style","backgroundImage","indexOf","is_full","image","setImage","ValidationErrorMessage","FileDropzone","accept","supported_filetypes","filename_limit","hover_message","max_size","max_document_size","preview_single","multiple","onDropAccepted","files","handleAccept","onDropRejected","handleReject","validation_error_message","noClick","setInitialValues","fields","checkIsEmpty","validateFields","icons","IconsItem","initial_values","goToCards","documents_title","is_expiry_date_required","fields_title","is_form_touched","is_form_empty","InputField","Uploader","goBack","onFileDrop","setDocuments","selfie","setSelfie","is_selfie_upload","setIsSelfieUpload","SelfieUpload","DocumentsUpload","STATUS","IS_UPLOADING","IS_COMPLETED","IS_FAILED","onClickBack","root_class","country_code_key","handleComplete","is_onfido_supported","is_for_mt5","handlePOIforMT5Complete","response_error","setError","is_any_failed","docs","details","files_length","file_to_upload_index","results","uploadNext","lifetime_valid","expiration_date","expiry_date","page_type","document_id","document_issuing_country","warning","IS_DUPLICATE_UPLOAD","is_slow_loading","POIManualUploadFailed","OnfidoUpload","onfido_name","CardDetails","CardWithArrow","Documents","toggleDetail","Card","renderContent","card","manual","handleBack","allow_poi_resubmission","is_resubmission","detail","setDetail","getDocumentIndex","Limited","has_nimc","checkNimcStep","DetailComponent","submission_errors","formatOnfidoError","Unsupported","RejectedReasons","handleSelectionNext","setSelectedCountry","updateSelectedCountry","country_name","matching_country","c","failed_message","country_input","submitHandler","current_input","selected_country","hide_hint","is_for_real_account_signup_modal","document_list","setDocumentList","selected_doc","setSelectedDoc","document_data","identity","services","default_document","example_format","IDV_NOT_APPLICABLE_OPTION","getIDVNotApplicableOption","document_types","new_document_list","new_display_name","additional_document_example_format","getDocumentData","additional","resetDocumentItemSelected","getDocument","onKeyUp","formatInput","bindDocumentData","selected_document","bottom_label","getExampleFormat","document_number","generatePlaceholderText","onPaste","preventEmptyClipboardPaste","additional_document_placeholder","toLowerCase","document_additional","shouldSkipIdv","needs_additional_document","isDocumentTypeValid","shouldHideHelperImage","isAdditionalDocumentValid","isDocumentNumberValid","submit_data","identity_verification_document_add","formatIDVFormValues","idv_update_response","should_skip_idv","is_button_disabled","IDVForm","setIsAlreadyAttempted","idv_failure","setIdvFailure","residence_data","error_config","form_data","initial_form_values","sample_image","issuing_country","is_idv_skipping","POISubmission","has_require_submission","identity_last_attempt","is_idv_disallowed","onStateChange","should_show_mismatch_form","submission_service","setSubmissionService","submission_status","is_high_risk","risk_classification","should_show_manual","idv_submissions_left","onfido_submissions_left","is_idv_supported","is_country_supported","getAccountStatus","getCountryFromResidence","needs_resubmission","is_report_not_available","isIDVReportNotAvailable","setIdentityService","CountrySelector","IdvFailed","report_available","IdvDocumentSubmit","doc_obj","populateVerificationStatus","authentication","attempts","income","needs_verification","income_status","allow_document_upload","allow_poa_resubmission","allow_poinc_resubmission","is_age_verified","poa_address_mismatch","poi_expiring_soon","poa_authenticated_with_idv","poa_authenticated_with_idv_photo","poa_expiring_soon","poi_acknowledged","has_poa","has_poi","has_poinc","has_submitted_poa","needs_poi","needs_poinc","latest","has_attempted_idv","h","ProofOfIdentityContainer","setHasRequireSubmission","setResidenceList","is_status_loading","setStatusLoading","fetchResidenceList","is_switching","is_withdrawal_lock","should_allow_authentication","app_routing_history","routeBackInApp","from_platform","getPlatformRedirect","should_show_redirect_btn","platforms","handleManualSubmit","loadResidenceList","response_residence_list","response_account_status","DemoMessage","verification_status","should_ignore_idv","NotRequired","onClickRedirectButton","platform","is_hard_redirect","url","redirect_route","sessionStorage","removeItem","platform_name","IdvContainer","withRouter","AutoHeightWrapper","setRef","getToken","is_from_tradershub_os","shouldRedirectToAccountsOSApp","isRedirectToAccountsOSAppFFLoaded","ProofOfIdentity","redirect_url","ACCOUNTS_OS_POI_URL","ACCOUNTS_OS_POI_STATUS_URL","url_link","params","appid","getAppId","lang","server","getSocketURL","entries","searchParams","append","toString","getFormattedURL","UploadMessage","onError","document_files","setDocumentFiles","file_error","setFileError","is_file_too_large","supported_files","each_file","getSupportedFiles","removeFile","getFileUploaderDescriptions","page","is_eu","proof_of_income_descriptions","descriptions","proof_of_address_descriptions","expiry_in_months","getSupportedProofOfAddressDocuments","examples","files_description","country_of_residence","supported_documents","doc_list","FileUploader","line_height","CommonMistakeExamplePartials","LegacyLossIcon","iconSize","role","CommonMistakeExamples","example_images","DerivLightIcDocumentNameMismatchIcon","DerivLightIcDocumentAddressMismatchIcon","DerivLightIcOldIssuedDocumentMoreThan6Icon","DerivLightIcOldIssuedDocumentMoreThan12Icon","DerivLightIcBlurryDocumentIcon","DerivLightIcCroppedDocumentIcon","DerivLightIcEnvelopeIcon","getExampleImagesConfig","config","setOffset","is_for_cfd_modal","is_resubmit","form_state","file_selection_error","setFileSelectionError","poa_uploader_files_descriptions","isFullHeight","title_text_size","FileUploaderContainer","FilesDescription","Modal","Footer","has_separator","FormSubmitButton","ProgressBar","is_active","step","setStep","isNextBtnDisabled","LabelPairedArrowLeftMdBoldIcon","prev_step","onSubmitForCFDModal","fetchStatesList","addNotificationMessageByKey","addNotificationByKey","removeNotificationMessage","removeNotificationByKey","form_values","setFormValues","api_initial_load_error","setAPIInitialLoadError","setFormState","should_allow_submit","should_show_form","should_scroll_to_top","setShouldScrollToTop","useFileUploader","all","el","target_element","parentElement","block","current_value","settings_values","get_settings_response","selected_doc_type","api_response","get_account_status_response","get_account_status","isServerError","address_line_1_validation_result","validAddress","is_required","is_ok","address_line_2_validation_result","validation_letter_symbol_message","validLetterSymbol","validLength","min","validPostCode","max_number","interpolation","escapeValue","validateOnMount","POAMobileLayout","POADesktopLayout","is_redirected_from_platform","isNavigationFromP2P","isNavigationFromDerivGO","proof_of_identity","button_text","PoiButton","setAuthenticationStatus","resubmit_poa","has_submitted_duplicate_poa","has_restricted_mt5_account","is_verification_modal_visible","mt5_poa_status","getItem","handleResubmit","onSubmitDocument","should_allow_resubmit","cashier_p2p","Unverified","handleDuplicatePOASubmission","Submitted","ProofOfAddressForm","getDocumentStatus","NONE","PENDING","EXPIRED","REJECTED","SUSPECTED","has_button","ProofOfAddressContainer","IDENTIFIER_TYPES","ACCOUNT_ID","ACCOUNT_NUMBER","BANK_ACCOUNT_NUMBER","CARD_NUMBER","EMAIL_ADDRESS","MOBILE_NUMBER","USER_ID","sub_index","payment_id","setFieldError","show_browse_button","setShowBrowseButton","hidden_file_input","nativeEvent","stopImmediatePropagation","file_to_upload","payment_file_data","selected_payment_method","tabIndex","trailing_icon","filtered_file_data","_","i","prevState","updateError","payment_method_error","payment_method_file_error","click","is_open","onClose","should_header_stick_body","toggleModal","getUrlBase","alt","ExampleLink","is_sample_modal_open","setIsSampleModalOpen","SampleCreditCardModal","card_details","payment_method","payment_method_identifier","identifier_type","handleIdentifierChange","formatIdentifier","formatted_id","hasInvalidCharacters","substring","s","instructions","instruction","items","controls_to_show","documents_required","input_label","isSpecialPaymentMethod","expand","organise","ExpansionIcon","setIsOpen","onClickHandler","transparent","ExpandedCard","ProofOfOwnershipForm","grouped_payment_method_data","email","client_email","grouped_payment_method_data_keys","getScrollOffset","default_value","is_generic_pm","reduce","acc","card_key","card_data","payment_method_data","is_payment_method_identifier_provided","are_files_uploaded","verify_payment_method_identifier","isValidPaymentMethodIdentifier","default_error_message","isFormattedCardNumber","verify_file","validFile","isValidFile","action","promise","payment_method_details","payment_method_detail","UPLOAD_FILE_TYPE","proof_of_ownership","payment_identifier","processed_file","upload_error","warn","grouped_payment_method_data_key","POONotRequired","POOVerified","onTryAgain","is_disabled_for_mobile","POOSubmitted","getPaymentMethodsConfig","advcash","icon_light","icon_dark","astropay","beyonic","visa","mastercard","pix","skrill","neteller","onlinenaira","webmoney","zingpay","sticpay","jeton","other","ProofOfOwnership","is_dark_mode_on","is_dark_mode","cards","ownership","requests","retry","setRetry","groups","payment_methods_config","card_payment_method","POORejected","income_status_codes","LOCKED","document_file","setDocumentFile","poinc_documents_list","poinc_uploader_files_descriptions","uploading_value","is_document_type_supported","hide_top_placeholder","prevFiles","isEqualArray","onReSubmit","PoincReceived","PoincLimited","PoincVerified","should_show_poinc_form","ProofOfIncomeForm","PoincFailed","Redirect","account","ProofOfIncomeContainer","handleOnLogout","oAuthLogout","useOauth2","handleLogout","PageOverlayWrapper","subroutes","logout","is_from_derivgo","setIsForcedToExitPnv","passkeysMenuCloseActionEventTrack","Analytics","trackEvent","form_name","operating_system","getOSNameWithUAParser","list_groups","route_group","getTitle","subitems","sub","onClickClose","pathname","shared_routes","passkeys","selected_route","getSelectedRoute","RouteComponent","component","PageOverlay","header","is_from_app","component_icon","icon_component","VerticalTab","is_floating","current_path","is_routed","is_full_width","extra_content","TradingHubLogout","is_sidebar_enabled","Account","is_logged_in","is_logging_in","is_proof_of_ownership_enabled","landing_company_shortcode","should_allow_poinc_authentication","is_passkey_supported","toggleAccountSettings","is_account_settings_visible","flatten","selected_content","r","matchRoute","should_remove_passkeys_route","menu_item","path","financial_assessment","trading_assessment","proof_of_income","is_hidden","FadeWrapper","is_visible","keyname","disabled_items","getCurrentStep","onSave","onCancel","goToPreviousStep","goToNextStep","real_account_signup_target","schema","actions","current_step","ScrollToFieldWithError","refSetter","is_absolute","has_cancel","cancel_label","handleCancel","DeactivateAccount","closing_account","Page404","makeLazyLoader","moduleLoader","Passwords","PhoneVerificationPage","Passkeys","AccountLimits","AccountClosed","LanguageSettings","LoginHistory","ConnectedApps","FinancialAssessment","TradingAssessment","ApiToken","TwoFactorAuthentication","SelfExclusion","ClosingAccount","routesConfig","route_default","getRoutesConfig","account_closed","is_authenticated","deactivate_account","PersonalDetails","languages","ProofOfIdentityFlow","ProofOfAddress","ProofOfIncome","passwords","self_exclusion","account_limits","login_history","api_token","connected_apps","two_factor_authentication","Route","exact","render","result","default_subroute","cur","subroute","has_default_subroute","removeBranchName","redirectToLogin","getLanguage","default_title","fallback","Switch","RouteWithSubRoutes","Routes","ErrorComponent","ThemeProvider","theme","BinaryRoutes","ResetTradingPassword","setDialogTitleFunc","toggleResetTradingPasswordModal","verification_code","password","initialStatus","reset_complete","error_code","max_length","CFD_PLATFORMS","MT5","validPassword","validMT5Password","getErrorMessages","min_number","new_password","tradingPlatformPasswordReset","resetForm","getCFDPlatformLabel","PasswordMeter","input","custom_feedback_messages","password_warnings","PasswordInput","disableApp","enableApp","dialog_title","setDialogTitle","hash","Dialog","has_close_icon","is_invalid_token","setCFDPasswordResetModal","is_cfd_reset_password_modal_enabled","useLocation","query_params","cfd_platform","exec","trading_platform_mt5_password_reset","trading_platform_dxtrade_password_reset","ResetTradingPasswordModal","NetworkStatusToast","setIsVisible","new_portal_id","createPortal","Snackbar","hasCloseButton","isVisible","network_status","tooltip","class","passthrough","root_store","notification_messages_ui","Notifications","StoreProvider","store","APIProvider","POIProvider","BreakpointProvider","NetworkStatusToastPopup","has_any_real_account","toggleAccountsDialog","toggleShouldShowRealAccountsList","IconWithMessage","redirect_label","redirectOnClick","should_show_refresh","refresh_message","PageError","messages","redirect_urls","redirect_labels","buttonOnClick","reload","ScrollbarsContainer","height_unit","subtitle","title_as_class","rest","DateOfBirthPicker","getEmploymentStatusList","Popover","alignment","zIndex","disable_message_icon","fields_to_scroll_top","fields_to_scroll_bottom","should_recollect_inputs_names","all_page_inputs_names","setAllPageInputsNames","scrollToElement","element_name","focus","inputs","querySelectorAll","current_error_field_name","input_name","prototype","hasOwnProperty","call","full_width","LeaveConfirmMessage","back","leave","TransitionBlockerWithRouter","showModal","setShowModal","nextLocation","setNextLocation","unblock","_Fragment","small","Body","FormikConsumer","formik","submitCount","getIncomeSourceList","getEmploymentIndustryList","getSourceOfWealthList","getEducationLevelList","getNetIncomeList","getEstimatedWorthList","getAccountTurnoverList","getBinaryOptionsTradingExperienceList","getBinaryOptionsTradingFrequencyList","getCfdTradingExperienceList","getCfdTradingFrequencyList","getForexTradingExperienceList","getForexTradingFrequencyList","getOtherInstrumentsTradingExperienceList","getOtherInstrumentsTradingFrequencyList","country_select","alert_dropdown","country_not_found","alert","another_doc","button_primary","accessibility","input_placeholder","cross_device_checklist","list_item_doc_multiple","list_item_doc_one","list_item_selfie","cross_device_error_desktop","cross_device_error_restart","cross_device_intro","list_accessibility","list_item_finish","list_item_open_link","list_item_send_phone","cross_device_return","doc_confirmation","blur_detail","blur_title","crop_detail","crop_title","glare_detail","glare_title","no_doc_detail","no_doc_title","body_id","body_image_medium","body_image_poor","body_license","body_passport","body_permit","body_tax_letter","button_close","button_primary_redo","button_primary_upload","button_primary_upload_anyway","button_secondary_redo","button_zoom","image_accessibility","doc_select","button_id","button_id_detail","button_license","button_license_detail","button_passport","button_passport_detail","button_permit","button_permit_detail","extra_no_mobile","subtitle_poa","title_poa","doc_submit","button_link_upload","title_id_back","title_id_front","title_license_back","title_license_front","title_passport","title_permit_back","title_permit_front","error_unsupported_browser","subtitle_android","subtitle_ios","title_android","title_ios","generic","close_sdk_screen","dismiss_alert","close","interrupted_flow_error","invalid_size","invalid_type","lazy_loading","multiple_faces","no_face","request_error","sms_failed","sms_overuse","unsupported_file","lazy_load_placeholder","loading","get_link","alert_wrong_number","button_copied","button_copy","button_submit","info_qr_how","info_qr_how_list_item_camera","info_qr_how_list_item_download","link_divider","link_qr","link_sms","link_url","loader_sending","number_field_input_placeholder","number_field_label","subtitle_qr","subtitle_sms","subtitle_url","url_field_label","linked_computer","list_item_desktop_open","list_item_sent_by_you","photo_upload","body_id_back","body_id_front","body_license_back","body_license_front","body_selfie","selfie_capture","camera_inactive","camera_not_working","upload_guide","outro","permission_recovery","list_header_cam","list_item_action_cam","list_item_how_to_cam","subtitle_cam","title_cam","permission","body_cam","button_primary_cam","body_bank_statement","body_benefits_letter","body_bill","body_government_letter","button_take_photo","button_upload","title_selfie","detail_no_fallback","button_accessibility","frame_accessibility","selfie_confirmation","selfie_intro","list_item_face_forward","list_item_no_glasses","sms_sent","info_link_expire","info_link_window","link","subtitle_minutes","switch_phone","info_link_refresh","image_detail_blur_alt","image_detail_blur_label","image_detail_cutoff_alt","image_detail_cutoff_label","image_detail_glare_alt","image_detail_glare_label","image_detail_good_alt","image_detail_good_label","LANGUAGE_CODES","ID","EN","getIDVDocuments","ke","alien_card","national_id","za","national_id_no_photo","ng","bvn","cac","drivers_license","nin","nin_slip","tin","voter_id","gh","ssnit","br","cpf","ug","zw","cl","ar","dni","mx","curp","nik","aadhaar","epic","pan","pe","vn","regex","regex_string","flags","DEFAULT_CONFIG","IDV_DOCUMENT_DATA","clipboardData","getData","getRegex","target_regex","output_regex","validName","additional_document_value","documentAdditionalError","document_additional_config","is_document_number_invalid","format_regex","countries","toUpperCase","language_code","split","idv_latest_attempt","fn","arr","err_msg","payment_method_icon","convertPhoneTypeDisplay","phone_verification_type","VERIFICATION_SERVICES","SMS"],"sourceRoot":""}