{"version":3,"file":"js/core.core_currency-selection-modal.743e1b38ac3795030b8f.js","mappings":"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","sources":["webpack:///../../account/src/Configs/get-status-badge-config.tsx","webpack:///./App/Containers/CurrencySelectionModal/currency/index.tsx","webpack:///./App/Containers/CurrencySelectionModal/curreny-selection-modal.tsx","webpack:///./App/Containers/CurrencySelectionModal/index.ts","webpack:///../../hooks/src/useGetMFAccountStatus.ts","webpack:///../../hooks/src/useHasActiveRealAccount.ts","webpack:///../../hooks/src/useHasSetCurrency.ts","webpack:///../../hooks/src/useMFAccountStatus.ts"],"sourcesContent":["import React from 'react';\nimport { ACCOUNT_BADGE_STATUS, TAccountBadgeStatus } from '@deriv/shared';\nimport { Localize } from '@deriv-com/translations';\n\nconst getStatusBadgeConfig = (account_status: TAccountBadgeStatus) => {\n    switch (account_status) {\n        case ACCOUNT_BADGE_STATUS.PENDING:\n            return {\n                text: <Localize i18n_default_text='In review' />,\n                icon: 'IcMt5Pending',\n            };\n        case ACCOUNT_BADGE_STATUS.FAILED:\n            return {\n                text: <Localize i18n_default_text='Failed' />,\n                icon: 'IcMt5Failed',\n                icon_size: '18',\n            };\n        case ACCOUNT_BADGE_STATUS.NEEDS_VERIFICATION: {\n            return {\n                text: <Localize i18n_default_text='Needs Verification' />,\n                icon: 'IcMt5Verification',\n                icon_size: '18',\n            };\n        }\n        default:\n            return {\n                text: '',\n                icon: '',\n            };\n    }\n};\n\nexport default getStatusBadgeConfig;\n","import React from 'react';\nimport { Icon } from '@deriv/components';\nimport { capitalizeFirstLetter } from '@deriv/shared';\nimport { IconProps } from '../types';\n\n// TODO: This probably can be moved somewhere else.\nexport type Currency =\n    | 'AUD'\n    | 'BCH'\n    | 'BTC'\n    | 'BUSD'\n    | 'DAI'\n    | 'ETH'\n    | 'EURCHECK'\n    | 'EUR'\n    | 'EURS'\n    | 'EUSDT'\n    | 'GBP'\n    | 'IDK'\n    | 'LTC'\n    | 'PAX'\n    | 'TUSD'\n    | 'TUSDT'\n    | 'UNKNOWN'\n    | 'USD'\n    | 'USDC'\n    | 'USDK'\n    | 'UST'\n    | 'VIRTUAL';\n\nconst CurrencyIcon = ({ icon, ...props }: IconProps<Currency>) => {\n    return <Icon icon={`IcCurrency${capitalizeFirstLetter(icon.toLowerCase())}`} {...props} />;\n};\n\nexport default CurrencyIcon;\n","import React from 'react';\nimport getStatusBadgeConfig from '@deriv/account/src/Configs/get-status-badge-config';\nimport { Button, Icon, Modal, Money, StatusBadge, Text } from '@deriv/components';\nimport { localize } from '@deriv/translations';\nimport { getCurrencyName, startPerformanceEventTimer } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport CurrencyIcon from './currency';\nimport { AccountListDetail } from './types';\nimport classNames from 'classnames';\nimport { useHasSetCurrency, useMFAccountStatus } from '@deriv/hooks';\n\ntype CurrencySelectionModalProps = {\n    is_visible: boolean;\n};\n\nconst CurrencySelectionModal = observer(({ is_visible }: CurrencySelectionModalProps) => {\n    const { client, traders_hub, ui } = useStore();\n    const {\n        account_list,\n        accounts,\n        switchAccount,\n        has_any_real_account,\n        account_status,\n        loginid: current_loginid,\n    } = client;\n    const { closeModal, selected_region } = traders_hub;\n    const { openRealAccountSignup, toggleSetCurrencyModal } = ui;\n\n    const mf_account_status = useMFAccountStatus();\n\n    const { text: badge_text, icon: badge_icon } = getStatusBadgeConfig(mf_account_status);\n\n    const hasSetCurrency = useHasSetCurrency();\n    let timeout: ReturnType<typeof setTimeout>;\n\n    return (\n        <Modal is_open={is_visible} toggleModal={closeModal} width='422px' height='422px'>\n            <div className='currency-selection-modal__header'>\n                <Text line-height='m' weight='bold'>\n                    {localize('Select account')}\n                </Text>\n                <Icon className='close-icon' icon='IcCross' onClick={() => closeModal()} />\n            </div>\n            <div className='currency-selection-modal__body'>\n                {(account_list as AccountListDetail[])\n                    .filter(\n                        acc =>\n                            !!acc.is_disabled === false &&\n                            ((!acc.is_virtual && selected_region === 'Non-EU' && acc.loginid.startsWith('CR')) ||\n                                (selected_region === 'EU' && acc.loginid.startsWith('MF')))\n                    )\n                    .map(({ icon, loginid }) => {\n                        const { balance, currency } = accounts[loginid];\n                        const is_selected = current_loginid === loginid;\n                        return (\n                            <div\n                                key={loginid}\n                                className={classNames('currency-item-card', {\n                                    'currency-item-card--active': is_selected,\n                                })}\n                                onClick={async () => {\n                                    if (loginid !== current_loginid) {\n                                        startPerformanceEventTimer('switch_currency_accounts_time');\n                                        await switchAccount(loginid);\n                                    }\n                                    closeModal();\n                                }}\n                            >\n                                <CurrencyIcon\n                                    className='currency-item-card__icons'\n                                    icon={currency ? icon : 'UNKNOWN'}\n                                    size={32}\n                                />\n                                <div className='currency-item-card__details'>\n                                    <Text size='xs'>{getCurrencyName(currency)}</Text>\n                                    <Text color={is_selected ? 'prominent' : 'less-prominent'} size='xxs'>\n                                        {loginid}\n                                    </Text>\n                                </div>\n                                <div className='currency-item-card__balance'>\n                                    {mf_account_status ? (\n                                        <StatusBadge\n                                            account_status={mf_account_status}\n                                            icon={badge_icon}\n                                            text={badge_text}\n                                        />\n                                    ) : (\n                                        <Text size='xs' color='prominent'>\n                                            <Money amount={balance} currency={currency} show_currency />\n                                        </Text>\n                                    )}\n                                </div>\n                            </div>\n                        );\n                    })}\n            </div>\n            <div className='currency-selection-modal__bottom-controls'>\n                <Button\n                    className='block-button'\n                    onClick={() => {\n                        clearTimeout(timeout);\n                        timeout = setTimeout(() => {\n                            if (has_any_real_account && !hasSetCurrency) {\n                                toggleSetCurrencyModal();\n                            } else openRealAccountSignup('manage');\n                        }, 500);\n                        closeModal();\n                    }}\n                    secondary\n                    large\n                >\n                    {localize('Add or manage account')}\n                </Button>\n            </div>\n        </Modal>\n    );\n});\n\nexport default CurrencySelectionModal;\n","import CurrencySelectionModal from './curreny-selection-modal';\nimport './currency-selection-modal.scss';\n\nexport default CurrencySelectionModal;\n","import { useEffect } from 'react';\nimport { useStore } from '@deriv/stores';\nimport { ACCOUNT_BADGE_STATUS } from '@deriv/shared';\n\nconst useGetMFAccountStatus = () => {\n    const { client } = useStore();\n    const { account_status, updateAccountStatus } = client || {};\n\n    useEffect(() => {\n        async function fetchData() {\n            await updateAccountStatus();\n        }\n        fetchData();\n    }, []);\n    const authentication = account_status?.authentication;\n    const poi_status = authentication?.identity?.status;\n    const onfido_status = authentication?.identity?.services?.onfido?.status;\n    const manual_status = authentication?.identity?.services?.manual?.status;\n    const poa_status = authentication?.document?.status;\n\n    const STATUS = {\n        NONE: 'none',\n        VERIFIED: 'verified',\n        PENDING: 'pending',\n        REJECTED: 'rejected',\n        EXPIRED: 'expired',\n        SUSPECTED: 'suspected',\n    } as const;\n    const failed_cases = [STATUS.REJECTED, STATUS.EXPIRED, STATUS.SUSPECTED];\n\n    //@ts-expect-error we can ignore this error since we are checking the status and returning true or false\n    const need_poa_resubmission = poa_status && failed_cases.includes(poa_status);\n    const poa_pending = poa_status === STATUS.PENDING;\n    const poa_not_submitted = poa_status === STATUS.NONE;\n\n    const poi_verified_by_onfido_or_manual = [onfido_status, manual_status].includes(STATUS.VERIFIED);\n    const poi_pending_by_onfido_or_manual =\n        [onfido_status, manual_status].includes(STATUS.PENDING) && !poi_verified_by_onfido_or_manual;\n\n    const poi_not_submitted_by_onfido_or_manual = [onfido_status, manual_status].every(\n        status => status === STATUS.NONE\n    );\n    const need_poi_submission = !poi_pending_by_onfido_or_manual && !poi_verified_by_onfido_or_manual;\n\n    const need_poi_resubmission = !poi_not_submitted_by_onfido_or_manual && need_poi_submission;\n    const is_verified = poi_status === STATUS.VERIFIED && poa_status === STATUS.VERIFIED;\n\n    const getMFAccountStatus = () => {\n        if (poa_status && onfido_status && manual_status) {\n            if (need_poi_resubmission || need_poa_resubmission) {\n                return ACCOUNT_BADGE_STATUS.FAILED;\n            } else if (poi_not_submitted_by_onfido_or_manual || poa_not_submitted) {\n                return ACCOUNT_BADGE_STATUS.NEEDS_VERIFICATION;\n            } else if (poi_pending_by_onfido_or_manual || poa_pending) {\n                return ACCOUNT_BADGE_STATUS.PENDING;\n            }\n            return null;\n        }\n        return null;\n    };\n    const getVerificationStatus = () => (!is_verified ? { poi_status, poa_status, valid_tin: 1, required_tin: 1 } : {});\n\n    return {\n        mf_account_status: getMFAccountStatus(),\n        kyc_status: getVerificationStatus(),\n    };\n};\n\nexport default useGetMFAccountStatus;\n","import { useStore } from '@deriv/stores';\n\nconst useHasActiveRealAccount = () => {\n    const { client } = useStore();\n    const { active_accounts } = client;\n\n    const has_active_real_account = active_accounts.some(account => account.is_virtual === 0);\n\n    return has_active_real_account;\n};\n\nexport default useHasActiveRealAccount;\n","import { useStore } from '@deriv/stores';\nimport useHasActiveRealAccount from './useHasActiveRealAccount';\n\nconst useHasSetCurrency = () => {\n    const { client } = useStore();\n    const { account_list } = client;\n    const has_active_real_account = useHasActiveRealAccount();\n\n    const has_real_account = account_list\n        .filter(account => !account.is_virtual)\n        .some(account => account.title !== 'Real' && account.title !== 'Investment');\n\n    const has_set_currency = has_real_account || !has_active_real_account;\n\n    return has_set_currency;\n};\n\nexport default useHasSetCurrency;\n","import { ACCOUNT_BADGE_STATUS } from '@deriv/shared';\nimport useHasMaltaInvestAccount from './useHasMaltaInvestAccount';\nimport useGetMFAccountStatus from './useGetMFAccountStatus';\nimport { useStore } from '@deriv/stores';\n\nconst useMFAccountStatus = () => {\n    const {\n        client: { is_eu },\n    } = useStore();\n    const has_malta_invest_account = useHasMaltaInvestAccount();\n    const { mf_account_status } = useGetMFAccountStatus();\n\n    const should_show_status_for_multipliers_account =\n        is_eu &&\n        has_malta_invest_account &&\n        mf_account_status &&\n        [ACCOUNT_BADGE_STATUS.PENDING, ACCOUNT_BADGE_STATUS.FAILED, ACCOUNT_BADGE_STATUS.NEEDS_VERIFICATION].includes(\n            mf_account_status\n        );\n    return should_show_status_for_multipliers_account ? mf_account_status : null;\n};\n\nexport default useMFAccountStatus;\n"],"names":["account_status","ACCOUNT_BADGE_STATUS","PENDING","text","_jsx","Localize","i18n_default_text","icon","FAILED","icon_size","NEEDS_VERIFICATION","_ref","props","_objectWithoutProperties","_excluded","Icon","_objectSpread","capitalizeFirstLetter","toLowerCase","observer","is_visible","client","traders_hub","ui","useStore","account_list","accounts","switchAccount","has_any_real_account","loginid","current_loginid","closeModal","selected_region","openRealAccountSignup","toggleSetCurrencyModal","mf_account_status","useMFAccountStatus","badge_text","badge_icon","getStatusBadgeConfig","hasSetCurrency","useHasSetCurrency","timeout","_jsxs","Modal","is_open","toggleModal","width","height","children","className","Text","weight","localize","onClick","filter","acc","is_disabled","is_virtual","startsWith","map","_ref2","balance","currency","is_selected","classNames","async","startPerformanceEventTimer","CurrencyIcon","size","getCurrencyName","color","StatusBadge","Money","amount","show_currency","Button","clearTimeout","setTimeout","secondary","large","useGetMFAccountStatus","_authentication$ident","_authentication$ident2","_authentication$ident3","_authentication$docum","updateAccountStatus","useEffect","fetchData","authentication","poi_status","identity","status","onfido_status","services","onfido","manual_status","manual","poa_status","document","STATUS","need_poa_resubmission","includes","poa_pending","poa_not_submitted","poi_verified_by_onfido_or_manual","poi_pending_by_onfido_or_manual","poi_not_submitted_by_onfido_or_manual","every","is_verified","kyc_status","valid_tin","required_tin","useHasActiveRealAccount","active_accounts","some","account","has_active_real_account","title","is_eu","has_malta_invest_account","useHasMaltaInvestAccount"],"sourceRoot":""}