/*! For license information please see wallets.compare-accounts-route.1da30b03726dc4773912.js.LICENSE.txt */
(self.webpackChunk_deriv_wallets=self.webpackChunk_deriv_wallets||[]).push([[989],{49333:(n,e,r)=>{"use strict";r.d(e,{$_:()=>u,Aj:()=>f,Ax:()=>O,KV:()=>x,N1:()=>w,Pf:()=>_,Qp:()=>E,Zx:()=>b,nB:()=>h,nM:()=>m,qt:()=>R,w7:()=>A});var a=r(39155),t=r.n(a),o=r(13717),i=r(1005),l=r(28575),c=r(75835),d=r(87913),$=function(n){return{availability:"Non-EU",description:n("Zero spread CFDs on financial and derived instruments"),icon:t().createElement(o.AccountsDmt5ZrsIcon,{height:48,width:48}),title:"Zero Spread"}},s=function(n){return{availability:"Non-EU",description:n("Swap-free CFDs on selected financial and derived instruments"),icon:t().createElement(o.AccountsDmt5SwfIcon,{height:48,width:48}),title:"Swap-Free"}},p=function(n,e,r){return n("stp"===e?"Direct access to market prices":"gold"===e?"Trading opportunities on popular precious metals.":r?"Your all-in-one access to financial and derived instruments.":"CFDs on financial instruments")},g=function(n,e){return"stp"===n?"Financial STP":"gold"===n?"Gold":e?"CFDs":"Financial"},m=function(n,e,r){return{all:e===O.ZEROSPREAD?$(n):s(n),financial:{availability:"All",description:p(n,e,r),icon:"gold"===e?t().createElement(l.A,{height:48,width:48}):r?t().createElement(o.AccountsDmt5CfdsIcon,{fill:"#000000",iconSize:"lg"}):t().createElement(o.AccountsDmt5FinancialIcon,{height:48,width:48}),title:g(e,r)},synthetic:{availability:"Non-EU",description:n("CFDs on derived and financial instruments"),icon:t().createElement(o.AccountsDmt5StandardIcon,{height:48,width:48}),title:"Standard"}}},f={ctrader:{availability:"Non-EU",icon:t().createElement(o.AccountsDerivCtraderIcon,{height:48,width:48}),link:"https://onelink.to/5jgj8z",platform:"ctrader",title:"Deriv cTrader"},dxtrade:{availability:"Non-EU",icon:t().createElement(o.AccountsDerivXIcon,{height:48,width:48}),link:"https://onelink.to/grmtyx",platform:"dxtrade",title:"Deriv X"},mt5:{icon:t().createElement(o.AccountsDmt5StandardIcon,{height:48,width:48}),link:"https://onelink.to/xf26jx",platform:"mt5",title:"Deriv MT5"},mt5Investor:{icon:t().createElement(o.AccountsDmt5StandardIcon,{height:48,width:48}),link:"https://onelink.to/xf26jx",platform:"mt5",title:(0,i.localize)("Deriv MT5 Investor")}},b={bvi:{shortcode:"BVI",tncUrl:"tnc/deriv-(bvi)-ltd.pdf"},dml:{shortcode:"DML",tncUrl:"tnc/deriv-mauritius-ltd.pdf"},labuan:{shortcode:"Labuan",tncUrl:"tnc/deriv-(fx)-ltd.pdf"},maltainvest:{shortcode:"Maltainvest",tncUrl:"tnc/deriv-investments-(europe)-limited.pdf"},svg:{shortcode:"SVG",tncUrl:"tnc/deriv-(svg)-llc.pdf"},vanuatu:{shortcode:"Vanuatu",tncUrl:"tnc/general-terms.pdf"}},h=function(n,e){var r;return{ctrader:{icon:t().createElement(o.LabelPairedWindowsXlIcon,null),link:d.F5.windows,text:n("Download"),title:n("CTrader Windows App")},linux:{icon:t().createElement(o.LabelPairedLinuxXlIcon,null),link:d.vt.linux,text:n("Learn more"),title:n("MetaTrader 5 Linux app")},macos:{icon:t().createElement(o.LabelPairedMacosXlIcon,null),link:d.vt.macos,text:n("Download"),title:n("MetaTrader 5 MacOS app")},web:{icon:t().createElement(o.PartnersProductBrandLightDerivMt5LogoWordmarkIcon,{height:32,width:32}),link:e?(0,c.u)({mt5TradeAccount:e}):"",text:n("Open"),title:n("MetaTrader 5 web")},windows:{icon:t().createElement(o.LabelPairedWindowsXlIcon,null),link:null==e||null===(r=e.white_label_links)||void 0===r?void 0:r.windows,text:n("Download"),title:n("MetaTrader 5 Windows app")}}},_=(o.PartnersProductBrandDarkDerivCtraderWordmarkIcon,o.DerivProductBrandDarkDerivXWordmarkIcon,function(n){return{ctrader:n("Server maintenance occurs every first Saturday of the month from 7 to 10 GMT time. You may experience service disruption during this time."),dxtrade:n("Server maintenance starts at 06:00 GMT every Sunday and may last up to 2 hours. You may experience service disruption during this time."),mt5:n("Server maintenance starts at 01:00 GMT every Sunday, and this process may take up to 2 hours to complete. Service may be disrupted during this time.")}}),u={CFDS:"CFDs",CTRADER:"ctrader",DXTRADE:"dxtrade",MT5:"mt5"},x={ALL:"all",FINANCIAL:"financial",SYNTHETIC:"synthetic"},A={BVI:"bvi",LABUAN:"labuan",MALTA_INVEST:"maltainvest",SVG:"svg",VANUATU:"vanuatu"},O={CTRADER:"ctrader",DERIVX:"derivx",GOLD:"gold",SWAPFREE:"swap_free",ZEROSPREAD:"zero_spread"},R={FAILED:"failed",MIGRATED_WITH_POSITION:"migrated_with_position",MIGRATED_WITHOUT_POSITION:"migrated_without_position",PENDING:"pending",UNAVAILABLE:"unavailable",UNDER_MAINTENANCE:"under_maintenance",POA_FAILED:"poa_failed",POA_OUTDATED:"poa_outdated",PROOF_FAILED:"proof_failed",NEEDS_VERIFICATION:"needs_verification",POA_REQUIRED:"poa_required",POA_PENDING:"poa_pending",VERIFICATION_PENDING:"verification_pending",POA_VERIFIED:"poa_verified"},w={ACTIVE:"active",DISABLED:"disabled",MAINTENANCE:"maintenance",UNAVAILABLE:"unavailable"},E=[R.UNDER_MAINTENANCE,R.UNAVAILABLE,w.MAINTENANCE,w.UNAVAILABLE]},75835:(n,e,r)=>{"use strict";r.d(e,{h2:()=>s,u:()=>d,uL:()=>$});var a=r(37810),t=(r(49333),r(87913));function o(n){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},o(n)}function i(){i=function(){return e};var n,e={},r=Object.prototype,a=r.hasOwnProperty,t=Object.defineProperty||function(n,e,r){n[e]=r.value},l="function"==typeof Symbol?Symbol:{},c=l.iterator||"@@iterator",d=l.asyncIterator||"@@asyncIterator",$=l.toStringTag||"@@toStringTag";function s(n,e,r){return Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{s({},"")}catch(n){s=function(n,e,r){return n[e]=r}}function p(n,e,r,a){var o=e&&e.prototype instanceof u?e:u,i=Object.create(o.prototype),l=new k(a||[]);return t(i,"_invoke",{value:v(n,r,l)}),i}function g(n,e,r){try{return{type:"normal",arg:n.call(e,r)}}catch(n){return{type:"throw",arg:n}}}e.wrap=p;var m="suspendedStart",f="suspendedYield",b="executing",h="completed",_={};function u(){}function x(){}function A(){}var O={};s(O,c,(function(){return this}));var R=Object.getPrototypeOf,w=R&&R(R(D([])));w&&w!==r&&a.call(w,c)&&(O=w);var E=A.prototype=u.prototype=Object.create(O);function L(n){["next","throw","return"].forEach((function(e){s(n,e,(function(n){return this._invoke(e,n)}))}))}function y(n,e){function r(t,i,l,c){var d=g(n[t],n,i);if("throw"!==d.type){var $=d.arg,s=$.value;return s&&"object"==o(s)&&a.call(s,"__await")?e.resolve(s.__await).then((function(n){r("next",n,l,c)}),(function(n){r("throw",n,l,c)})):e.resolve(s).then((function(n){$.value=n,l($)}),(function(n){return r("throw",n,l,c)}))}c(d.arg)}var i;t(this,"_invoke",{value:function(n,a){function t(){return new e((function(e,t){r(n,a,e,t)}))}return i=i?i.then(t,t):t()}})}function v(e,r,a){var t=m;return function(o,i){if(t===b)throw Error("Generator is already running");if(t===h){if("throw"===o)throw i;return{value:n,done:!0}}for(a.method=o,a.arg=i;;){var l=a.delegate;if(l){var c=C(l,a);if(c){if(c===_)continue;return c}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if(t===m)throw t=h,a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);t=b;var d=g(e,r,a);if("normal"===d.type){if(t=a.done?h:f,d.arg===_)continue;return{value:d.arg,done:a.done}}"throw"===d.type&&(t=h,a.method="throw",a.arg=d.arg)}}}function C(e,r){var a=r.method,t=e.iterator[a];if(t===n)return r.delegate=null,"throw"===a&&e.iterator.return&&(r.method="return",r.arg=n,C(e,r),"throw"===r.method)||"return"!==a&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+a+"' method")),_;var o=g(t,e.iterator,r.arg);if("throw"===o.type)return r.method="throw",r.arg=o.arg,r.delegate=null,_;var i=o.arg;return i?i.done?(r[e.resultName]=i.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=n),r.delegate=null,_):i:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,_)}function I(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function T(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function k(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(I,this),this.reset(!0)}function D(e){if(e||""===e){var r=e[c];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var t=-1,i=function r(){for(;++t<e.length;)if(a.call(e,t))return r.value=e[t],r.done=!1,r;return r.value=n,r.done=!0,r};return i.next=i}}throw new TypeError(o(e)+" is not iterable")}return x.prototype=A,t(E,"constructor",{value:A,configurable:!0}),t(A,"constructor",{value:x,configurable:!0}),x.displayName=s(A,$,"GeneratorFunction"),e.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===x||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,A):(n.__proto__=A,s(n,$,"GeneratorFunction")),n.prototype=Object.create(E),n},e.awrap=function(n){return{__await:n}},L(y.prototype),s(y.prototype,d,(function(){return this})),e.AsyncIterator=y,e.async=function(n,r,a,t,o){void 0===o&&(o=Promise);var i=new y(p(n,r,a,t),o);return e.isGeneratorFunction(r)?i:i.next().then((function(n){return n.done?n.value:i.next()}))},L(E),s(E,$,"Generator"),s(E,c,(function(){return this})),s(E,"toString",(function(){return"[object Generator]"})),e.keys=function(n){var e=Object(n),r=[];for(var a in e)r.push(a);return r.reverse(),function n(){for(;r.length;){var a=r.pop();if(a in e)return n.value=a,n.done=!1,n}return n.done=!0,n}},e.values=D,k.prototype={constructor:k,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(T),!e)for(var r in this)"t"===r.charAt(0)&&a.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=n)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var r=this;function t(a,t){return l.type="throw",l.arg=e,r.next=a,t&&(r.method="next",r.arg=n),!!t}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],l=i.completion;if("root"===i.tryLoc)return t("end");if(i.tryLoc<=this.prev){var c=a.call(i,"catchLoc"),d=a.call(i,"finallyLoc");if(c&&d){if(this.prev<i.catchLoc)return t(i.catchLoc,!0);if(this.prev<i.finallyLoc)return t(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return t(i.catchLoc,!0)}else{if(!d)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return t(i.finallyLoc)}}}},abrupt:function(n,e){for(var r=this.tryEntries.length-1;r>=0;--r){var t=this.tryEntries[r];if(t.tryLoc<=this.prev&&a.call(t,"finallyLoc")&&this.prev<t.finallyLoc){var o=t;break}}o&&("break"===n||"continue"===n)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=n,i.arg=e,o?(this.method="next",this.next=o.finallyLoc,_):this.complete(i)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),_},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===n)return this.complete(r.completion,r.afterLoc),T(r),_}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===n){var a=r.completion;if("throw"===a.type){var t=a.arg;T(r)}return t}}throw Error("illegal catch attempt")},delegateYield:function(e,r,a){return this.delegate={iterator:D(e),resultName:r,nextLoc:a},"next"===this.method&&(this.arg=n),_}},e}function l(n,e,r,a,t,o,i){try{var l=n[o](i),c=l.value}catch(n){return void r(n)}l.done?e(c):Promise.resolve(c).then(a,t)}var c=a.OSDetectionUtils.mobileOSDetectAsync,d=function(n){var e,r,a=n.mt5TradeAccount;return"".concat(null==a||null===(e=a.white_label_links)||void 0===e?void 0:e.webtrader_url,"?login=").concat(null==a?void 0:a.display_login,"&server=").concat(null==a||null===(r=a.server_info)||void 0===r?void 0:r.environment)},$=function(n){var e,r=n.mt5TradeAccount;return"metatrader5://account?login=".concat(null==r?void 0:r.display_login,"&server=").concat(null==r||null===(e=r.server_info)||void 0===e?void 0:e.environment)},s=function(){var n=function(n){return function(){var e=this,r=arguments;return new Promise((function(a,t){var o=n.apply(e,r);function i(n){l(o,a,t,i,c,"next",n)}function c(n){l(o,a,t,i,c,"throw",n)}i(void 0)}))}}(i().mark((function n(e){var r,a,o,l;return i().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return a=e.mt5TradeAccount,n.next=3,c();case 3:if("iOS"!==(o=n.sent)){n.next=8;break}return n.abrupt("return",null==a||null===(l=a.white_label_links)||void 0===l?void 0:l.ios);case 8:if("huawei"!==o){n.next=10;break}return n.abrupt("return",null===t.vt||void 0===t.vt?void 0:t.vt.huawei);case 10:return n.abrupt("return",null==a||null===(r=a.white_label_links)||void 0===r?void 0:r.android);case 11:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()},87913:(n,e,r)=>{"use strict";r.d(e,{F5:()=>a,IC:()=>t,vt:()=>o});var a={android:"https://play.google.com/store/apps/details?id=com.deriv.ct",ios:"https://apps.apple.com/us/app/deriv-ctrader/id6466996509",live:"https://ct.deriv.com",mac:"https://getctradermac.com/deriv/ctrader-deriv-setup.dmg",staging:"https://ct-uat.deriv.com",windows:"https://getctrader.com/deriv/ctrader-deriv-setup.exe"},t={android:"https://play.google.com/store/apps/details?id=com.deriv.dx",demo:"https://dx-demo.deriv.com",huawei:"https://appgallery.huawei.com/app/C104633219",ios:"https://apps.apple.com/us/app/deriv-x/id1563337503",live:"https://dx.deriv.com"},o={huawei:"https://appgallery.huawei.com/#/app/C102015329",linux:"https://www.metatrader5.com/en/terminal/help/start_advanced/install_linux",macos:"https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/MetaTrader5.dmg"}},54800:(n,e,r)=>{"use strict";r.d(e,{A:()=>t});var a=r(1005);const t=function(){return"AR"===(0,a.getInitialLanguage)()}},38985:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>Y});var a=r(39155),t=r.n(a),o=r(38262),i=r(54800),l=r(54058),c=r(60992),d=r.n(c),$=r(13717),s=r(58912);r(68658);const p=function(n){var e=n.enabled,r=n.isNext,a=n.isRtl,o=n.onClick,i=a?t().createElement($.LabelPairedChevronLeftLgFillIcon,{"data-testid":"dt_compare_accounts_carousel_next_rtl_icon",fill:"#333333"}):t().createElement($.LabelPairedChevronRightLgFillIcon,{"data-testid":"dt_compare_accounts_carousel_next_ltr_icon",fill:"#333333"}),l=a?t().createElement($.LabelPairedChevronRightLgFillIcon,{"data-testid":"dt_compare_accounts_carousel_prev_rtl_icon",fill:"#333333"}):t().createElement($.LabelPairedChevronLeftLgFillIcon,{"data-testid":"dt_compare_accounts_carousel_prev_ltr_icon",fill:"#333333"});return t().createElement(s.A,{className:d()("wallets-compare-accounts-carousel-button",{"wallets-compare-accounts-carousel-button--next":r,"wallets-compare-accounts-carousel-button--prev":!r}),color:"white",disabled:!e,icon:r?i:l,isRound:!0,onClick:o,size:"md"})};function g(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var r=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=r){var a,t,o,i,l=[],c=!0,d=!1;try{if(o=(r=r.call(n)).next,0===e){if(Object(r)!==r)return;c=!1}else for(;!(c=(a=o.call(r)).done)&&(l.push(a.value),l.length!==e);c=!0);}catch(n){d=!0,t=n}finally{try{if(!c&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(d)throw t}}return l}}(n,e)||function(n,e){if(n){if("string"==typeof n)return m(n,e);var r={}.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?m(n,e):void 0}}(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function m(n,e){(null==e||e>n.length)&&(e=n.length);for(var r=0,a=Array(e);r<e;r++)a[r]=n[r];return a}r(59310);const f=function(n){var e=n.children,r=n.isRtl,o=void 0!==r&&r,i={align:0,containScroll:"trimSnaps",direction:o?"rtl":"ltr"},c=g((0,l.A)(i),2),d=c[0],$=c[1],s=g((0,a.useState)(!1),2),m=s[0],f=s[1],b=g((0,a.useState)(!1),2),h=b[0],_=b[1],u=(0,a.useCallback)((function(){return $&&$.scrollPrev()}),[$]),x=(0,a.useCallback)((function(){return $&&$.scrollNext()}),[$]),A=(0,a.useCallback)((function(n){f(n.canScrollPrev()),_(n.canScrollNext())}),[]);return(0,a.useEffect)((function(){$&&(A($),$.on("reInit",A),$.on("select",A))}),[$,A]),t().createElement("div",{className:"wallets-compare-accounts-carousel"},t().createElement("div",{className:"wallets-compare-accounts-carousel__viewport",ref:d},t().createElement("div",{className:"wallets-compare-accounts-carousel__container"},e)),t().createElement(p,{enabled:m,isNext:!1,isRtl:o,onClick:u}),t().createElement(p,{enabled:h,isNext:!0,isRtl:o,onClick:x}))};var b=r(1005),h=r(54783),_=r(49333),u=r(51107),x=r(16619),A=r(28575);function O(n){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},O(n)}function R(n,e,r){return(e=function(n){var e=function(n){if("object"!=O(n)||!n)return n;var e=n[Symbol.toPrimitive];if(void 0!==e){var r=e.call(n,"string");if("object"!=O(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(n)}(n);return"symbol"==O(e)?e:e+""}(e))in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}var w="financial",E="gold",L="standard",y="stp",v="swap_free",C="zero_spread",I=R(R(R(R(R(R(R(R({},L,(function(n){return t().createElement($.AccountsDmt5StandardIcon,n)})),w,{Eu:function(n){return t().createElement($.AccountsDmt5CfdsIcon,n)},NonEU:function(n){return t().createElement($.AccountsDmt5FinancialIcon,n)}}),v,(function(n){return t().createElement($.AccountsDmt5SwfIcon,n)})),_.$_.DXTRADE,(function(n){return t().createElement($.AccountsDerivXIcon,n)})),_.$_.CTRADER,(function(n){return t().createElement($.PartnersProductBrandLightDerivCtraderLogoIcon,n)})),C,(function(n){return t().createElement($.AccountsDmt5ZrsIcon,n)})),E,(function(n){return t().createElement(A.A,n)})),"default",(function(n){return t().createElement($.AccountsDmt5CfdsIcon,n)})),T={CTrader:"orange",DerivX:"green",MT5:"blue",OtherCFDs:"green"};r(27971);const k=function(n){var e,r,a=n.isEuRegion,o=n.product,i=n.productDetails,l=(0,b.useTranslations)().localize,c=(0,u.Y)().isTablet,d=l("Up to {{leverage}}",{leverage:null!==(e=null==i?void 0:i.max_leverage)&&void 0!==e?e:"1:1000"}),s=l("{{spread}} pips",{spread:null!==(r=null==i?void 0:i.min_spread)&&void 0!==r?r:"0.5"});return t().createElement("div",{className:"wallets-compare-accounts-text-container"},t().createElement("div",{className:"wallets-compare-accounts-text-container__separator"},t().createElement(h.E,{align:"center",as:"h1",size:c?"md":"xl",weight:"bold"},d),t().createElement(h.E,{align:"center",as:"p",size:"2xs"},l(a?"Leverage":"Maximum leverage"))),!a&&t().createElement("div",{className:"wallets-compare-accounts-text-container__separator"},t().createElement("div",{className:"wallets-compare-accounts-title__separator"},t().createElement(h.E,{align:"center",as:"h1",size:c?"md":"xl",weight:"bold"},s),o===C&&t().createElement(x.m,{as:"div","data-testid":"wallets-compare-accounts-text-container__tooltip",tooltipContent:l("Commissions apply"),tooltipOffset:20,tooltipPosition:"top"},t().createElement($.LegacyInfo1pxIcon,{width:16}))),t().createElement(h.E,{align:"center",as:"p",size:"2xs"},l("Spreads from"))))};function D(n){return function(n){if(Array.isArray(n))return S(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||function(n,e){if(n){if("string"==typeof n)return S(n,e);var r={}.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?S(n,e):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function S(n,e){(null==e||e>n.length)&&(e=n.length);for(var r=0,a=Array(e);r<e;r++)a[r]=n[r];return a}r(79074);const G=function(n){var e=function(n){switch(n){case _.$_.MT5:return"MT5";case _.$_.CTRADER:return"CTrader";case _.$_.DXTRADE:return"DerivX";default:return"OtherCFDs"}}(n.platform),r=(0,b.useTranslations)().localize;return t().createElement("div",{className:"\n            wallets-compare-accounts-platform-label\n            wallets-compare-accounts-platform-label--".concat(e.toLowerCase(),"\n            "),"data-testid":"dt_wallets_compare_accounts_platform_label"},t().createElement(h.E,{align:"center",as:"p",color:T[e],size:"xs",weight:"bold"},function(n){return{CTrader:"Deriv cTrader",DerivX:"Deriv X",MT5:n("MT5 Platform"),OtherCFDs:n("Other CFDs Platform")}}(r)[e]))};var H=r(30157);r(13318);const z=function(n){var e=n.isDemo,r=n.isEuRegion,a=n.platform,o=n.product,i=(0,b.useTranslations)().localize,l=(0,u.Y)().isDesktop,c=function(n){var e=n.isEuRegion,r=n.platform,a=n.product;switch(r){case _.$_.DXTRADE:case _.$_.CTRADER:return I[r];case _.$_.MT5:switch(a){case L:return I[L];case w:return e?I[w].Eu:I[w].NonEU;case y:return I[w].NonEU;case v:return I[v];case C:return I[C];case E:return I[E];default:return I.default}default:return I.default}}({isEuRegion:r,platform:a,product:o}),d=function(n){var e=n.isDemo,r=n.isEuRegion,a=n.platform,t=n.product;if(a===_.$_.DXTRADE||a===_.$_.CTRADER)switch(a){case _.$_.DXTRADE:return e?(0,b.localize)("Deriv X Demo"):(0,b.localize)("Deriv X");case _.$_.CTRADER:return e?(0,b.localize)("Deriv cTrader Demo"):(0,b.localize)("Deriv cTrader");default:return""}if(a===_.$_.MT5)switch(t){case L:return e?(0,b.localize)("Standard Demo"):(0,b.localize)("Standard");case w:return r?e?(0,b.localize)("CFDs Demo"):(0,b.localize)("CFDs"):e?(0,b.localize)("Financial Demo"):(0,b.localize)("Financial");case y:return(0,b.localize)("Financial - STP");case v:return e?(0,b.localize)("Swap-Free Demo"):(0,b.localize)("Swap-Free");case C:return e?(0,b.localize)("Zero Spread Demo"):(0,b.localize)("Zero Spread");case E:return e?(0,b.localize)("Gold Demo"):(0,b.localize)("Gold");default:return""}}({isDemo:e,isEuRegion:r,platform:a,product:o}),s=i("This account gives you direct market price access and tighter spreads."),p={height:l?48:32,width:l?48:32};return t().createElement(t().Fragment,null,t().createElement("div",{className:"wallets-compare-accounts-title"},c(p),t().createElement("div",{className:"wallets-compare-accounts-title__separator"},t().createElement(h.E,{align:"center",as:"h1",size:"sm",weight:"bold"},d),o===y&&t().createElement(x.m,{as:"div","data-testid":"dt_wallets_compare_accounts_title__tooltip",tooltipContainerClassName:"wallets-compare-accounts-title__tooltip",tooltipContent:s,tooltipPosition:"bottom-start"},t().createElement($.LegacyInfo1pxIcon,{width:16})))),t().createElement(H.c,{color:"var(--general-main-3)",height:.5,margin:"0.4rem 2.8rem"}))};r(97699);const N=function(n){var e=n.highlighted,r=n.icon,a=n.text,o=(0,u.Y)(),i=o.isDesktop,l=o.isTablet;return t().createElement("div",{className:"wallets-compare-accounts-instrument-icon","data-testid":"dt_instruments_icon_container",style:{opacity:e?"":"0.2"}},function(n){var e=n?{height:16,width:16}:{height:24,width:24};return{Baskets:t().createElement($.IllustrativeBasketIndicesIcon,e),Commodities:t().createElement($.IllustrativeCommoditiesIcon,e),Cryptocurrencies:t().createElement($.IllustrativeCryptocurrenciesIcon,e),DerivedFX:t().createElement($.IllustrativeDerivedFxIcon,e),ETF:t().createElement($.IllustrativeEtfIcon,e),Forex:t().createElement($.IllustrativeForexIcon,e),StockIndices:t().createElement($.IllustrativeStockIndicesIcon,e),Stocks:t().createElement($.IllustrativeStocksIcon,e),Synthetics:t().createElement($.IllustrativeSyntheticIndicesIcon,e)}}(!i)[r],t().createElement("div",{className:"wallets-compare-accounts-trading-instruments__text"},t().createElement(h.E,{align:"start",as:"p",lineHeight:"xs",size:l?"2xs":"xs",weight:i?"bold":"normal"},a)))};function B(){return B=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var a in r)({}).hasOwnProperty.call(r,a)&&(n[a]=r[a])}return n},B.apply(null,arguments)}function K(n,e){(null==e||e>n.length)&&(e=n.length);for(var r=0,a=Array(e);r<e;r++)a[r]=n[r];return a}r(23093);const F=function(n){var e=n.instruments,r=n.isEuRegion,a=n.platform,o=function(n){return function(n){if(Array.isArray(n))return K(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||function(n,e){if(n){if("string"==typeof n)return K(n,e);var r={}.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?K(n,e):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(function(n){var e=n.instruments,r=n.isEuRegion,a=n.localize,t=n.platform,o=null==e?void 0:e.find((function(n){return-1!==n.toLowerCase().indexOf("forex")})),i=function(){if(o)switch(null==o?void 0:o.toLowerCase()){case"forex: major/minor":return a("Forex: major/minor");case"forex: standard/micro":return a("Forex: standard/micro");case"forex: standard/exotic":return a("Forex: standard/exotic");case"forex: standard":return a("Forex: standard");default:return a("Forex")}return t===_.$_.CTRADER?a("Forex: major/minor"):a("Forex: standard/micro")},l=function(n){return t===_.$_.CTRADER||t===_.$_.DXTRADE||Boolean(null==e?void 0:e.includes(n))};return[{highlighted:l(i()),icon:"Forex",text:i()},{highlighted:l("Stocks"),icon:"Stocks",text:a("Stocks")},{highlighted:l("Stock indices"),icon:"StockIndices",text:a("Stock indices")},{highlighted:l("Commodities"),icon:"Commodities",text:a("Commodities")},{highlighted:l("Cryptocurrencies"),icon:"Cryptocurrencies",text:a("Cryptocurrencies")}].concat(D(r?[]:[{highlighted:l("ETFs"),icon:"ETF",text:a("ETFs")}]),[{highlighted:l("Synthetic indices"),icon:"Synthetics",text:a("Synthetic indices")}],D(r?[]:[{highlighted:l("Basket indices"),icon:"Baskets",text:a("Basket indices")}]),D(r?[]:[{highlighted:l("Derived FX"),icon:"DerivedFX",text:a("Derived FX")}]))}({instruments:e,isEuRegion:r,localize:(0,b.useTranslations)().localize,platform:a}));return t().createElement("div",{className:"wallets-compare-accounts-outline","data-testid":"dt_compare_cfd_account_outline__container"},o.map((function(n){return t().createElement(N,B({key:n.text},n))})))};r(6861);const U=function(n){var e=n.account,r=n.isDemo,a=n.isEuRegion,o="mt5"===e.platform?e.product:void 0,i="mt5"===e.platform?e.product_details:void 0,l="mt5"===e.platform?e.instruments:void 0,c=o===_.Ax.ZEROSPREAD||o===_.Ax.GOLD;return t().createElement("div",null,t().createElement("div",{className:"wallets-compare-accounts-card"},t().createElement(G,{platform:e.platform}),c&&t().createElement("div",{className:"wallets-compare-accounts-card__banner"},t().createElement(h.E,{color:"white",size:"xs",weight:"bold"},t().createElement(b.Localize,{i18n_default_text:"NEW"}))),t().createElement(z,{isDemo:r,isEuRegion:a,platform:e.platform,product:o}),t().createElement(k,{isEuRegion:a,product:o,productDetails:i}),t().createElement(F,{instruments:l,isEuRegion:a,platform:e.platform})))};var P=r(4442);r(53946);const W=function(n){var e=n.isDemo,r=n.isLoading,a=(0,P.useHistory)(),o=e?t().createElement(b.Localize,{i18n_default_text:"Compare CFDs demo accounts"}):t().createElement(b.Localize,{i18n_default_text:"Compare CFDs accounts"});return t().createElement("div",{className:"wallets-compare-accounts-header"},t().createElement("div",{className:"wallets-compare-accounts-header__title"},t().createElement(h.E,{size:"xl",weight:"bold"},r?"":o)),t().createElement($.LegacyClose2pxIcon,{className:"wallets-compare-accounts-header__close-icon","data-testid":"dt_wallets_compare_accounts_header_close_icon",iconSize:"xs",onClick:function(){a.push("/")}}))};r(66043);const M=function(){var n=(0,o.useActiveWalletAccount)().data,e=(0,i.A)(),r=(0,o.useIsEuRegion)(),a=r.data,l=r.isLoading,c=(n||{}).is_virtual,d=void 0!==c&&c,$=(0,o.useCFDCompareAccounts)(),s=$.data,p=$.hasCTraderAccountAvailable,g=$.hasDxtradeAccountAvailable,m=s.ctraderAccount,b=s.dxtradeAccount,h=s.mt5Accounts;return t().createElement("div",{className:"wallets-compare-accounts"},t().createElement(W,{isDemo:d,isLoading:l}),t().createElement("div",{className:"wallets-compare-accounts__card-list"},t().createElement(f,{isRtl:e},null==h?void 0:h.map((function(n,e){return t().createElement(U,{account:n,isDemo:d,isEuRegion:a,key:"compare-accounts-".concat(null==n?void 0:n.product,"-").concat(e)})})),(null==h?void 0:h.length)&&p&&m&&t().createElement(U,{account:m,isDemo:d,isEuRegion:a}),(null==h?void 0:h.length)&&g&&b&&t().createElement(U,{account:b,isDemo:d,isEuRegion:a}))))};r(4806);const Y=function(){return t().createElement("div",{className:"wallets-compare-accounts-route"},t().createElement(M,null))}},28575:(n,e,r)=>{"use strict";r.d(e,{A:()=>l});var a=r(39155),t=r.n(a),o=["styles"];function i(){return i=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var a in r)({}).hasOwnProperty.call(r,a)&&(n[a]=r[a])}return n},i.apply(null,arguments)}const l=function(n){n.styles;var e=function(n,e){if(null==n)return{};var r,a,t=function(n,e){if(null==n)return{};var r={};for(var a in n)if({}.hasOwnProperty.call(n,a)){if(e.includes(a))continue;r[a]=n[a]}return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)r=o[a],e.includes(r)||{}.propertyIsEnumerable.call(n,r)&&(t[r]=n[r])}return t}(n,o);return t().createElement("svg",i({width:"48",height:"48",viewBox:"0 0 48 48",fill:"none",xmlns:"http://www.w3.org/2000/svg"},e),t().createElement("path",{d:"M39 0H9a9 9 0 00-9 9v26.25h48V9a9 9 0 00-9-9",fill:"#0364B9"}),t().createElement("path",{d:"M9 0a9 9 0 00-9 9v.261L44.872 2.18A8.97 8.97 0 0039 0zm39 9c0-2.256-.83-4.32-2.202-5.899L39.904 35.25H48z",fill:"#0A559E"}),t().createElement("path",{d:"M0 34.5h48V39a9 9 0 01-9 9H9a9 9 0 01-9-9z",fill:"#DAAF0A"}),t().createElement("path",{d:"M11.013 14.526q.324.594.738 1.476.432.864.882 1.89.468 1.008.918 2.07l.846 1.998.846-1.998q.45-1.062.9-2.07.468-1.026.882-1.89.432-.882.756-1.476h2.556q.18 1.242.324 2.79.162 1.53.27 3.204.126 1.656.216 3.33.108 1.674.18 3.15h-2.736a324 324 0 00-.144-3.96 107 107 0 00-.27-4.32l-.72 1.674-.792 1.836q-.378.918-.738 1.764-.36.828-.612 1.422h-1.962q-.252-.594-.612-1.422-.36-.846-.756-1.764-.378-.918-.774-1.836l-.72-1.674a107 107 0 00-.27 4.32q-.09 2.142-.144 3.96H7.341q.072-1.476.162-3.15l.216-3.33q.126-1.674.27-3.204.162-1.548.342-2.79zm21.019 0v2.394H28.27V27h-2.808V16.92H21.7v-2.394zm5.945 8.802a1.77 1.77 0 00-.234-.918q-.235-.414-.81-.684-.577-.27-1.548-.414-.973-.144-2.448-.144.198-1.674.324-3.402.125-1.728.197-3.24h6.75v2.25h-4.5q-.034.648-.09 1.26a18 18 0 01-.09 1.044q2.63.18 3.87 1.242 1.26 1.044 1.26 2.916 0 .864-.306 1.602-.305.738-.917 1.278t-1.549.846q-.917.306-2.16.306-.485 0-1.026-.072a10 10 0 01-1.026-.162q-.485-.09-.882-.198a3.5 3.5 0 01-.611-.216l.486-2.214q.45.198 1.188.396.738.18 1.764.18 1.242 0 1.8-.486.558-.504.558-1.17M15.194 39.222q-.981 0-1.422.549-.432.54-.432 1.485 0 .459.108.837.108.369.324.639t.54.423q.324.144.756.144.234 0 .396-.01.171-.008.297-.035v-2.17h1.404v3.088a5 5 0 01-.81.207 7 7 0 01-1.377.117q-.702 0-1.278-.216a2.7 2.7 0 01-.972-.63 2.9 2.9 0 01-.63-1.017 4.1 4.1 0 01-.216-1.377q0-.783.243-1.386t.666-1.017q.423-.423.99-.64a3.5 3.5 0 011.224-.215q.441 0 .792.063.36.053.612.135.261.072.423.153.171.081.243.126L16.67 39.6a3.4 3.4 0 00-.666-.261 2.7 2.7 0 00-.81-.117m4.456 2.034q0 .459.108.828.117.369.324.639.216.261.522.405t.702.144q.387 0 .693-.144.315-.144.522-.405.216-.27.324-.64.117-.368.117-.827t-.117-.828a1.7 1.7 0 00-.324-.64 1.36 1.36 0 00-.522-.413 1.6 1.6 0 00-.693-.144 1.55 1.55 0 00-.702.153 1.45 1.45 0 00-.522.414 1.9 1.9 0 00-.324.639 3 3 0 00-.108.819m4.761 0q0 .801-.243 1.413a2.9 2.9 0 01-.648 1.017q-.414.405-.99.612a3.5 3.5 0 01-1.224.207 3.5 3.5 0 01-1.206-.207 2.8 2.8 0 01-.99-.612 2.9 2.9 0 01-.666-1.017q-.243-.613-.243-1.413 0-.801.252-1.404.252-.612.675-1.026.432-.414.99-.621a3.4 3.4 0 011.188-.207q.639 0 1.206.207t.99.62q.423.415.666 1.027.243.603.243 1.404m5.337 1.917v1.206h-4.167v-6.237h1.404v5.03zm2.309.063l.225.018h.315q1.052 0 1.557-.531.513-.531.513-1.467 0-.982-.486-1.485t-1.54-.504a5 5 0 00-.296.009q-.153 0-.288.018zm4.059-1.98q0 .81-.252 1.413a2.6 2.6 0 01-.72.999 3 3 0 01-1.125.594 5.2 5.2 0 01-1.494.198q-.378 0-.882-.036a7 7 0 01-.99-.126v-6.075q.486-.09 1.008-.117.531-.036.909-.036.801 0 1.449.18.657.18 1.125.567t.72.99.252 1.449",fill:"#fff"}))}},98548:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var a=r(17059),t=r.n(a),o=r(32806),i=r.n(o)()(t());i.push([n.id,".wallets-compare-accounts-carousel{position:relative;--slide-spacing: 1rem;overflow:hidden}.wallets-compare-accounts-carousel__viewport{padding:2.4rem;overflow:hidden;width:100%;height:100%}@media(max-width: 1279px){.wallets-compare-accounts-carousel__viewport{padding:1.6rem}}.wallets-compare-accounts-carousel__container{backface-visibility:hidden;display:flex;touch-action:pan-y;flex-direction:row;max-height:auto;transition:transform 0s ease-in-out;padding-bottom:.8rem}","",{version:3,sources:["webpack://./CompareAccountsCarousel.scss"],names:[],mappings:"AAiuBA,mCACI,iBAAA,CACA,qBAAA,CACA,eAAA,CAEA,6CACI,cAAA,CACA,eAAA,CACA,UAAA,CACA,WAAA,CAxDJ,0BAoDA,6CAOQ,cAAA,CAAA,CAIR,8CACI,0BAAA,CACA,YAAA,CACA,kBAAA,CACA,kBAAA,CACA,eAAA,CACA,mCAAA,CACA,oBAAA",sourcesContent:["/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/*RTL Language Mixin*/\n\n@mixin rtl {\n    [dir='rtl'] & {\n        @content;\n    }\n}\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-black-9: #5c5c5c;\n$color-black-10: #181c25;\n$color-blue: #377cfc;\n$color-blue-1: #0dc2e7;\n$color-blue-2: #2a3052;\n$color-blue-3: #0796e0;\n$color-blue-4: #0677af;\n$color-blue-5: #dfeaff;\n$color-blue-6: #92b8ff;\n$color-blue-7: #182130;\n$color-blue-8: #e6f5ff;\n$color-blue-9: #00426a;\n$color-brown: #664407;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-green-5: #4bb4b329;\n$color-green-6: #17eabd;\n$color-green-7: #e8fdf8;\n$color-green-8: #cedddf;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-grey-8: #d7d7d7;\n$color_grey-9: #868686;\n$color-grey-10: #919191;\n$color-grey-11: #fafafa;\n$color-grey-12: #f5f7fa;\n$color-grey-13: #2e2e2e;\n$color-grey-14: #e2e5e7;\n$color-grey-15: #f3f4f5;\n$color-orange: #ff6444;\n$color-orange-2: #ff9c13;\n$color-purple: #722fe4;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-red-6: #ec3f3f29;\n$color-red-7: #ffe1e3;\n$color-red-8: #661b20;\n$color-red-9: #b33037;\n$color-red-10: #ff444f;\n$color-red-11: #fce3e3;\n$color-red-12: #c40000;\n$color-violet: #4a3871;\n$color-white: #ffffff;\n$color-yellow: #ffad3a;\n$color-yellow-1: #b3760d;\n$color-yellow-2: #ffa912;\n$color-yellow-3: rgba(255, 173, 58, 0.16);\n$color-yellow-4: #fff7e6;\n$color-yellow-5: #6a4800;\n$color-yellow-6: #ffeabf;\n\n/* status colors */\n$color-status-warning: rgba(255, 173, 58, 0.16);\n$color-status-information: rgba(55, 124, 252, 0.16);\n$color-status-announcement: rgba(75, 180, 179, 0.16);\n$color-status-error: rgba(236, 63, 63, 0.16);\n$color-status-verified: rgba(0, 122, 34);\n$color-status-danger: rgba(196, 0, 0);\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\n$alpha-color-black-7: transparentize($color-black, 0.5);\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-white-4: transparentize($color-white, 0.3);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-red-2: transparentize($color-red, 0.84);\n$alpha-color-red-3: transparentize($color-red, 0.76);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\n\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK: #000000;\n$COLOR_BLACK_2: #1d1f20;\n$COLOR_BLACK_3: #0e0e0e;\n$COLOR_GREEN_1: #39b19d;\n$COLOR_GREEN_2: #2d9f93;\n$COLOR_GREEN_3: #21ce99;\n$COLOR_GREEN_4: #00a79e;\n$COLOR_GREEN_5: #4bb4b3;\n$COLOR_ORANGE: #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE: #4f60ae;\n$COLOR_RED: #e31c4b;\n$COLOR_RED_2: #cc2e3d;\n$COLOR_RED_3: #ec3f3f;\n$COLOR_CORAL_RED: #ff444f;\n$COLOR_SKY_BLUE: #2196f3;\n$COLOR_WHITE: #ffffff;\n$COLOR_BLUE: #1c5ae3;\n\n// Light theme\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\n$COLOR_LIGHT_GRAY_1: #999cac;\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3: #eaeced;\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1: #0b0e18;\n$COLOR_DARK_BLUE_2: #101320;\n$COLOR_DARK_BLUE_3: #191c31;\n$COLOR_DARK_BLUE_4: #202641;\n$COLOR_DARK_BLUE_5: #2a3052;\n$COLOR_DARK_BLUE_6: #555975;\n$COLOR_DARK_BLUE_7: #7f8397;\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1: #282a37;\n$COLOR_DARK_GRAY_2: #303342;\n$COLOR_DARK_GRAY_3: #555975;\n$COLOR_DARK_GRAY_4: #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n$BORDER_RADIUS_2: 8px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH: 240px;\n$POSITIONS_DRAWER_MARGIN: 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$MOBILE_HEADER_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/* Wallet gradient background */\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n\n/* App Cards gradient background */\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n\n/* Wallets */\n$ready-banner-bg-color: #e2f3f3;\n$ready-banner-tick-bg-color: #4ab4b3;\n$wallet-demo-bg-color: #fff8f9;\n$wallet-dark-demo-bg-color: #140506;\n$wallet-demo-divider-color: #fff0f1;\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    } @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: (\n                        $key: $val,\n                    );\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    } @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    } @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    } @else if $size == 1rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\n    } @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get(\n        $map: $TYPEFACES_LIST,\n        $key: $var,\n    );\n\n    $size: nth($typeface_config, 1); // font-size\n    $align: nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color: nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'xheading' 3.2rem,\n    'heading' 3rem,\n    'large' 2.8rem,\n    'title' 1.6rem,\n    'paragraph' 1.4rem,\n    'small' 1.2rem,\n    'xsmall' 1rem,\n    'xxsmall' 0.8rem,\n    'xxxsmall' 0.6rem\n);\n\n$FONT_COLORS: (\n    'active' var(--text-colored-background),\n    'prominent' var(--text-prominent),\n    'black' var(--text-general),\n    'grey' var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green' var(--text-profit-success),\n    'red' var(--text-loss-danger)\n);\n\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\n\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\n\n$LINEHEIGHTS: (\n    'large': 1.75,\n    'medium': 1.5,\n    'small': 1.25,\n    'xsmall': 1.4,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon-active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active,\n    &-active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled,\n    &-disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white,\n    &-white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color,\n    &-border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary,\n    &-secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$mobile-width: 320px;\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-down {\n    @media (max-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-up {\n    @media (min-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-up {\n    @media (min-width: #{$mobile-width}) {\n        @content;\n    }\n}\n\n@mixin mobile {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\n        @content;\n    }\n}\n\n@mixin mobile-landscape {\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n@mixin touch-device {\n    // add css interaction media query to detect touch devices\n    // refer to: https://caniuse.com/#feat=css-media-interaction\n    @media (pointer: coarse) {\n        @content;\n    }\n}\n\n@mixin mobile-tablet-mix {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n/** Need to add new breakpoints for mixins */\n$max-mobile-width: 600px;\n$min-desktop-width: 1280px;\n\n@mixin mobile-screen {\n    @media (max-width: #{$max-mobile-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin desktop-screen {\n    @media (min-width: #{$min-desktop-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-screen {\n    @media (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-or-desktop-screen {\n    @media (min-width: #{$max-mobile-width + 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-portrait-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-landscape {\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin mobile {\n    @media (max-width: #{$tablet-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n.wallets-compare-accounts-carousel {\n    position: relative;\n    --slide-spacing: 1rem;\n    overflow: hidden;\n\n    &__viewport {\n        padding: 2.4rem;\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n\n        @include mobile-or-tablet-screen {\n            padding: 1.6rem;\n        }\n    }\n\n    &__container {\n        backface-visibility: hidden;\n        display: flex;\n        touch-action: pan-y;\n        flex-direction: row;\n        max-height: auto;\n        transition: transform 0s ease-in-out;\n        padding-bottom: 0.8rem;\n    }\n}\n"],sourceRoot:""}]);const l=i},45972:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var a=r(17059),t=r.n(a),o=r(32806),i=r.n(o)()(t());i.push([n.id,'.wallets-compare-accounts-carousel-button{background-color:var(--general-main-1);z-index:1;color:var(--background-site);position:absolute;display:flex;align-items:center;justify-content:center;top:50%;cursor:pointer;width:4rem;height:4rem;border:1px solid var(--general-background-main);border-radius:50%;box-shadow:0px 0px 24px rgba(0,0,0,.08),0px 24px 24px rgba(0,0,0,.08)}[dir="ltr"] .wallets-compare-accounts-carousel-button--prev{left:1.6rem}[dir="rtl"] .wallets-compare-accounts-carousel-button--prev{right:1.6rem}[dir="ltr"] .wallets-compare-accounts-carousel-button--next{right:1.6rem}[dir="rtl"] .wallets-compare-accounts-carousel-button--next{left:1.6rem}.wallets-compare-accounts-carousel-button:disabled{opacity:.3;display:none}',"",{version:3,sources:["webpack://./CompareAccountsCarouselButton.scss"],names:[],mappings:"AAiuBA,0CACI,sCAAA,CACA,SAAA,CACA,4BAAA,CACA,iBAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,OAAA,CACA,cAAA,CACA,UAAA,CACA,WAAA,CACA,+CAAA,CACA,iBAAA,CACA,qEAAA,CAEA,4DACI,WAAA,CADJ,4DACI,YAAA,CAGJ,4DACI,YAAA,CADJ,4DACI,WAAA,CAGJ,mDACI,UAAA,CACA,YAAA",sourcesContent:["/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/*RTL Language Mixin*/\n\n@mixin rtl {\n    [dir='rtl'] & {\n        @content;\n    }\n}\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-black-9: #5c5c5c;\n$color-black-10: #181c25;\n$color-blue: #377cfc;\n$color-blue-1: #0dc2e7;\n$color-blue-2: #2a3052;\n$color-blue-3: #0796e0;\n$color-blue-4: #0677af;\n$color-blue-5: #dfeaff;\n$color-blue-6: #92b8ff;\n$color-blue-7: #182130;\n$color-blue-8: #e6f5ff;\n$color-blue-9: #00426a;\n$color-brown: #664407;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-green-5: #4bb4b329;\n$color-green-6: #17eabd;\n$color-green-7: #e8fdf8;\n$color-green-8: #cedddf;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-grey-8: #d7d7d7;\n$color_grey-9: #868686;\n$color-grey-10: #919191;\n$color-grey-11: #fafafa;\n$color-grey-12: #f5f7fa;\n$color-grey-13: #2e2e2e;\n$color-grey-14: #e2e5e7;\n$color-grey-15: #f3f4f5;\n$color-orange: #ff6444;\n$color-orange-2: #ff9c13;\n$color-purple: #722fe4;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-red-6: #ec3f3f29;\n$color-red-7: #ffe1e3;\n$color-red-8: #661b20;\n$color-red-9: #b33037;\n$color-red-10: #ff444f;\n$color-red-11: #fce3e3;\n$color-red-12: #c40000;\n$color-violet: #4a3871;\n$color-white: #ffffff;\n$color-yellow: #ffad3a;\n$color-yellow-1: #b3760d;\n$color-yellow-2: #ffa912;\n$color-yellow-3: rgba(255, 173, 58, 0.16);\n$color-yellow-4: #fff7e6;\n$color-yellow-5: #6a4800;\n$color-yellow-6: #ffeabf;\n\n/* status colors */\n$color-status-warning: rgba(255, 173, 58, 0.16);\n$color-status-information: rgba(55, 124, 252, 0.16);\n$color-status-announcement: rgba(75, 180, 179, 0.16);\n$color-status-error: rgba(236, 63, 63, 0.16);\n$color-status-verified: rgba(0, 122, 34);\n$color-status-danger: rgba(196, 0, 0);\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\n$alpha-color-black-7: transparentize($color-black, 0.5);\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-white-4: transparentize($color-white, 0.3);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-red-2: transparentize($color-red, 0.84);\n$alpha-color-red-3: transparentize($color-red, 0.76);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\n\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK: #000000;\n$COLOR_BLACK_2: #1d1f20;\n$COLOR_BLACK_3: #0e0e0e;\n$COLOR_GREEN_1: #39b19d;\n$COLOR_GREEN_2: #2d9f93;\n$COLOR_GREEN_3: #21ce99;\n$COLOR_GREEN_4: #00a79e;\n$COLOR_GREEN_5: #4bb4b3;\n$COLOR_ORANGE: #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE: #4f60ae;\n$COLOR_RED: #e31c4b;\n$COLOR_RED_2: #cc2e3d;\n$COLOR_RED_3: #ec3f3f;\n$COLOR_CORAL_RED: #ff444f;\n$COLOR_SKY_BLUE: #2196f3;\n$COLOR_WHITE: #ffffff;\n$COLOR_BLUE: #1c5ae3;\n\n// Light theme\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\n$COLOR_LIGHT_GRAY_1: #999cac;\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3: #eaeced;\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1: #0b0e18;\n$COLOR_DARK_BLUE_2: #101320;\n$COLOR_DARK_BLUE_3: #191c31;\n$COLOR_DARK_BLUE_4: #202641;\n$COLOR_DARK_BLUE_5: #2a3052;\n$COLOR_DARK_BLUE_6: #555975;\n$COLOR_DARK_BLUE_7: #7f8397;\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1: #282a37;\n$COLOR_DARK_GRAY_2: #303342;\n$COLOR_DARK_GRAY_3: #555975;\n$COLOR_DARK_GRAY_4: #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n$BORDER_RADIUS_2: 8px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH: 240px;\n$POSITIONS_DRAWER_MARGIN: 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$MOBILE_HEADER_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/* Wallet gradient background */\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n\n/* App Cards gradient background */\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n\n/* Wallets */\n$ready-banner-bg-color: #e2f3f3;\n$ready-banner-tick-bg-color: #4ab4b3;\n$wallet-demo-bg-color: #fff8f9;\n$wallet-dark-demo-bg-color: #140506;\n$wallet-demo-divider-color: #fff0f1;\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    } @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: (\n                        $key: $val,\n                    );\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    } @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    } @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    } @else if $size == 1rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\n    } @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get(\n        $map: $TYPEFACES_LIST,\n        $key: $var,\n    );\n\n    $size: nth($typeface_config, 1); // font-size\n    $align: nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color: nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'xheading' 3.2rem,\n    'heading' 3rem,\n    'large' 2.8rem,\n    'title' 1.6rem,\n    'paragraph' 1.4rem,\n    'small' 1.2rem,\n    'xsmall' 1rem,\n    'xxsmall' 0.8rem,\n    'xxxsmall' 0.6rem\n);\n\n$FONT_COLORS: (\n    'active' var(--text-colored-background),\n    'prominent' var(--text-prominent),\n    'black' var(--text-general),\n    'grey' var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green' var(--text-profit-success),\n    'red' var(--text-loss-danger)\n);\n\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\n\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\n\n$LINEHEIGHTS: (\n    'large': 1.75,\n    'medium': 1.5,\n    'small': 1.25,\n    'xsmall': 1.4,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon-active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active,\n    &-active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled,\n    &-disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white,\n    &-white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color,\n    &-border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary,\n    &-secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$mobile-width: 320px;\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-down {\n    @media (max-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-up {\n    @media (min-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-up {\n    @media (min-width: #{$mobile-width}) {\n        @content;\n    }\n}\n\n@mixin mobile {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\n        @content;\n    }\n}\n\n@mixin mobile-landscape {\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n@mixin touch-device {\n    // add css interaction media query to detect touch devices\n    // refer to: https://caniuse.com/#feat=css-media-interaction\n    @media (pointer: coarse) {\n        @content;\n    }\n}\n\n@mixin mobile-tablet-mix {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n/** Need to add new breakpoints for mixins */\n$max-mobile-width: 600px;\n$min-desktop-width: 1280px;\n\n@mixin mobile-screen {\n    @media (max-width: #{$max-mobile-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin desktop-screen {\n    @media (min-width: #{$min-desktop-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-screen {\n    @media (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-or-desktop-screen {\n    @media (min-width: #{$max-mobile-width + 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-portrait-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-landscape {\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin mobile {\n    @media (max-width: #{$tablet-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n.wallets-compare-accounts-carousel-button {\n    background-color: var(--general-main-1);\n    z-index: 1;\n    color: var(--background-site);\n    position: absolute;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    top: 50%;\n    cursor: pointer;\n    width: 4rem;\n    height: 4rem;\n    border: 1px solid var(--general-background-main);\n    border-radius: 50%;\n    box-shadow: 0px 0px 24px rgba(0, 0, 0, 0.08), 0px 24px 24px rgba(0, 0, 0, 0.08);\n\n    &--prev {\n        inset-inline-start: 1.6rem;\n    }\n\n    &--next {\n        inset-inline-end: 1.6rem;\n    }\n\n    &:disabled {\n        opacity: 0.3;\n        display: none;\n    }\n}\n"],sourceRoot:""}]);const l=i},87163:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var a=r(17059),t=r.n(a),o=r(32806),i=r.n(o)()(t());i.push([n.id,".wallets-compare-accounts-card{position:relative;overflow:hidden;width:27rem;border:1px solid var(--general-hover);border-radius:2.4rem;margin:0 1rem;padding-bottom:2.4rem}.wallets-compare-accounts-card:hover{box-shadow:0 2px 8px 0 var(--shadow-menu)}@media(max-width: 1279px){.wallets-compare-accounts-card{width:18rem;padding-bottom:1.6rem}}.wallets-compare-accounts-card__eu-clients{position:relative;top:.5rem;display:flex;justify-content:flex-start;padding:0 2.4rem}.wallets-compare-accounts-card__banner{position:absolute;z-index:1;display:flex;justify-content:center;align-items:center;padding:1.5rem;width:15rem;height:2rem;background:var(--status-transfer);color:var(--text-colored-background);transform:translateX(17rem) translateY(-2rem) rotate(45deg)}[dir=rtl] .wallets-compare-accounts-card__banner{transform:translateX(-17rem) translateY(-2rem) rotate(-45deg)}@media(max-width: 1279px){.wallets-compare-accounts-card__banner{padding:.1rem;transform:translateX(8rem) translateY(-2rem) rotate(45deg)}[dir=rtl] .wallets-compare-accounts-card__banner{transform:translateX(-8rem) translateY(-2rem) rotate(-45deg)}}","",{version:3,sources:["webpack://./CompareAccountsCard.scss"],names:[],mappings:"AAiuBA,+BACI,iBAAA,CACA,eAAA,CACA,WAAA,CACA,qCAAA,CACA,oBAAA,CACA,aAAA,CACA,qBAAA,CAEA,qCACI,yCAAA,CAzDJ,0BA+CJ,+BAcQ,WAAA,CACA,qBAAA,CAAA,CAGJ,2CACI,iBAAA,CACA,SAAA,CACA,YAAA,CACA,0BAAA,CACA,gBAAA,CAGJ,uCACI,iBAAA,CACA,SAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,cAAA,CACA,WAAA,CACA,WAAA,CACA,iCAAA,CACA,oCAAA,CACA,2DAAA,CA/vBJ,iDAkwBQ,6DAAA,CAvFR,0BAyEA,uCAkBQ,aAAA,CACA,0DAAA,CAvwBR,iDA0wBY,4DAAA,CAAA",sourcesContent:["/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/*RTL Language Mixin*/\n\n@mixin rtl {\n    [dir='rtl'] & {\n        @content;\n    }\n}\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-black-9: #5c5c5c;\n$color-black-10: #181c25;\n$color-blue: #377cfc;\n$color-blue-1: #0dc2e7;\n$color-blue-2: #2a3052;\n$color-blue-3: #0796e0;\n$color-blue-4: #0677af;\n$color-blue-5: #dfeaff;\n$color-blue-6: #92b8ff;\n$color-blue-7: #182130;\n$color-blue-8: #e6f5ff;\n$color-blue-9: #00426a;\n$color-brown: #664407;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-green-5: #4bb4b329;\n$color-green-6: #17eabd;\n$color-green-7: #e8fdf8;\n$color-green-8: #cedddf;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-grey-8: #d7d7d7;\n$color_grey-9: #868686;\n$color-grey-10: #919191;\n$color-grey-11: #fafafa;\n$color-grey-12: #f5f7fa;\n$color-grey-13: #2e2e2e;\n$color-grey-14: #e2e5e7;\n$color-grey-15: #f3f4f5;\n$color-orange: #ff6444;\n$color-orange-2: #ff9c13;\n$color-purple: #722fe4;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-red-6: #ec3f3f29;\n$color-red-7: #ffe1e3;\n$color-red-8: #661b20;\n$color-red-9: #b33037;\n$color-red-10: #ff444f;\n$color-red-11: #fce3e3;\n$color-red-12: #c40000;\n$color-violet: #4a3871;\n$color-white: #ffffff;\n$color-yellow: #ffad3a;\n$color-yellow-1: #b3760d;\n$color-yellow-2: #ffa912;\n$color-yellow-3: rgba(255, 173, 58, 0.16);\n$color-yellow-4: #fff7e6;\n$color-yellow-5: #6a4800;\n$color-yellow-6: #ffeabf;\n\n/* status colors */\n$color-status-warning: rgba(255, 173, 58, 0.16);\n$color-status-information: rgba(55, 124, 252, 0.16);\n$color-status-announcement: rgba(75, 180, 179, 0.16);\n$color-status-error: rgba(236, 63, 63, 0.16);\n$color-status-verified: rgba(0, 122, 34);\n$color-status-danger: rgba(196, 0, 0);\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\n$alpha-color-black-7: transparentize($color-black, 0.5);\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-white-4: transparentize($color-white, 0.3);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-red-2: transparentize($color-red, 0.84);\n$alpha-color-red-3: transparentize($color-red, 0.76);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\n\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK: #000000;\n$COLOR_BLACK_2: #1d1f20;\n$COLOR_BLACK_3: #0e0e0e;\n$COLOR_GREEN_1: #39b19d;\n$COLOR_GREEN_2: #2d9f93;\n$COLOR_GREEN_3: #21ce99;\n$COLOR_GREEN_4: #00a79e;\n$COLOR_GREEN_5: #4bb4b3;\n$COLOR_ORANGE: #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE: #4f60ae;\n$COLOR_RED: #e31c4b;\n$COLOR_RED_2: #cc2e3d;\n$COLOR_RED_3: #ec3f3f;\n$COLOR_CORAL_RED: #ff444f;\n$COLOR_SKY_BLUE: #2196f3;\n$COLOR_WHITE: #ffffff;\n$COLOR_BLUE: #1c5ae3;\n\n// Light theme\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\n$COLOR_LIGHT_GRAY_1: #999cac;\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3: #eaeced;\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1: #0b0e18;\n$COLOR_DARK_BLUE_2: #101320;\n$COLOR_DARK_BLUE_3: #191c31;\n$COLOR_DARK_BLUE_4: #202641;\n$COLOR_DARK_BLUE_5: #2a3052;\n$COLOR_DARK_BLUE_6: #555975;\n$COLOR_DARK_BLUE_7: #7f8397;\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1: #282a37;\n$COLOR_DARK_GRAY_2: #303342;\n$COLOR_DARK_GRAY_3: #555975;\n$COLOR_DARK_GRAY_4: #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n$BORDER_RADIUS_2: 8px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH: 240px;\n$POSITIONS_DRAWER_MARGIN: 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$MOBILE_HEADER_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/* Wallet gradient background */\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n\n/* App Cards gradient background */\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n\n/* Wallets */\n$ready-banner-bg-color: #e2f3f3;\n$ready-banner-tick-bg-color: #4ab4b3;\n$wallet-demo-bg-color: #fff8f9;\n$wallet-dark-demo-bg-color: #140506;\n$wallet-demo-divider-color: #fff0f1;\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    } @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: (\n                        $key: $val,\n                    );\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    } @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    } @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    } @else if $size == 1rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\n    } @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get(\n        $map: $TYPEFACES_LIST,\n        $key: $var,\n    );\n\n    $size: nth($typeface_config, 1); // font-size\n    $align: nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color: nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'xheading' 3.2rem,\n    'heading' 3rem,\n    'large' 2.8rem,\n    'title' 1.6rem,\n    'paragraph' 1.4rem,\n    'small' 1.2rem,\n    'xsmall' 1rem,\n    'xxsmall' 0.8rem,\n    'xxxsmall' 0.6rem\n);\n\n$FONT_COLORS: (\n    'active' var(--text-colored-background),\n    'prominent' var(--text-prominent),\n    'black' var(--text-general),\n    'grey' var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green' var(--text-profit-success),\n    'red' var(--text-loss-danger)\n);\n\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\n\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\n\n$LINEHEIGHTS: (\n    'large': 1.75,\n    'medium': 1.5,\n    'small': 1.25,\n    'xsmall': 1.4,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon-active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active,\n    &-active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled,\n    &-disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white,\n    &-white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color,\n    &-border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary,\n    &-secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$mobile-width: 320px;\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-down {\n    @media (max-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-up {\n    @media (min-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-up {\n    @media (min-width: #{$mobile-width}) {\n        @content;\n    }\n}\n\n@mixin mobile {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\n        @content;\n    }\n}\n\n@mixin mobile-landscape {\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n@mixin touch-device {\n    // add css interaction media query to detect touch devices\n    // refer to: https://caniuse.com/#feat=css-media-interaction\n    @media (pointer: coarse) {\n        @content;\n    }\n}\n\n@mixin mobile-tablet-mix {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n/** Need to add new breakpoints for mixins */\n$max-mobile-width: 600px;\n$min-desktop-width: 1280px;\n\n@mixin mobile-screen {\n    @media (max-width: #{$max-mobile-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin desktop-screen {\n    @media (min-width: #{$min-desktop-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-screen {\n    @media (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-or-desktop-screen {\n    @media (min-width: #{$max-mobile-width + 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-portrait-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-landscape {\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin mobile {\n    @media (max-width: #{$tablet-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n.wallets-compare-accounts-card {\n    position: relative;\n    overflow: hidden;\n    width: 27rem;\n    border: 1px solid var(--general-hover);\n    border-radius: 2.4rem;\n    margin: 0 1rem;\n    padding-bottom: 2.4rem;\n\n    &:hover {\n        box-shadow: 0 2px 8px 0 var(--shadow-menu);\n    }\n\n    @include mobile-or-tablet-screen {\n        width: 18rem;\n        padding-bottom: 1.6rem;\n    }\n\n    &__eu-clients {\n        position: relative;\n        top: 0.5rem;\n        display: flex;\n        justify-content: flex-start;\n        padding: 0 2.4rem;\n    }\n\n    &__banner {\n        position: absolute;\n        z-index: 1;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        padding: 1.5rem;\n        width: 15rem;\n        height: 2rem;\n        background: var(--status-transfer);\n        color: var(--text-colored-background);\n        transform: translateX(17rem) translateY(-2rem) rotate(45deg);\n\n        @include rtl {\n            transform: translateX(-17rem) translateY(-2rem) rotate(-45deg);\n        }\n\n        @include mobile-or-tablet-screen {\n            padding: 0.1rem;\n            transform: translateX(8rem) translateY(-2rem) rotate(45deg);\n\n            @include rtl {\n                transform: translateX(-8rem) translateY(-2rem) rotate(-45deg);\n            }\n        }\n    }\n}\n"],sourceRoot:""}]);const l=i},10097:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var a=r(17059),t=r.n(a),o=r(32806),i=r.n(o)()(t());i.push([n.id,".wallets-compare-accounts-text-container__separator{margin:1.6rem auto}","",{version:3,sources:["webpack://./CompareAccountsDescription.scss"],names:[],mappings:"AAkuBI,oDACI,kBAAA",sourcesContent:["/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/*RTL Language Mixin*/\n\n@mixin rtl {\n    [dir='rtl'] & {\n        @content;\n    }\n}\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-black-9: #5c5c5c;\n$color-black-10: #181c25;\n$color-blue: #377cfc;\n$color-blue-1: #0dc2e7;\n$color-blue-2: #2a3052;\n$color-blue-3: #0796e0;\n$color-blue-4: #0677af;\n$color-blue-5: #dfeaff;\n$color-blue-6: #92b8ff;\n$color-blue-7: #182130;\n$color-blue-8: #e6f5ff;\n$color-blue-9: #00426a;\n$color-brown: #664407;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-green-5: #4bb4b329;\n$color-green-6: #17eabd;\n$color-green-7: #e8fdf8;\n$color-green-8: #cedddf;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-grey-8: #d7d7d7;\n$color_grey-9: #868686;\n$color-grey-10: #919191;\n$color-grey-11: #fafafa;\n$color-grey-12: #f5f7fa;\n$color-grey-13: #2e2e2e;\n$color-grey-14: #e2e5e7;\n$color-grey-15: #f3f4f5;\n$color-orange: #ff6444;\n$color-orange-2: #ff9c13;\n$color-purple: #722fe4;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-red-6: #ec3f3f29;\n$color-red-7: #ffe1e3;\n$color-red-8: #661b20;\n$color-red-9: #b33037;\n$color-red-10: #ff444f;\n$color-red-11: #fce3e3;\n$color-red-12: #c40000;\n$color-violet: #4a3871;\n$color-white: #ffffff;\n$color-yellow: #ffad3a;\n$color-yellow-1: #b3760d;\n$color-yellow-2: #ffa912;\n$color-yellow-3: rgba(255, 173, 58, 0.16);\n$color-yellow-4: #fff7e6;\n$color-yellow-5: #6a4800;\n$color-yellow-6: #ffeabf;\n\n/* status colors */\n$color-status-warning: rgba(255, 173, 58, 0.16);\n$color-status-information: rgba(55, 124, 252, 0.16);\n$color-status-announcement: rgba(75, 180, 179, 0.16);\n$color-status-error: rgba(236, 63, 63, 0.16);\n$color-status-verified: rgba(0, 122, 34);\n$color-status-danger: rgba(196, 0, 0);\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\n$alpha-color-black-7: transparentize($color-black, 0.5);\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-white-4: transparentize($color-white, 0.3);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-red-2: transparentize($color-red, 0.84);\n$alpha-color-red-3: transparentize($color-red, 0.76);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\n\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK: #000000;\n$COLOR_BLACK_2: #1d1f20;\n$COLOR_BLACK_3: #0e0e0e;\n$COLOR_GREEN_1: #39b19d;\n$COLOR_GREEN_2: #2d9f93;\n$COLOR_GREEN_3: #21ce99;\n$COLOR_GREEN_4: #00a79e;\n$COLOR_GREEN_5: #4bb4b3;\n$COLOR_ORANGE: #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE: #4f60ae;\n$COLOR_RED: #e31c4b;\n$COLOR_RED_2: #cc2e3d;\n$COLOR_RED_3: #ec3f3f;\n$COLOR_CORAL_RED: #ff444f;\n$COLOR_SKY_BLUE: #2196f3;\n$COLOR_WHITE: #ffffff;\n$COLOR_BLUE: #1c5ae3;\n\n// Light theme\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\n$COLOR_LIGHT_GRAY_1: #999cac;\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3: #eaeced;\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1: #0b0e18;\n$COLOR_DARK_BLUE_2: #101320;\n$COLOR_DARK_BLUE_3: #191c31;\n$COLOR_DARK_BLUE_4: #202641;\n$COLOR_DARK_BLUE_5: #2a3052;\n$COLOR_DARK_BLUE_6: #555975;\n$COLOR_DARK_BLUE_7: #7f8397;\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1: #282a37;\n$COLOR_DARK_GRAY_2: #303342;\n$COLOR_DARK_GRAY_3: #555975;\n$COLOR_DARK_GRAY_4: #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n$BORDER_RADIUS_2: 8px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH: 240px;\n$POSITIONS_DRAWER_MARGIN: 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$MOBILE_HEADER_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/* Wallet gradient background */\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n\n/* App Cards gradient background */\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n\n/* Wallets */\n$ready-banner-bg-color: #e2f3f3;\n$ready-banner-tick-bg-color: #4ab4b3;\n$wallet-demo-bg-color: #fff8f9;\n$wallet-dark-demo-bg-color: #140506;\n$wallet-demo-divider-color: #fff0f1;\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    } @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: (\n                        $key: $val,\n                    );\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    } @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    } @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    } @else if $size == 1rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\n    } @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get(\n        $map: $TYPEFACES_LIST,\n        $key: $var,\n    );\n\n    $size: nth($typeface_config, 1); // font-size\n    $align: nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color: nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'xheading' 3.2rem,\n    'heading' 3rem,\n    'large' 2.8rem,\n    'title' 1.6rem,\n    'paragraph' 1.4rem,\n    'small' 1.2rem,\n    'xsmall' 1rem,\n    'xxsmall' 0.8rem,\n    'xxxsmall' 0.6rem\n);\n\n$FONT_COLORS: (\n    'active' var(--text-colored-background),\n    'prominent' var(--text-prominent),\n    'black' var(--text-general),\n    'grey' var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green' var(--text-profit-success),\n    'red' var(--text-loss-danger)\n);\n\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\n\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\n\n$LINEHEIGHTS: (\n    'large': 1.75,\n    'medium': 1.5,\n    'small': 1.25,\n    'xsmall': 1.4,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon-active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active,\n    &-active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled,\n    &-disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white,\n    &-white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color,\n    &-border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary,\n    &-secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$mobile-width: 320px;\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-down {\n    @media (max-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-up {\n    @media (min-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-up {\n    @media (min-width: #{$mobile-width}) {\n        @content;\n    }\n}\n\n@mixin mobile {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\n        @content;\n    }\n}\n\n@mixin mobile-landscape {\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n@mixin touch-device {\n    // add css interaction media query to detect touch devices\n    // refer to: https://caniuse.com/#feat=css-media-interaction\n    @media (pointer: coarse) {\n        @content;\n    }\n}\n\n@mixin mobile-tablet-mix {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n/** Need to add new breakpoints for mixins */\n$max-mobile-width: 600px;\n$min-desktop-width: 1280px;\n\n@mixin mobile-screen {\n    @media (max-width: #{$max-mobile-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin desktop-screen {\n    @media (min-width: #{$min-desktop-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-screen {\n    @media (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-or-desktop-screen {\n    @media (min-width: #{$max-mobile-width + 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-portrait-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-landscape {\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin mobile {\n    @media (max-width: #{$tablet-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n.wallets-compare-accounts-text-container {\n    &__separator {\n        margin: 1.6rem auto;\n    }\n}\n"],sourceRoot:""}]);const l=i},10172:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var a=r(17059),t=r.n(a),o=r(32806),i=r.n(o)()(t());i.push([n.id,".wallets-compare-accounts-header{display:flex;align-items:center;padding:0 1rem;height:5rem;border-bottom:.2rem solid #f2f3f4;position:sticky;top:0;background-color:#fff;z-index:1}.wallets-compare-accounts-header__title{display:flex;width:100%;justify-content:center}.wallets-compare-accounts-header__close-icon{cursor:pointer}","",{version:3,sources:["webpack://./CompareAccountsHeader.scss"],names:[],mappings:"AAiuBA,iCACI,YAAA,CACA,kBAAA,CACA,cAAA,CACA,WAAA,CACA,iCAAA,CACA,eAAA,CACA,KAAA,CACA,qBAAA,CACA,SAAA,CAEA,wCACI,YAAA,CACA,UAAA,CACA,sBAAA,CAGJ,6CACI,cAAA",sourcesContent:["/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/*RTL Language Mixin*/\n\n@mixin rtl {\n    [dir='rtl'] & {\n        @content;\n    }\n}\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-black-9: #5c5c5c;\n$color-black-10: #181c25;\n$color-blue: #377cfc;\n$color-blue-1: #0dc2e7;\n$color-blue-2: #2a3052;\n$color-blue-3: #0796e0;\n$color-blue-4: #0677af;\n$color-blue-5: #dfeaff;\n$color-blue-6: #92b8ff;\n$color-blue-7: #182130;\n$color-blue-8: #e6f5ff;\n$color-blue-9: #00426a;\n$color-brown: #664407;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-green-5: #4bb4b329;\n$color-green-6: #17eabd;\n$color-green-7: #e8fdf8;\n$color-green-8: #cedddf;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-grey-8: #d7d7d7;\n$color_grey-9: #868686;\n$color-grey-10: #919191;\n$color-grey-11: #fafafa;\n$color-grey-12: #f5f7fa;\n$color-grey-13: #2e2e2e;\n$color-grey-14: #e2e5e7;\n$color-grey-15: #f3f4f5;\n$color-orange: #ff6444;\n$color-orange-2: #ff9c13;\n$color-purple: #722fe4;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-red-6: #ec3f3f29;\n$color-red-7: #ffe1e3;\n$color-red-8: #661b20;\n$color-red-9: #b33037;\n$color-red-10: #ff444f;\n$color-red-11: #fce3e3;\n$color-red-12: #c40000;\n$color-violet: #4a3871;\n$color-white: #ffffff;\n$color-yellow: #ffad3a;\n$color-yellow-1: #b3760d;\n$color-yellow-2: #ffa912;\n$color-yellow-3: rgba(255, 173, 58, 0.16);\n$color-yellow-4: #fff7e6;\n$color-yellow-5: #6a4800;\n$color-yellow-6: #ffeabf;\n\n/* status colors */\n$color-status-warning: rgba(255, 173, 58, 0.16);\n$color-status-information: rgba(55, 124, 252, 0.16);\n$color-status-announcement: rgba(75, 180, 179, 0.16);\n$color-status-error: rgba(236, 63, 63, 0.16);\n$color-status-verified: rgba(0, 122, 34);\n$color-status-danger: rgba(196, 0, 0);\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\n$alpha-color-black-7: transparentize($color-black, 0.5);\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-white-4: transparentize($color-white, 0.3);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-red-2: transparentize($color-red, 0.84);\n$alpha-color-red-3: transparentize($color-red, 0.76);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\n\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK: #000000;\n$COLOR_BLACK_2: #1d1f20;\n$COLOR_BLACK_3: #0e0e0e;\n$COLOR_GREEN_1: #39b19d;\n$COLOR_GREEN_2: #2d9f93;\n$COLOR_GREEN_3: #21ce99;\n$COLOR_GREEN_4: #00a79e;\n$COLOR_GREEN_5: #4bb4b3;\n$COLOR_ORANGE: #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE: #4f60ae;\n$COLOR_RED: #e31c4b;\n$COLOR_RED_2: #cc2e3d;\n$COLOR_RED_3: #ec3f3f;\n$COLOR_CORAL_RED: #ff444f;\n$COLOR_SKY_BLUE: #2196f3;\n$COLOR_WHITE: #ffffff;\n$COLOR_BLUE: #1c5ae3;\n\n// Light theme\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\n$COLOR_LIGHT_GRAY_1: #999cac;\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3: #eaeced;\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1: #0b0e18;\n$COLOR_DARK_BLUE_2: #101320;\n$COLOR_DARK_BLUE_3: #191c31;\n$COLOR_DARK_BLUE_4: #202641;\n$COLOR_DARK_BLUE_5: #2a3052;\n$COLOR_DARK_BLUE_6: #555975;\n$COLOR_DARK_BLUE_7: #7f8397;\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1: #282a37;\n$COLOR_DARK_GRAY_2: #303342;\n$COLOR_DARK_GRAY_3: #555975;\n$COLOR_DARK_GRAY_4: #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n$BORDER_RADIUS_2: 8px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH: 240px;\n$POSITIONS_DRAWER_MARGIN: 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$MOBILE_HEADER_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/* Wallet gradient background */\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n\n/* App Cards gradient background */\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n\n/* Wallets */\n$ready-banner-bg-color: #e2f3f3;\n$ready-banner-tick-bg-color: #4ab4b3;\n$wallet-demo-bg-color: #fff8f9;\n$wallet-dark-demo-bg-color: #140506;\n$wallet-demo-divider-color: #fff0f1;\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    } @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: (\n                        $key: $val,\n                    );\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    } @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    } @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    } @else if $size == 1rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\n    } @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get(\n        $map: $TYPEFACES_LIST,\n        $key: $var,\n    );\n\n    $size: nth($typeface_config, 1); // font-size\n    $align: nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color: nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'xheading' 3.2rem,\n    'heading' 3rem,\n    'large' 2.8rem,\n    'title' 1.6rem,\n    'paragraph' 1.4rem,\n    'small' 1.2rem,\n    'xsmall' 1rem,\n    'xxsmall' 0.8rem,\n    'xxxsmall' 0.6rem\n);\n\n$FONT_COLORS: (\n    'active' var(--text-colored-background),\n    'prominent' var(--text-prominent),\n    'black' var(--text-general),\n    'grey' var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green' var(--text-profit-success),\n    'red' var(--text-loss-danger)\n);\n\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\n\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\n\n$LINEHEIGHTS: (\n    'large': 1.75,\n    'medium': 1.5,\n    'small': 1.25,\n    'xsmall': 1.4,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon-active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active,\n    &-active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled,\n    &-disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white,\n    &-white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color,\n    &-border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary,\n    &-secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$mobile-width: 320px;\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-down {\n    @media (max-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-up {\n    @media (min-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-up {\n    @media (min-width: #{$mobile-width}) {\n        @content;\n    }\n}\n\n@mixin mobile {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\n        @content;\n    }\n}\n\n@mixin mobile-landscape {\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n@mixin touch-device {\n    // add css interaction media query to detect touch devices\n    // refer to: https://caniuse.com/#feat=css-media-interaction\n    @media (pointer: coarse) {\n        @content;\n    }\n}\n\n@mixin mobile-tablet-mix {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n/** Need to add new breakpoints for mixins */\n$max-mobile-width: 600px;\n$min-desktop-width: 1280px;\n\n@mixin mobile-screen {\n    @media (max-width: #{$max-mobile-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin desktop-screen {\n    @media (min-width: #{$min-desktop-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-screen {\n    @media (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-or-desktop-screen {\n    @media (min-width: #{$max-mobile-width + 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-portrait-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-landscape {\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin mobile {\n    @media (max-width: #{$tablet-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n.wallets-compare-accounts-header {\n    display: flex;\n    align-items: center;\n    padding: 0 1rem;\n    height: 5rem;\n    border-bottom: 0.2rem solid #f2f3f4;\n    position: sticky;\n    top: 0;\n    background-color: #ffffff;\n    z-index: 1;\n\n    &__title {\n        display: flex;\n        width: 100%;\n        justify-content: center;\n    }\n\n    &__close-icon {\n        cursor: pointer;\n    }\n}\n"],sourceRoot:""}]);const l=i},63700:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var a=r(17059),t=r.n(a),o=r(32806),i=r.n(o)()(t());i.push([n.id,".wallets-compare-accounts-platform-label{background-color:#e6f5ff;padding:.9rem;border-top-left-radius:1.4rem;border-top-right-radius:1.4rem}.wallets-compare-accounts-platform-label--ctrader{background-color:#ffeabf}.wallets-compare-accounts-platform-label--othercfds,.wallets-compare-accounts-platform-label--derivx{background-color:#e8fdf8}","",{version:3,sources:["webpack://./CompareAccountsPlatformLabel.scss"],names:[],mappings:"AAiuBA,yCACI,wBAAA,CACA,aAAA,CACA,6BAAA,CACA,8BAAA,CAEA,kDACI,wBAAA,CAGJ,qGAEI,wBAAA",sourcesContent:["/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/*RTL Language Mixin*/\n\n@mixin rtl {\n    [dir='rtl'] & {\n        @content;\n    }\n}\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-black-9: #5c5c5c;\n$color-black-10: #181c25;\n$color-blue: #377cfc;\n$color-blue-1: #0dc2e7;\n$color-blue-2: #2a3052;\n$color-blue-3: #0796e0;\n$color-blue-4: #0677af;\n$color-blue-5: #dfeaff;\n$color-blue-6: #92b8ff;\n$color-blue-7: #182130;\n$color-blue-8: #e6f5ff;\n$color-blue-9: #00426a;\n$color-brown: #664407;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-green-5: #4bb4b329;\n$color-green-6: #17eabd;\n$color-green-7: #e8fdf8;\n$color-green-8: #cedddf;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-grey-8: #d7d7d7;\n$color_grey-9: #868686;\n$color-grey-10: #919191;\n$color-grey-11: #fafafa;\n$color-grey-12: #f5f7fa;\n$color-grey-13: #2e2e2e;\n$color-grey-14: #e2e5e7;\n$color-grey-15: #f3f4f5;\n$color-orange: #ff6444;\n$color-orange-2: #ff9c13;\n$color-purple: #722fe4;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-red-6: #ec3f3f29;\n$color-red-7: #ffe1e3;\n$color-red-8: #661b20;\n$color-red-9: #b33037;\n$color-red-10: #ff444f;\n$color-red-11: #fce3e3;\n$color-red-12: #c40000;\n$color-violet: #4a3871;\n$color-white: #ffffff;\n$color-yellow: #ffad3a;\n$color-yellow-1: #b3760d;\n$color-yellow-2: #ffa912;\n$color-yellow-3: rgba(255, 173, 58, 0.16);\n$color-yellow-4: #fff7e6;\n$color-yellow-5: #6a4800;\n$color-yellow-6: #ffeabf;\n\n/* status colors */\n$color-status-warning: rgba(255, 173, 58, 0.16);\n$color-status-information: rgba(55, 124, 252, 0.16);\n$color-status-announcement: rgba(75, 180, 179, 0.16);\n$color-status-error: rgba(236, 63, 63, 0.16);\n$color-status-verified: rgba(0, 122, 34);\n$color-status-danger: rgba(196, 0, 0);\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\n$alpha-color-black-7: transparentize($color-black, 0.5);\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-white-4: transparentize($color-white, 0.3);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-red-2: transparentize($color-red, 0.84);\n$alpha-color-red-3: transparentize($color-red, 0.76);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\n\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK: #000000;\n$COLOR_BLACK_2: #1d1f20;\n$COLOR_BLACK_3: #0e0e0e;\n$COLOR_GREEN_1: #39b19d;\n$COLOR_GREEN_2: #2d9f93;\n$COLOR_GREEN_3: #21ce99;\n$COLOR_GREEN_4: #00a79e;\n$COLOR_GREEN_5: #4bb4b3;\n$COLOR_ORANGE: #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE: #4f60ae;\n$COLOR_RED: #e31c4b;\n$COLOR_RED_2: #cc2e3d;\n$COLOR_RED_3: #ec3f3f;\n$COLOR_CORAL_RED: #ff444f;\n$COLOR_SKY_BLUE: #2196f3;\n$COLOR_WHITE: #ffffff;\n$COLOR_BLUE: #1c5ae3;\n\n// Light theme\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\n$COLOR_LIGHT_GRAY_1: #999cac;\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3: #eaeced;\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1: #0b0e18;\n$COLOR_DARK_BLUE_2: #101320;\n$COLOR_DARK_BLUE_3: #191c31;\n$COLOR_DARK_BLUE_4: #202641;\n$COLOR_DARK_BLUE_5: #2a3052;\n$COLOR_DARK_BLUE_6: #555975;\n$COLOR_DARK_BLUE_7: #7f8397;\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1: #282a37;\n$COLOR_DARK_GRAY_2: #303342;\n$COLOR_DARK_GRAY_3: #555975;\n$COLOR_DARK_GRAY_4: #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n$BORDER_RADIUS_2: 8px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH: 240px;\n$POSITIONS_DRAWER_MARGIN: 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$MOBILE_HEADER_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/* Wallet gradient background */\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n\n/* App Cards gradient background */\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n\n/* Wallets */\n$ready-banner-bg-color: #e2f3f3;\n$ready-banner-tick-bg-color: #4ab4b3;\n$wallet-demo-bg-color: #fff8f9;\n$wallet-dark-demo-bg-color: #140506;\n$wallet-demo-divider-color: #fff0f1;\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    } @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: (\n                        $key: $val,\n                    );\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    } @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    } @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    } @else if $size == 1rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\n    } @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get(\n        $map: $TYPEFACES_LIST,\n        $key: $var,\n    );\n\n    $size: nth($typeface_config, 1); // font-size\n    $align: nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color: nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'xheading' 3.2rem,\n    'heading' 3rem,\n    'large' 2.8rem,\n    'title' 1.6rem,\n    'paragraph' 1.4rem,\n    'small' 1.2rem,\n    'xsmall' 1rem,\n    'xxsmall' 0.8rem,\n    'xxxsmall' 0.6rem\n);\n\n$FONT_COLORS: (\n    'active' var(--text-colored-background),\n    'prominent' var(--text-prominent),\n    'black' var(--text-general),\n    'grey' var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green' var(--text-profit-success),\n    'red' var(--text-loss-danger)\n);\n\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\n\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\n\n$LINEHEIGHTS: (\n    'large': 1.75,\n    'medium': 1.5,\n    'small': 1.25,\n    'xsmall': 1.4,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon-active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active,\n    &-active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled,\n    &-disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white,\n    &-white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color,\n    &-border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary,\n    &-secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$mobile-width: 320px;\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-down {\n    @media (max-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-up {\n    @media (min-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-up {\n    @media (min-width: #{$mobile-width}) {\n        @content;\n    }\n}\n\n@mixin mobile {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\n        @content;\n    }\n}\n\n@mixin mobile-landscape {\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n@mixin touch-device {\n    // add css interaction media query to detect touch devices\n    // refer to: https://caniuse.com/#feat=css-media-interaction\n    @media (pointer: coarse) {\n        @content;\n    }\n}\n\n@mixin mobile-tablet-mix {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n/** Need to add new breakpoints for mixins */\n$max-mobile-width: 600px;\n$min-desktop-width: 1280px;\n\n@mixin mobile-screen {\n    @media (max-width: #{$max-mobile-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin desktop-screen {\n    @media (min-width: #{$min-desktop-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-screen {\n    @media (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-or-desktop-screen {\n    @media (min-width: #{$max-mobile-width + 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-portrait-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-landscape {\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin mobile {\n    @media (max-width: #{$tablet-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n.wallets-compare-accounts-platform-label {\n    background-color: #e6f5ff;\n    padding: 0.9rem;\n    border-top-left-radius: 1.4rem;\n    border-top-right-radius: 1.4rem;\n\n    &--ctrader {\n        background-color: #ffeabf;\n    }\n\n    &--othercfds,\n    &--derivx {\n        background-color: #e8fdf8;\n    }\n}\n"],sourceRoot:""}]);const l=i},54161:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var a=r(17059),t=r.n(a),o=r(32806),i=r.n(o)()(t());i.push([n.id,".wallets-compare-accounts{width:100%;height:100%}@media(max-width: 1279px){.wallets-compare-accounts{margin:0;overflow-x:auto;overflow-y:scroll}}.wallets-compare-accounts__card-list{display:flex;justify-content:center}@media(min-width: 1280px){.wallets-compare-accounts__card-list{margin:0 auto;max-width:123.2rem}}","",{version:3,sources:["webpack://./CompareAccountsScreen.scss"],names:[],mappings:"AAiuBA,0BACI,UAAA,CACA,WAAA,CAjDA,0BA+CJ,0BAKQ,QAAA,CACA,eAAA,CACA,iBAAA,CAAA,CAGJ,qCACI,YAAA,CACA,sBAAA,CAjEJ,0BA+DA,qCAKQ,aAAA,CACA,kBAAA,CAAA",sourcesContent:["/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/*RTL Language Mixin*/\n\n@mixin rtl {\n    [dir='rtl'] & {\n        @content;\n    }\n}\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-black-9: #5c5c5c;\n$color-black-10: #181c25;\n$color-blue: #377cfc;\n$color-blue-1: #0dc2e7;\n$color-blue-2: #2a3052;\n$color-blue-3: #0796e0;\n$color-blue-4: #0677af;\n$color-blue-5: #dfeaff;\n$color-blue-6: #92b8ff;\n$color-blue-7: #182130;\n$color-blue-8: #e6f5ff;\n$color-blue-9: #00426a;\n$color-brown: #664407;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-green-5: #4bb4b329;\n$color-green-6: #17eabd;\n$color-green-7: #e8fdf8;\n$color-green-8: #cedddf;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-grey-8: #d7d7d7;\n$color_grey-9: #868686;\n$color-grey-10: #919191;\n$color-grey-11: #fafafa;\n$color-grey-12: #f5f7fa;\n$color-grey-13: #2e2e2e;\n$color-grey-14: #e2e5e7;\n$color-grey-15: #f3f4f5;\n$color-orange: #ff6444;\n$color-orange-2: #ff9c13;\n$color-purple: #722fe4;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-red-6: #ec3f3f29;\n$color-red-7: #ffe1e3;\n$color-red-8: #661b20;\n$color-red-9: #b33037;\n$color-red-10: #ff444f;\n$color-red-11: #fce3e3;\n$color-red-12: #c40000;\n$color-violet: #4a3871;\n$color-white: #ffffff;\n$color-yellow: #ffad3a;\n$color-yellow-1: #b3760d;\n$color-yellow-2: #ffa912;\n$color-yellow-3: rgba(255, 173, 58, 0.16);\n$color-yellow-4: #fff7e6;\n$color-yellow-5: #6a4800;\n$color-yellow-6: #ffeabf;\n\n/* status colors */\n$color-status-warning: rgba(255, 173, 58, 0.16);\n$color-status-information: rgba(55, 124, 252, 0.16);\n$color-status-announcement: rgba(75, 180, 179, 0.16);\n$color-status-error: rgba(236, 63, 63, 0.16);\n$color-status-verified: rgba(0, 122, 34);\n$color-status-danger: rgba(196, 0, 0);\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\n$alpha-color-black-7: transparentize($color-black, 0.5);\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-white-4: transparentize($color-white, 0.3);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-red-2: transparentize($color-red, 0.84);\n$alpha-color-red-3: transparentize($color-red, 0.76);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\n\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK: #000000;\n$COLOR_BLACK_2: #1d1f20;\n$COLOR_BLACK_3: #0e0e0e;\n$COLOR_GREEN_1: #39b19d;\n$COLOR_GREEN_2: #2d9f93;\n$COLOR_GREEN_3: #21ce99;\n$COLOR_GREEN_4: #00a79e;\n$COLOR_GREEN_5: #4bb4b3;\n$COLOR_ORANGE: #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE: #4f60ae;\n$COLOR_RED: #e31c4b;\n$COLOR_RED_2: #cc2e3d;\n$COLOR_RED_3: #ec3f3f;\n$COLOR_CORAL_RED: #ff444f;\n$COLOR_SKY_BLUE: #2196f3;\n$COLOR_WHITE: #ffffff;\n$COLOR_BLUE: #1c5ae3;\n\n// Light theme\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\n$COLOR_LIGHT_GRAY_1: #999cac;\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3: #eaeced;\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1: #0b0e18;\n$COLOR_DARK_BLUE_2: #101320;\n$COLOR_DARK_BLUE_3: #191c31;\n$COLOR_DARK_BLUE_4: #202641;\n$COLOR_DARK_BLUE_5: #2a3052;\n$COLOR_DARK_BLUE_6: #555975;\n$COLOR_DARK_BLUE_7: #7f8397;\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1: #282a37;\n$COLOR_DARK_GRAY_2: #303342;\n$COLOR_DARK_GRAY_3: #555975;\n$COLOR_DARK_GRAY_4: #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n$BORDER_RADIUS_2: 8px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH: 240px;\n$POSITIONS_DRAWER_MARGIN: 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$MOBILE_HEADER_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/* Wallet gradient background */\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n\n/* App Cards gradient background */\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n\n/* Wallets */\n$ready-banner-bg-color: #e2f3f3;\n$ready-banner-tick-bg-color: #4ab4b3;\n$wallet-demo-bg-color: #fff8f9;\n$wallet-dark-demo-bg-color: #140506;\n$wallet-demo-divider-color: #fff0f1;\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    } @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: (\n                        $key: $val,\n                    );\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    } @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    } @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    } @else if $size == 1rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\n    } @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get(\n        $map: $TYPEFACES_LIST,\n        $key: $var,\n    );\n\n    $size: nth($typeface_config, 1); // font-size\n    $align: nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color: nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'xheading' 3.2rem,\n    'heading' 3rem,\n    'large' 2.8rem,\n    'title' 1.6rem,\n    'paragraph' 1.4rem,\n    'small' 1.2rem,\n    'xsmall' 1rem,\n    'xxsmall' 0.8rem,\n    'xxxsmall' 0.6rem\n);\n\n$FONT_COLORS: (\n    'active' var(--text-colored-background),\n    'prominent' var(--text-prominent),\n    'black' var(--text-general),\n    'grey' var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green' var(--text-profit-success),\n    'red' var(--text-loss-danger)\n);\n\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\n\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\n\n$LINEHEIGHTS: (\n    'large': 1.75,\n    'medium': 1.5,\n    'small': 1.25,\n    'xsmall': 1.4,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon-active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active,\n    &-active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled,\n    &-disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white,\n    &-white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color,\n    &-border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary,\n    &-secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$mobile-width: 320px;\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-down {\n    @media (max-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-up {\n    @media (min-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-up {\n    @media (min-width: #{$mobile-width}) {\n        @content;\n    }\n}\n\n@mixin mobile {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\n        @content;\n    }\n}\n\n@mixin mobile-landscape {\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n@mixin touch-device {\n    // add css interaction media query to detect touch devices\n    // refer to: https://caniuse.com/#feat=css-media-interaction\n    @media (pointer: coarse) {\n        @content;\n    }\n}\n\n@mixin mobile-tablet-mix {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n/** Need to add new breakpoints for mixins */\n$max-mobile-width: 600px;\n$min-desktop-width: 1280px;\n\n@mixin mobile-screen {\n    @media (max-width: #{$max-mobile-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin desktop-screen {\n    @media (min-width: #{$min-desktop-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-screen {\n    @media (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-or-desktop-screen {\n    @media (min-width: #{$max-mobile-width + 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-portrait-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-landscape {\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin mobile {\n    @media (max-width: #{$tablet-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n.wallets-compare-accounts {\n    width: 100%;\n    height: 100%;\n\n    @include mobile-or-tablet-screen {\n        margin: 0;\n        overflow-x: auto;\n        overflow-y: scroll;\n    }\n\n    &__card-list {\n        display: flex;\n        justify-content: center;\n\n        @include desktop-screen {\n            margin: 0 auto;\n            max-width: 123.2rem;\n        }\n    }\n}\n"],sourceRoot:""}]);const l=i},58812:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var a=r(17059),t=r.n(a),o=r(32806),i=r.n(o)()(t());i.push([n.id,".wallets-compare-accounts-title{display:flex;flex-direction:column;gap:.5rem;padding-top:2rem;align-items:center}.wallets-compare-accounts-title__separator{display:flex;align-items:center;justify-content:center;gap:.8em}.wallets-compare-accounts-title__tooltip{width:19rem;z-index:9999}@media(max-width: 1279px){.wallets-compare-accounts-title__tooltip{width:16rem}}","",{version:3,sources:["webpack://./CompareAccountsTitleIcon.scss"],names:[],mappings:"AAiuBA,gCACI,YAAA,CACA,qBAAA,CACA,SAAA,CACA,gBAAA,CACA,kBAAA,CAEA,2CACI,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,QAAA,CAGJ,yCACI,WAAA,CACA,YAAA,CA/DJ,0BA6DA,yCAKQ,WAAA,CAAA",sourcesContent:["/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/*RTL Language Mixin*/\n\n@mixin rtl {\n    [dir='rtl'] & {\n        @content;\n    }\n}\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-black-9: #5c5c5c;\n$color-black-10: #181c25;\n$color-blue: #377cfc;\n$color-blue-1: #0dc2e7;\n$color-blue-2: #2a3052;\n$color-blue-3: #0796e0;\n$color-blue-4: #0677af;\n$color-blue-5: #dfeaff;\n$color-blue-6: #92b8ff;\n$color-blue-7: #182130;\n$color-blue-8: #e6f5ff;\n$color-blue-9: #00426a;\n$color-brown: #664407;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-green-5: #4bb4b329;\n$color-green-6: #17eabd;\n$color-green-7: #e8fdf8;\n$color-green-8: #cedddf;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-grey-8: #d7d7d7;\n$color_grey-9: #868686;\n$color-grey-10: #919191;\n$color-grey-11: #fafafa;\n$color-grey-12: #f5f7fa;\n$color-grey-13: #2e2e2e;\n$color-grey-14: #e2e5e7;\n$color-grey-15: #f3f4f5;\n$color-orange: #ff6444;\n$color-orange-2: #ff9c13;\n$color-purple: #722fe4;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-red-6: #ec3f3f29;\n$color-red-7: #ffe1e3;\n$color-red-8: #661b20;\n$color-red-9: #b33037;\n$color-red-10: #ff444f;\n$color-red-11: #fce3e3;\n$color-red-12: #c40000;\n$color-violet: #4a3871;\n$color-white: #ffffff;\n$color-yellow: #ffad3a;\n$color-yellow-1: #b3760d;\n$color-yellow-2: #ffa912;\n$color-yellow-3: rgba(255, 173, 58, 0.16);\n$color-yellow-4: #fff7e6;\n$color-yellow-5: #6a4800;\n$color-yellow-6: #ffeabf;\n\n/* status colors */\n$color-status-warning: rgba(255, 173, 58, 0.16);\n$color-status-information: rgba(55, 124, 252, 0.16);\n$color-status-announcement: rgba(75, 180, 179, 0.16);\n$color-status-error: rgba(236, 63, 63, 0.16);\n$color-status-verified: rgba(0, 122, 34);\n$color-status-danger: rgba(196, 0, 0);\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\n$alpha-color-black-7: transparentize($color-black, 0.5);\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-white-4: transparentize($color-white, 0.3);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-red-2: transparentize($color-red, 0.84);\n$alpha-color-red-3: transparentize($color-red, 0.76);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\n\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK: #000000;\n$COLOR_BLACK_2: #1d1f20;\n$COLOR_BLACK_3: #0e0e0e;\n$COLOR_GREEN_1: #39b19d;\n$COLOR_GREEN_2: #2d9f93;\n$COLOR_GREEN_3: #21ce99;\n$COLOR_GREEN_4: #00a79e;\n$COLOR_GREEN_5: #4bb4b3;\n$COLOR_ORANGE: #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE: #4f60ae;\n$COLOR_RED: #e31c4b;\n$COLOR_RED_2: #cc2e3d;\n$COLOR_RED_3: #ec3f3f;\n$COLOR_CORAL_RED: #ff444f;\n$COLOR_SKY_BLUE: #2196f3;\n$COLOR_WHITE: #ffffff;\n$COLOR_BLUE: #1c5ae3;\n\n// Light theme\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\n$COLOR_LIGHT_GRAY_1: #999cac;\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3: #eaeced;\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1: #0b0e18;\n$COLOR_DARK_BLUE_2: #101320;\n$COLOR_DARK_BLUE_3: #191c31;\n$COLOR_DARK_BLUE_4: #202641;\n$COLOR_DARK_BLUE_5: #2a3052;\n$COLOR_DARK_BLUE_6: #555975;\n$COLOR_DARK_BLUE_7: #7f8397;\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1: #282a37;\n$COLOR_DARK_GRAY_2: #303342;\n$COLOR_DARK_GRAY_3: #555975;\n$COLOR_DARK_GRAY_4: #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n$BORDER_RADIUS_2: 8px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH: 240px;\n$POSITIONS_DRAWER_MARGIN: 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$MOBILE_HEADER_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/* Wallet gradient background */\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n\n/* App Cards gradient background */\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n\n/* Wallets */\n$ready-banner-bg-color: #e2f3f3;\n$ready-banner-tick-bg-color: #4ab4b3;\n$wallet-demo-bg-color: #fff8f9;\n$wallet-dark-demo-bg-color: #140506;\n$wallet-demo-divider-color: #fff0f1;\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    } @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: (\n                        $key: $val,\n                    );\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    } @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    } @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    } @else if $size == 1rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\n    } @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get(\n        $map: $TYPEFACES_LIST,\n        $key: $var,\n    );\n\n    $size: nth($typeface_config, 1); // font-size\n    $align: nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color: nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'xheading' 3.2rem,\n    'heading' 3rem,\n    'large' 2.8rem,\n    'title' 1.6rem,\n    'paragraph' 1.4rem,\n    'small' 1.2rem,\n    'xsmall' 1rem,\n    'xxsmall' 0.8rem,\n    'xxxsmall' 0.6rem\n);\n\n$FONT_COLORS: (\n    'active' var(--text-colored-background),\n    'prominent' var(--text-prominent),\n    'black' var(--text-general),\n    'grey' var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green' var(--text-profit-success),\n    'red' var(--text-loss-danger)\n);\n\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\n\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\n\n$LINEHEIGHTS: (\n    'large': 1.75,\n    'medium': 1.5,\n    'small': 1.25,\n    'xsmall': 1.4,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon-active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active,\n    &-active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled,\n    &-disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white,\n    &-white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color,\n    &-border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary,\n    &-secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$mobile-width: 320px;\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-down {\n    @media (max-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-up {\n    @media (min-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-up {\n    @media (min-width: #{$mobile-width}) {\n        @content;\n    }\n}\n\n@mixin mobile {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\n        @content;\n    }\n}\n\n@mixin mobile-landscape {\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n@mixin touch-device {\n    // add css interaction media query to detect touch devices\n    // refer to: https://caniuse.com/#feat=css-media-interaction\n    @media (pointer: coarse) {\n        @content;\n    }\n}\n\n@mixin mobile-tablet-mix {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n/** Need to add new breakpoints for mixins */\n$max-mobile-width: 600px;\n$min-desktop-width: 1280px;\n\n@mixin mobile-screen {\n    @media (max-width: #{$max-mobile-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin desktop-screen {\n    @media (min-width: #{$min-desktop-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-screen {\n    @media (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-or-desktop-screen {\n    @media (min-width: #{$max-mobile-width + 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-portrait-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-landscape {\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin mobile {\n    @media (max-width: #{$tablet-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n.wallets-compare-accounts-title {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n    padding-top: 2rem;\n    align-items: center;\n\n    &__separator {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 0.8em;\n    }\n\n    &__tooltip {\n        width: 19rem;\n        z-index: 9999;\n\n        @include mobile-or-tablet-screen {\n            width: 16rem;\n        }\n    }\n}\n"],sourceRoot:""}]);const l=i},19133:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var a=r(17059),t=r.n(a),o=r(32806),i=r.n(o)()(t());i.push([n.id,'.wallets-compare-accounts-trading-instruments__span{position:relative;top:.2rem;font-size:1.6rem;color:var(--text-red)}[dir="ltr"] .wallets-compare-accounts-trading-instruments__text{margin-left:.8rem}[dir="rtl"] .wallets-compare-accounts-trading-instruments__text{margin-right:.8rem}.wallets-compare-accounts-instrument-icon{display:flex;align-items:center;margin:.2rem;cursor:not-allowed}',"",{version:3,sources:["webpack://./InstrumentsIconWithLabel.scss"],names:[],mappings:"AAkuBI,oDACI,iBAAA,CACA,SAAA,CACA,gBAAA,CACA,qBAAA,CAGJ,gEACI,iBAAA,CADJ,gEACI,kBAAA,CAIR,0CACI,YAAA,CACA,kBAAA,CACA,YAAA,CACA,kBAAA",sourcesContent:["/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/*RTL Language Mixin*/\n\n@mixin rtl {\n    [dir='rtl'] & {\n        @content;\n    }\n}\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-black-9: #5c5c5c;\n$color-black-10: #181c25;\n$color-blue: #377cfc;\n$color-blue-1: #0dc2e7;\n$color-blue-2: #2a3052;\n$color-blue-3: #0796e0;\n$color-blue-4: #0677af;\n$color-blue-5: #dfeaff;\n$color-blue-6: #92b8ff;\n$color-blue-7: #182130;\n$color-blue-8: #e6f5ff;\n$color-blue-9: #00426a;\n$color-brown: #664407;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-green-5: #4bb4b329;\n$color-green-6: #17eabd;\n$color-green-7: #e8fdf8;\n$color-green-8: #cedddf;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-grey-8: #d7d7d7;\n$color_grey-9: #868686;\n$color-grey-10: #919191;\n$color-grey-11: #fafafa;\n$color-grey-12: #f5f7fa;\n$color-grey-13: #2e2e2e;\n$color-grey-14: #e2e5e7;\n$color-grey-15: #f3f4f5;\n$color-orange: #ff6444;\n$color-orange-2: #ff9c13;\n$color-purple: #722fe4;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-red-6: #ec3f3f29;\n$color-red-7: #ffe1e3;\n$color-red-8: #661b20;\n$color-red-9: #b33037;\n$color-red-10: #ff444f;\n$color-red-11: #fce3e3;\n$color-red-12: #c40000;\n$color-violet: #4a3871;\n$color-white: #ffffff;\n$color-yellow: #ffad3a;\n$color-yellow-1: #b3760d;\n$color-yellow-2: #ffa912;\n$color-yellow-3: rgba(255, 173, 58, 0.16);\n$color-yellow-4: #fff7e6;\n$color-yellow-5: #6a4800;\n$color-yellow-6: #ffeabf;\n\n/* status colors */\n$color-status-warning: rgba(255, 173, 58, 0.16);\n$color-status-information: rgba(55, 124, 252, 0.16);\n$color-status-announcement: rgba(75, 180, 179, 0.16);\n$color-status-error: rgba(236, 63, 63, 0.16);\n$color-status-verified: rgba(0, 122, 34);\n$color-status-danger: rgba(196, 0, 0);\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\n$alpha-color-black-7: transparentize($color-black, 0.5);\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-white-4: transparentize($color-white, 0.3);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-red-2: transparentize($color-red, 0.84);\n$alpha-color-red-3: transparentize($color-red, 0.76);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\n\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK: #000000;\n$COLOR_BLACK_2: #1d1f20;\n$COLOR_BLACK_3: #0e0e0e;\n$COLOR_GREEN_1: #39b19d;\n$COLOR_GREEN_2: #2d9f93;\n$COLOR_GREEN_3: #21ce99;\n$COLOR_GREEN_4: #00a79e;\n$COLOR_GREEN_5: #4bb4b3;\n$COLOR_ORANGE: #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE: #4f60ae;\n$COLOR_RED: #e31c4b;\n$COLOR_RED_2: #cc2e3d;\n$COLOR_RED_3: #ec3f3f;\n$COLOR_CORAL_RED: #ff444f;\n$COLOR_SKY_BLUE: #2196f3;\n$COLOR_WHITE: #ffffff;\n$COLOR_BLUE: #1c5ae3;\n\n// Light theme\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\n$COLOR_LIGHT_GRAY_1: #999cac;\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3: #eaeced;\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1: #0b0e18;\n$COLOR_DARK_BLUE_2: #101320;\n$COLOR_DARK_BLUE_3: #191c31;\n$COLOR_DARK_BLUE_4: #202641;\n$COLOR_DARK_BLUE_5: #2a3052;\n$COLOR_DARK_BLUE_6: #555975;\n$COLOR_DARK_BLUE_7: #7f8397;\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1: #282a37;\n$COLOR_DARK_GRAY_2: #303342;\n$COLOR_DARK_GRAY_3: #555975;\n$COLOR_DARK_GRAY_4: #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n$BORDER_RADIUS_2: 8px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH: 240px;\n$POSITIONS_DRAWER_MARGIN: 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$MOBILE_HEADER_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/* Wallet gradient background */\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n\n/* App Cards gradient background */\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n\n/* Wallets */\n$ready-banner-bg-color: #e2f3f3;\n$ready-banner-tick-bg-color: #4ab4b3;\n$wallet-demo-bg-color: #fff8f9;\n$wallet-dark-demo-bg-color: #140506;\n$wallet-demo-divider-color: #fff0f1;\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    } @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: (\n                        $key: $val,\n                    );\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    } @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    } @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    } @else if $size == 1rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\n    } @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get(\n        $map: $TYPEFACES_LIST,\n        $key: $var,\n    );\n\n    $size: nth($typeface_config, 1); // font-size\n    $align: nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color: nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'xheading' 3.2rem,\n    'heading' 3rem,\n    'large' 2.8rem,\n    'title' 1.6rem,\n    'paragraph' 1.4rem,\n    'small' 1.2rem,\n    'xsmall' 1rem,\n    'xxsmall' 0.8rem,\n    'xxxsmall' 0.6rem\n);\n\n$FONT_COLORS: (\n    'active' var(--text-colored-background),\n    'prominent' var(--text-prominent),\n    'black' var(--text-general),\n    'grey' var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green' var(--text-profit-success),\n    'red' var(--text-loss-danger)\n);\n\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\n\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\n\n$LINEHEIGHTS: (\n    'large': 1.75,\n    'medium': 1.5,\n    'small': 1.25,\n    'xsmall': 1.4,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon-active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active,\n    &-active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled,\n    &-disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white,\n    &-white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color,\n    &-border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary,\n    &-secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$mobile-width: 320px;\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-down {\n    @media (max-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-up {\n    @media (min-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-up {\n    @media (min-width: #{$mobile-width}) {\n        @content;\n    }\n}\n\n@mixin mobile {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\n        @content;\n    }\n}\n\n@mixin mobile-landscape {\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n@mixin touch-device {\n    // add css interaction media query to detect touch devices\n    // refer to: https://caniuse.com/#feat=css-media-interaction\n    @media (pointer: coarse) {\n        @content;\n    }\n}\n\n@mixin mobile-tablet-mix {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n/** Need to add new breakpoints for mixins */\n$max-mobile-width: 600px;\n$min-desktop-width: 1280px;\n\n@mixin mobile-screen {\n    @media (max-width: #{$max-mobile-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin desktop-screen {\n    @media (min-width: #{$min-desktop-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-screen {\n    @media (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-or-desktop-screen {\n    @media (min-width: #{$max-mobile-width + 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-portrait-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-landscape {\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin mobile {\n    @media (max-width: #{$tablet-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n.wallets-compare-accounts-trading-instruments {\n    &__span {\n        position: relative;\n        top: 0.2rem;\n        font-size: 1.6rem;\n        color: var(--text-red);\n    }\n\n    &__text {\n        margin-inline-start: 0.8rem;\n    }\n}\n\n.wallets-compare-accounts-instrument-icon {\n    display: flex;\n    align-items: center;\n    margin: 0.2rem;\n    cursor: not-allowed;\n}\n"],sourceRoot:""}]);const l=i},48611:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var a=r(17059),t=r.n(a),o=r(32806),i=r.n(o)()(t());i.push([n.id,".wallets-compare-accounts-outline{display:flex;flex-direction:column;gap:.4rem;padding:0 2.4rem;border-radius:2.4rem}@media(max-width: 1279px){.wallets-compare-accounts-outline{padding:0 1.6rem}}","",{version:3,sources:["webpack://./InstrumentsLabelHighlighted.scss"],names:[],mappings:"AAiuBA,kCACI,YAAA,CACA,qBAAA,CACA,SAAA,CACA,gBAAA,CACA,oBAAA,CApDA,0BA+CJ,kCAQQ,gBAAA,CAAA",sourcesContent:["/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/*RTL Language Mixin*/\n\n@mixin rtl {\n    [dir='rtl'] & {\n        @content;\n    }\n}\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-black-9: #5c5c5c;\n$color-black-10: #181c25;\n$color-blue: #377cfc;\n$color-blue-1: #0dc2e7;\n$color-blue-2: #2a3052;\n$color-blue-3: #0796e0;\n$color-blue-4: #0677af;\n$color-blue-5: #dfeaff;\n$color-blue-6: #92b8ff;\n$color-blue-7: #182130;\n$color-blue-8: #e6f5ff;\n$color-blue-9: #00426a;\n$color-brown: #664407;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-green-5: #4bb4b329;\n$color-green-6: #17eabd;\n$color-green-7: #e8fdf8;\n$color-green-8: #cedddf;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-grey-8: #d7d7d7;\n$color_grey-9: #868686;\n$color-grey-10: #919191;\n$color-grey-11: #fafafa;\n$color-grey-12: #f5f7fa;\n$color-grey-13: #2e2e2e;\n$color-grey-14: #e2e5e7;\n$color-grey-15: #f3f4f5;\n$color-orange: #ff6444;\n$color-orange-2: #ff9c13;\n$color-purple: #722fe4;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-red-6: #ec3f3f29;\n$color-red-7: #ffe1e3;\n$color-red-8: #661b20;\n$color-red-9: #b33037;\n$color-red-10: #ff444f;\n$color-red-11: #fce3e3;\n$color-red-12: #c40000;\n$color-violet: #4a3871;\n$color-white: #ffffff;\n$color-yellow: #ffad3a;\n$color-yellow-1: #b3760d;\n$color-yellow-2: #ffa912;\n$color-yellow-3: rgba(255, 173, 58, 0.16);\n$color-yellow-4: #fff7e6;\n$color-yellow-5: #6a4800;\n$color-yellow-6: #ffeabf;\n\n/* status colors */\n$color-status-warning: rgba(255, 173, 58, 0.16);\n$color-status-information: rgba(55, 124, 252, 0.16);\n$color-status-announcement: rgba(75, 180, 179, 0.16);\n$color-status-error: rgba(236, 63, 63, 0.16);\n$color-status-verified: rgba(0, 122, 34);\n$color-status-danger: rgba(196, 0, 0);\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\n$alpha-color-black-7: transparentize($color-black, 0.5);\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-white-4: transparentize($color-white, 0.3);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-red-2: transparentize($color-red, 0.84);\n$alpha-color-red-3: transparentize($color-red, 0.76);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\n\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK: #000000;\n$COLOR_BLACK_2: #1d1f20;\n$COLOR_BLACK_3: #0e0e0e;\n$COLOR_GREEN_1: #39b19d;\n$COLOR_GREEN_2: #2d9f93;\n$COLOR_GREEN_3: #21ce99;\n$COLOR_GREEN_4: #00a79e;\n$COLOR_GREEN_5: #4bb4b3;\n$COLOR_ORANGE: #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE: #4f60ae;\n$COLOR_RED: #e31c4b;\n$COLOR_RED_2: #cc2e3d;\n$COLOR_RED_3: #ec3f3f;\n$COLOR_CORAL_RED: #ff444f;\n$COLOR_SKY_BLUE: #2196f3;\n$COLOR_WHITE: #ffffff;\n$COLOR_BLUE: #1c5ae3;\n\n// Light theme\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\n$COLOR_LIGHT_GRAY_1: #999cac;\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3: #eaeced;\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1: #0b0e18;\n$COLOR_DARK_BLUE_2: #101320;\n$COLOR_DARK_BLUE_3: #191c31;\n$COLOR_DARK_BLUE_4: #202641;\n$COLOR_DARK_BLUE_5: #2a3052;\n$COLOR_DARK_BLUE_6: #555975;\n$COLOR_DARK_BLUE_7: #7f8397;\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1: #282a37;\n$COLOR_DARK_GRAY_2: #303342;\n$COLOR_DARK_GRAY_3: #555975;\n$COLOR_DARK_GRAY_4: #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n$BORDER_RADIUS_2: 8px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH: 240px;\n$POSITIONS_DRAWER_MARGIN: 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$MOBILE_HEADER_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/* Wallet gradient background */\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n\n/* App Cards gradient background */\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n\n/* Wallets */\n$ready-banner-bg-color: #e2f3f3;\n$ready-banner-tick-bg-color: #4ab4b3;\n$wallet-demo-bg-color: #fff8f9;\n$wallet-dark-demo-bg-color: #140506;\n$wallet-demo-divider-color: #fff0f1;\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    } @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: (\n                        $key: $val,\n                    );\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    } @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    } @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    } @else if $size == 1rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\n    } @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get(\n        $map: $TYPEFACES_LIST,\n        $key: $var,\n    );\n\n    $size: nth($typeface_config, 1); // font-size\n    $align: nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color: nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'xheading' 3.2rem,\n    'heading' 3rem,\n    'large' 2.8rem,\n    'title' 1.6rem,\n    'paragraph' 1.4rem,\n    'small' 1.2rem,\n    'xsmall' 1rem,\n    'xxsmall' 0.8rem,\n    'xxxsmall' 0.6rem\n);\n\n$FONT_COLORS: (\n    'active' var(--text-colored-background),\n    'prominent' var(--text-prominent),\n    'black' var(--text-general),\n    'grey' var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green' var(--text-profit-success),\n    'red' var(--text-loss-danger)\n);\n\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\n\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\n\n$LINEHEIGHTS: (\n    'large': 1.75,\n    'medium': 1.5,\n    'small': 1.25,\n    'xsmall': 1.4,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon-active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active,\n    &-active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled,\n    &-disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white,\n    &-white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color,\n    &-border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary,\n    &-secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$mobile-width: 320px;\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-down {\n    @media (max-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-up {\n    @media (min-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-up {\n    @media (min-width: #{$mobile-width}) {\n        @content;\n    }\n}\n\n@mixin mobile {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\n        @content;\n    }\n}\n\n@mixin mobile-landscape {\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n@mixin touch-device {\n    // add css interaction media query to detect touch devices\n    // refer to: https://caniuse.com/#feat=css-media-interaction\n    @media (pointer: coarse) {\n        @content;\n    }\n}\n\n@mixin mobile-tablet-mix {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n/** Need to add new breakpoints for mixins */\n$max-mobile-width: 600px;\n$min-desktop-width: 1280px;\n\n@mixin mobile-screen {\n    @media (max-width: #{$max-mobile-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin desktop-screen {\n    @media (min-width: #{$min-desktop-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-screen {\n    @media (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-or-desktop-screen {\n    @media (min-width: #{$max-mobile-width + 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-portrait-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-landscape {\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin mobile {\n    @media (max-width: #{$tablet-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n.wallets-compare-accounts-outline {\n    display: flex;\n    flex-direction: column;\n    gap: 0.4rem;\n    padding: 0 2.4rem;\n    border-radius: 2.4rem;\n\n    @include mobile-or-tablet-screen {\n        padding: 0 1.6rem;\n    }\n}\n"],sourceRoot:""}]);const l=i},33760:(n,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>l});var a=r(17059),t=r.n(a),o=r(32806),i=r.n(o)()(t());i.push([n.id,".wallets-compare-accounts-route{width:100%;height:calc(100vh - 3rem);overflow-x:hidden}","",{version:3,sources:["webpack://./CompareAccountsRoute.scss"],names:[],mappings:"AAiuBA,gCACI,UAAA,CACA,yBAAA,CACA,iBAAA",sourcesContent:["/*------------------------------------*\n *  # Constants\n *------------------------------------*/\n\n/*RTL Language Mixin*/\n\n@mixin rtl {\n    [dir='rtl'] & {\n        @content;\n    }\n}\n\n/* stylelint-disable color-no-hex */\n\n/* COLOR PALETTE */\n\n/* colors */\n$color-black: #0e0e0e;\n$color-black-1: #333333;\n$color-black-3: #151717;\n$color-black-4: #1d1f20;\n$color-black-5: #242828;\n$color-black-6: #3e3e3e;\n$color-black-7: #000000;\n$color-black-8: #323738;\n$color-black-9: #5c5c5c;\n$color-black-10: #181c25;\n$color-blue: #377cfc;\n$color-blue-1: #0dc2e7;\n$color-blue-2: #2a3052;\n$color-blue-3: #0796e0;\n$color-blue-4: #0677af;\n$color-blue-5: #dfeaff;\n$color-blue-6: #92b8ff;\n$color-blue-7: #182130;\n$color-blue-8: #e6f5ff;\n$color-blue-9: #00426a;\n$color-brown: #664407;\n$color-green: #85acb0;\n$color-green-1: #4bb4b3;\n$color-green-2: #3d9494;\n$color-green-3: #00a79e;\n$color-green-4: #008079;\n$color-green-5: #4bb4b329;\n$color-green-6: #17eabd;\n$color-green-7: #e8fdf8;\n$color-green-8: #cedddf;\n$color-grey: #c2c2c2;\n$color-grey-1: #999999;\n$color-grey-2: #f2f3f4;\n$color-grey-3: #eaeced;\n$color-grey-4: #e6e9e9;\n$color-grey-5: #d6dadb;\n$color-grey-6: #d6d6d6;\n$color-grey-7: #6e6e6e;\n$color-grey-8: #d7d7d7;\n$color_grey-9: #868686;\n$color-grey-10: #919191;\n$color-grey-11: #fafafa;\n$color-grey-12: #f5f7fa;\n$color-grey-13: #2e2e2e;\n$color-grey-14: #e2e5e7;\n$color-grey-15: #f3f4f5;\n$color-orange: #ff6444;\n$color-orange-2: #ff9c13;\n$color-purple: #722fe4;\n$color-red: #ff444f;\n$color-red-1: #ec3f3f;\n$color-red-2: #cc2e3d;\n$color-red-3: #a32430;\n$color-red-4: #d33636;\n$color-red-5: #eb3e48;\n$color-red-6: #ec3f3f29;\n$color-red-7: #ffe1e3;\n$color-red-8: #661b20;\n$color-red-9: #b33037;\n$color-red-10: #ff444f;\n$color-red-11: #fce3e3;\n$color-red-12: #c40000;\n$color-violet: #4a3871;\n$color-white: #ffffff;\n$color-yellow: #ffad3a;\n$color-yellow-1: #b3760d;\n$color-yellow-2: #ffa912;\n$color-yellow-3: rgba(255, 173, 58, 0.16);\n$color-yellow-4: #fff7e6;\n$color-yellow-5: #6a4800;\n$color-yellow-6: #ffeabf;\n\n/* status colors */\n$color-status-warning: rgba(255, 173, 58, 0.16);\n$color-status-information: rgba(55, 124, 252, 0.16);\n$color-status-announcement: rgba(75, 180, 179, 0.16);\n$color-status-error: rgba(236, 63, 63, 0.16);\n$color-status-verified: rgba(0, 122, 34);\n$color-status-danger: rgba(196, 0, 0);\n\n/* alpha colors */\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\n$alpha-color-black-2: transparentize($color-black, 0.04);\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\n$alpha-color-black-7: transparentize($color-black, 0.5);\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\n$alpha-color-white-1: transparentize($color-white, 0.04);\n$alpha-color-white-2: transparentize($color-white, 0.84);\n$alpha-color-white-3: transparentize($color-white, 0.92);\n$alpha-color-white-4: transparentize($color-white, 0.3);\n$alpha-color-red-1: transparentize($color-red, 0.92);\n$alpha-color-red-2: transparentize($color-red, 0.84);\n$alpha-color-red-3: transparentize($color-red, 0.76);\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\n\n/* gradient colors */\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\n\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\n\n/* Preserve legacy variables */\n/* Primary */\n\n$COLOR_BLACK: #000000;\n$COLOR_BLACK_2: #1d1f20;\n$COLOR_BLACK_3: #0e0e0e;\n$COLOR_GREEN_1: #39b19d;\n$COLOR_GREEN_2: #2d9f93;\n$COLOR_GREEN_3: #21ce99;\n$COLOR_GREEN_4: #00a79e;\n$COLOR_GREEN_5: #4bb4b3;\n$COLOR_ORANGE: #ff9933;\n$COLOR_DARK_ORANGE: #ff8802;\n$COLOR_PURPLE: #4f60ae;\n$COLOR_RED: #e31c4b;\n$COLOR_RED_2: #cc2e3d;\n$COLOR_RED_3: #ec3f3f;\n$COLOR_CORAL_RED: #ff444f;\n$COLOR_SKY_BLUE: #2196f3;\n$COLOR_WHITE: #ffffff;\n$COLOR_BLUE: #1c5ae3;\n\n// Light theme\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\n$COLOR_LIGHT_GRAY_1: #999cac;\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\n$COLOR_LIGHT_GRAY_3: #eaeced;\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\n// Dark theme\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\n$COLOR_DARK_BLUE_1: #0b0e18;\n$COLOR_DARK_BLUE_2: #101320;\n$COLOR_DARK_BLUE_3: #191c31;\n$COLOR_DARK_BLUE_4: #202641;\n$COLOR_DARK_BLUE_5: #2a3052;\n$COLOR_DARK_BLUE_6: #555975;\n$COLOR_DARK_BLUE_7: #7f8397;\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\n$COLOR_DARK_GRAY_1: #282a37;\n$COLOR_DARK_GRAY_2: #303342;\n$COLOR_DARK_GRAY_3: #555975;\n$COLOR_DARK_GRAY_4: #999999;\n/* stylelint-enable color-no-hex */\n\n$BORDER_RADIUS: 4px;\n$BORDER_RADIUS_2: 8px;\n\n$MAX_CONTAINER_WIDTH: 1440px;\n\n$POSITIONS_DRAWER_WIDTH: 240px;\n$POSITIONS_DRAWER_MARGIN: 8px;\n\n$HEADER_HEIGHT: 48px;\n$FOOTER_HEIGHT: 36px;\n\n$MOBILE_HEADER_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\n\n$SIDEBAR_WIDTH: 240px;\n\n/* Wallet gradient background */\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\n\n/* App Cards gradient background */\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\n\n/* Wallets */\n$ready-banner-bg-color: #e2f3f3;\n$ready-banner-tick-bg-color: #4ab4b3;\n$wallet-demo-bg-color: #fff8f9;\n$wallet-dark-demo-bg-color: #140506;\n$wallet-demo-divider-color: #fff0f1;\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\n\n/*------------------------------------*\n *  # SASS Mixins and Functions\n *------------------------------------*/\n\n/*\n * SASS interpolation\n */\n// Requires the calc-interpolation function which can also be used independently\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\n    $b: $min-value - $a * $min-screen;\n\n    $sign: '+';\n    @if ($b < 0) {\n        $sign: '-';\n        $b: abs($b);\n    }\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\n}\n\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\n    & {\n        @each $property in $properties {\n            #{$property}: $min-value;\n        }\n        @media screen and (min-width: $min-screen) {\n            @each $property in $properties {\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\n            }\n        }\n        @media screen and (min-width: $max-screen) {\n            @each $property in $properties {\n                #{$property}: $max-value;\n            }\n        }\n    }\n}\n\n/*\n * PX to EM\n * @param $px - px value to be converted\n * @param $base - base font size (in `em`)\n * Note: 'em' values are calculate based on the element font-size\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\n * Usage example:\n    padding: em(16px, 1.6em); // font-size in 'em'\n */\n@function em($px, $base: $BASE_FONT_SIZE) {\n    $list: ();\n    @if length($px) != 1 {\n        @for $i from 1 through length($px) {\n            $val_em: (nth($px, $i) / $base) * 1em;\n            $list: append($list, $val_em, space);\n        }\n        @return $list;\n    } @else {\n        @return ($px / $base) * 1em;\n    }\n}\n\n/*\n * Set property by passing a property name, and values.\n * @param $property name - padding, margin etc.\n * @param $values        - values in `px` (space separated for multiple values)\n * @param $font-size     - base font-size in `em`\n * Usage example:\n   @include toEm(padding, 8px 16px 8px, 1.6em);\n */\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\n    #{$property}: em($values, $font-size);\n}\n\n/*\n * Generate typefaces key-value pair of variable name and config\n * Example:\n   --paragraph-center-bold-black: (14px, center, bold, black)\n */\n@function generate-typefaces() {\n    $typeface_list: ();\n    @each $fontsize_name, $size in $FONT_SIZES {\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\n            @each $color_name, $color in $FONT_COLORS {\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\n                    $val: ($size, $text_align, $weight, $color);\n                    $typeface: (\n                        $key: $val,\n                    );\n                    $typeface_list: map-merge($typeface_list, $typeface);\n                }\n            }\n        }\n    }\n    // @debug $typeface_list; /* uncomment to debug */\n    @return $typeface_list;\n}\n\n/*\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\n * Usage example:\n   @include setTypeface(16px, bold, black, uppercase);\n */\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\n    @if $size {\n        font-size: $size;\n    }\n    @if $colour {\n        color: $colour;\n    }\n    @if $weight {\n        font-weight: $weight;\n    }\n    @if $tt {\n        text-transform: $tt;\n    }\n    @if $align {\n        text-align: $align;\n    }\n    @if $size == 1.6rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\n    } @else if $size == 1.4rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\n    } @else if $size == 1.2rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\n    } @else if $size == 1rem {\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\n    } @else {\n        line-height: unset;\n    }\n}\n\n/*\n * Set typefaces by passing a typeface variable name\n * @param $var   - typeface variable\n * @param $tt    - text-transform property\n * @param $align - text-align property\n * Usage example:\n   @include typeface(--paragraph-bold-black, uppercase, center);\n */\n@mixin typeface($var, $tt: none) {\n    $typeface_config: map-get(\n        $map: $TYPEFACES_LIST,\n        $key: $var,\n    );\n\n    $size: nth($typeface_config, 1); // font-size\n    $align: nth($typeface_config, 2); // text-align\n    $weight: nth($typeface_config, 3); // font-weight\n    $color: nth($typeface_config, 4); // color\n    @include setTypeface($size, $align, $weight, $color, $tt);\n}\n\n/*\n * Range Slider Thumb styling is set here\n */\n@mixin thumbStyle() {\n    appearance: none;\n    width: 1em;\n    height: 1em;\n    border-radius: 100%;\n    border: 0;\n    cursor: pointer;\n    transition: box-shadow 0.2s;\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\n\n    &:hover {\n        box-shadow: 0 0 0 0.5em var(--state-hover);\n    }\n}\n\n/*\n * SVG icons colors\n */\n@mixin colorIcon($colors...) {\n    @for $i from 1 through length($colors) {\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-fill {\n            fill: nth($colors, $i);\n        }\n        /* postcss-bem-linter: ignore */\n        .color#{$i}-stroke {\n            stroke: nth($colors, $i);\n        }\n    }\n}\n\n/*\n * Bar Spinner Animation\n * @param $count    - number of bars\n * @param $duration - duration of animation\n * @param $phase    - each bar phase change delay\n * Usage example:\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\n */\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\n    animation: sk-stretchdelay $duration infinite ease-in-out;\n\n    @for $i from 1 through $count {\n        &--#{$i} {\n            animation-delay: -$duration + (($i - 1) * $phase);\n        }\n    }\n}\n\n/*\n * Tooltip colors\n * @param $color - color property\n * Usage example:\n   @include tooltipColor($COLOR_RED);\n */\n@mixin tooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n * Convert Tooltip colors\n * @param $color - css color property\n * Usage example:\n   @include convertTooltipColor(var(--status-default));\n */\n@mixin convertTooltipColor($color) {\n    &:before {\n        background: $color;\n    }\n    &:after,\n    &[data-tooltip-pos='top']:after {\n        border-top-color: $color;\n    }\n    &[data-tooltip-pos='right']:after {\n        border-top-color: transparent;\n        border-right-color: $color;\n    }\n    &[data-tooltip-pos='left']:after {\n        border-top-color: transparent;\n        border-left-color: $color;\n    }\n    &[data-tooltip-pos='bottom']:after {\n        border-top-color: transparent;\n        border-bottom-color: $color;\n    }\n}\n\n/*\n    Constants\n*/\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\n$BASE_FONT_SIZE: 10px;\n\n/*\n    Variables\n*/\n$FONT_SIZES: (\n    'xheading' 3.2rem,\n    'heading' 3rem,\n    'large' 2.8rem,\n    'title' 1.6rem,\n    'paragraph' 1.4rem,\n    'small' 1.2rem,\n    'xsmall' 1rem,\n    'xxsmall' 0.8rem,\n    'xxxsmall' 0.6rem\n);\n\n$FONT_COLORS: (\n    'active' var(--text-colored-background),\n    'prominent' var(--text-prominent),\n    'black' var(--text-general),\n    'grey' var(--text-less-prominent),\n    'disabled' var(--text-disabled),\n    'green' var(--text-profit-success),\n    'red' var(--text-loss-danger)\n);\n\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\n\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\n\n$LINEHEIGHTS: (\n    'large': 1.75,\n    'medium': 1.5,\n    'small': 1.25,\n    'xsmall': 1.4,\n);\n\n/*\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\n    Variables name example: --title-center-semibold-red\n */\n$TYPEFACES_LIST: generate-typefaces();\n\n/*\n    to use styles without modifier class on .inline-icon\n    use @extend\n\n    e.g. style icon on parent hover:\n        a:hover .inline-icon {\n            @extend %inline-icon-active;\n        }\n*/\n\n%inline-icon {\n    @include colorIcon(var(--text-general), none);\n\n    &.active,\n    &-active {\n        @include colorIcon(var(--text-prominent), none);\n    }\n    &.disabled,\n    &-disabled {\n        @include colorIcon(var(--text-disabled), none);\n    }\n    &.white,\n    &-white {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.border_hover_color,\n    &-border_hover_color {\n        @include colorIcon(var(--text-prominent));\n    }\n    &.secondary,\n    &-secondary {\n        @include colorIcon(var(--text-less-prominent));\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$mobile-width: 320px;\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-down {\n    @media (max-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-up {\n    @media (min-width: #{$tablet-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-up {\n    @media (min-width: #{$mobile-width}) {\n        @content;\n    }\n}\n\n@mixin mobile {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\n        @content;\n    }\n}\n\n@mixin mobile-landscape {\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n@mixin touch-device {\n    // add css interaction media query to detect touch devices\n    // refer to: https://caniuse.com/#feat=css-media-interaction\n    @media (pointer: coarse) {\n        @content;\n    }\n}\n\n@mixin mobile-tablet-mix {\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n/** Need to add new breakpoints for mixins */\n$max-mobile-width: 600px;\n$min-desktop-width: 1280px;\n\n@mixin mobile-screen {\n    @media (max-width: #{$max-mobile-width}) {\n        @content;\n    }\n}\n\n@mixin tablet-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin desktop-screen {\n    @media (min-width: #{$min-desktop-width}) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-screen {\n    @media (max-width: #{$min-desktop-width - 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-or-desktop-screen {\n    @media (min-width: #{$max-mobile-width + 1}) {\n        @content;\n    }\n}\n\n@mixin tablet-portrait-screen {\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\n        @content;\n    }\n}\n\n@mixin mobile-or-tablet-landscape {\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\n        @content;\n    }\n}\n\n/**\n * Define Breakpoints here.\n */\n$tablet-width: 768px;\n$desktop-width: 1024px;\n\n@mixin mobile {\n    @media (max-width: #{$tablet-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin tablet {\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\n        @content;\n    }\n}\n\n@mixin desktop {\n    @media (min-width: #{$desktop-width}) {\n        @content;\n    }\n}\n\n.wallets-compare-accounts-route {\n    width: 100%;\n    height: calc(100vh - 3rem);\n    overflow-x: hidden;\n}\n"],sourceRoot:""}]);const l=i},59310:(n,e,r)=>{var a=r(72591),t=r(98548);"string"==typeof(t=t.__esModule?t.default:t)&&(t=[[n.id,t,""]]);a(t,{insert:"head",singleton:!1}),n.exports=t.locals||{}},68658:(n,e,r)=>{var a=r(72591),t=r(45972);"string"==typeof(t=t.__esModule?t.default:t)&&(t=[[n.id,t,""]]);a(t,{insert:"head",singleton:!1}),n.exports=t.locals||{}},6861:(n,e,r)=>{var a=r(72591),t=r(87163);"string"==typeof(t=t.__esModule?t.default:t)&&(t=[[n.id,t,""]]);a(t,{insert:"head",singleton:!1}),n.exports=t.locals||{}},27971:(n,e,r)=>{var a=r(72591),t=r(10097);"string"==typeof(t=t.__esModule?t.default:t)&&(t=[[n.id,t,""]]);a(t,{insert:"head",singleton:!1}),n.exports=t.locals||{}},53946:(n,e,r)=>{var a=r(72591),t=r(10172);"string"==typeof(t=t.__esModule?t.default:t)&&(t=[[n.id,t,""]]);a(t,{insert:"head",singleton:!1}),n.exports=t.locals||{}},79074:(n,e,r)=>{var a=r(72591),t=r(63700);"string"==typeof(t=t.__esModule?t.default:t)&&(t=[[n.id,t,""]]);a(t,{insert:"head",singleton:!1}),n.exports=t.locals||{}},66043:(n,e,r)=>{var a=r(72591),t=r(54161);"string"==typeof(t=t.__esModule?t.default:t)&&(t=[[n.id,t,""]]);a(t,{insert:"head",singleton:!1}),n.exports=t.locals||{}},13318:(n,e,r)=>{var a=r(72591),t=r(58812);"string"==typeof(t=t.__esModule?t.default:t)&&(t=[[n.id,t,""]]);a(t,{insert:"head",singleton:!1}),n.exports=t.locals||{}},97699:(n,e,r)=>{var a=r(72591),t=r(19133);"string"==typeof(t=t.__esModule?t.default:t)&&(t=[[n.id,t,""]]);a(t,{insert:"head",singleton:!1}),n.exports=t.locals||{}},23093:(n,e,r)=>{var a=r(72591),t=r(48611);"string"==typeof(t=t.__esModule?t.default:t)&&(t=[[n.id,t,""]]);a(t,{insert:"head",singleton:!1}),n.exports=t.locals||{}},4806:(n,e,r)=>{var a=r(72591),t=r(33760);"string"==typeof(t=t.__esModule?t.default:t)&&(t=[[n.id,t,""]]);a(t,{insert:"head",singleton:!1}),n.exports=t.locals||{}}}]);