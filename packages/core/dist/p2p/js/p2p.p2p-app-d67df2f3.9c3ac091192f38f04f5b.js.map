{"version":3,"file":"p2p/js/p2p.p2p-app-d67df2f3.9c3ac091192f38f04f5b.js","mappings":"mJAIA,QAFoD,oBAAXA,OAAyBC,EAAAA,gBAAkBC,EAAAA,UC2EpF,QAzCA,SAMIC,EACAC,EACAC,EACAC,GAGA,IAAMC,GAAeC,EAAAA,EAAAA,QAAOJ,GAE5BK,GAA0B,WACtBF,EAAaG,QAAUN,CAC3B,GAAG,CAACA,KAEJF,EAAAA,EAAAA,YAAU,WACN,IAAIS,EAA2BC,EACLC,EAAAC,EAe1B,OAdIH,EAAgC,QAAnBE,EAAGR,aAAO,EAAPA,EAASK,eAAO,IAAAG,EAAAA,EAAIb,OACpCY,EAAW,SAAAG,GAAK,OAAIR,EAAaG,QAAQK,EAAM,EAG7B,QAAdD,EAACH,SAAa,IAAAG,GAAbA,EAAeE,kBAIpBL,EAAcK,iBAAiBb,EAAWS,EAAUN,GAMjD,WAAM,IAAAW,EACI,QAAbA,EAAAN,SAAa,IAAAM,GAAbA,EAAeC,oBAAoBf,EAAWS,EAAUN,EAC5D,CACJ,GAAG,CAACH,EAAWE,EAASC,GAC5B,ECvEO,SAASa,EACZC,EACAhB,EACAiB,GAGAC,EAFmCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,aAET,SAAAR,GACzB,IAAMW,EAAKN,aAAG,EAAHA,EAAKV,QAGXgB,IAAMA,EAAGC,SAASZ,EAAMa,UAIzBP,IAAiBA,EAAaN,IAElCX,EAAQW,GACZ,GACJ,C","sources":["webpack://@deriv/p2p/../components/src/hooks/use-isomorphic-layout-effect.ts","webpack://@deriv/p2p/../components/src/hooks/use-event-listener.ts","webpack://@deriv/p2p/../components/src/hooks/use-onclickoutside.ts"],"sourcesContent":["import { useEffect, useLayoutEffect } from 'react';\n\nconst useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\n\nexport default useIsomorphicLayoutEffect;\n","import { RefObject, useEffect, useRef } from 'react';\n\nimport useIsomorphicLayoutEffect from './use-isomorphic-layout-effect';\n\n// MediaQueryList Event based useEventListener interface\nfunction useEventListener<K extends keyof MediaQueryListEventMap>(\n    eventName: K,\n    handler: (event: MediaQueryListEventMap[K]) => void,\n    element: RefObject<MediaQueryList>,\n    options?: boolean | AddEventListenerOptions\n): void;\n\n// Window Event based useEventListener interface\nfunction useEventListener<K extends keyof WindowEventMap>(\n    eventName: K,\n    handler: (event: WindowEventMap[K]) => void,\n    element?: undefined,\n    options?: boolean | AddEventListenerOptions\n): void;\n\n// Element Event based useEventListener interface\nfunction useEventListener<K extends keyof HTMLElementEventMap, T extends HTMLElement = HTMLDivElement>(\n    eventName: K,\n    handler: (event: HTMLElementEventMap[K]) => void,\n    element: RefObject<T>,\n    options?: boolean | AddEventListenerOptions\n): void;\n\n// Document Event based useEventListener interface\nfunction useEventListener<K extends keyof DocumentEventMap>(\n    eventName: K,\n    handler: (event: DocumentEventMap[K]) => void,\n    element: RefObject<Document>,\n    options?: boolean | AddEventListenerOptions\n): void;\n\nfunction useEventListener<\n    KW extends keyof WindowEventMap,\n    KH extends keyof HTMLElementEventMap,\n    KM extends keyof MediaQueryListEventMap,\n    T extends HTMLElement | MediaQueryList | void = void\n>(\n    eventName: KW | KH | KM,\n    handler: (event: WindowEventMap[KW] | HTMLElementEventMap[KH] | MediaQueryListEventMap[KM] | Event) => void,\n    element?: RefObject<T>,\n    options?: boolean | AddEventListenerOptions\n) {\n    // Create a ref that stores handler\n    const savedHandler = useRef(handler);\n\n    useIsomorphicLayoutEffect(() => {\n        savedHandler.current = handler;\n    }, [handler]);\n\n    useEffect(() => {\n        let targetElement: T | Window, listener: typeof handler;\n        const setListener = () => {\n            targetElement = element?.current ?? window;\n            listener = event => savedHandler.current(event);\n            // Define the listening target\n\n            if (!targetElement?.addEventListener) return;\n\n            // Create event listener that calls handler function stored in ref\n\n            targetElement.addEventListener(eventName, listener, options);\n        };\n\n        setListener();\n\n        // Remove event listener on cleanup\n        return () => {\n            targetElement?.removeEventListener(eventName, listener, options);\n        };\n    }, [eventName, element, options]);\n}\n\nexport default useEventListener;\n","import { RefObject } from 'react';\nimport useEventListener from './use-event-listener';\n\ntype Handler = (event: MouseEvent) => void;\nexport function useOnClickOutside<T extends HTMLElement = HTMLElement>(\n    ref: RefObject<T>,\n    handler: Handler,\n    validationFn?: (event: MouseEvent) => boolean,\n    mouseEvent: 'mousedown' | 'mouseup' = 'mousedown'\n): void {\n    useEventListener(mouseEvent, event => {\n        const el = ref?.current;\n\n        // Do nothing if clicking ref's element or descendent elements\n        if (!el || el.contains(event.target as Node)) {\n            return;\n        }\n\n        if (validationFn && !validationFn(event)) return;\n\n        handler(event);\n    });\n}\n"],"names":["window","useLayoutEffect","useEffect","eventName","handler","element","options","savedHandler","useRef","useIsomorphicLayoutEffect","current","targetElement","listener","_element$current","_targetElement","event","addEventListener","_targetElement2","removeEventListener","useOnClickOutside","ref","validationFn","useEventListener","arguments","length","undefined","el","contains","target"],"sourceRoot":""}