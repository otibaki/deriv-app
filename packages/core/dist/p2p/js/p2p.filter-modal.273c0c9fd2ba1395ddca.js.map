{"version":3,"file":"p2p/js/p2p.filter-modal.273c0c9fd2ba1395ddca.js","mappings":"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","sources":["webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-no-results.scss","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-search.scss","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal.scss","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-no-results.scss?b295","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-search.scss?6103","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal.scss?69a2","webpack://@deriv/p2p/./src/utils/helper.ts","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-no-results.tsx","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-result.tsx","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-search.tsx","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-body.tsx","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-footer.tsx","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal-header.tsx","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/filter-modal.tsx","webpack://@deriv/p2p/./src/components/modal-manager/modals/filter-modal/index.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".filter-modal-no-results{display:flex;flex-direction:column;padding:50% .8rem;justify-content:center;align-content:center}.filter-modal-no-results__title{line-height:1.43;letter-spacing:normal;margin-bottom:.8rem}.filter-modal-no-results__subtitle{letter-spacing:normal;margin:0}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/modal-manager/modals/filter-modal/filter-modal-no-results.scss\"],\"names\":[],\"mappings\":\"AAysBA,yBACI,YAAA,CACA,qBAAA,CACA,iBAAA,CACA,sBAAA,CACA,oBAAA,CAEA,gCACI,gBAAA,CACA,qBAAA,CACA,mBAAA,CAEJ,mCACI,qBAAA,CACA,QAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 40px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n.filter-modal-no-results {\\n    display: flex;\\n    flex-direction: column;\\n    padding: 50% 0.8rem;\\n    justify-content: center;\\n    align-content: center;\\n\\n    &__title {\\n        line-height: 1.43;\\n        letter-spacing: normal;\\n        margin-bottom: 0.8rem;\\n    }\\n    &__subtitle {\\n        letter-spacing: normal;\\n        margin: 0;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".filter-modal-search{border-bottom:1px solid var(--border-normal)}.filter-modal-search .dc-input{border:medium none currentColor;border:initial;height:5.2rem}@media(max-width: 1279px){.filter-modal-search{padding:.8rem 1rem;min-width:25rem}.filter-modal-search .dc-input{height:4rem}}@media(max-width: 320px){.filter-modal-search{width:14rem}}.filter-modal-search__cross-icon{cursor:pointer}.filter-modal-search__field{margin-bottom:0 !important}.filter-modal-search__field .dc-input{justify-content:center}.filter-modal-search__field .dc-input__container{border:none;height:6rem}.filter-modal-search__field .dc-input__field{flex-grow:1;height:4rem;padding-right:3rem;margin-left:1.2rem;width:auto;width:initial}@media(max-width: 1279px){.filter-modal-search__field .dc-input__field{padding:0 2.8rem 0 .4rem}}.filter-modal-search__field .dc-input__leading-icon{cursor:pointer;margin-left:.8rem;pointer-events:inherit;position:static;position:initial}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/modal-manager/modals/filter-modal/filter-modal-search.scss\"],\"names\":[],\"mappings\":\"AAysBA,qBACI,4CAAA,CAEA,+BACI,+BAAA,CAAA,cAAA,CACA,aAAA,CA5BJ,0BAuBJ,qBASQ,kBAAA,CACA,eAAA,CAEA,+BACI,WAAA,CAAA,CAIR,yBAjBJ,qBAkBQ,WAAA,CAAA,CAGJ,iCACI,cAAA,CAGJ,4BACI,0BAAA,CAEA,sCACI,sBAAA,CAEA,iDACI,WAAA,CACA,WAAA,CAEJ,6CACI,WAAA,CACA,WAAA,CACA,kBAAA,CACA,kBAAA,CACA,UAAA,CAAA,aAAA,CA/DZ,0BA0DQ,6CAQQ,wBAAA,CAAA,CAIR,oDACI,cAAA,CACA,iBAAA,CACA,sBAAA,CACA,eAAA,CAAA,gBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 40px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n.filter-modal-search {\\n    border-bottom: 1px solid var(--border-normal);\\n\\n    .dc-input {\\n        border: unset;\\n        height: 5.2rem;\\n    }\\n\\n    @include mobile-or-tablet-screen {\\n        padding: 0.8rem 1rem;\\n        min-width: 25rem;\\n\\n        .dc-input {\\n            height: 4rem;\\n        }\\n    }\\n\\n    @media (max-width: 320px) {\\n        width: 14rem;\\n    }\\n\\n    &__cross-icon {\\n        cursor: pointer;\\n    }\\n\\n    &__field {\\n        margin-bottom: 0 !important;\\n\\n        .dc-input {\\n            justify-content: center;\\n\\n            &__container {\\n                border: none;\\n                height: 6rem;\\n            }\\n            &__field {\\n                flex-grow: 1;\\n                height: 4rem;\\n                padding-right: 3rem;\\n                margin-left: 1.2rem;\\n                width: unset;\\n\\n                @include mobile-or-tablet-screen {\\n                    padding: 0 2.8rem 0 0.4rem;\\n                }\\n            }\\n\\n            &__leading-icon {\\n                cursor: pointer;\\n                margin-left: 0.8rem;\\n                pointer-events: unset;\\n                position: unset;\\n            }\\n        }\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"[dir=\\\"ltr\\\"] .filter-modal-header .page-return__button{margin-right:2rem}[dir=\\\"rtl\\\"] .filter-modal-header .page-return__button{margin-left:2rem}.filter-modal-header__return-button{position:absolute;left:1.2rem}.filter-modal-body__column{display:flex;flex-direction:column;flex:1}@media(max-width: 450px){.filter-modal-body__column{width:80%}}.filter-modal-body__select{cursor:pointer}.filter-modal-body__selected-payment-methods{max-width:350px;max-height:45px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}@media(max-width: 450px){.filter-modal-body__selected-payment-methods{max-width:300px}}@media(max-width: 400px){.filter-modal-body__selected-payment-methods{max-width:250px}}.filter-modal-body__arrow{min-width:1.8rem;min-height:1.8rem}.filter-modal-body__row{align-items:center;border-bottom:2px solid var(--general-section-5);display:flex;flex-direction:row;justify-content:space-between;min-height:8rem;padding:0 2.4rem;gap:1.6rem}@media(max-width: 375px){.filter-modal-body__row{padding:1.4rem 2.4rem}}.filter-modal-body__toggle-label{margin:0}.filter-modal-body__checkbox-container{height:36rem}@media(max-width: 1279px){.filter-modal-body__checkbox-container{height:100%}.filter-modal-body__checkbox-container .dc-checkbox{margin:3.5rem 1rem}}.filter-modal__body{flex-direction:column}.filter-modal__footer-button{display:flex;width:100%}@media(max-width: 1279px){.filter-modal__footer-button-group{display:grid;grid-template-columns:1fr 1fr;width:100%}}.dc-modal__container_payment-methods .dc-modal-header{border-bottom:2px solid var(--general-section-5);height:5.6rem}.dc-modal__container_payment-methods .dc-modal-header__title{padding:1.6rem 3.2rem}.dc-modal__container_payment-methods .dc-modal-body{padding:0;min-width:33rem}.dc-modal__container_payment-methods .dc-checkbox{min-height:4.9rem;padding:0 1.6rem}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/modal-manager/modals/filter-modal/filter-modal.scss\"],\"names\":[],\"mappings\":\"AA2sBQ,sDACI,iBAAA,CADJ,sDACI,gBAAA,CAEJ,oCACI,iBAAA,CACA,WAAA,CAKJ,2BACI,YAAA,CACA,qBAAA,CACA,MAAA,CAEA,yBALJ,2BAMQ,SAAA,CAAA,CAIR,2BACI,cAAA,CAGJ,6CACI,eAAA,CACA,eAAA,CACA,eAAA,CACA,kBAAA,CACA,sBAAA,CAEA,yBAPJ,6CAQQ,eAAA,CAAA,CAEJ,yBAVJ,6CAWQ,eAAA,CAAA,CAIR,0BACI,gBAAA,CACA,iBAAA,CAGJ,wBACI,kBAAA,CACA,gDAAA,CACA,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,eAAA,CACA,gBAAA,CACA,UAAA,CAEA,yBAVJ,wBAWQ,qBAAA,CAAA,CAIR,iCACI,QAAA,CAGJ,uCACI,YAAA,CAzFR,0BAwFI,uCAIQ,WAAA,CAEA,oDACI,kBAAA,CAAA,CAMhB,oBACI,qBAAA,CAIA,6BACI,YAAA,CACA,UAAA,CA5GR,0BA+GI,mCAEQ,YAAA,CACA,6BAAA,CACA,UAAA,CAAA,CAOZ,sDACI,gDAAA,CACA,aAAA,CAEA,6DACI,qBAAA,CAIR,oDACI,SAAA,CACA,eAAA,CAGJ,kDACI,iBAAA,CACA,gBAAA\",\"sourcesContent\":[\"/*------------------------------------*\\n *  # Constants\\n *------------------------------------*/\\n\\n/*RTL Language Mixin*/\\n\\n@mixin rtl {\\n    [dir='rtl'] & {\\n        @content;\\n    }\\n}\\n\\n/* stylelint-disable color-no-hex */\\n\\n/* COLOR PALETTE */\\n\\n/* colors */\\n$color-black: #0e0e0e;\\n$color-black-1: #333333;\\n$color-black-3: #151717;\\n$color-black-4: #1d1f20;\\n$color-black-5: #242828;\\n$color-black-6: #3e3e3e;\\n$color-black-7: #000000;\\n$color-black-8: #323738;\\n$color-black-9: #5c5c5c;\\n$color-black-10: #181c25;\\n$color-blue: #377cfc;\\n$color-blue-1: #0dc2e7;\\n$color-blue-2: #2a3052;\\n$color-blue-3: #0796e0;\\n$color-blue-4: #0677af;\\n$color-blue-5: #dfeaff;\\n$color-blue-6: #92b8ff;\\n$color-blue-7: #182130;\\n$color-blue-8: #e6f5ff;\\n$color-blue-9: #00426a;\\n$color-brown: #664407;\\n$color-green: #85acb0;\\n$color-green-1: #4bb4b3;\\n$color-green-2: #3d9494;\\n$color-green-3: #00a79e;\\n$color-green-4: #008079;\\n$color-green-5: #4bb4b329;\\n$color-green-6: #17eabd;\\n$color-green-7: #e8fdf8;\\n$color-green-8: #cedddf;\\n$color-grey: #c2c2c2;\\n$color-grey-1: #999999;\\n$color-grey-2: #f2f3f4;\\n$color-grey-3: #eaeced;\\n$color-grey-4: #e6e9e9;\\n$color-grey-5: #d6dadb;\\n$color-grey-6: #d6d6d6;\\n$color-grey-7: #6e6e6e;\\n$color-grey-8: #d7d7d7;\\n$color_grey-9: #868686;\\n$color-grey-10: #919191;\\n$color-grey-11: #fafafa;\\n$color-grey-12: #f5f7fa;\\n$color-grey-13: #2e2e2e;\\n$color-grey-14: #e2e5e7;\\n$color-grey-15: #f3f4f5;\\n$color-orange: #ff6444;\\n$color-orange-2: #ff9c13;\\n$color-purple: #722fe4;\\n$color-red: #ff444f;\\n$color-red-1: #ec3f3f;\\n$color-red-2: #cc2e3d;\\n$color-red-3: #a32430;\\n$color-red-4: #d33636;\\n$color-red-5: #eb3e48;\\n$color-red-6: #ec3f3f29;\\n$color-red-7: #ffe1e3;\\n$color-red-8: #661b20;\\n$color-red-9: #b33037;\\n$color-red-10: #ff444f;\\n$color-red-11: #fce3e3;\\n$color-red-12: #c40000;\\n$color-violet: #4a3871;\\n$color-white: #ffffff;\\n$color-yellow: #ffad3a;\\n$color-yellow-1: #b3760d;\\n$color-yellow-2: #ffa912;\\n$color-yellow-3: rgba(255, 173, 58, 0.16);\\n$color-yellow-4: #fff7e6;\\n$color-yellow-5: #6a4800;\\n$color-yellow-6: #ffeabf;\\n\\n/* status colors */\\n$color-status-warning: rgba(255, 173, 58, 0.16);\\n$color-status-information: rgba(55, 124, 252, 0.16);\\n$color-status-announcement: rgba(75, 180, 179, 0.16);\\n$color-status-error: rgba(236, 63, 63, 0.16);\\n$color-status-verified: rgba(0, 122, 34);\\n$color-status-danger: rgba(196, 0, 0);\\n\\n/* alpha colors */\\n$alpha-color-black-1: transparentize($color-black-7, 0.28);\\n$alpha-color-black-2: transparentize($color-black, 0.04);\\n$alpha-color-black-3: transparentize($color-black-7, 0.92);\\n$alpha-color-black-4: transparentize($color-black-7, 0.84);\\n$alpha-color-black-5: transparentize($color-black-7, 0.16);\\n$alpha-color-black-6: transparentize($color-black-7, 0.36);\\n$alpha-color-black-7: transparentize($color-black, 0.5);\\n$alpha-color-blue-1: transparentize($color-blue, 0.84);\\n$alpha-color-blue-2: transparentize($color-blue-3, 0.84);\\n$alpha-color-blue-3: transparentize($color-blue, 0.92);\\n$alpha-color-white-1: transparentize($color-white, 0.04);\\n$alpha-color-white-2: transparentize($color-white, 0.84);\\n$alpha-color-white-3: transparentize($color-white, 0.92);\\n$alpha-color-white-4: transparentize($color-white, 0.3);\\n$alpha-color-red-1: transparentize($color-red, 0.92);\\n$alpha-color-red-2: transparentize($color-red, 0.84);\\n$alpha-color-red-3: transparentize($color-red, 0.76);\\n$alpha-color-green-1: transparentize($color-green-1, 0.08);\\n$alpha-color-green-2: transparentize($color-green-3, 0.08);\\n$alpha-color-green-3: transparentize($color-green-3, 0.84);\\n$alpha-color-yellow-1: transparentize($color-yellow, 0.84);\\n\\n/* gradient colors */\\n$gradient-color-green-1: linear-gradient(to top, $color-white, transparentize($color-green-1, 0.84));\\n$gradient-color-green-2: linear-gradient(to top, $color-black, transparentize($color-green-3, 0.84));\\n$gradient-color-red-1: linear-gradient(to top, $color-white, transparentize($color-red, 0.84));\\n$gradient-color-red-2: linear-gradient(to top, $color-black, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-1: linear-gradient(to top, $color-white 85%, transparentize($color-red, 0.84));\\n$contract-gradient-color-red-2: linear-gradient(to top, $color-black 85%, transparentize($color-red, 0.84));\\n$gradient-color-white: linear-gradient(to right, transparentize($color-white, 1) -5%, $color-white 71%);\\n$gradient-color-black: linear-gradient(to right, transparentize($color-black, 1) -5%, $color-black 71%);\\n\\n$gradient-color-purple: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-color-blue: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-color-orange: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-color-black-2: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-color-orange-2: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-color-blue-2: linear-gradient(90deg, #3d83cf 0%, #2775ca 100%);\\n$gradient-color-green-3: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-color-blue-3: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n$gradient-color-orange-3: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-color-orange-4: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-color-blue-4: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-color-red-3: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-color-red-4: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-color-black-3: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n$gradient-color-black-4: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-color-black-5: linear-gradient(180deg, rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 0.16) 100%);\\n$gradient-color-white-2: linear-gradient(180deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.16) 100%);\\n$gradient-color-blue-5: linear-gradient(90deg, #00a8af 0%, #04cfd8 104.41%);\\n$gradient-color-gold: linear-gradient(90deg, #f7931a 0%, #ffc71b 104.41%);\\n$gradient-color-green-4: linear-gradient(90deg, #1db193 0%, #09da7a 104.41%);\\n\\n/* Preserve legacy variables */\\n/* Primary */\\n\\n$COLOR_BLACK: #000000;\\n$COLOR_BLACK_2: #1d1f20;\\n$COLOR_BLACK_3: #0e0e0e;\\n$COLOR_GREEN_1: #39b19d;\\n$COLOR_GREEN_2: #2d9f93;\\n$COLOR_GREEN_3: #21ce99;\\n$COLOR_GREEN_4: #00a79e;\\n$COLOR_GREEN_5: #4bb4b3;\\n$COLOR_ORANGE: #ff9933;\\n$COLOR_DARK_ORANGE: #ff8802;\\n$COLOR_PURPLE: #4f60ae;\\n$COLOR_RED: #e31c4b;\\n$COLOR_RED_2: #cc2e3d;\\n$COLOR_RED_3: #ec3f3f;\\n$COLOR_CORAL_RED: #ff444f;\\n$COLOR_SKY_BLUE: #2196f3;\\n$COLOR_WHITE: #ffffff;\\n$COLOR_BLUE: #1c5ae3;\\n\\n// Light theme\\n$COLOR_LIGHT_BLACK_1: rgba(0, 0, 0, 0.8);\\n$COLOR_LIGHT_BLACK_2: rgba(0, 0, 0, 0.4);\\n$COLOR_LIGHT_BLACK_3: rgba(0, 0, 0, 0.16);\\n$COLOR_LIGHT_BLACK_3_SOLID_1: #d6d6d6;\\n$COLOR_LIGHT_BLACK_3_SOLID_2: #b3b3b3;\\n$COLOR_LIGHT_BLACK_4: rgba(0, 0, 0, 0.04);\\n$COLOR_LIGHT_BLACK_4_SOLID: #f4f4f6;\\n$COLOR_LIGHT_GRAY_1: #999cac;\\n$COLOR_LIGHT_GRAY_2: rgba(153, 156, 172, 0.32);\\n$COLOR_LIGHT_GRAY_3: #eaeced;\\n$COLOR_LIGHT_GRAY_4: #6e6e6e;\\n$COLOR_LIGHT_GRAY_5: #c2c2c2;\\n$COLOR_LIGHT_GRAY_6: #f2f3f4;\\n$COLOR_LIGHT_GREEN_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_LIGHT_RED_GRADIENT: linear-gradient(to top, rgba(255, 255, 255, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_LIGHT_WHITE_GRADIENT: linear-gradient(to right, rgba(255, 255, 255, 1), rgba(255, 255, 255, 0));\\n// Dark theme\\n$COLOR_DARK_BLACK_GRADIENT: linear-gradient(to right, rgba(16, 19, 32, 1), rgba(16, 19, 32, 0));\\n$COLOR_DARK_BLUE_1: #0b0e18;\\n$COLOR_DARK_BLUE_2: #101320;\\n$COLOR_DARK_BLUE_3: #191c31;\\n$COLOR_DARK_BLUE_4: #202641;\\n$COLOR_DARK_BLUE_5: #2a3052;\\n$COLOR_DARK_BLUE_6: #555975;\\n$COLOR_DARK_BLUE_7: #7f8397;\\n$COLOR_DARK_BLUE_8: rgba(127, 131, 151, 0.3);\\n$COLOR_DARK_GREEN_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(0, 148, 117, 0.16));\\n$COLOR_DARK_RED_GRADIENT: linear-gradient(to top, rgba(16, 19, 32, 0), rgba(227, 28, 75, 0.16));\\n$COLOR_DARK_GRAY_1: #282a37;\\n$COLOR_DARK_GRAY_2: #303342;\\n$COLOR_DARK_GRAY_3: #555975;\\n$COLOR_DARK_GRAY_4: #999999;\\n/* stylelint-enable color-no-hex */\\n\\n$BORDER_RADIUS: 4px;\\n$BORDER_RADIUS_2: 8px;\\n\\n$MAX_CONTAINER_WIDTH: 1440px;\\n\\n$POSITIONS_DRAWER_WIDTH: 240px;\\n$POSITIONS_DRAWER_MARGIN: 8px;\\n\\n$HEADER_HEIGHT: 48px;\\n$FOOTER_HEIGHT: 36px;\\n\\n$MOBILE_HEADER_HEIGHT: 40px;\\n$MOBILE_HEADER_DTRADER_V2_HEIGHT: 40px;\\n$MOBILE_HEADER_DTRADER_V2_WITH_BANNER_HEIGHT: 128px;\\n$MOBILE_HEADER_HEIGHT_DASHBOARD: 48px;\\n$MOBILE_WRAPPER_HEADER_HEIGHT: 40px;\\n$MOBILE_WRAPPER_FOOTER_HEIGHT: 70px;\\n\\n$SIDEBAR_WIDTH: 240px;\\n\\n/* Wallet gradient background */\\n$gradient-airtm: linear-gradient(90deg, #1a8fff 0%, #0083ff 100%);\\n$gradient-banxa: linear-gradient(90deg, #000000 0%, #4ac0ba 96.35%);\\n$gradient-bitcoin: linear-gradient(90deg, #f89e32 0%, #f7931b 103.12%);\\n$gradient-credit: linear-gradient(274.73deg, #464750 3.82%, #0e0f11 88.49%);\\n$gradient-dp2p: linear-gradient(90deg, #ff444f 0%, #211d1e 95.22%);\\n$gradient-fasapay: linear-gradient(90deg, #f6931c 0%, #4873ac 95.22%);\\n$gradient-jeton: linear-gradient(90deg, #ff7635 0%, #ff671f 100%);\\n$gradient-mastercard: linear-gradient(90deg, #eb001b 0%, #f79e1b 100%);\\n$gradient-neteller: linear-gradient(90deg, #98cc53 0%, #8dc640 100%);\\n$gradient-paylivre: linear-gradient(90deg, #352caa 0%, #9a6bfc 100%);\\n$gradient-paysafe: linear-gradient(90deg, #e3001b 0%, #008ac9 100%);\\n$gradient-perfectmoney: linear-gradient(90deg, #f12c2c 0%, #ef1515 100%);\\n$gradient-skrill: linear-gradient(274.73deg, #5a205d 3.82%, #7f3883 88.49%);\\n$gradient-sticpay: linear-gradient(90deg, #f36938 0%, #f25822 100%);\\n$gradient-virtual: linear-gradient(90deg, #ff6444 0%, #ff444f 100%);\\n$gradient-visa: linear-gradient(274.73deg, #1a205e 3.82%, #122d96 88.49%);\\n$gradient-webmoney: linear-gradient(90deg, #1a77ac 0%, #0068a3 100%);\\n\\n/* App Cards gradient background */\\n$gradient-virtual: linear-gradient(274.25deg, #333333 9.01%, #5c5b5b 103.31%);\\n$gradient-virtual-swap-free: linear-gradient(58.51deg, #061828 28.06%, #1a3c60 93.51%);\\n\\n/* Wallets */\\n$ready-banner-bg-color: #e2f3f3;\\n$ready-banner-tick-bg-color: #4ab4b3;\\n$wallet-demo-bg-color: #fff8f9;\\n$wallet-dark-demo-bg-color: #140506;\\n$wallet-demo-divider-color: #fff0f1;\\n$wallet-box-shadow: 0px 12px 16px -4px rgba(14, 14, 14, 0.08), 0px 4px 6px -2px rgba(14, 14, 14, 0.03);\\n$btn-shadow: 0px 24px 24px 0px rgba(0, 0, 0, 0.08), 0px 0px 24px 0px rgba(0, 0, 0, 0.08);\\n\\n/*------------------------------------*\\n *  # SASS Mixins and Functions\\n *------------------------------------*/\\n\\n/*\\n * SASS interpolation\\n */\\n// Requires the calc-interpolation function which can also be used independently\\n@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {\\n    $a: ($max-value - $min-value) / ($max-screen - $min-screen);\\n    $b: $min-value - $a * $min-screen;\\n\\n    $sign: '+';\\n    @if ($b < 0) {\\n        $sign: '-';\\n        $b: abs($b);\\n    }\\n    @return calc(#{$a * 100}vw #{$sign} #{$b});\\n}\\n\\n@mixin interpolate($properties, $min-screen, $max-screen, $min-value, $max-value) {\\n    & {\\n        @each $property in $properties {\\n            #{$property}: $min-value;\\n        }\\n        @media screen and (min-width: $min-screen) {\\n            @each $property in $properties {\\n                #{$property}: calc-interpolation($min-screen, $min-value, $max-screen, $max-value);\\n            }\\n        }\\n        @media screen and (min-width: $max-screen) {\\n            @each $property in $properties {\\n                #{$property}: $max-value;\\n            }\\n        }\\n    }\\n}\\n\\n/*\\n * PX to EM\\n * @param $px - px value to be converted\\n * @param $base - base font size (in `em`)\\n * Note: 'em' values are calculate based on the element font-size\\n *       to properly converts 'px' to 'em', please pass in the element font-size with it\\n * Usage example:\\n    padding: em(16px, 1.6em); // font-size in 'em'\\n */\\n@function em($px, $base: $BASE_FONT_SIZE) {\\n    $list: ();\\n    @if length($px) != 1 {\\n        @for $i from 1 through length($px) {\\n            $val_em: (nth($px, $i) / $base) * 1em;\\n            $list: append($list, $val_em, space);\\n        }\\n        @return $list;\\n    } @else {\\n        @return ($px / $base) * 1em;\\n    }\\n}\\n\\n/*\\n * Set property by passing a property name, and values.\\n * @param $property name - padding, margin etc.\\n * @param $values        - values in `px` (space separated for multiple values)\\n * @param $font-size     - base font-size in `em`\\n * Usage example:\\n   @include toEm(padding, 8px 16px 8px, 1.6em);\\n */\\n@mixin toEm($property, $values, $font-size: $BASE_FONT_SIZE) {\\n    #{$property}: em($values, $font-size);\\n}\\n\\n/*\\n * Generate typefaces key-value pair of variable name and config\\n * Example:\\n   --paragraph-center-bold-black: (14px, center, bold, black)\\n */\\n@function generate-typefaces() {\\n    $typeface_list: ();\\n    @each $fontsize_name, $size in $FONT_SIZES {\\n        @each $textalign_name, $text_align in $TEXT_ALIGN {\\n            @each $color_name, $color in $FONT_COLORS {\\n                @each $fontweight_name, $weight in $FONT_WEIGHTS {\\n                    $key: --#{$fontsize_name}-#{$textalign_name}-#{$fontweight_name}-#{$color_name};\\n                    $val: ($size, $text_align, $weight, $color);\\n                    $typeface: (\\n                        $key: $val,\\n                    );\\n                    $typeface_list: map-merge($typeface_list, $typeface);\\n                }\\n            }\\n        }\\n    }\\n    // @debug $typeface_list; /* uncomment to debug */\\n    @return $typeface_list;\\n}\\n\\n/*\\n * Sets font-size, font-weight, color, text-transform, text-align and line-height\\n * Usage example:\\n   @include setTypeface(16px, bold, black, uppercase);\\n */\\n@mixin setTypeface($size, $align, $weight, $colour, $tt) {\\n    @if $size {\\n        font-size: $size;\\n    }\\n    @if $colour {\\n        color: $colour;\\n    }\\n    @if $weight {\\n        font-weight: $weight;\\n    }\\n    @if $tt {\\n        text-transform: $tt;\\n    }\\n    @if $align {\\n        text-align: $align;\\n    }\\n    @if $size == 1.6rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'large');\\n    } @else if $size == 1.4rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'medium');\\n    } @else if $size == 1.2rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'small');\\n    } @else if $size == 1rem {\\n        line-height: map-get($map: $LINEHEIGHTS, $key: 'xsmall');\\n    } @else {\\n        line-height: unset;\\n    }\\n}\\n\\n/*\\n * Set typefaces by passing a typeface variable name\\n * @param $var   - typeface variable\\n * @param $tt    - text-transform property\\n * @param $align - text-align property\\n * Usage example:\\n   @include typeface(--paragraph-bold-black, uppercase, center);\\n */\\n@mixin typeface($var, $tt: none) {\\n    $typeface_config: map-get(\\n        $map: $TYPEFACES_LIST,\\n        $key: $var,\\n    );\\n\\n    $size: nth($typeface_config, 1); // font-size\\n    $align: nth($typeface_config, 2); // text-align\\n    $weight: nth($typeface_config, 3); // font-weight\\n    $color: nth($typeface_config, 4); // color\\n    @include setTypeface($size, $align, $weight, $color, $tt);\\n}\\n\\n/*\\n * Range Slider Thumb styling is set here\\n */\\n@mixin thumbStyle() {\\n    appearance: none;\\n    width: 1em;\\n    height: 1em;\\n    border-radius: 100%;\\n    border: 0;\\n    cursor: pointer;\\n    transition: box-shadow 0.2s;\\n    box-shadow: 0 0 0 0px rgba(0, 0, 0, 0);\\n\\n    &:hover {\\n        box-shadow: 0 0 0 0.5em var(--state-hover);\\n    }\\n}\\n\\n/*\\n * SVG icons colors\\n */\\n@mixin colorIcon($colors...) {\\n    @for $i from 1 through length($colors) {\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-fill {\\n            fill: nth($colors, $i);\\n        }\\n        /* postcss-bem-linter: ignore */\\n        .color#{$i}-stroke {\\n            stroke: nth($colors, $i);\\n        }\\n    }\\n}\\n\\n/*\\n * Bar Spinner Animation\\n * @param $count    - number of bars\\n * @param $duration - duration of animation\\n * @param $phase    - each bar phase change delay\\n * Usage example:\\n   @include createBarspinnerAnimation(5, 1.2s, 0,1);\\n */\\n@mixin createBarspinnerAnimation($count, $duration, $phase) {\\n    animation: sk-stretchdelay $duration infinite ease-in-out;\\n\\n    @for $i from 1 through $count {\\n        &--#{$i} {\\n            animation-delay: -$duration + (($i - 1) * $phase);\\n        }\\n    }\\n}\\n\\n/*\\n * Tooltip colors\\n * @param $color - color property\\n * Usage example:\\n   @include tooltipColor($COLOR_RED);\\n */\\n@mixin tooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n * Convert Tooltip colors\\n * @param $color - css color property\\n * Usage example:\\n   @include convertTooltipColor(var(--status-default));\\n */\\n@mixin convertTooltipColor($color) {\\n    &:before {\\n        background: $color;\\n    }\\n    &:after,\\n    &[data-tooltip-pos='top']:after {\\n        border-top-color: $color;\\n    }\\n    &[data-tooltip-pos='right']:after {\\n        border-top-color: transparent;\\n        border-right-color: $color;\\n    }\\n    &[data-tooltip-pos='left']:after {\\n        border-top-color: transparent;\\n        border-left-color: $color;\\n    }\\n    &[data-tooltip-pos='bottom']:after {\\n        border-top-color: transparent;\\n        border-bottom-color: $color;\\n    }\\n}\\n\\n/*\\n    Constants\\n*/\\n$FONT_STACK: 'IBM Plex Sans', sans-serif;\\n$BASE_FONT_SIZE: 10px;\\n\\n/*\\n    Variables\\n*/\\n$FONT_SIZES: (\\n    'xheading' 3.2rem,\\n    'heading' 3rem,\\n    'large' 2.8rem,\\n    'title' 1.6rem,\\n    'paragraph' 1.4rem,\\n    'small' 1.2rem,\\n    'xsmall' 1rem,\\n    'xxsmall' 0.8rem,\\n    'xxxsmall' 0.6rem\\n);\\n\\n$FONT_COLORS: (\\n    'active' var(--text-colored-background),\\n    'prominent' var(--text-prominent),\\n    'black' var(--text-general),\\n    'grey' var(--text-less-prominent),\\n    'disabled' var(--text-disabled),\\n    'green' var(--text-profit-success),\\n    'red' var(--text-loss-danger)\\n);\\n\\n$FONT_WEIGHTS: ('bold' 700, 'semibold' 500, 'normal' 400, 'light' 300);\\n\\n$TEXT_ALIGN: ('center' center, 'left' start, 'right' end);\\n\\n$LINEHEIGHTS: (\\n    'large': 1.75,\\n    'medium': 1.5,\\n    'small': 1.25,\\n    'xsmall': 1.4,\\n);\\n\\n/*\\n    List of all typefaces variables in the format: --$FONT_SIZES-$TEXT_ALIGN-$FONT_WEIGHTS-COLORS.\\n    See $FONT_SIZES, $TEXT_ALIGN, $FONT_WEIGHTS, $COLORS maps above for references.\\n    Variables name example: --title-center-semibold-red\\n */\\n$TYPEFACES_LIST: generate-typefaces();\\n\\n/*\\n    to use styles without modifier class on .inline-icon\\n    use @extend\\n\\n    e.g. style icon on parent hover:\\n        a:hover .inline-icon {\\n            @extend %inline-icon-active;\\n        }\\n*/\\n\\n%inline-icon {\\n    @include colorIcon(var(--text-general), none);\\n\\n    &.active,\\n    &-active {\\n        @include colorIcon(var(--text-prominent), none);\\n    }\\n    &.disabled,\\n    &-disabled {\\n        @include colorIcon(var(--text-disabled), none);\\n    }\\n    &.white,\\n    &-white {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.border_hover_color,\\n    &-border_hover_color {\\n        @include colorIcon(var(--text-prominent));\\n    }\\n    &.secondary,\\n    &-secondary {\\n        @include colorIcon(var(--text-less-prominent));\\n    }\\n}\\n\\n/**\\n * Define Breakpoints here.\\n */\\n$mobile-width: 320px;\\n$tablet-width: 768px;\\n$desktop-width: 1024px;\\n\\n@mixin tablet {\\n    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop {\\n    @media (min-width: #{$desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-down {\\n    @media (max-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-up {\\n    @media (min-width: #{$tablet-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-up {\\n    @media (min-width: #{$mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$tablet-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-landscape {\\n    @media only screen and (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n@mixin touch-device {\\n    // add css interaction media query to detect touch devices\\n    // refer to: https://caniuse.com/#feat=css-media-interaction\\n    @media (pointer: coarse) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-tablet-mix {\\n    @media (min-width: #{$mobile-width}) and (max-width: #{$desktop-width - 1px}) {\\n        @content;\\n    }\\n}\\n\\n/** Need to add new breakpoints for mixins */\\n$max-mobile-width: 600px;\\n$min-desktop-width: 1280px;\\n\\n@mixin mobile-screen {\\n    @media (max-width: #{$max-mobile-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin desktop-screen {\\n    @media (min-width: #{$min-desktop-width}) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-screen {\\n    @media (max-width: #{$min-desktop-width - 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-or-desktop-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) {\\n        @content;\\n    }\\n}\\n\\n@mixin tablet-portrait-screen {\\n    @media (min-width: #{$max-mobile-width + 1}) and (max-width: #{$min-desktop-width - 1}) and (orientation: portrait) {\\n        @content;\\n    }\\n}\\n\\n@mixin mobile-or-tablet-landscape {\\n    @media only screen and (max-width: #{$min-desktop-width - 1}) and (orientation: landscape) {\\n        @content;\\n    }\\n}\\n\\n.filter-modal {\\n    &-header {\\n        .page-return__button {\\n            margin-inline-end: 2rem;\\n        }\\n        &__return-button {\\n            position: absolute;\\n            left: 1.2rem;\\n        }\\n    }\\n\\n    &-body {\\n        &__column {\\n            display: flex;\\n            flex-direction: column;\\n            flex: 1;\\n\\n            @media (max-width: 450px) {\\n                width: 80%;\\n            }\\n        }\\n\\n        &__select {\\n            cursor: pointer;\\n        }\\n\\n        &__selected-payment-methods {\\n            max-width: 350px;\\n            max-height: 45px;\\n            overflow: hidden;\\n            white-space: nowrap;\\n            text-overflow: ellipsis;\\n\\n            @media (max-width: 450px) {\\n                max-width: 300px;\\n            }\\n            @media (max-width: 400px) {\\n                max-width: 250px;\\n            }\\n        }\\n\\n        &__arrow {\\n            min-width: 1.8rem;\\n            min-height: 1.8rem;\\n        }\\n\\n        &__row {\\n            align-items: center;\\n            border-bottom: 2px solid var(--general-section-5);\\n            display: flex;\\n            flex-direction: row;\\n            justify-content: space-between;\\n            min-height: 8rem;\\n            padding: 0 2.4rem;\\n            gap: 1.6rem;\\n\\n            @media (max-width: 375px) {\\n                padding: 1.4rem 2.4rem;\\n            }\\n        }\\n\\n        &__toggle-label {\\n            margin: 0;\\n        }\\n\\n        &__checkbox-container {\\n            height: 36rem;\\n\\n            @include mobile-or-tablet-screen {\\n                height: 100%;\\n\\n                .dc-checkbox {\\n                    margin: 3.5rem 1rem;\\n                }\\n            }\\n        }\\n    }\\n\\n    &__body {\\n        flex-direction: column;\\n    }\\n\\n    &__footer {\\n        &-button {\\n            display: flex;\\n            width: 100%;\\n        }\\n\\n        &-button-group {\\n            @include mobile-or-tablet-screen {\\n                display: grid;\\n                grid-template-columns: 1fr 1fr;\\n                width: 100%;\\n            }\\n        }\\n    }\\n}\\n\\n.dc-modal__container_payment-methods {\\n    .dc-modal-header {\\n        border-bottom: 2px solid var(--general-section-5);\\n        height: 5.6rem;\\n\\n        &__title {\\n            padding: 1.6rem 3.2rem;\\n        }\\n    }\\n\\n    .dc-modal-body {\\n        padding: 0;\\n        min-width: 33rem;\\n    }\\n\\n    .dc-checkbox {\\n        min-height: 4.9rem;\\n        padding: 0 1.6rem;\\n    }\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[2].use[4]!./filter-modal-no-results.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[2].use[4]!./filter-modal-search.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","var api = require(\"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!../../../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../../../node_modules/sass-resources-loader/lib/loader.js??ruleSet[1].rules[2].use[4]!./filter-modal.scss\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","export const getListDifference = (arr1: string[], arr2: string[]) => arr1.filter(x => !arr2.includes(x));\n","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { Localize } from 'Components/i18next';\nimport './filter-modal-no-results.scss';\n\ntype TFilterModalNoResultsProps = {\n    text: string;\n};\n\nconst FilterModalNoResults = ({ text }: TFilterModalNoResultsProps) => (\n    <div className='filter-modal-no-results'>\n        <Text as='h2' align='center' weight='bold' className='filter-modal-no-results__title'>\n            <Localize\n                i18n_default_text='No results for \"{{text}}\".'\n                values={{ text }}\n                options={{ interpolation: { escapeValue: false } }}\n            />\n        </Text>\n        <Text as='p' align='center' className='filter-modal-no-results__subtitle'>\n            <Localize i18n_default_text='Check your spelling or use a different term.' />\n        </Text>\n    </div>\n);\n\nexport default FilterModalNoResults;\n","import React from 'react';\nimport { Checkbox, Loading } from '@deriv/components';\nimport { observer } from '@deriv/stores';\nimport { useStores } from 'Stores';\nimport { TPaymentMethod } from './filter-modal';\nimport FilterModalNoResults from './filter-modal-no-results';\n\ntype TFilterModalResultProps = {\n    onChange: (payment_method: TPaymentMethod) => void;\n    selected_methods: string[];\n};\n\nconst FilterModalResult = ({ onChange, selected_methods }: TFilterModalResultProps) => {\n    const { buy_sell_store, my_profile_store } = useStores();\n    const { is_filter_modal_loading } = buy_sell_store;\n    const { payment_methods_list_items, search_results, search_term } = my_profile_store;\n\n    if (is_filter_modal_loading) return <Loading is_fullscreen={false} />;\n    else if (search_term) {\n        if (search_results?.length > 0) {\n            return search_results?.map((payment_method: TPaymentMethod, key: number) => {\n                return (\n                    <Checkbox\n                        key={key}\n                        label={payment_method.text}\n                        onChange={() => onChange(payment_method)}\n                        value={selected_methods.includes(payment_method.value)}\n                    />\n                );\n            });\n        }\n        return <FilterModalNoResults text={search_term} />;\n    }\n    return payment_methods_list_items?.map((payment_method: TPaymentMethod, key: number) => {\n        return (\n            <Checkbox\n                name='checkbox'\n                key={key}\n                label={payment_method.text}\n                onChange={() => onChange(payment_method)}\n                value={selected_methods.includes(payment_method.value)}\n            />\n        );\n    });\n};\n\nexport default observer(FilterModalResult);\n","import React from 'react';\nimport { Field as FormField, Formik, Form, FormikValues } from 'formik';\nimport debounce from 'lodash.debounce';\nimport { Icon, Input } from '@deriv/components';\nimport { observer } from '@deriv/stores';\nimport { localize } from 'Components/i18next';\nimport { useStores } from 'Stores';\nimport './filter-modal-search.scss';\nimport { useDevice } from '@deriv-com/ui';\n\nconst FilterModalSearch = () => {\n    let typing_timer: NodeJS.Timeout | undefined;\n    const { isDesktop } = useDevice();\n    const { buy_sell_store, my_profile_store } = useStores();\n    const { setIsFilterModalLoading } = buy_sell_store;\n    const { getPaymentMethodsList, setSearchResults, setSearchTerm } = my_profile_store;\n\n    const returnedFunction = debounce(() => {\n        getPaymentMethodsList();\n    }, 1000);\n\n    const onSearch = ({ search }: { search: string }) => {\n        setSearchTerm(search.trim());\n\n        if (!search.trim()) {\n            setSearchResults([]);\n            return;\n        }\n\n        setIsFilterModalLoading(true);\n        returnedFunction();\n    };\n\n    const onSearchClear = (setFieldValue: (name: string, value: string) => void) => {\n        setFieldValue('search', '');\n        setSearchTerm('');\n        setSearchResults([]);\n    };\n\n    const onSearchKeyUp = (submitForm: VoidFunction) => {\n        clearTimeout(typing_timer);\n\n        typing_timer = setTimeout(() => {\n            submitForm();\n        }, 1000);\n    };\n\n    return (\n        <div className='filter-modal-search'>\n            <Formik initialValues={{ search: '' }} onSubmit={onSearch}>\n                {({ submitForm, values: { search }, setFieldValue }) => (\n                    <Form>\n                        <FormField name='search'>\n                            {({ field }: FormikValues) => (\n                                <Input\n                                    {...field}\n                                    className='filter-modal-search__field'\n                                    data-lpignore='true'\n                                    leading_icon={<Icon className='filter-modal-search__field-icon' icon='IcSearch' />}\n                                    name='search'\n                                    onFocus={submitForm}\n                                    onKeyUp={() => onSearchKeyUp(submitForm)}\n                                    placeholder={isDesktop ? localize('Search payment method') : localize('Search')}\n                                    trailing_icon={\n                                        search ? (\n                                            <Icon\n                                                className='filter-modal-search__cross-icon'\n                                                color='secondary'\n                                                data_testid='dt_filter_modal_search_icon'\n                                                icon='IcCloseCircle'\n                                                onClick={() => onSearchClear(setFieldValue)}\n                                            />\n                                        ) : null\n                                    }\n                                    type='text'\n                                />\n                            )}\n                        </FormField>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nexport default observer(FilterModalSearch);\n","import React from 'react';\nimport { Text, Icon, ThemedScrollbars, ToggleSwitch } from '@deriv/components';\nimport { observer } from '@deriv/stores';\nimport { Localize } from 'Components/i18next';\nimport { useStores } from 'Stores';\nimport { TPaymentMethod } from './filter-modal';\nimport FilterModalResult from './filter-modal-result';\nimport FilterModalSearch from './filter-modal-search';\n\ntype TFilterModalBodyProps = {\n    handleToggle: () => void;\n    onChange: (payment_method: TPaymentMethod) => void;\n    selected_methods: string[];\n    selected_methods_text: string[];\n};\n\nconst FilterModalBody = ({\n    handleToggle,\n    onChange,\n    selected_methods,\n    selected_methods_text,\n}: TFilterModalBodyProps) => {\n    const { buy_sell_store, my_profile_store } = useStores();\n    const { setShowFilterPaymentMethods, show_filter_payment_methods, should_use_client_limits } = buy_sell_store;\n    const { payment_methods_list_items } = my_profile_store;\n\n    return (\n        <React.Fragment>\n            {show_filter_payment_methods ? (\n                <React.Fragment>\n                    <FilterModalSearch />\n                    <div className='filter-modal-body__checkbox-container'>\n                        <ThemedScrollbars is_scrollbar_hidden>\n                            <FilterModalResult selected_methods={selected_methods} onChange={onChange} />\n                        </ThemedScrollbars>\n                    </div>\n                </React.Fragment>\n            ) : (\n                <React.Fragment>\n                    <div\n                        className='filter-modal-body__row filter-modal-body__select'\n                        onClick={() => setShowFilterPaymentMethods(true)}\n                    >\n                        <div className='filter-modal-body__column'>\n                            <Text color='prominent' size='xs'>\n                                <Localize i18n_default_text='Payment methods' />\n                            </Text>\n                            {selected_methods_text.length === payment_methods_list_items?.length ? (\n                                <Text color='less-prominent' size='xs'>\n                                    <Localize i18n_default_text='All' />\n                                </Text>\n                            ) : (\n                                <Text\n                                    className='filter-modal-body__selected-payment-methods'\n                                    color='less-prominent'\n                                    size='xs'\n                                >\n                                    {selected_methods_text?.join(', ')}\n                                </Text>\n                            )}\n                        </div>\n                        <Icon className='filter-modal-body__arrow' icon='IcChevronRight' size={18} />\n                    </div>\n                    <div className='filter-modal-body__row'>\n                        <div className='filter-modal-body__column'>\n                            <Text color='prominent' size='xs'>\n                                <Localize i18n_default_text='Matching ads' />\n                            </Text>\n                            <Text color='less-prominent' size='xs'>\n                                <Localize i18n_default_text='Ads that match your Deriv P2P balance and limit.' />\n                            </Text>\n                        </div>\n                        <ToggleSwitch\n                            id='toggle-filter-modal'\n                            classNameButton='filter-modal__toggle-button'\n                            classNameLabel='filter-modal__toggle-label'\n                            handleToggle={handleToggle}\n                            is_enabled={should_use_client_limits}\n                            name='matching_ads_toggler'\n                        />\n                    </div>\n                </React.Fragment>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default observer(FilterModalBody);\n","import React from 'react';\nimport { Button } from '@deriv/components';\nimport { Localize } from 'Components/i18next';\nimport { useStores } from 'Stores';\n\ntype TFilterModalFooterProps = {\n    class_name?: string;\n    has_selected_payment_methods: boolean;\n    has_made_changes: boolean;\n    onClickApply: () => void;\n    onClickClearPaymentMethods: () => void;\n    onClickConfirmPaymentMethods: () => void;\n    onClickReset: () => void;\n    selected_methods: string[];\n};\n\nconst FilterModalFooter = ({\n    class_name = '',\n    has_made_changes,\n    has_selected_payment_methods,\n    onClickApply,\n    onClickClearPaymentMethods,\n    onClickConfirmPaymentMethods,\n    onClickReset,\n    selected_methods,\n}: TFilterModalFooterProps) => {\n    const { buy_sell_store } = useStores();\n    const { show_filter_payment_methods } = buy_sell_store;\n\n    return (\n        <React.Fragment>\n            {show_filter_payment_methods ? (\n                <Button.Group className={class_name}>\n                    <Button\n                        disabled={selected_methods.length === 0}\n                        large\n                        secondary\n                        onClick={onClickClearPaymentMethods}\n                    >\n                        <Localize i18n_default_text='Clear' />\n                    </Button>\n                    <Button\n                        disabled={!has_selected_payment_methods}\n                        large\n                        primary\n                        onClick={onClickConfirmPaymentMethods}\n                    >\n                        <Localize i18n_default_text='Confirm' />\n                    </Button>\n                </Button.Group>\n            ) : (\n                <Button.Group className={class_name}>\n                    <Button large secondary onClick={onClickReset}>\n                        <Localize i18n_default_text='Reset' />\n                    </Button>\n                    <Button disabled={!has_made_changes} large primary onClick={onClickApply}>\n                        <Localize i18n_default_text='Apply' />\n                    </Button>\n                </Button.Group>\n            )}\n        </React.Fragment>\n    );\n};\n\nexport default FilterModalFooter;\n","import React from 'react';\nimport { Icon, Text } from '@deriv/components';\nimport { observer } from '@deriv/stores';\nimport { useDevice } from '@deriv-com/ui';\nimport { localize, Localize } from 'Components/i18next';\nimport PageReturn from 'Components/page-return';\nimport { useStores } from 'Stores';\n\ntype TFilterModalHeaderProps = {\n    pageHeaderReturnFn: () => void;\n};\n\nconst FilterModalHeader = ({ pageHeaderReturnFn }: TFilterModalHeaderProps) => {\n    const { buy_sell_store } = useStores();\n    const { isDesktop } = useDevice();\n    const { show_filter_payment_methods } = buy_sell_store;\n\n    if (show_filter_payment_methods) {\n        if (isDesktop) {\n            return (\n                <PageReturn\n                    className='filter-modal-header'\n                    onClick={pageHeaderReturnFn}\n                    page_title={localize('Payment methods')}\n                />\n            );\n        }\n        return (\n            <Text align='center' weight='bold'>\n                <Icon\n                    className='filter-modal-header__return-button'\n                    icon='IcArrowLeftBold'\n                    onClick={pageHeaderReturnFn}\n                />\n                <Localize i18n_default_text='Payment methods' />\n            </Text>\n        );\n    }\n\n    return <Localize i18n_default_text='Filter' />;\n};\n\nexport default observer(FilterModalHeader);\n","import React from 'react';\nimport { observer } from '@deriv/stores';\nimport { MobileFullPageModal, Modal } from '@deriv/components';\nimport { useDevice } from '@deriv-com/ui';\nimport { useModalManagerContext } from 'Components/modal-manager/modal-manager-context';\nimport { useStores } from 'Stores';\nimport { getListDifference } from 'Utils/helper';\nimport FilterModalBody from './filter-modal-body';\nimport FilterModalFooter from './filter-modal-footer';\nimport FilterModalHeader from './filter-modal-header';\n\nexport type TPaymentMethod = {\n    text: string;\n    value: string;\n};\n\nconst FilterModal = () => {\n    const { buy_sell_store, my_profile_store } = useStores();\n    const { isDesktop } = useDevice();\n    const { hideModal, is_modal_open, showModal, useSavedState } = useModalManagerContext();\n    const {\n        onClickApply: onClickApplyFilter,\n        selected_payment_method_text,\n        selected_payment_method_value,\n        setSelectedPaymentMethodText,\n        setSelectedPaymentMethodValue,\n        setShowFilterPaymentMethods,\n        setShouldUseClientLimits,\n        show_filter_payment_methods,\n    } = buy_sell_store;\n\n    const { getPaymentMethodsList, setSearchResults, setSearchTerm } = my_profile_store;\n\n    const [selected_methods, setSelectedMethods] = useSavedState(\n        'selected_methods',\n        selected_payment_method_value ?? []\n    );\n    const [selected_methods_text, setSelectedMethodsText] = useSavedState(\n        'selected_methods_text',\n        selected_payment_method_text ?? []\n    );\n    const [has_made_changes, setHasMadeChanges] = useSavedState('has_made_changes', false);\n    // eslint-disable-next-line no-unused-vars\n    const [is_matching_ads_toggled, _] = useSavedState('has_made_changes', buy_sell_store.should_use_client_limits);\n\n    // if user has previously already selected some payment methods and clicked Apply\n    const has_already_selected_payment_methods =\n        selected_payment_method_value?.length &&\n        (selected_methods.length !== selected_payment_method_value.length ||\n            getListDifference(selected_methods, selected_payment_method_value).length > 0);\n    // if user is selecting payment methods for the first time and has selected some payment methods\n    const has_recently_selected_payment_methods =\n        selected_payment_method_value?.length === 0 && selected_methods.length > 0;\n    const has_selected_payment_methods = has_already_selected_payment_methods || has_recently_selected_payment_methods;\n\n    const onChange = (payment_method: TPaymentMethod) => {\n        if (!selected_methods.includes(payment_method.value)) {\n            setSelectedMethods((prev_selected_methods: string[]) => [...prev_selected_methods, payment_method.value]);\n            setSelectedMethodsText((prev_selected_methods_text: string[]) => [\n                ...prev_selected_methods_text,\n                payment_method.text,\n            ]);\n        } else {\n            setSelectedMethods((prev_selected_methods: string[]) =>\n                prev_selected_methods.filter(method => method !== payment_method.value)\n            );\n            setSelectedMethodsText((prev_selected_methods_text: string[]) =>\n                prev_selected_methods_text.filter(method => method !== payment_method.text)\n            );\n        }\n    };\n\n    const clearSearchSection = () => {\n        setSearchTerm('');\n        setSearchResults([]);\n    };\n\n    const onClose = () => {\n        if (has_selected_payment_methods || has_made_changes) {\n            showModal({\n                key: 'LeavePageModal',\n                props: {\n                    onLeavePage: () => {\n                        if (!isDesktop) {\n                            setSelectedMethods(\n                                selected_methods.filter((selected_method: string) =>\n                                    selected_payment_method_value.includes(selected_method)\n                                )\n                            );\n                            setSelectedMethodsText(\n                                selected_methods_text.filter((selected_method_text: string) =>\n                                    selected_payment_method_text.includes(selected_method_text)\n                                )\n                            );\n                        }\n                        buy_sell_store.setShouldUseClientLimits(is_matching_ads_toggled);\n                        setSelectedMethods(selected_payment_method_value);\n                        setSelectedMethodsText(selected_payment_method_text);\n                        hideModal({\n                            should_restore_local_state: false,\n                            should_hide_all_modals: true,\n                        });\n                    },\n                },\n            });\n        } else {\n            setShowFilterPaymentMethods(false);\n            clearSearchSection();\n            hideModal({\n                should_restore_local_state: false,\n            });\n        }\n    };\n\n    const onClickReset = () => {\n        setShouldUseClientLimits(true);\n\n        setSelectedMethods([]);\n        setSelectedMethodsText([]);\n\n        setHasMadeChanges(\n            selected_payment_method_value.length > 0 &&\n                getListDifference(selected_methods, selected_payment_method_value).length === 0\n        );\n    };\n\n    const onClickConfirmPaymentMethods = () => {\n        clearSearchSection();\n        setShowFilterPaymentMethods(false);\n        setHasMadeChanges(true);\n    };\n\n    const onClickClearPaymentMethods = () => {\n        setSelectedMethods([]);\n        setSelectedMethodsText([]);\n    };\n\n    const onClickApply = () => {\n        setSelectedPaymentMethodValue(selected_methods);\n        setSelectedPaymentMethodText(selected_methods_text);\n        onClickApplyFilter(selected_methods, selected_methods_text);\n        hideModal();\n    };\n\n    const onToggle = () => {\n        buy_sell_store.setShouldUseClientLimits(!buy_sell_store.should_use_client_limits);\n        if (!has_made_changes) setHasMadeChanges(is_matching_ads_toggled !== buy_sell_store.should_use_client_limits);\n    };\n\n    React.useEffect(() => {\n        getPaymentMethodsList();\n\n        return () => {\n            clearSearchSection();\n        };\n    }, []);\n\n    const pageHeaderReturnFn = () => {\n        if (show_filter_payment_methods) {\n            clearSearchSection();\n            setSelectedMethods(selected_payment_method_value);\n            setSelectedMethodsText(selected_payment_method_text);\n            setShowFilterPaymentMethods(false);\n        } else {\n            hideModal({\n                should_restore_local_state: false,\n            });\n        }\n    };\n\n    if (isDesktop) {\n        return (\n            <Modal\n                className='payment-methods'\n                has_close_icon\n                height='56rem'\n                title={<FilterModalHeader pageHeaderReturnFn={pageHeaderReturnFn} />}\n                is_open={is_modal_open}\n                toggleModal={onClose}\n                width='44rem'\n            >\n                <Modal.Body>\n                    <FilterModalBody\n                        handleToggle={onToggle}\n                        onChange={onChange}\n                        selected_methods={selected_methods}\n                        selected_methods_text={selected_methods_text}\n                    />\n                </Modal.Body>\n                <Modal.Footer has_separator>\n                    <FilterModalFooter\n                        class_name='filter-modal__footer-button-group'\n                        has_made_changes={has_made_changes}\n                        has_selected_payment_methods={has_selected_payment_methods}\n                        onClickApply={onClickApply}\n                        onClickClearPaymentMethods={onClickClearPaymentMethods}\n                        onClickConfirmPaymentMethods={onClickConfirmPaymentMethods}\n                        onClickReset={onClickReset}\n                        selected_methods={selected_methods}\n                    />\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n\n    return (\n        <MobileFullPageModal\n            body_className='filter-modal__body'\n            is_modal_open={is_modal_open}\n            height_offset='80px'\n            is_flex\n            header={<FilterModalHeader pageHeaderReturnFn={pageHeaderReturnFn} />}\n            onClickClose={onClose}\n            renderPageFooterChildren={() => {\n                return (\n                    <FilterModalFooter\n                        class_name='filter-modal__footer-button-group'\n                        has_made_changes={has_made_changes}\n                        has_selected_payment_methods={has_selected_payment_methods}\n                        onClickApply={onClickApply}\n                        onClickClearPaymentMethods={onClickClearPaymentMethods}\n                        onClickConfirmPaymentMethods={onClickConfirmPaymentMethods}\n                        onClickReset={onClickReset}\n                        selected_methods={selected_methods}\n                    />\n                );\n            }}\n        >\n            <FilterModalBody\n                handleToggle={onToggle}\n                onChange={onChange}\n                selected_methods={selected_methods}\n                selected_methods_text={selected_methods_text}\n            />\n        </MobileFullPageModal>\n    );\n};\n\nexport default observer(FilterModal);\n","import FilterModal from './filter-modal';\nimport './filter-modal.scss';\n\nexport default FilterModal;\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","api","content","__esModule","default","options","exports","locals","getListDifference","arr1","arr2","filter","x","includes","_ref","text","React","className","Text","as","align","weight","Localize","i18n_default_text","values","interpolation","escapeValue","observer","onChange","selected_methods","_useStores","useStores","buy_sell_store","my_profile_store","is_filter_modal_loading","payment_methods_list_items","search_results","search_term","Loading","is_fullscreen","length","map","payment_method","key","Checkbox","label","value","FilterModalNoResults","name","typing_timer","isDesktop","useDevice","setIsFilterModalLoading","getPaymentMethodsList","setSearchResults","setSearchTerm","returnedFunction","debounce","Formik","initialValues","search","onSubmit","trim","_ref2","submitForm","setFieldValue","Form","FormField","_ref3","field","Input","_extends","leading_icon","Icon","icon","onFocus","onKeyUp","clearTimeout","setTimeout","onSearchKeyUp","placeholder","localize","trailing_icon","color","data_testid","onClick","onSearchClear","type","handleToggle","selected_methods_text","setShowFilterPaymentMethods","show_filter_payment_methods","should_use_client_limits","FilterModalSearch","ThemedScrollbars","is_scrollbar_hidden","FilterModalResult","size","join","ToggleSwitch","classNameButton","classNameLabel","is_enabled","_ref$class_name","class_name","has_made_changes","has_selected_payment_methods","onClickApply","onClickClearPaymentMethods","onClickConfirmPaymentMethods","onClickReset","Button","Group","disabled","large","secondary","primary","pageHeaderReturnFn","PageReturn","page_title","_useModalManagerConte","useModalManagerContext","hideModal","is_modal_open","showModal","useSavedState","onClickApplyFilter","selected_payment_method_text","selected_payment_method_value","setSelectedPaymentMethodText","setSelectedPaymentMethodValue","setShouldUseClientLimits","_useSavedState2","_slicedToArray","setSelectedMethods","_useSavedState4","setSelectedMethodsText","_useSavedState6","setHasMadeChanges","_useSavedState8","is_matching_ads_toggled","has_already_selected_payment_methods","has_recently_selected_payment_methods","prev_selected_methods","method","prev_selected_methods_text","concat","_toConsumableArray","clearSearchSection","onClose","props","onLeavePage","selected_method","selected_method_text","should_restore_local_state","should_hide_all_modals","onToggle","Modal","has_close_icon","height","title","FilterModalHeader","is_open","toggleModal","width","Body","FilterModalBody","Footer","has_separator","FilterModalFooter","MobileFullPageModal","body_className","height_offset","is_flex","header","onClickClose","renderPageFooterChildren"],"sourceRoot":""}