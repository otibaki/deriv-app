{"version":3,"file":"p2p/js/p2p.2121.7a6ff18ee0c3b2465363.js","mappings":"omDAsDA,QA7C2B,SAACA,GA0CxB,OAAOC,EAAAA,cAACC,EAAAA,MAAK,CAACC,MAAOH,EAAMG,MAAOC,KAAMJ,EAAMI,KAAMC,OAzC9B,SAACC,GAA+B,IAAAC,EAC9CC,EAAS,KACLC,EAAaH,EAAbG,SAER,GAAIT,EAAMU,YAAcC,EAAAA,SAAU,CAC9B,IAAIC,EAAKZ,EAAMY,GAGXZ,EAAMI,OAASS,EAAAA,OAAOC,QACtBF,EAAKH,EAASM,SAASC,cAAcC,QAAQjB,EAAMI,KAAM,KAE7DI,EAASP,EAAAA,cAACU,EAAAA,SAAQ,CAACC,GAAIA,GAC3B,MAAO,IAAIZ,EAAMkB,kBAAqBlB,EAAMmB,eAAkBnB,EAAMoB,aAE7D,KAAAC,EACGC,GAAwC,QAAbD,EAACrB,EAAMa,cAAM,IAAAQ,EAAAA,EAAI,IAAIE,QAClD,SAACC,EAAaC,GAAW,IAAAC,EAAA,OAAAC,EAAAA,EAAA,GAClBH,GACa,QADVE,EACHD,EAAIG,iBAAS,IAAAF,OAAA,EAAbA,EAAeG,MAAK,SAACC,GAAgB,OAAKA,EAAQ,OAAQ,IAAC,GAElE,CAAC,GAECC,IAAwBC,EAAAA,EAAAA,eAAcV,GACtCP,GAAWkB,EAAAA,EAAAA,kBAAiBxB,EAASM,UAErCmB,EAAiBlC,EAAMU,UAE7BF,EACIP,EAAAA,cAACA,EAAAA,SAAc,KACV8B,GAAwBhB,IAAaf,EAAMI,MAAQH,EAAAA,cAACU,EAAAA,SAAQ,CAACC,GAAIU,EAAiBlB,OACnFH,EAAAA,cAACiC,EAAcC,EAAA,GAAK7B,EAAK,CAAEO,OAAQb,EAAMa,UAGrD,MApBIuB,EAAAA,EAAAA,iBAAgBpC,EAAMoB,cAAciB,EAAAA,EAAAA,gBAsBxC,IAAMC,GAAsB,QAAd/B,EAAAP,EAAMuC,gBAAQ,IAAAhC,OAAA,EAAdA,EAAAiC,KAAAxC,KAAsB,GAGpC,OAFAyC,SAASH,MAAQ,GAAHI,OAAMJ,EAAK,OAAAI,OAAMC,EAAAA,eAExBnC,CACX,GAGJ,C","sources":["webpack://@deriv/p2p/./src/components/routes/route-with-sub-routes.tsx"],"sourcesContent":["import React from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport { Redirect, Route } from 'react-router-dom';\nimport { redirectToLogin, routes, removeBranchName, default_title, isEmptyObject } from '@deriv/shared';\nimport { getLanguage } from '@deriv/translations';\nimport { TBinaryRoutes, TRoute, TRouteConfig } from 'Types';\n\ntype TRouteWithSubRoutesProps = TRouteConfig & TBinaryRoutes;\n\nconst RouteWithSubRoutes = (route: TRouteWithSubRoutesProps) => {\n    const renderFactory = (props: RouteComponentProps) => {\n        let result = null;\n        const { location } = props;\n\n        if (route.component === Redirect) {\n            let to = route.to;\n\n            // This if clause has been added just to remove '/index' from url in localhost env.\n            if (route.path === routes.index) {\n                to = location.pathname.toLowerCase().replace(route.path, '');\n            }\n            result = <Redirect to={to} />;\n        } else if (route.is_authenticated && !route.is_logging_in && !route.is_logged_in) {\n            redirectToLogin(route.is_logged_in, getLanguage());\n        } else {\n            const default_subroute: TRoute = (route.routes ?? []).reduce(\n                (acc: TRoute, cur: TRoute) => ({\n                    ...acc,\n                    ...cur.subroutes?.find((subroute: TRoute) => subroute.default),\n                }),\n                {}\n            );\n            const has_default_subroute = !isEmptyObject(default_subroute);\n            const pathname = removeBranchName(location.pathname);\n\n            const RouteComponent = route.component as React.ElementType;\n\n            result = (\n                <React.Fragment>\n                    {has_default_subroute && pathname === route.path && <Redirect to={default_subroute.path} />}\n                    <RouteComponent {...props} routes={route.routes} />\n                </React.Fragment>\n            );\n        }\n\n        const title = route.getTitle?.() || '';\n        document.title = `${title} | ${default_title}`;\n\n        return result;\n    };\n\n    return <Route exact={route.exact} path={route.path} render={renderFactory} />;\n};\n\nexport default RouteWithSubRoutes;\n"],"names":["route","React","Route","exact","path","render","props","_route$getTitle","result","location","component","Redirect","to","routes","index","pathname","toLowerCase","replace","is_authenticated","is_logging_in","is_logged_in","_route$routes","default_subroute","reduce","acc","cur","_cur$subroutes","_objectSpread","subroutes","find","subroute","has_default_subroute","isEmptyObject","removeBranchName","RouteComponent","_extends","redirectToLogin","getLanguage","title","getTitle","call","document","concat","default_title"],"sourceRoot":""}