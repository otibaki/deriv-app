{"version":3,"file":"cfd/js/CFDPasswordModal.js","mappings":"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","sources":["webpack://@deriv/cfd/webpack/universalModuleDefinition","webpack://@deriv/cfd/webpack/runtime/chunk loaded","webpack://@deriv/cfd/webpack/runtime/load script","webpack://@deriv/cfd/webpack/runtime/css loading","webpack://@deriv/cfd/./src/Containers/cfd-enter-password-modal-title.tsx","webpack://@deriv/cfd/./src/Components/success-dialog/success-dialog.tsx","webpack://@deriv/cfd/./src/Components/migration-success-modal/migration-success-modal-content.tsx","webpack://@deriv/cfd/./src/Components/migration-success-modal/migration-success-modal.tsx","webpack://@deriv/cfd/./src/Components/migration-success-modal/index.tsx","webpack://@deriv/cfd/./src/Containers/cfd-password-modal.tsx","webpack://@deriv/cfd/external umd \"@deriv/account/dist/account/js/sent-email-modal\"","webpack://@deriv/cfd/external umd \"@deriv/components\"","webpack://@deriv/cfd/external umd \"@deriv/hooks\"","webpack://@deriv/cfd/external umd \"@deriv/shared\"","webpack://@deriv/cfd/external umd \"@deriv/stores\"","webpack://@deriv/cfd/external umd \"@deriv/translations\"","webpack://@deriv/cfd/external umd \"classnames\"","webpack://@deriv/cfd/external umd \"formik\"","webpack://@deriv/cfd/external umd \"react\"","webpack://@deriv/cfd/external umd \"react-router\"","webpack://@deriv/cfd/../../node_modules/@deriv-com/ui/dist/_commonjsHelpers-BkfeUUK-.js","webpack://@deriv/cfd/../../node_modules/@deriv-com/ui/dist/hooks/useDevice.js","webpack://@deriv/cfd/../../node_modules/@deriv-com/ui/dist/index-EY1gwl5O.js","webpack://@deriv/cfd/webpack/bootstrap","webpack://@deriv/cfd/webpack/runtime/compat get default export","webpack://@deriv/cfd/webpack/runtime/define property getters","webpack://@deriv/cfd/webpack/runtime/ensure chunk","webpack://@deriv/cfd/webpack/runtime/get javascript chunk filename","webpack://@deriv/cfd/webpack/runtime/get mini-css chunk filename","webpack://@deriv/cfd/webpack/runtime/hasOwnProperty shorthand","webpack://@deriv/cfd/webpack/runtime/make namespace object","webpack://@deriv/cfd/webpack/runtime/runtimeId","webpack://@deriv/cfd/webpack/runtime/publicPath","webpack://@deriv/cfd/webpack/runtime/jsonp chunk loading","webpack://@deriv/cfd/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@deriv/account/dist/account/js/sent-email-modal\"), require(\"@deriv/components\"), require(\"@deriv/hooks\"), require(\"@deriv/shared\"), require(\"@deriv/stores\"), require(\"@deriv/translations\"), require(\"classnames\"), require(\"formik\"), require(\"react\"), require(\"react-router\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@deriv/account/dist/account/js/sent-email-modal\", \"@deriv/components\", \"@deriv/hooks\", \"@deriv/shared\", \"@deriv/stores\", \"@deriv/translations\", \"classnames\", \"formik\", \"react\", \"react-router\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"@deriv/cfd\"] = factory(require(\"@deriv/account/dist/account/js/sent-email-modal\"), require(\"@deriv/components\"), require(\"@deriv/hooks\"), require(\"@deriv/shared\"), require(\"@deriv/stores\"), require(\"@deriv/translations\"), require(\"classnames\"), require(\"formik\"), require(\"react\"), require(\"react-router\"));\n\telse\n\t\troot[\"@deriv/cfd\"] = factory(root[\"@deriv/account/dist/account/js/sent-email-modal\"], root[\"@deriv/components\"], root[\"@deriv/hooks\"], root[\"@deriv/shared\"], root[\"@deriv/stores\"], root[\"@deriv/translations\"], root[\"classnames\"], root[\"formik\"], root[\"react\"], root[\"react-router\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_sent_email_modal__, __WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_hooks__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_stores__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_classnames__, __WEBPACK_EXTERNAL_MODULE_formik__, __WEBPACK_EXTERNAL_MODULE_react__, __WEBPACK_EXTERNAL_MODULE_react_router__) => {\nreturn ","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"@deriv/cfd:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","var createStylesheet = (chunkId, fullhref, resolve, reject) => {\n\tvar linkTag = document.createElement(\"link\");\n\n\tlinkTag.rel = \"stylesheet\";\n\tlinkTag.type = \"text/css\";\n\tvar onLinkComplete = (event) => {\n\t\t// avoid mem leaks.\n\t\tlinkTag.onerror = linkTag.onload = null;\n\t\tif (event.type === 'load') {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + realHref + \")\");\n\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n\t\t\terr.type = errorType;\n\t\t\terr.request = realHref;\n\t\t\tlinkTag.parentNode.removeChild(linkTag)\n\t\t\treject(err);\n\t\t}\n\t}\n\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n\tlinkTag.href = fullhref;\n\n\tdocument.head.appendChild(linkTag);\n\treturn linkTag;\n};\nvar findStylesheet = (href, fullhref) => {\n\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n\tfor(var i = 0; i < existingLinkTags.length; i++) {\n\t\tvar tag = existingLinkTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n\t}\n\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n\tfor(var i = 0; i < existingStyleTags.length; i++) {\n\t\tvar tag = existingStyleTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\");\n\t\tif(dataHref === href || dataHref === fullhref) return tag;\n\t}\n};\nvar loadStylesheet = (chunkId) => {\n\treturn new Promise((resolve, reject) => {\n\t\tvar href = __webpack_require__.miniCssF(chunkId);\n\t\tvar fullhref = __webpack_require__.p + href;\n\t\tif(findStylesheet(href, fullhref)) return resolve();\n\t\tcreateStylesheet(chunkId, fullhref, resolve, reject);\n\t});\n}\n// object to store loaded CSS chunks\nvar installedCssChunks = {\n\t\"CFDPasswordModal\": 0\n};\n\n__webpack_require__.f.miniCss = (chunkId, promises) => {\n\tvar cssChunks = {\"src_Containers_mt5-create-password_mt5-create-password_tsx\":1};\n\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(() => {\n\t\t\tinstalledCssChunks[chunkId] = 0;\n\t\t}, (e) => {\n\t\t\tdelete installedCssChunks[chunkId];\n\t\t\tthrow e;\n\t\t}));\n\t}\n};\n\n// no hmr","import React from 'react';\nimport { Text } from '@deriv/components';\nimport { getCFDPlatformLabel, getCFDPlatformNames } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { CATEGORY, CFD_PLATFORMS } from '../Helpers/cfd-config';\n\ntype TCFDEnterPasswordModalTitleProps = { platform: typeof CFD_PLATFORMS[keyof typeof CFD_PLATFORMS] };\n\nconst CFDEnterPasswordModalTitle = observer(({ platform }: TCFDEnterPasswordModalTitleProps) => {\n    const {\n        modules: { cfd },\n    } = useStore();\n    const { account_title, account_type } = cfd;\n\n    const getAccountCardTitle = () => {\n        switch (platform) {\n            case CFD_PLATFORMS.CTRADER:\n            case CFD_PLATFORMS.DXTRADE:\n                return account_type.category === CATEGORY.REAL ? 'Real' : '';\n            default:\n                return account_title;\n        }\n    };\n\n    return (\n        <Text size='xs' className='dc-modal__container_cfd-password-modal__account-title'>\n            {platform === CFD_PLATFORMS.MT5 ? (\n                <Localize\n                    i18n_default_text='Enter your {{platform}} password to add an {{platform}} {{account}} account.'\n                    values={{\n                        platform: getCFDPlatformNames(platform),\n                        account: getAccountCardTitle(),\n                    }}\n                />\n            ) : (\n                <Localize\n                    i18n_default_text='Enter your {{platform}} password to add a {{platform}} {{account}} account.'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                        account: getAccountCardTitle(),\n                    }}\n                />\n            )}\n        </Text>\n    );\n});\n\nexport default CFDEnterPasswordModalTitle;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Button, Icon, Modal, Text } from '@deriv/components';\nimport { localize, Localize } from '@deriv/translations';\n\ntype TSuccessDialogProps = {\n    is_open: boolean;\n    toggleModal: () => void;\n    onCancel?: () => void;\n    onSubmit?: () => void;\n    classNameMessage?: string;\n    message: string | React.ReactElement;\n    icon: React.ReactElement;\n    icon_size?: string;\n    text_submit?: string;\n    text_cancel?: string;\n    heading?: string | React.ReactElement;\n    title?: string;\n    icon_type?: string;\n    is_medium_button?: boolean;\n    has_close_icon: boolean;\n    width?: string;\n    has_cancel?: boolean;\n    has_submit?: boolean;\n};\n\nconst SuccessDialog = ({\n    classNameMessage = '',\n    has_cancel = false,\n    has_submit = true,\n    icon,\n    message,\n    onCancel,\n    onSubmit,\n    heading,\n    icon_size = 'large',\n    text_submit,\n    text_cancel,\n    is_open,\n    toggleModal,\n    title,\n    has_close_icon,\n    width = '',\n    is_medium_button,\n}: TSuccessDialogProps) => {\n    return (\n        <Modal\n            className='cfd-success-dialog'\n            is_open={is_open}\n            toggleModal={toggleModal}\n            has_close_icon={has_close_icon}\n            small={!title}\n            title={title}\n            width={width}\n        >\n            <Modal.Body>\n                <div\n                    className={classNames('success-change__icon-area', {\n                        'success-change__icon-area--large': icon_size === 'large',\n                        'success-change__icon-area--xlarge': icon_size === 'xlarge',\n                    })}\n                    data-testid='dt_cfd_success_modal_icon_wrapper'\n                >\n                    {icon}\n                    <Icon\n                        className='bottom-right-overlay'\n                        icon='IcCheckmarkCircle'\n                        custom_color='var(--status-success)'\n                        size={24}\n                    />\n                </div>\n                {!heading ? (\n                    <Text as='h2' weight='bold' size='s' className='dc-modal-header__title'>\n                        <Localize i18n_default_text='Success!' />\n                    </Text>\n                ) : (\n                    <React.Fragment>{heading}</React.Fragment>\n                )}\n\n                {React.isValidElement(message) && message}\n                {!React.isValidElement(message) && <p className={classNameMessage}>{message}</p>}\n            </Modal.Body>\n            <Modal.Footer>\n                {has_cancel && onCancel && (\n                    <Button\n                        onClick={onCancel}\n                        has_effect\n                        text={text_cancel || localize('Maybe later')}\n                        secondary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n                {has_submit && onSubmit && (\n                    <Button\n                        has_effect\n                        onClick={onSubmit}\n                        text={text_submit}\n                        primary\n                        {...(is_medium_button ? { medium: true } : { large: true })}\n                    />\n                )}\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default SuccessDialog;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize } from '@deriv/translations';\nimport { InlineMessage, Text, Button, Modal, Icon } from '@deriv/components';\nimport { Jurisdiction, CFD_PLATFORMS, getCFDPlatformNames, getFormattedJurisdictionCode } from '@deriv/shared';\n\ntype TMigrationSuccessModalContent = {\n    icon?: string;\n    eligible_account_to_migrate: string;\n    closePopupModal: () => void;\n    jurisdiction_market_name: Array<string>;\n};\n\nconst MigrationSuccessModalContent = observer(\n    ({\n        icon,\n        eligible_account_to_migrate,\n        jurisdiction_market_name,\n        closePopupModal,\n    }: TMigrationSuccessModalContent) => {\n        const { ui } = useStore();\n        const { is_mobile } = ui;\n\n        const platform = getCFDPlatformNames(CFD_PLATFORMS.MT5);\n        const text_size = is_mobile ? 'xxs' : 'xs';\n        const information_text_size = is_mobile ? 'xxxs' : 'xxs';\n        const getFormattedAccounts = () =>\n            jurisdiction_market_name.length > 1\n                ? {\n                      type_1: jurisdiction_market_name[0],\n                      type_2: jurisdiction_market_name[1],\n                  }\n                : {\n                      type_1: jurisdiction_market_name[0],\n                  };\n        return (\n            <div className='cfd-success-dialog-migration__modal-content'>\n                <Modal.Body className={classNames('cfd-success-dialog-migration__body')}>\n                    <div className='cfd-success-dialog-migration__icon-area'>\n                        {icon && <Icon icon={icon} size={128} />}\n                    </div>\n                    <div>\n                        <Text as='h2' weight='bold' className='cfd-success-dialog-migration__title'>\n                            <Localize i18n_default_text='Upgrade complete' />\n                        </Text>\n                        <div className='cfd-success-dialog-migration__content-wrapper'>\n                            <Text size={text_size} as='p' align='center'>\n                                {jurisdiction_market_name.length > 1 ? (\n                                    <Localize\n                                        i18n_default_text='Start trading with your new <0>{{platform}} {{type_1}}</0> and <0>{{type_2}} {{eligible_account_to_migrate}}</0> accounts.'\n                                        values={{\n                                            platform,\n                                            eligible_account_to_migrate,\n                                            ...getFormattedAccounts(),\n                                        }}\n                                        components={[<strong key={0} />]}\n                                    />\n                                ) : (\n                                    <Localize\n                                        i18n_default_text='Start trading with your new <0>{{platform}} {{type_1}} {{eligible_account_to_migrate}}</0> account.'\n                                        values={{\n                                            platform,\n                                            eligible_account_to_migrate,\n                                            ...getFormattedAccounts(),\n                                        }}\n                                        components={[<strong key={0} />]}\n                                    />\n                                )}\n                            </Text>\n                            <div className='cfd-success-dialog-migration__inline-msg'>\n                                <InlineMessage\n                                    type='information'\n                                    size='sm'\n                                    title={\n                                        <Localize\n                                            i18n_default_text='Important: Your <0>{{platform}} {{existing_account}}</0> account.'\n                                            values={{\n                                                platform,\n                                                existing_account: getFormattedJurisdictionCode(Jurisdiction.SVG),\n                                            }}\n                                            components={[<strong key={0} />]}\n                                        />\n                                    }\n                                    message={\n                                        <Text\n                                            as='ul'\n                                            size={information_text_size}\n                                            className={'cfd-success-dialog-migration__body-bullets--list'}\n                                        >\n                                            <li>\n                                                <Localize i18n_default_text=\"You can manage your existing positions, but you can't start a new trade.\" />\n                                            </li>\n                                            <li>\n                                                <Localize i18n_default_text=\"We'll close accounts with no open positions after 60 days.\" />\n                                            </li>\n                                        </Text>\n                                    }\n                                />\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer has_separator className='cfd-success-dialog-migration-footer'>\n                    <Button has_effect onClick={closePopupModal} primary large>\n                        <Localize i18n_default_text='OK' />\n                    </Button>\n                </Modal.Footer>\n            </div>\n        );\n    }\n);\n\nexport default MigrationSuccessModalContent;\n","import React from 'react';\nimport { Modal, PageOverlay } from '@deriv/components';\nimport { Jurisdiction, getFormattedJurisdictionMarketTypes } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { getFormattedJurisdictionCode } from '../../Stores/Modules/CFD/Helpers/cfd-config';\n\nimport { useCfdStore } from '../../Stores/Modules/CFD/Helpers/useCfdStores';\nimport MigrationSuccessModalContent from './migration-success-modal-content';\n\ntype TMigrationSuccessModal = {\n    is_open: boolean;\n    closeModal: () => void;\n};\n\nconst MigrationSuccessModal = observer(({ is_open, closeModal }: TMigrationSuccessModal) => {\n    const { ui } = useStore();\n    const { is_mobile, setMT5MigrationModalEnabled } = ui;\n    const { migrated_mt5_accounts, setIsFromMt5MigrationModal } = useCfdStore();\n\n    const has_migrated_mt5_accounts = !!migrated_mt5_accounts.length;\n    const eligible_account_to_migrate = getFormattedJurisdictionCode(\n        migrated_mt5_accounts.map(account => Object.values(account?.to_account ?? {})?.[0])?.[0]\n    );\n\n    const jurisdiction_market_name = migrated_mt5_accounts.map(account =>\n        getFormattedJurisdictionMarketTypes(Object.keys(account?.to_account ?? {})?.[0])\n    );\n\n    const closeMigrationModals = () => {\n        setIsFromMt5MigrationModal(false);\n        setMT5MigrationModalEnabled(false);\n        closeModal();\n    };\n\n    const getMigrationIcon = () => {\n        if (has_migrated_mt5_accounts) {\n            const to_acc = Object.values(migrated_mt5_accounts[0]?.to_account)?.[0] || '';\n            if (migrated_mt5_accounts?.length === 1) {\n                switch (to_acc) {\n                    case Jurisdiction.BVI:\n                        return 'IcMt5Bvi';\n                    case Jurisdiction.VANUATU:\n                        return 'IcMt5Vanuatu';\n                    default:\n                        return '';\n                }\n            } else {\n                switch (to_acc) {\n                    case Jurisdiction.BVI:\n                        return 'IcMt5StandardFinancialBvi';\n                    case Jurisdiction.VANUATU:\n                        return 'IcMt5StandardFinancialVanuatu';\n                    default:\n                        return '';\n                }\n            }\n        }\n    };\n\n    const ModalContent = () => (\n        <MigrationSuccessModalContent\n            closePopupModal={closeMigrationModals}\n            icon={getMigrationIcon()}\n            eligible_account_to_migrate={eligible_account_to_migrate}\n            jurisdiction_market_name={jurisdiction_market_name}\n        />\n    );\n\n    return is_mobile ? (\n        <PageOverlay\n            is_open={is_open}\n            header_classname='cfd-success-dialog-migration'\n            portal_id='deriv_app'\n            header=' '\n            onClickClose={closeMigrationModals}\n        >\n            <ModalContent />\n        </PageOverlay>\n    ) : (\n        <Modal\n            className='cfd-success-dialog-migration'\n            is_open={is_open}\n            toggleModal={closeMigrationModals}\n            has_close_icon\n            title=' '\n            width='58.8rem'\n            should_header_stick_body={false}\n        >\n            <ModalContent />\n        </Modal>\n    );\n});\n\nexport default MigrationSuccessModal;\n","import MigrationSuccessModal from './migration-success-modal';\n\nexport default MigrationSuccessModal;\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { Formik, FormikErrors, FormikHelpers } from 'formik';\nimport { useDevice } from '@deriv-com/ui';\nimport { SentEmailModal } from '@deriv/account';\nimport '../sass/cfd.scss';\nimport {\n    FormSubmitButton,\n    Icon,\n    MobileDialog,\n    Modal,\n    MultiStep,\n    PasswordInput,\n    PasswordMeter,\n    Text,\n} from '@deriv/components';\nimport {\n    getCFDPlatformLabel,\n    getCFDPlatformNames,\n    getErrorMessages,\n    routes,\n    validLength,\n    validPassword,\n    validMT5Password,\n    makeLazyLoader,\n    moduleLoader,\n    WS,\n} from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, localize } from '@deriv/translations';\nimport CFDEnterPasswordModalTitle from './cfd-enter-password-modal-title';\nimport SuccessDialog from '../Components/success-dialog/success-dialog';\nimport MigrationSuccessModal from '../Components/migration-success-modal';\nimport { useCfdStore } from '../Stores/Modules/CFD/Helpers/useCfdStores';\nimport { CFD_PLATFORMS, CATEGORY } from '../Helpers/cfd-config';\nimport classNames from 'classnames';\nimport { getDxCompanies, getMtCompanies, TDxCompanies, TMtCompanies } from '../Stores/Modules/CFD/Helpers/cfd-config';\n\nconst MT5CreatePassword = makeLazyLoader(\n    () => moduleLoader(() => import('./mt5-create-password/mt5-create-password')),\n    () => <div />\n)();\n\nconst CfdPasswordModalTnc = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-password-modal-tnc')),\n    () => <div />\n)();\n\nconst CFDPasswordChange = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-password-change')),\n    () => <div />\n)();\n\nconst CFDPasswordSuccessIcon = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-password-success-icon')),\n    () => <div />\n)();\n\nconst CFDPasswordChangeContent = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-password-change-content')),\n    () => <div />\n)();\n\nconst ChangePasswordConfirmation = makeLazyLoader(\n    () => moduleLoader(() => import('./cfd-change-password-confirmation')),\n    () => <div />\n)();\n\nexport type TCFDPasswordFormValues = { password: string };\n\ntype TOnSubmitPassword = (values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) => void;\n\ntype TPasswordModalHeaderProps = {\n    should_set_trading_password: boolean;\n    is_password_reset_error: boolean;\n    platform: string;\n    has_mt5_account?: boolean;\n};\n\ntype TCFDPasswordFormReusedProps = {\n    platform: (typeof CFD_PLATFORMS)[keyof typeof CFD_PLATFORMS];\n    error_message: string;\n    validatePassword: (values: TCFDPasswordFormValues) => FormikErrors<TCFDPasswordFormValues>;\n};\n\ntype TCFDCreatePasswordProps = TCFDPasswordFormReusedProps & {\n    password: string;\n    onSubmit: TOnSubmitPassword;\n    need_tnc: boolean;\n};\n\ntype TCFDCreatePasswordFormProps = TCFDPasswordFormReusedProps & {\n    has_mt5_account: boolean;\n    submitPassword: TOnSubmitPassword;\n    need_tnc: boolean;\n};\n\ntype TMultiStepRefProps = {\n    goNextStep: () => void;\n    goPrevStep: () => void;\n};\n\ntype TCFDPasswordFormProps = TCFDPasswordFormReusedProps & {\n    closeModal: () => void;\n    error_type?: string;\n    form_error?: string;\n    has_mt5_account: boolean;\n    is_dxtrade_allowed: boolean;\n    onCancel: () => void;\n    onForgotPassword: () => void;\n    should_set_trading_password: boolean;\n    submitPassword: TOnSubmitPassword;\n    account_type: {\n        type: string;\n        category: string;\n    };\n};\n\ntype TCFDPasswordModalProps = {\n    error_type?: string;\n    form_error?: string;\n    platform: (typeof CFD_PLATFORMS)[keyof typeof CFD_PLATFORMS];\n};\n\nconst PasswordModalHeader = ({\n    should_set_trading_password,\n    is_password_reset_error,\n    platform,\n}: TPasswordModalHeaderProps) => {\n    const { isDesktop } = useDevice();\n    const is_mt5 = platform === CFD_PLATFORMS.MT5;\n\n    const element = !isDesktop ? 'p' : 'span';\n\n    const style = !isDesktop\n        ? {\n              padding: '2rem',\n          }\n        : {};\n\n    if (is_mt5 && !is_password_reset_error) {\n        const platform_name = getCFDPlatformNames(platform);\n        return (\n            <Text as={element} line_height='m' weight='bold' size={!isDesktop ? 'xs' : 's'} align='center'>\n                {should_set_trading_password ? (\n                    <Localize\n                        i18n_default_text='Create an {{platform_name}} account'\n                        values={{\n                            platform_name,\n                        }}\n                    />\n                ) : (\n                    <Localize\n                        i18n_default_text='Add an {{platform_name}} account'\n                        values={{\n                            platform_name,\n                        }}\n                    />\n                )}\n            </Text>\n        );\n    }\n\n    return (\n        <Text styles={style} as={element} line_height='m' weight='bold' size='s' align='center'>\n            {!should_set_trading_password && !is_password_reset_error && (\n                <Localize\n                    i18n_default_text='Enter your {{platform}} password'\n                    values={{\n                        platform: getCFDPlatformLabel(platform),\n                    }}\n                />\n            )}\n            {is_password_reset_error && <Localize i18n_default_text='Too many attempts' />}\n        </Text>\n    );\n};\n\nconst getCancelButtonLabel = ({\n    should_set_trading_password,\n    error_type,\n    isDesktop,\n}: Pick<TCFDPasswordFormProps, 'should_set_trading_password' | 'error_type'> & { isDesktop: boolean }) => {\n    if (should_set_trading_password && error_type !== 'PasswordReset') {\n        return isDesktop ? null : localize('Cancel');\n    }\n\n    return localize('Forgot password?');\n};\n\nconst handlePasswordInputChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    handleChange: (el: React.ChangeEvent<HTMLInputElement>) => void,\n    validateForm: (values?: TCFDPasswordFormValues) => Promise<FormikErrors<TCFDPasswordFormValues>>,\n    setFieldTouched: (field: string, isTouched?: boolean, shouldValidate?: boolean) => void\n) => {\n    handleChange(e);\n    validateForm().then(() => {\n        setFieldTouched('password', true);\n    });\n};\n\nconst CreatePassword = ({ password, platform, validatePassword, onSubmit, error_message }: TCFDCreatePasswordProps) => {\n    return (\n        <Formik\n            initialValues={{\n                password,\n            }}\n            enableReinitialize\n            validate={validatePassword}\n            onSubmit={onSubmit}\n        >\n            {({\n                errors,\n                isSubmitting,\n                handleBlur,\n                handleChange,\n                handleSubmit,\n                setFieldTouched,\n                touched,\n                values,\n                validateForm,\n            }) => (\n                <form onSubmit={handleSubmit}>\n                    <div\n                        className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body cfd-password-modal__create-password-content'\n                        data-testid='dt_create_password'\n                    >\n                        <Icon icon='IcDxtradeOnePassword' width='122' height='108' />\n                        <Text\n                            size='s'\n                            align='center'\n                            weight='bold'\n                            className='cfd-password-modal__create-password-title'\n                        >\n                            <Localize\n                                i18n_default_text='Create a {{platform}} password'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <Text size='xs' align='center' className='cfd-password-modal__create-password-description'>\n                            <Localize\n                                i18n_default_text='You can use this password for all your {{platform}} accounts.'\n                                values={{\n                                    platform: getCFDPlatformLabel(platform),\n                                }}\n                            />\n                        </Text>\n                        <div className='input-element'>\n                            <PasswordMeter\n                                input={values.password}\n                                has_error={!!(touched.password && errors.password)}\n                                custom_feedback_messages={getErrorMessages().password_warnings}\n                            >\n                                {() => (\n                                    <PasswordInput\n                                        autoComplete='new-password'\n                                        label={localize('{{platform}} password', {\n                                            platform: getCFDPlatformLabel(platform),\n                                        })}\n                                        error={\n                                            (touched.password && errors.password) ||\n                                            (values.password.length === 0 ? error_message : '')\n                                        }\n                                        name='password'\n                                        value={values.password}\n                                        onBlur={handleBlur}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                            handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                        }}\n                                        data_testId={`dt_${platform}_password`}\n                                    />\n                                )}\n                            </PasswordMeter>\n                        </div>\n                        <FormSubmitButton\n                            is_disabled={!values.password || Object.keys(errors).length > 0}\n                            is_loading={isSubmitting}\n                            label={localize('Create {{platform}} password', {\n                                platform: getCFDPlatformLabel(platform),\n                            })}\n                            is_center={platform !== CFD_PLATFORMS.MT5}\n                        />\n                    </div>\n                </form>\n            )}\n        </Formik>\n    );\n};\n\nconst CFDCreatePasswordForm = ({\n    has_mt5_account,\n    platform,\n    error_message,\n    validatePassword,\n    submitPassword,\n    need_tnc,\n}: TCFDCreatePasswordFormProps) => {\n    const multi_step_ref = React.useRef<TMultiStepRefProps>();\n    const [password, setPassword] = React.useState('');\n\n    const onSubmit: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5 && has_mt5_account) {\n            setPassword(values.password);\n            multi_step_ref.current?.goNextStep();\n        } else {\n            submitPassword(values, actions);\n        }\n    };\n\n    const steps = [\n        {\n            component:\n                platform === CFD_PLATFORMS.MT5 ? (\n                    <MT5CreatePassword\n                        password={password}\n                        platform={platform}\n                        error_message={error_message}\n                        validatePassword={validatePassword}\n                        onSubmit={onSubmit}\n                        need_tnc={need_tnc}\n                    />\n                ) : (\n                    <CreatePassword\n                        password={password}\n                        platform={platform}\n                        error_message={error_message}\n                        validatePassword={validatePassword}\n                        onSubmit={onSubmit}\n                        need_tnc={need_tnc}\n                    />\n                ),\n        },\n        {\n            component: (\n                <ChangePasswordConfirmation\n                    className='cfd-password-modal__change-password-confirmation'\n                    platform={platform}\n                    onConfirm={(_values: TCFDPasswordFormValues, actions: FormikHelpers<TCFDPasswordFormValues>) =>\n                        submitPassword({ password }, actions)\n                    }\n                    onCancel={() => multi_step_ref.current?.goPrevStep()}\n                />\n            ),\n        },\n    ];\n\n    return <MultiStep ref={multi_step_ref} steps={steps} />;\n};\n\nconst CFDPasswordForm = observer(\n    ({\n        closeModal,\n        error_message,\n        error_type,\n        form_error,\n        has_mt5_account,\n        onCancel,\n        onForgotPassword,\n        platform,\n        should_set_trading_password,\n        submitPassword,\n        validatePassword,\n        account_type,\n    }: TCFDPasswordFormProps) => {\n        const { isDesktop } = useDevice();\n        const { jurisdiction_selected_shortcode } = useCfdStore();\n        const [checked, setChecked] = React.useState(false);\n        const need_tnc =\n            jurisdiction_selected_shortcode !== 'svg' &&\n            account_type.category === CATEGORY.REAL &&\n            platform === CFD_PLATFORMS.MT5;\n\n        const button_label = React.useMemo(() => {\n            if (error_type === 'PasswordReset') {\n                return localize('Try later');\n            }\n            return localize('Add account');\n        }, [error_type]);\n\n        const has_cancel_button = (isDesktop ? !should_set_trading_password : true) || error_type === 'PasswordReset';\n\n        const cancel_button_label = getCancelButtonLabel({ should_set_trading_password, error_type, isDesktop });\n\n        const handleCancel = () => {\n            if (!has_cancel_button) {\n                return undefined;\n            }\n            if (should_set_trading_password) {\n                return onCancel();\n            }\n\n            return onForgotPassword();\n        };\n\n        if (error_type === 'PasswordReset') {\n            return (\n                <React.Fragment>\n                    <div className='cfd-password-reset'>\n                        <div className='cfd-password-modal__content cfd-password-modal__content--password-reset'>\n                            <Text as='p' line_height='24' size='xs'>\n                                <Localize i18n_default_text='Please try again in a minute.' />\n                            </Text>\n                        </div>\n                        <Formik onSubmit={closeModal} initialValues={{}}>\n                            {({ handleSubmit }) => (\n                                <form onSubmit={handleSubmit}>\n                                    <FormSubmitButton\n                                        has_cancel={has_cancel_button}\n                                        cancel_label={cancel_button_label}\n                                        onCancel={handleCancel}\n                                        is_absolute={!isDesktop}\n                                        label={button_label}\n                                    />\n                                </form>\n                            )}\n                        </Formik>\n                    </div>\n                </React.Fragment>\n            );\n        }\n\n        if (should_set_trading_password) {\n            return (\n                <CFDCreatePasswordForm\n                    platform={platform}\n                    error_message={error_message}\n                    validatePassword={validatePassword}\n                    submitPassword={submitPassword}\n                    has_mt5_account={has_mt5_account}\n                    need_tnc={need_tnc}\n                />\n            );\n        }\n        // enter password modal\n\n        return (\n            <Formik\n                initialValues={{\n                    password: '',\n                }}\n                enableReinitialize\n                validate={validatePassword}\n                onSubmit={submitPassword}\n            >\n                {({\n                    errors,\n                    isSubmitting,\n                    handleBlur,\n                    handleChange,\n                    handleSubmit,\n                    setFieldTouched,\n                    touched,\n                    values,\n                    validateForm,\n                    isValid,\n                }) => (\n                    <form onSubmit={handleSubmit}>\n                        <div className='cfd-password-modal__content dc-modal__container_cfd-password-modal__body'>\n                            <CFDEnterPasswordModalTitle platform={platform} />\n                            <div className='input-element'>\n                                <PasswordInput\n                                    autoComplete='new-password'\n                                    label={localize('{{platform}} password', {\n                                        platform: getCFDPlatformLabel(platform),\n                                    })}\n                                    error={\n                                        (touched.password && errors.password) ||\n                                        (values.password.length === 0 ? error_message : '')\n                                    }\n                                    name='password'\n                                    value={values.password}\n                                    onBlur={handleBlur}\n                                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                                        handlePasswordInputChange(e, handleChange, validateForm, setFieldTouched);\n                                    }}\n                                    data_testId={`dt_${platform}_password`}\n                                />\n                            </div>\n                            {error_type === 'PasswordError' && (\n                                <Text size='xs' as='p' className='dc-modal__container_mt5-password-modal__hint'>\n                                    <Localize\n                                        i18n_default_text='Hint: You may have entered your Deriv password, which is different from your {{platform}} password.'\n                                        values={{\n                                            platform: getCFDPlatformLabel(platform),\n                                        }}\n                                    />\n                                </Text>\n                            )}\n                            {account_type.category === CATEGORY.REAL && platform === CFD_PLATFORMS.MT5 && (\n                                <CfdPasswordModalTnc\n                                    className='cfd-password-modal-tnc--bottom'\n                                    platform={platform}\n                                    checked={checked}\n                                    onCheck={() => setChecked(prev => !prev)}\n                                    need_tnc={need_tnc}\n                                />\n                            )}\n                        </div>\n                        <FormSubmitButton\n                            is_disabled={!values.password || !isValid || (need_tnc && !checked)}\n                            has_cancel={has_cancel_button}\n                            cancel_label={cancel_button_label}\n                            onCancel={handleCancel}\n                            is_absolute={!isDesktop}\n                            is_loading={isSubmitting}\n                            label={button_label}\n                            is_center={should_set_trading_password}\n                            form_error={form_error}\n                        />\n                    </form>\n                )}\n            </Formik>\n        );\n    }\n);\n\nconst CFDPasswordModal = observer(({ form_error, platform }: TCFDPasswordModalProps) => {\n    const { isDesktop, isMobileOrTabletLandscape } = useDevice();\n    const isMobileOrTabletPortrait = !isDesktop && !isMobileOrTabletLandscape;\n    const { client, traders_hub, ui } = useStore();\n\n    const {\n        email,\n        account_status,\n        is_logged_in,\n        is_populating_mt5_account_list,\n        is_dxtrade_allowed,\n        mt5_login_list,\n        updateAccountStatus,\n        updateMT5Status,\n    } = client;\n    const { show_eu_related_content, is_eu_user, toggleAccountTransferModal } = traders_hub;\n    const { is_mt5_migration_modal_enabled, setMT5MigrationModalEnabled, is_mt5_migration_modal_open } = ui;\n\n    const {\n        account_type,\n        disableCFDPasswordModal,\n        error_message,\n        error_type,\n        getAccountStatus,\n        has_cfd_error,\n        is_cfd_success_dialog_enabled,\n        is_cfd_password_modal_enabled,\n        setError,\n        setCFDSuccessDialog,\n        submitMt5Password,\n        submitCFDPassword,\n        new_account_response,\n        product,\n        setMigratedMT5Accounts,\n        is_mt5_password_changed_modal_visible,\n        is_mt5_password_invalid_format_modal_visible,\n        setIsMt5PasswordInvalidFormatModalVisible,\n        is_sent_email_modal_enabled,\n        setSentEmailModalStatus,\n    } = useCfdStore();\n\n    const history = useHistory();\n\n    const [is_password_modal_exited, setPasswordModalExited] = React.useState(true);\n    const has_mt5_account = Boolean(mt5_login_list?.length);\n    const should_set_trading_password =\n        Array.isArray(account_status?.status) &&\n        account_status.status.includes(\n            platform === CFD_PLATFORMS.MT5 ? 'mt5_password_not_set' : 'dxtrade_password_not_set'\n        );\n    const is_password_error = error_type === 'PasswordError';\n    const is_password_reset = error_type === 'PasswordReset';\n    const is_incorrect_mt5_password_format_error =\n        error_type === 'InvalidTradingPlatformPasswordFormat' || error_type === 'IncorrectMT5PasswordFormat';\n\n    const [new_password_value, setNewPasswordValue] = React.useState('');\n\n    // Usecase: Added this timeout to render the Password Change modal after the password modal is closed.\n    // It is to avoid the flickering of the modal.\n    React.useEffect(() => {\n        let timeout: NodeJS.Timeout;\n        if (is_incorrect_mt5_password_format_error) {\n            timeout = setTimeout(() => {\n                setIsMt5PasswordInvalidFormatModalVisible(true);\n            }, 500);\n        }\n\n        return () => clearTimeout(timeout);\n    }, [is_incorrect_mt5_password_format_error, setIsMt5PasswordInvalidFormatModalVisible]);\n\n    React.useEffect(() => {\n        if (is_logged_in) {\n            updateMT5Status();\n            updateAccountStatus();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const validatePassword = (values: TCFDPasswordFormValues) => {\n        const errors: FormikErrors<TCFDPasswordFormValues> = {};\n        const max_length = platform === CFD_PLATFORMS.MT5 && should_set_trading_password ? 16 : 25;\n        if (\n            !validLength(values.password, {\n                min: 8,\n                max: max_length,\n            })\n        ) {\n            errors.password = localize('You should enter {{min_number}}-{{max_number}} characters.', {\n                min_number: 8,\n                max_number: max_length,\n            });\n        } else if (!validPassword(values.password)) {\n            errors.password = getErrorMessages().password();\n        } else if (\n            platform === CFD_PLATFORMS.MT5 &&\n            should_set_trading_password &&\n            !validMT5Password(values.password)\n        ) {\n            errors.password = localize(\n                'Please include at least 1 special character such as ( _ @ ? ! / # ) in your password.'\n            );\n        }\n        if (values.password?.toLowerCase() === email.toLowerCase()) {\n            errors.password = localize('Your password cannot be the same as your email address.');\n        }\n        return errors;\n    };\n\n    const closeDialogs = () => {\n        setCFDSuccessDialog(false);\n        if (is_mt5_migration_modal_enabled) setMT5MigrationModalEnabled(false);\n        setMigratedMT5Accounts([]);\n        setError(false);\n    };\n\n    const closeModal = () => {\n        updateMT5Status();\n        closeDialogs();\n        disableCFDPasswordModal();\n    };\n\n    const closeOpenSuccess = () => {\n        disableCFDPasswordModal();\n        closeDialogs();\n        if (account_type.category === CATEGORY.REAL) {\n            toggleAccountTransferModal();\n        }\n    };\n\n    const handleForgotPassword = () => {\n        closeModal();\n        let redirect_to = platform === CFD_PLATFORMS.MT5 ? 1 : 2;\n\n        // if account type is real convert redirect_to from 1 or 2 to 10 or 20\n        // and if account type is demo convert redirect_to from 1 or 2 to 11 or 21\n        if (account_type.category === CATEGORY.REAL) {\n            redirect_to = Number(`${redirect_to}0`);\n        } else if (account_type.category === CATEGORY.DEMO) {\n            redirect_to = Number(`${redirect_to}1`);\n        }\n\n        const password_reset_code =\n            platform === CFD_PLATFORMS.MT5\n                ? 'trading_platform_mt5_password_reset'\n                : 'trading_platform_dxtrade_password_reset';\n        WS.verifyEmail(email, password_reset_code, {\n            url_parameters: {\n                redirect_to,\n            },\n        });\n        setSentEmailModalStatus(true);\n    };\n\n    const submitPassword: TOnSubmitPassword = (values, actions) => {\n        if (platform === CFD_PLATFORMS.MT5) {\n            submitMt5Password(\n                {\n                    ...values,\n                },\n                actions\n            );\n        } else {\n            (values as TCFDPasswordFormValues & { platform: string }).platform = platform;\n            submitCFDPassword(values, actions);\n        }\n    };\n\n    const should_show_password =\n        is_cfd_password_modal_enabled &&\n        !is_cfd_success_dialog_enabled &&\n        (!has_cfd_error || is_password_error || is_password_reset);\n\n    const should_show_success_modals = !has_cfd_error && is_cfd_success_dialog_enabled && is_password_modal_exited;\n\n    const should_show_success = should_show_success_modals && !is_mt5_migration_modal_enabled;\n\n    const should_show_migration_success =\n        should_show_success_modals &&\n        is_mt5_migration_modal_enabled &&\n        !is_populating_mt5_account_list &&\n        !is_mt5_migration_modal_open;\n\n    const should_show_sent_email_modal = is_sent_email_modal_enabled && is_password_modal_exited;\n\n    const should_show_password_modal = React.useMemo(() => {\n        if (should_show_password) {\n            return should_set_trading_password ? true : isDesktop;\n        }\n        return false;\n    }, [should_set_trading_password, should_show_password]);\n\n    const should_show_password_dialog = React.useMemo(() => {\n        if (should_show_password) {\n            if (!should_set_trading_password) return !isDesktop;\n        }\n        return false;\n    }, [isDesktop, should_set_trading_password, should_show_password]);\n\n    const success_modal_submit_label = React.useMemo(() => {\n        if (account_type.category === CATEGORY.REAL) {\n            return localize('Transfer now');\n        }\n        return localize('Continue');\n    }, [account_type]);\n\n    const success_modal_cancel_label = React.useMemo(() => {\n        if (is_eu_user && account_type.category === 'real' && platform === CFD_PLATFORMS.MT5) {\n            return localize('Maybe later');\n        }\n        return '';\n    }, [platform, account_type, is_eu_user]);\n\n    const getSuccssMessage = () => {\n        const { category, type } = account_type;\n        if (!category && !type) return '';\n\n        const category_label = category === CATEGORY.REAL ? localize('real') : localize('demo');\n        let type_label = '';\n        switch (platform) {\n            case CFD_PLATFORMS.MT5:\n                type_label = getMtCompanies(show_eu_related_content, product)[category as keyof TMtCompanies][\n                    type as keyof TMtCompanies['demo' | 'real']\n                ].short_title;\n                break;\n            case CFD_PLATFORMS.DXTRADE:\n                type_label =\n                    getDxCompanies()[category as keyof TDxCompanies][type as keyof TDxCompanies['demo' | 'real']]\n                        .short_title;\n                break;\n            default:\n                type_label = '';\n                break;\n        }\n\n        const accountTypes = () => {\n            if (platform === CFD_PLATFORMS.DXTRADE || platform === CFD_PLATFORMS.CTRADER) {\n                return '';\n            }\n            return type_label;\n        };\n\n        if (category === CATEGORY.REAL) {\n            return (\n                <React.Fragment>\n                    {platform === CFD_PLATFORMS.DXTRADE || platform === CFD_PLATFORMS.CTRADER ? (\n                        <Localize\n                            i18n_default_text='Congratulations, you have successfully created your <0/>{{category}} {{platform}} {{type}} account. To start trading, <1 />transfer funds <2 />from your Deriv account into this account.'\n                            values={{\n                                type: accountTypes(),\n                                platform: getCFDPlatformLabel(platform),\n                                category: category_label,\n                            }}\n                            components={[\n                                <br key={0} />,\n                                platform === CFD_PLATFORMS.CTRADER && <br key={1} />,\n                                platform === CFD_PLATFORMS.DXTRADE && <br key={2} />,\n                            ]}\n                        />\n                    ) : (\n                        <React.Fragment>\n                            <Localize\n                                i18n_default_text='Your Deriv MT5 {{type}} account is ready. '\n                                values={{\n                                    type: accountTypes(),\n                                }}\n                            />\n                            <Localize i18n_default_text='Enable trading with your first transfer.' />\n                        </React.Fragment>\n                    )}\n                </React.Fragment>\n            );\n        }\n\n        if (platform === CFD_PLATFORMS.MT5) {\n            return (\n                <Localize\n                    i18n_default_text='Your demo {{deriv}} {{type}} account is ready.'\n                    values={{\n                        type: accountTypes(),\n                        deriv: 'Deriv MT5',\n                    }}\n                />\n            );\n        }\n\n        return (\n            <Localize\n                i18n_default_text='Congratulations, you have successfully created your <0/>{{category}} {{platform}} {{type}} account. '\n                values={{\n                    type: accountTypes(),\n                    platform: is_eu_user ? '' : getCFDPlatformLabel(platform),\n                    category: category_label,\n                }}\n                components={[<br key={0} />]}\n            />\n        );\n    };\n\n    const cfd_password_form = (\n        <CFDPasswordForm\n            closeModal={closeModal}\n            error_type={error_type}\n            error_message={error_type !== 'InvalidTradingPlatformPasswordFormat' ? error_message : ''}\n            has_mt5_account={has_mt5_account}\n            form_error={form_error}\n            should_set_trading_password={should_set_trading_password}\n            validatePassword={validatePassword}\n            onForgotPassword={handleForgotPassword}\n            submitPassword={submitPassword}\n            platform={platform}\n            is_dxtrade_allowed={is_dxtrade_allowed}\n            onCancel={closeModal}\n            account_type={account_type}\n        />\n    );\n\n    const password_modal = (\n        <Modal\n            className={classNames('cfd-password-modal', {\n                'cfd-password-modal__mt5': platform === CFD_PLATFORMS.MT5 && should_set_trading_password,\n            })}\n            has_close_icon\n            is_open={should_show_password_modal}\n            toggleModal={closeModal}\n            should_header_stick_body\n            renderTitle={() => (\n                <PasswordModalHeader\n                    should_set_trading_password={should_set_trading_password}\n                    is_password_reset_error={is_password_reset}\n                    platform={platform}\n                />\n            )}\n            onUnmount={() => getAccountStatus(platform)}\n            onExited={() => setPasswordModalExited(true)}\n            onEntered={() => setPasswordModalExited(false)}\n            width='auto'\n        >\n            {cfd_password_form}\n        </Modal>\n    );\n\n    const password_modal_mobile = (\n        <MobileDialog\n            has_full_height\n            portal_element_id='modal_root'\n            visible={should_show_password_modal}\n            onClose={closeModal}\n            wrapper_classname='cfd-password-modal cfd-password-modal__mt5'\n            renderTitle={() => (\n                <PasswordModalHeader\n                    should_set_trading_password={should_set_trading_password}\n                    is_password_reset_error={is_password_reset}\n                    platform={platform}\n                />\n            )}\n        >\n            {cfd_password_form}\n        </MobileDialog>\n    );\n\n    const password_dialog = (\n        <MobileDialog\n            has_full_height\n            portal_element_id='modal_root'\n            visible={should_show_password_dialog}\n            onClose={closeModal}\n            wrapper_classname='cfd-password-modal'\n            renderTitle={() => (\n                <PasswordModalHeader\n                    should_set_trading_password={should_set_trading_password}\n                    has_mt5_account={has_mt5_account}\n                    is_password_reset_error={is_password_reset}\n                    platform={platform}\n                />\n            )}\n        >\n            {cfd_password_form}\n        </MobileDialog>\n    );\n\n    const is_mt5_password_format_invalid_desktop = (\n        <Modal\n            className='cfd-password-modal'\n            has_close_icon\n            is_open={is_mt5_password_invalid_format_modal_visible}\n            toggleModal={closeModal}\n            should_header_stick_body\n            title={localize('Deriv MT5 latest password requirements')}\n            width='auto'\n        >\n            <CFDPasswordChange\n                error_type={error_type}\n                error_message={error_message}\n                form_error={form_error}\n                should_set_trading_password={should_set_trading_password}\n                setNewPasswordValue={setNewPasswordValue}\n                validatePassword={validatePassword}\n                onForgotPassword={handleForgotPassword}\n                platform={CFD_PLATFORMS.MT5}\n                onCancel={closeModal}\n            />\n        </Modal>\n    );\n\n    const is_mt5_password_format_invalid = (\n        <MobileDialog\n            has_full_height\n            portal_element_id='modal_root'\n            visible={is_mt5_password_invalid_format_modal_visible}\n            onClose={closeModal}\n            wrapper_classname='cfd-password-modal cfd-password-change__wrapper'\n            header_classname='cfd-password-change__header'\n            renderTitle={() => localize('Deriv MT5 latest password requirements')}\n        >\n            <CFDPasswordChange\n                error_type={error_type}\n                error_message={error_message}\n                form_error={form_error}\n                should_set_trading_password={should_set_trading_password}\n                setNewPasswordValue={setNewPasswordValue}\n                validatePassword={validatePassword}\n                onForgotPassword={handleForgotPassword}\n                platform={CFD_PLATFORMS.MT5}\n                onCancel={closeModal}\n            />\n        </MobileDialog>\n    );\n\n    const invalid_mt5_password_modal = isMobileOrTabletPortrait\n        ? is_mt5_password_format_invalid\n        : is_mt5_password_format_invalid_desktop;\n    return (\n        <React.Fragment>\n            {platform === CFD_PLATFORMS.MT5 && !isDesktop && password_modal_mobile}\n            {password_modal}\n            {password_dialog}\n            <SuccessDialog\n                is_open={should_show_success}\n                toggleModal={closeModal}\n                onCancel={closeModal}\n                onSubmit={closeOpenSuccess}\n                classNameMessage='cfd-password-modal__message'\n                message={getSuccssMessage()}\n                icon={\n                    <CFDPasswordSuccessIcon\n                        platform={platform}\n                        type={account_type.type}\n                        show_eu_related_content={show_eu_related_content}\n                        product={product}\n                    />\n                }\n                icon_size='xlarge'\n                text_submit={success_modal_submit_label}\n                text_cancel={success_modal_cancel_label}\n                has_cancel={account_type.category === CATEGORY.REAL}\n                has_close_icon={false}\n                width='auto'\n                is_medium_button={!isDesktop}\n            />\n            <MigrationSuccessModal is_open={should_show_migration_success} closeModal={closeModal} />\n            <SentEmailModal\n                is_open={should_show_sent_email_modal}\n                identifier_title='trading_password'\n                onClose={() => setSentEmailModalStatus(false)}\n                onClickSendEmail={handleForgotPassword}\n            />\n            {is_incorrect_mt5_password_format_error && invalid_mt5_password_modal}\n            {is_mt5_password_changed_modal_visible && (\n                <CFDPasswordChangeContent closeModal={closeModal} password_value={new_password_value} />\n            )}\n        </React.Fragment>\n    );\n});\n\nexport default CFDPasswordModal;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_sent_email_modal__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_hooks__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_stores__;","module.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;","module.exports = __WEBPACK_EXTERNAL_MODULE_classnames__;","module.exports = __WEBPACK_EXTERNAL_MODULE_formik__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;","module.exports = __WEBPACK_EXTERNAL_MODULE_react_router__;","var u = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction f(e) {\n  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, \"default\") ? e.default : e;\n}\nfunction l(e) {\n  if (e.__esModule) return e;\n  var r = e.default;\n  if (typeof r == \"function\") {\n    var t = function o() {\n      return this instanceof o ? Reflect.construct(r, arguments, this.constructor) : r.apply(this, arguments);\n    };\n    t.prototype = r.prototype;\n  } else t = {};\n  return Object.defineProperty(t, \"__esModule\", { value: !0 }), Object.keys(e).forEach(function(o) {\n    var n = Object.getOwnPropertyDescriptor(e, o);\n    Object.defineProperty(t, o, n.get ? n : {\n      enumerable: !0,\n      get: function() {\n        return e[o];\n      }\n    });\n  }), t;\n}\nexport {\n  l as a,\n  u as c,\n  f as g\n};\n","import { u as t } from \"../index-EY1gwl5O.js\";\nconst d = () => {\n  const i = t(\"(min-width: 1280px)\"), a = t(\"(max-width: 600px)\"), n = t(\n    \"(min-width: 601px) and (max-width: 1279px)\"\n  ), e = t(\n    \"(min-width: 601px) and (max-width: 1279px) and (orientation: portrait)\"\n  ), o = t(\n    \"(max-width: 1279px) and (orientation: landscape)\"\n  );\n  return {\n    /** returns Larger screen tablets [min-width: 1280px] */\n    isDesktop: i,\n    /**  returns Smaller screen tablets [max-width: 600px] */\n    isMobile: a,\n    /** returns Larger screen phones and smaller screen desktop [min-width: 601px and max-width: 1279px] */\n    isTablet: n,\n    /** returns tablet screen with portrait orientation [min-width: 601px and max-width: 1279px and orientation: portrait] */\n    isTabletPortrait: e,\n    /** returns mobile or medium screens in landscape orientation [max-width: 1279px and orientation: landscape] */\n    isMobileOrTabletLandscape: o\n  };\n};\nexport {\n  d as useDevice\n};\n","import { useState as d, useLayoutEffect as m, useEffect as u, useRef as l } from \"react\";\nimport { c as a } from \"./_commonjsHelpers-BkfeUUK-.js\";\nvar v = typeof a == \"object\" && a && a.Object === Object && a, E = typeof self == \"object\" && self && self.Object === Object && self;\nv || E || Function(\"return this\")();\nvar f = typeof window < \"u\" ? m : u;\nfunction L(t, s, o, i) {\n  const c = l(s);\n  f(() => {\n    c.current = s;\n  }, [s]), u(() => {\n    const n = window;\n    if (!(n && n.addEventListener))\n      return;\n    const r = (e) => {\n      c.current(e);\n    };\n    return n.addEventListener(t, r, i), () => {\n      n.removeEventListener(t, r, i);\n    };\n  }, [t, o, i]);\n}\nvar h = typeof window > \"u\";\nfunction O(t, {\n  defaultValue: s = !1,\n  initializeWithValue: o = !0\n} = {}) {\n  const i = (e) => h ? s : window.matchMedia(e).matches, [c, n] = d(() => o ? i(t) : s);\n  function r() {\n    n(i(t));\n  }\n  return f(() => {\n    const e = window.matchMedia(t);\n    return r(), e.addListener ? e.addListener(r) : e.addEventListener(\"change\", r), () => {\n      e.removeListener ? e.removeListener(r) : e.removeEventListener(\"change\", r);\n    };\n  }, [t]), c;\n}\nfunction g(t, s, o = \"mousedown\", i = {}) {\n  L(\n    o,\n    (c) => {\n      const n = c.target;\n      if (!n || !n.isConnected)\n        return;\n      (Array.isArray(t) ? t.filter((e) => !!e.current).every((e) => e.current && !e.current.contains(n)) : t.current && !t.current.contains(n)) && s(c);\n    },\n    void 0,\n    i\n  );\n}\nexport {\n  g as a,\n  O as u\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames not based on template\n\tif (chunkId === \"assets\") return \"cfd/js/\" + chunkId + \".js\";\n\t// return url for filenames based on template\n\treturn \"cfd/js/cfd.\" + chunkId + \".\" + {\"src_Containers_mt5-create-password_mt5-create-password_tsx\":\"e9ee4ab0c15d40673e8b\",\"src_Containers_cfd-password-modal-tnc_tsx\":\"4e83d82883533e2c5044\",\"src_Containers_cfd-password-change_tsx\":\"5e26bd913280399de9e4\",\"src_Containers_cfd-password-success-icon_tsx\":\"e3ab986661919ac107e6\",\"src_Containers_cfd-password-change-content_tsx\":\"6640cb3e341912e06752\",\"src_Containers_cfd-change-password-confirmation_tsx\":\"c67f2a9c29612c8ff7e3\"}[chunkId] + \".js\";\n};","// This function allow to reference all chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames not based on template\n\tif (chunkId === \"CFDPasswordModal\") return \"cfd/css/cfd.main.d4e5ebe150b04bab25f1.css\";\n\t// return url for filenames based on template\n\treturn \"cfd/css/cfd.\" + chunkId + \".\" + \"8dd0e6e57d8ff43870f2\" + \".css\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.j = \"CFDPasswordModal\";","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"CFDPasswordModal\": 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_deriv_cfd\"] = self[\"webpackChunk_deriv_cfd\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"internalCFDStoreUsage\",\"utilities\"], () => (__webpack_require__(\"./src/Containers/cfd-password-modal.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__deriv_account_dist_account_js_sent_email_modal__","__WEBPACK_EXTERNAL_MODULE__deriv_components__","__WEBPACK_EXTERNAL_MODULE__deriv_hooks__","__WEBPACK_EXTERNAL_MODULE__deriv_shared__","__WEBPACK_EXTERNAL_MODULE__deriv_stores__","__WEBPACK_EXTERNAL_MODULE__deriv_translations__","__WEBPACK_EXTERNAL_MODULE_classnames__","__WEBPACK_EXTERNAL_MODULE_formik__","__WEBPACK_EXTERNAL_MODULE_react__","__WEBPACK_EXTERNAL_MODULE_react_router__","deferred","inProgress","dataWebpackPrefix","loadStylesheet","installedCssChunks","observer","_ref","platform","cfd","useStore","modules","account_title","account_type","getAccountCardTitle","CFD_PLATFORMS","CTRADER","DXTRADE","category","CATEGORY","REAL","React","Text","size","className","MT5","Localize","i18n_default_text","values","getCFDPlatformNames","account","getCFDPlatformLabel","_ref$classNameMessage","classNameMessage","_ref$has_cancel","has_cancel","_ref$has_submit","has_submit","icon","message","onCancel","onSubmit","heading","_ref$icon_size","icon_size","text_submit","text_cancel","is_open","toggleModal","title","has_close_icon","_ref$width","width","is_medium_button","Modal","small","Body","classNames","Icon","custom_color","as","weight","Footer","Button","_extends","onClick","has_effect","text","localize","secondary","medium","large","primary","eligible_account_to_migrate","jurisdiction_market_name","closePopupModal","is_mobile","ui","text_size","information_text_size","getFormattedAccounts","length","type_1","type_2","align","_objectSpread","components","key","InlineMessage","type","existing_account","getFormattedJurisdictionCode","Jurisdiction","SVG","has_separator","_migrated_mt5_account","closeModal","setMT5MigrationModalEnabled","_useCfdStore","useCfdStore","migrated_mt5_accounts","setIsFromMt5MigrationModal","has_migrated_mt5_accounts","map","_Object$values","_account$to_account","Object","to_account","_Object$keys","_account$to_account2","getFormattedJurisdictionMarketTypes","keys","closeMigrationModals","getMigrationIcon","_Object$values2","_migrated_mt5_account2","to_acc","BVI","VANUATU","ModalContent","MigrationSuccessModalContent","PageOverlay","header_classname","portal_id","header","onClickClose","should_header_stick_body","should_set_trading_password","_useDevice","isDesktop","is_mt5","is_password_reset_error","platform_name","line_height","getCancelButtonLabel","setFieldTouched","CreatePassword","validatePassword","_ref3","error_message","createElement","initialValues","password","enableReinitialize","validate","isSubmitting","handleBlur","handleChange","_ref4","handleSubmit","touched","validateForm","has_error","custom_feedback_messages","getErrorMessages","password_warnings","PasswordInput","error","name","onBlur","onChange","handlePasswordInputChange","data_testId","is_disabled","is_center","_ref5","submitPassword","need_tnc","useRef","_React$useState2","_multi_step_ref$curre","setPassword","multi_step_ref","steps","component","onConfirm","actions","CFDPasswordForm","error_type","form_error","_ref6","has_mt5_account","onForgotPassword","useDevice","_useDevice2","jurisdiction_selected_shortcode","checked","_React$useState4","button_label","useMemo","cancel_button_label","handleCancel","has_cancel_button","cancel_label","is_absolute","label","_ref8","isValid","onCheck","setChecked","is_loading","_useDevice3","isMobileOrTabletLandscape","isMobileOrTabletPortrait","client","traders_hub","email","account_status","is_logged_in","is_populating_mt5_account_list","is_dxtrade_allowed","mt5_login_list","updateAccountStatus","updateMT5Status","show_eu_related_content","is_eu_user","toggleAccountTransferModal","is_mt5_migration_modal_enabled","is_mt5_migration_modal_open","_useCfdStore2","disableCFDPasswordModal","getAccountStatus","has_cfd_error","is_cfd_success_dialog_enabled","is_cfd_password_modal_enabled","setError","setCFDSuccessDialog","submitMt5Password","submitCFDPassword","new_account_response","product","setMigratedMT5Accounts","is_mt5_password_invalid_format_modal_visible","is_mt5_password_changed_modal_visible","setIsMt5PasswordInvalidFormatModalVisible","is_sent_email_modal_enabled","setSentEmailModalStatus","useState","_React$useState6","_slicedToArray","_React$useState5","is_password_modal_exited","setPasswordModalExited","isArray","is_password_reset","is_incorrect_mt5_password_format_error","_React$useState7","_React$useState8","new_password_value","setTimeout","useEffect","min","max","max_length","errors","min_number","_values$password","validPassword","redirect_to","Number","concat","password_reset_code","should_show_migration_success","should_show_success_modals","should_show_sent_email_modal","should_show_password_modal","should_show_password","password_modal","renderTitle","onUnmount","onExited","onEntered","cfd_password_form","has_full_height","portal_element_id","visible","onClose","wrapper_classname","should_show_password_dialog","setNewPasswordValue","handleForgotPassword","is_mt5_password_format_invalid","invalid_mt5_password_modal","getSuccssMessage","category_label","type_label","getMtCompanies","getDxCompanies","short_title","accountTypes","SentEmailModal","identifier_title","onClickSendEmail","password_value","CFDPasswordModal","u","globalThis","window","global","d","isMobile","isTablet","isTabletPortrait","v","E","Function","f","h","O","t","defaultValue","s","initializeWithValue","o","i","e","matchMedia","matches","c","n","r","addListener","addEventListener","removeListener","removeEventListener","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","getter","__esModule","a","definition","defineProperty","enumerable","get","chunkId","Promise","all","reduce","promises","miniCssF","obj","prop","prototype","hasOwnProperty","call","l","url","done","push","script","needAttach","scripts","document","getElementsByTagName","getAttribute","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","forEach","bind","target","head","appendChild","Symbol","toStringTag","value","p","resolve","reject","href","fullhref","existingLinkTags","dataHref","tag","rel","existingStyleTags","findStylesheet","linkTag","errorType","realHref","err","Error","code","request","createStylesheet","miniCss","then","installedChunks","installedChunkData","promise","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}