{"version":3,"file":"trader/js/trader.market-countdown-timer.ea3e43e36951b82437dc.js","mappings":"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","sources":["webpack://@deriv/trader/./src/App/Components/Elements/market-countdown-timer.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Text } from '@deriv/components';\nimport { useIsMounted, WS, convertTimeFormat, isMarketClosed, toMoment } from '@deriv/shared';\nimport { Localize } from '@deriv/translations';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTraderStore } from 'Stores/useTraderStores';\nimport { TradingTimesRequest, TradingTimesResponse } from '@deriv/api-types';\n\ntype TMarketCountDownTimer = {\n    is_main_page: boolean;\n    setIsTimerLoading: React.Dispatch<React.SetStateAction<boolean>>;\n    onMarketOpen: ReturnType<typeof useTraderStore>['prepareTradeStore'];\n    symbol: ReturnType<typeof useTraderStore>['symbol'];\n};\n\ntype TWhenMarketOpens = {\n    days_offset: number;\n    opening_time: string;\n    remaining_time_to_open: number;\n};\n\n// check market in coming 7 days\nconst days_to_check_before_exit = 7;\n\nconst getTradingTimes = async (target_time: TradingTimesRequest['trading_times']) => {\n    const data = await WS.tradingTimes(target_time);\n    if (data.error) {\n        return { api_initial_load_error: data.error.message };\n    }\n    return data;\n};\n// eslint-disable-next-line consistent-return\nconst getSymbol = (\n    target_symbol: string,\n    trading_times: NonNullable<DeepRequired<TradingTimesResponse['trading_times']>>\n) => {\n    let symbol;\n    const { markets } = trading_times;\n    for (let i = 0; i < markets.length; i++) {\n        const { submarkets } = markets[i];\n        if (submarkets) {\n            for (let j = 0; j < submarkets.length; j++) {\n                const { symbols } = submarkets[j];\n                symbol = symbols?.find(item => item.symbol === target_symbol);\n                if (symbol !== undefined) return symbol;\n            }\n        }\n    }\n};\n\nconst calculateTimeLeft = (remaining_time_to_open: number) => {\n    const difference = remaining_time_to_open - Date.now();\n    return difference > 0\n        ? {\n              days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n              hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n              minutes: Math.floor((difference / 1000 / 60) % 60),\n              seconds: Math.floor((difference / 1000) % 60),\n          }\n        : {};\n};\n\nconst MarketCountdownTimer = observer(\n    ({ is_main_page, setIsTimerLoading, onMarketOpen, symbol }: TMarketCountDownTimer) => {\n        const { common } = useStore();\n        const { current_language } = common;\n        const { active_symbols } = useTraderStore();\n        const isMounted = useIsMounted();\n        const [when_market_opens, setWhenMarketOpens] = React.useState<TWhenMarketOpens>({} as TWhenMarketOpens);\n        const [time_left, setTimeLeft] = React.useState(calculateTimeLeft(when_market_opens?.remaining_time_to_open));\n        const [is_loading, setLoading] = React.useState(true);\n\n        React.useEffect(() => {\n            if (!is_main_page || (is_main_page && isMarketClosed(active_symbols, symbol))) {\n                setLoading(true);\n                // eslint-disable-next-line consistent-return\n                // @ts-expect-error there is no explicit return type because of if statements\n                const whenMarketOpens = async (days_offset: number, target_symbol: string) => {\n                    // days_offset is 0 for today, 1 for tomorrow, etc.\n                    if (days_offset > days_to_check_before_exit) return {};\n                    let remaining_time_to_open;\n                    const target_date = toMoment(new Date()).add(days_offset, 'days');\n                    const api_response = await getTradingTimes(target_date.format('YYYY-MM-DD'));\n                    if (!api_response.api_initial_load_error) {\n                        const returned_symbol = getSymbol(target_symbol, api_response.trading_times);\n                        const open = returned_symbol?.times.open as string[];\n                        const close = returned_symbol?.times.close as string[];\n                        const is_closed_all_day = open?.length === 1 && open[0] === '--' && close[0] === '--';\n                        if (is_closed_all_day) {\n                            // check tomorrow trading times\n                            return whenMarketOpens(days_offset + 1, target_symbol);\n                        }\n                        const date_str = target_date.toISOString().substring(0, 11);\n                        const getUTCDate = (hour: string) => new Date(`${date_str}${hour}Z`);\n                        for (let i = 0; i < open?.length; i++) {\n                            const diff = +getUTCDate(open[i]) - Date.now();\n                            if (diff > 0) {\n                                remaining_time_to_open = +getUTCDate(open[i]);\n                                if (isMounted() && target_symbol === symbol) {\n                                    return setWhenMarketOpens({\n                                        days_offset,\n                                        opening_time: open[i],\n                                        remaining_time_to_open,\n                                    });\n                                }\n                            }\n                        }\n                        whenMarketOpens(days_offset + 1, target_symbol);\n                    }\n                };\n\n                whenMarketOpens(0, symbol);\n            }\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n        }, [symbol]);\n\n        React.useEffect(() => {\n            let timer: ReturnType<typeof setTimeout>;\n            if (when_market_opens?.remaining_time_to_open) {\n                timer = setTimeout(() => {\n                    setTimeLeft(calculateTimeLeft(when_market_opens.remaining_time_to_open));\n                    if (+new Date(when_market_opens.remaining_time_to_open) - +new Date() < 1000) {\n                        setLoading(true);\n                        if (is_main_page) onMarketOpen(false);\n                    }\n                }, 1000);\n            }\n            return () => {\n                if (timer) {\n                    clearTimeout(timer);\n                }\n            };\n        }, [time_left, when_market_opens, onMarketOpen, is_main_page]);\n\n        React.useEffect(() => {\n            if (!is_loading) setIsTimerLoading(false);\n        }, [is_loading, setIsTimerLoading]);\n\n        let timer_components = '';\n\n        if (Object.keys(time_left).length) {\n            const hours = (Number(time_left.days) * 24 + Number(time_left.hours)).toString().padStart(2, '0');\n            const minutes = Number(time_left.minutes).toString().padStart(2, '0');\n            const seconds = Number(time_left.seconds).toString().padStart(2, '0');\n            timer_components = `${hours}:${minutes}:${seconds}`;\n        }\n\n        if (!(when_market_opens && timer_components)) return null;\n\n        const { opening_time, days_offset } = when_market_opens;\n        let opening_time_banner = null;\n        if (opening_time) {\n            const formatted_opening_time = convertTimeFormat(opening_time);\n            const target_date = toMoment(new Date()).locale(current_language.toLowerCase()).add(days_offset, 'days');\n            const opening_date = target_date.format('DD MMM YYYY');\n            const opening_day = target_date.format('dddd');\n            opening_time_banner = (\n                <Text\n                    align='center'\n                    as='p'\n                    className='market-is-closed-overlay__open-date'\n                    line_height='m'\n                    color='prominent'\n                    size={is_main_page ? 's' : 'xs'}\n                    weight='bold'\n                >\n                    <Localize\n                        i18n_default_text='{{formatted_opening_time}} (GMT) on {{opening_day}},<0 /> {{opening_date}}.'\n                        components={[<br key={0} />]}\n                        values={{\n                            formatted_opening_time,\n                            opening_day,\n                            opening_date,\n                        }}\n                    />\n                </Text>\n            );\n        }\n\n        if (is_loading) setLoading(false);\n\n        return (\n            <React.Fragment>\n                <Text\n                    as='p'\n                    className={classNames('market-is-closed-overlay__open-at', {\n                        'market-is-closed-overlay__open-at--main-page': is_main_page,\n                    })}\n                    line_height='x'\n                    size={is_main_page ? 'xs' : 'xxs'}\n                >\n                    <Localize i18n_default_text='It will reopen at' />\n                </Text>\n                {opening_time_banner}\n                <Text\n                    align='center'\n                    as='p'\n                    className={classNames('market-is-closed-overlay__come-back', {\n                        'market-is-closed-overlay__come-back--main-page': is_main_page,\n                    })}\n                    line_height='x'\n                    size={is_main_page ? 'xs' : 'xxs'}\n                >\n                    <Localize i18n_default_text='Please come back in' />\n                </Text>\n                <Text\n                    as='p'\n                    className={classNames('market-is-closed-overlay__timer', {\n                        'market-is-closed-overlay__timer--main-page': is_main_page,\n                    })}\n                    line_height='m'\n                    color='prominent'\n                    size={is_main_page ? 's' : 'xs'}\n                    weight='bold'\n                >\n                    {timer_components}\n                </Text>\n                <div className='market-is-closed-overlay__separator' />\n            </React.Fragment>\n        );\n    }\n);\n\nexport default MarketCountdownTimer;\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","getTradingTimes","_ref","_callee","target_time","data","_context","WS","tradingTimes","error","api_initial_load_error","message","_x","getSymbol","target_symbol","trading_times","symbol","markets","submarkets","j","symbols","undefined","find","item","calculateTimeLeft","remaining_time_to_open","difference","Date","now","days","Math","floor","hours","minutes","seconds","observer","_ref2","is_main_page","setIsTimerLoading","onMarketOpen","current_language","useStore","common","active_symbols","useTraderStore","isMounted","useIsMounted","_React$useState2","_slicedToArray","React","when_market_opens","setWhenMarketOpens","_React$useState4","time_left","setTimeLeft","_React$useState6","is_loading","setLoading","isMarketClosed","whenMarketOpens","_ref3","_callee2","days_offset","target_date","api_response","returned_symbol","open","close","date_str","getUTCDate","_context2","toMoment","add","format","times","toISOString","substring","hour","concat","opening_time","_x2","_x3","timer","setTimeout","clearTimeout","timer_components","Number","toString","padStart","opening_time_banner","formatted_opening_time","convertTimeFormat","locale","toLowerCase","opening_date","opening_day","Text","align","as","className","line_height","color","size","weight","Localize","i18n_default_text","components","key","classNames"],"sourceRoot":""}