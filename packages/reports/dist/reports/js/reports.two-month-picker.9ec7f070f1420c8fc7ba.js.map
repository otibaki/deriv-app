{"version":3,"file":"reports/js/reports.two-month-picker.9ec7f070f1420c8fc7ba.js","mappings":"k1CAWA,IAAMA,EAAiBC,IAAAA,MAAW,SAAAC,GAA4D,IAAzDC,EAAQD,EAARC,SAAUC,EAAgBF,EAAhBE,iBAAkBC,EAAKH,EAALG,MACyCC,EAAAC,EAA5DN,IAAAA,UAAeO,EAAAA,EAAAA,UAASH,GAAOI,QAAQC,SAAS,EAAG,UAAS,GAA/FC,EAAcL,EAAA,GAAEM,EAAeN,EAAA,GAC2BO,EAAAN,EAArBN,IAAAA,SAAeI,GAAM,GAA1DS,EAAeD,EAAA,GAAEE,EAAgBF,EAAA,GAgDlCG,EAAoB,SAACC,GACvB,OAAOb,EAAiBa,EAC5B,EAOMC,EAAqB,SAACC,GACxBhB,EAASiB,IAAAA,IAAWD,EAAEE,cAAcC,QAAQL,KAAM,cACtD,EAEA,OACIhB,IAAAA,cAACA,IAAAA,SAAc,KACXA,IAAAA,cAAA,OAAKsB,UAAU,eACXtB,IAAAA,cAACuB,EAAAA,SAASC,OAAM,CACZC,cAAef,EACfgB,cAAc,OACdC,WA5DK,SAACX,GAClBL,EAAgBK,GAChBF,GAAiBc,EAAAA,EAAAA,WAAUZ,EAAKa,cAAe,GACnD,EA0DgB1B,iBAzCW,SAACa,GACxB,OAAyD,KAAlDc,EAAAA,EAAAA,eAAavB,EAAAA,EAAAA,UAASG,GAAiBM,EAClD,EAwCgBe,uBAAqB,IAEzB/B,IAAAA,cAACuB,EAAAA,SAASS,KAAI,CACVN,cAAc,OACdD,cAAef,EACfuB,cAAe7B,EACf8B,YAAY,aACZ/B,iBAAkBY,EAClBoB,aAAW,EACXC,eAAgBnB,KAGxBjB,IAAAA,cAAA,OAAKsB,UAAU,gBACXtB,IAAAA,cAACuB,EAAAA,SAASC,OAAM,CACZC,cAAeZ,EACfa,cAAc,OACdvB,iBAhDS,SAACa,GACtB,IAAMqB,GAAS9B,EAAAA,EAAAA,UAASM,GAAiByB,QAAQ,SACjD,OAA0D,KAAtDR,EAAAA,EAAAA,eAAavB,EAAAA,EAAAA,YAAW+B,QAAQ,SAAUD,IACR,KAA/BP,EAAAA,EAAAA,cAAaO,EAAQrB,EAChC,EA6CgBW,WArEG,SAACX,GAChBL,GAAgB4B,EAAAA,EAAAA,WAAUvB,EAAKa,cAAe,IAC9Cf,GAAiBP,EAAAA,EAAAA,UAASS,GAC9B,EAmEgBe,uBAAqB,IAEzB/B,IAAAA,cAACuB,EAAAA,SAASS,KAAI,CACVN,cAAc,OACdD,cAAeZ,EACfoB,cAAe7B,EACf8B,YAAY,aACZ/B,iBAAkBY,EAClBoB,aAAW,EACXC,eAAgBnB,IAEpBjB,IAAAA,cAACuB,EAAAA,SAASiB,OAAM,CAACC,SAAS,yBAAyBC,eAAa,EAACC,QA9ClD,WACvBhC,GAAgBJ,EAAAA,EAAAA,YAAWE,SAAS,EAAG,UACvCK,GAAiBP,EAAAA,EAAAA,YACrB,KA+CJ,IAEAR,EAAe6C,YAAc,iBAE7B,S","sources":["webpack://@deriv/reports/./src/Components/Form/CompositeCalendar/two-month-picker.tsx"],"sourcesContent":["import moment from 'moment';\nimport React from 'react';\nimport { Calendar } from '@deriv/components';\nimport { addMonths, diffInMonths, subMonths, toMoment } from '@deriv/shared';\n\ntype TTwoMonthPicker = {\n    onChange: (date: moment.MomentInput) => void;\n    isPeriodDisabled: (date: moment.Moment) => boolean;\n    value: moment.Moment;\n};\n\nconst TwoMonthPicker = React.memo(({ onChange, isPeriodDisabled, value }: TTwoMonthPicker) => {\n    const [left_pane_date, setLeftPaneDate] = React.useState(toMoment(value).clone().subtract(1, 'month'));\n    const [right_pane_date, setRightPaneDate] = React.useState(value);\n\n    /**\n     * Navigate from date\n     *\n     * @param {moment.Moment} date\n     */\n    const navigateFrom = (date: moment.Moment) => {\n        setLeftPaneDate(date);\n        setRightPaneDate(addMonths(date.toISOString(), 1));\n    };\n\n    /**\n     * Navigate to date\n     *\n     * @param {moment.Moment} date\n     */\n    const navigateTo = (date: moment.Moment) => {\n        setLeftPaneDate(subMonths(date.toISOString(), 1));\n        setRightPaneDate(toMoment(date));\n    };\n\n    /**\n     * Only allow previous months to be available to navigate. Disable other periods\n     *\n     * @param {moment.Moment} date\n     */\n    const validateFromArrows = (date: moment.Moment) => {\n        return diffInMonths(toMoment(left_pane_date), date) !== -1;\n    };\n\n    /**\n     * Only allow next month to be available to navigate (unless next month is in the future).\n     * Disable other periods\n     *\n     * @param {moment.Moment} date\n     */\n    const validateToArrows = (date: moment.Moment) => {\n        const r_date = toMoment(right_pane_date).startOf('month');\n        if (diffInMonths(toMoment().startOf('month'), r_date) === 0) return true; // future months are disallowed\n        return diffInMonths(r_date, date) !== 1;\n    };\n\n    /**\n     * Validate values to be date_from < date_to\n     *\n     * @param {moment.Moment} date\n     */\n    const shouldDisableDate = (date: moment.Moment) => {\n        return isPeriodDisabled(date);\n    };\n\n    const jumpToCurrentMonth = () => {\n        setLeftPaneDate(toMoment().subtract(1, 'month'));\n        setRightPaneDate(toMoment());\n    };\n\n    const updateSelectedDate = (e: React.MouseEvent<HTMLElement>) => {\n        onChange(moment.utc(e.currentTarget.dataset.date, 'YYYY-MM-DD'));\n    };\n\n    return (\n        <React.Fragment>\n            <div className='first-month'>\n                <Calendar.Header\n                    calendar_date={left_pane_date}\n                    calendar_view='date'\n                    navigateTo={navigateFrom}\n                    isPeriodDisabled={validateFromArrows}\n                    hide_disabled_periods\n                />\n                <Calendar.Body\n                    calendar_view='date'\n                    calendar_date={left_pane_date}\n                    selected_date={value}\n                    date_format='YYYY-MM-DD'\n                    isPeriodDisabled={shouldDisableDate}\n                    hide_others\n                    updateSelected={updateSelectedDate}\n                />\n            </div>\n            <div className='second-month'>\n                <Calendar.Header\n                    calendar_date={right_pane_date}\n                    calendar_view='date'\n                    isPeriodDisabled={validateToArrows}\n                    navigateTo={navigateTo}\n                    hide_disabled_periods\n                />\n                <Calendar.Body\n                    calendar_view='date'\n                    calendar_date={right_pane_date}\n                    selected_date={value}\n                    date_format='YYYY-MM-DD'\n                    isPeriodDisabled={shouldDisableDate}\n                    hide_others\n                    updateSelected={updateSelectedDate}\n                />\n                <Calendar.Footer use_icon='IcCalendarForwardToday' has_today_btn onClick={jumpToCurrentMonth} />\n            </div>\n        </React.Fragment>\n    );\n});\n\nTwoMonthPicker.displayName = 'TwoMonthPicker';\n\nexport default TwoMonthPicker;\n"],"names":["TwoMonthPicker","React","_ref","onChange","isPeriodDisabled","value","_React$useState2","_slicedToArray","toMoment","clone","subtract","left_pane_date","setLeftPaneDate","_React$useState4","right_pane_date","setRightPaneDate","shouldDisableDate","date","updateSelectedDate","e","moment","currentTarget","dataset","className","Calendar","Header","calendar_date","calendar_view","navigateTo","addMonths","toISOString","diffInMonths","hide_disabled_periods","Body","selected_date","date_format","hide_others","updateSelected","r_date","startOf","subMonths","Footer","use_icon","has_today_btn","onClick","displayName"],"sourceRoot":""}