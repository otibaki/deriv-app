{"version":3,"file":"account/js/account.Sections_Security_Passwords_index_ts.a195af25b382ece9eac2.js","mappings":"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","sources":["webpack://@deriv/account/./Components/sent-email-modal/sent-email-modal.tsx","webpack://@deriv/account/./Components/sent-email-modal/index.ts","webpack://@deriv/account/./Sections/Security/Passwords/platform-description.tsx","webpack://@deriv/account/../../../node_modules/@deriv-com/ui/dist/components/Divider/index.js","webpack://@deriv/account/./Sections/Security/Passwords/email-password-title.tsx","webpack://@deriv/account/./Sections/Security/Passwords/email-password-section.tsx","webpack://@deriv/account/./Sections/Security/Passwords/deriv-password.tsx","webpack://@deriv/account/./Components/unlink-account-modal/index.ts","webpack://@deriv/account/./Components/unlink-account-modal/unlink-account-modal.tsx","webpack://@deriv/account/./Sections/Security/Passwords/deriv-email.tsx","webpack://@deriv/account/./Sections/Security/Passwords/deriv-mt5-password.tsx","webpack://@deriv/account/./Sections/Security/Passwords/deriv-x-password.tsx","webpack://@deriv/account/./Sections/Security/Passwords/index.ts","webpack://@deriv/account/./Sections/Security/Passwords/passwords.tsx"],"sourcesContent":["import { ReactElement } from 'react';\nimport { Localize, useTranslations, localize } from '@deriv-com/translations';\nimport { Div100vhContainer, Icon, MobileDialog, Modal, SendEmailTemplate, Text, Popover } from '@deriv/components';\nimport { getPlatformSettings, CFD_PLATFORMS } from '@deriv/shared';\nimport { useDevice } from '@deriv-com/ui';\nimport { Chat } from '@deriv/utils';\n\ntype TSentEmailModal = {\n    identifier_title: string;\n    is_modal_when_mobile?: boolean;\n    is_open: boolean;\n    has_live_chat?: boolean;\n    onClickSendEmail: (prop?: string) => void;\n    onClose: () => void;\n};\n\ntype TNoEmailContentItem = {\n    key: string;\n    icon: string;\n    content: string | ReactElement;\n};\n\nconst getNoEmailContentStrings = (): TNoEmailContentItem[] => {\n    return [\n        {\n            key: 'email_spam',\n            icon: 'IcEmailSpam',\n            content: localize('The email is in your spam folder (Sometimes things get lost there).'),\n        },\n        {\n            key: 'wrong_email',\n            icon: 'IcEmail',\n            content: localize(\n                'You accidentally gave us another email address (Usually a work or a personal one instead of the one you meant).'\n            ),\n        },\n        {\n            key: 'wrong_typo',\n            icon: 'IcEmailTypo',\n            content: localize('The email address you entered had a mistake or typo (happens to the best of us).'),\n        },\n        {\n            key: 'email_firewall',\n            icon: 'IcEmailFirewall',\n            content: localize(\n                'We can’t deliver the email to this address (Usually because of firewalls or filtering).'\n            ),\n        },\n    ];\n};\n\nconst SentEmailModal = ({\n    identifier_title,\n    is_modal_when_mobile = false,\n    is_open,\n    has_live_chat = false,\n    onClickSendEmail,\n    onClose,\n}: TSentEmailModal) => {\n    const { isDesktop } = useDevice();\n    const { localize } = useTranslations();\n\n    const getSubtitle = () => {\n        let subtitle: string | ReactElement = '';\n        switch (identifier_title) {\n            case CFD_PLATFORMS.DXTRADE:\n                subtitle = (\n                    <Localize\n                        i18n_default_text='Please click on the link in the email to change your <0>{{platform_name_dxtrade}}</0> password.'\n                        components={[<span className='send-email-template__subtitle-platform' key={0} />]}\n                        values={{ platform_name_dxtrade: getPlatformSettings('dxtrade').name }}\n                    />\n                );\n                break;\n            case CFD_PLATFORMS.MT5:\n                subtitle = localize('Please click on the link in the email to change your Deriv MT5 password.');\n                break;\n            case 'Google':\n            case 'Facebook':\n                subtitle = localize(\n                    'Check your {{ identifier_title }} account email and click the link in the email to proceed.',\n                    { identifier_title }\n                );\n                break;\n            case 'Change_Email':\n                subtitle = localize('Check your email and click the link in the email to proceed.');\n                break;\n            default:\n                subtitle = localize('Please click on the link in the email to reset your password.');\n                break;\n        }\n        return subtitle;\n    };\n\n    const onLiveChatClick = () => {\n        onClose();\n        Chat.open();\n    };\n\n    const live_chat = has_live_chat ? (\n        <Localize\n            i18n_default_text=\"Still didn't get the email? Please contact us via <0>live chat.</0>\"\n            components={[\n                <span className='send-email-template__footer-live-chat' key={0} onClick={onLiveChatClick}>\n                    <Popover\n                        className='send-email-template__footer-live-chat__link'\n                        classNameBubble='help-centre__tooltip'\n                        alignment='top'\n                        message={localize('Live chat')}\n                        zIndex='9999'\n                    />\n                </span>,\n            ]}\n        />\n    ) : null;\n\n    const sent_email_template: ReactElement = (\n        <SendEmailTemplate\n            className='sent-email'\n            subtitle={getSubtitle()}\n            title={localize('We’ve sent you an email')}\n            lbl_no_receive={localize(\"Didn't receive the email?\")}\n            txt_resend={localize('Resend email')}\n            txt_resend_in={localize('Resend email in')}\n            onClickSendEmail={onClickSendEmail}\n            live_chat={live_chat}\n        >\n            {getNoEmailContentStrings().map(item => (\n                <div className='sent-email__content' key={item.key}>\n                    <Icon icon={item.icon} size={32} />\n                    <Text size='xxs' as='p'>\n                        {item.content}\n                    </Text>\n                </div>\n            ))}\n        </SendEmailTemplate>\n    );\n\n    if (!isDesktop && !is_modal_when_mobile) {\n        return (\n            <MobileDialog\n                portal_element_id='modal_root'\n                title={localize('We’ve sent you an email')}\n                wrapper_classname='mt5-email-sent'\n                visible={is_open}\n                onClose={onClose}\n                has_content_scroll\n            >\n                {sent_email_template}\n            </MobileDialog>\n        );\n    }\n\n    return (\n        <Modal\n            className={'sent-email__modal'}\n            is_open={is_open}\n            has_close_icon\n            should_header_stick_body\n            title=''\n            toggleModal={onClose}\n            width='440px'\n        >\n            <Div100vhContainer\n                className='account__scrollbars_container-wrapper'\n                is_disabled={isDesktop}\n                height_offset='80px'\n            >\n                <Modal.Body>\n                    <div\n                        onClick={onClose}\n                        className='send-email-template__close'\n                        data-testid='dt_send_email_template_close'\n                    >\n                        <Icon icon='IcCross' />\n                    </div>\n                    {sent_email_template}\n                </Modal.Body>\n            </Div100vhContainer>\n        </Modal>\n    );\n};\n\nexport default SentEmailModal;\n","import SentEmailModal from './sent-email-modal';\n\nexport default SentEmailModal;\n","import { Localize } from '@deriv-com/translations';\nimport { getBrandWebsiteName, getPlatformSettings } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\n\nconst PlatformDescription = observer(() => {\n    const {\n        traders_hub: { is_eu_user, financial_restricted_countries },\n    } = useStore();\n    const brand_website_name = getBrandWebsiteName();\n    const platform_name_dbot = getPlatformSettings('dbot').name;\n    const platform_name_go = getPlatformSettings('go').name;\n    const platform_name_smarttrader = getPlatformSettings('smarttrader').name;\n    const platform_name_trader = getPlatformSettings('trader').name;\n    const platform_name_ctrader = getPlatformSettings('ctrader').name;\n\n    if (is_eu_user) {\n        return (\n            <Localize\n                i18n_default_text={\n                    'Use your <0>Deriv password</0> to log in to {{brand_website_name}} and {{platform_name_trader}}.'\n                }\n                components={[<strong key={0} />]}\n                values={{\n                    brand_website_name,\n                    platform_name_trader,\n                }}\n            />\n        );\n    } else if (financial_restricted_countries) {\n        return (\n            <Localize\n                i18n_default_text={\n                    'Use your <0>Deriv password</0> to log in to {{brand_website_name}}, {{platform_name_trader}} and {{platform_name_go}}.'\n                }\n                components={[<strong key={0} />]}\n                values={{\n                    brand_website_name,\n                    platform_name_trader,\n                    platform_name_go,\n                }}\n            />\n        );\n    }\n    return (\n        <Localize\n            i18n_default_text={\n                'Use your <0>Deriv password</0> to log in to {{brand_website_name}}, {{platform_name_go}}, {{platform_name_trader}}, {{platform_name_smarttrader}}, {{platform_name_dbot}} and {{platform_name_ctrader}}.'\n            }\n            components={[<strong key={0} />]}\n            values={{\n                brand_website_name,\n                platform_name_trader,\n                platform_name_dbot,\n                platform_name_smarttrader,\n                platform_name_go,\n                platform_name_ctrader,\n            }}\n        />\n    );\n});\n\nexport default PlatformDescription;\n","import { jsx as t } from \"react/jsx-runtime\";\nconst p = ({\n  color: o = \"#d6dadb\",\n  height: d = \"1px\",\n  margin: r,\n  className: i\n}) => /* @__PURE__ */ t(\n  \"div\",\n  {\n    style: { margin: r, backgroundColor: o, height: d },\n    className: i\n  }\n);\nexport {\n  p as Divider\n};\n","import { Text } from '@deriv/components';\nimport {\n    AccountsDerivXIcon,\n    BrandDerivLogoCoralIcon,\n    LegacyEmailIcon,\n    PartnersProductBrandLightDerivMt5LogoIcon,\n} from '@deriv/quill-icons';\n\ntype TEmailPasswordTitleProps = {\n    icon: string;\n    title: string;\n};\n\nconst EmailPasswordTitle = ({ icon, title }: TEmailPasswordTitleProps) => {\n    const displayIcon = {\n        deriv_email: <LegacyEmailIcon iconSize='sm' />,\n        deriv_password: <BrandDerivLogoCoralIcon height={24} width={24} />,\n        deriv_mt5_password: <PartnersProductBrandLightDerivMt5LogoIcon height={24} width={24} />,\n        deriv_x_password: <AccountsDerivXIcon iconSize='sm' />,\n    };\n\n    return (\n        <div className='email-password-title-wrapper'>\n            {displayIcon[icon as keyof typeof displayIcon]}\n            <Text weight='bold' size='xs'>\n                {title}\n            </Text>\n        </div>\n    );\n};\n\nexport default EmailPasswordTitle;\n","import { Fragment } from 'react';\nimport EmailPasswordTitle from './email-password-title';\nimport { Button, Text } from '@deriv/components';\n\ntype TEmailPasswordSection = {\n    title: string;\n    title_icon: string;\n    description: React.ReactNode;\n    should_display_button?: boolean;\n    onClick: () => void;\n    button_text: string;\n    button_icon?: React.ReactNode;\n};\n\nconst EmailPasswordSection = ({\n    title,\n    title_icon,\n    description,\n    should_display_button = true,\n    onClick,\n    button_text,\n    button_icon,\n}: TEmailPasswordSection) => {\n    return (\n        <Fragment>\n            <EmailPasswordTitle icon={title_icon} title={title} />\n            <Text as='p' color='prominent' size='xs'>\n                {description}\n            </Text>\n            {should_display_button && (\n                <Button\n                    className='account__passwords-footer-btn'\n                    type='button'\n                    onClick={onClick}\n                    has_effect\n                    is_disabled={false}\n                    is_loading={false}\n                    text={button_text}\n                    icon={button_icon}\n                    large\n                    secondary\n                />\n            )}\n        </Fragment>\n    );\n};\n\nexport default EmailPasswordSection;\n","import { Fragment, useState } from 'react';\nimport { useVerifyEmail } from '@deriv/api';\nimport { toTitleCase } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { useTranslations } from '@deriv-com/translations';\nimport SentEmailModal from '../../../Components/sent-email-modal';\nimport PlatformDescription from './platform-description';\nimport { Divider } from '@deriv-com/ui';\nimport { SocialAppleBlackIcon, SocialFacebookBrandIcon, SocialGoogleBrandIcon } from '@deriv/quill-icons';\nimport EmailPasswordSection from './email-password-section';\n\n/**\n * Displays a change password button and with instructions on how to change the password.\n * @name DerivPassword\n * @returns {React.ReactNode}\n */\nconst DerivPassword = observer(() => {\n    const { localize } = useTranslations();\n    const {\n        client: { social_identity_provider, is_social_signup, email },\n    } = useStore();\n    const { mutate } = useVerifyEmail();\n\n    const [is_sent_email_modal_open, setIsSentEmailModalOpen] = useState(false);\n\n    const onClickSendEmail = () => {\n        if (social_identity_provider === 'apple') {\n            mutate({ verify_email: email, type: 'request_email' });\n        } else {\n            mutate({ verify_email: email, type: 'reset_password' });\n        }\n        setIsSentEmailModalOpen(true);\n    };\n\n    const getButtonText = () => {\n        if (is_social_signup && social_identity_provider) {\n            return localize('Unlink from {{identifier_title}}', { identifier_title: capitalized_identifier });\n        }\n        return localize('Change password');\n    };\n\n    const getButtonIcon = () => {\n        const Icon = {\n            apple: <SocialAppleBlackIcon iconSize='xs' />,\n            google: <SocialGoogleBrandIcon iconSize='xs' />,\n            facebook: <SocialFacebookBrandIcon iconSize='xs' />,\n        };\n        return is_social_signup && social_identity_provider\n            ? Icon[social_identity_provider as keyof typeof Icon]\n            : null;\n    };\n\n    const capitalized_identifier = social_identity_provider ? toTitleCase(social_identity_provider) : '';\n\n    return (\n        <Fragment>\n            <div className='account__passwords-wrapper'>\n                <Divider className='account__divider' />\n                <EmailPasswordSection\n                    title={localize('Deriv password')}\n                    title_icon='deriv_password'\n                    description={<PlatformDescription />}\n                    onClick={onClickSendEmail}\n                    button_text={getButtonText()}\n                    button_icon={getButtonIcon()}\n                />\n                <SentEmailModal\n                    is_open={is_sent_email_modal_open}\n                    onClose={() => setIsSentEmailModalOpen(false)}\n                    identifier_title={capitalized_identifier}\n                    onClickSendEmail={onClickSendEmail}\n                    is_modal_when_mobile={true}\n                />\n            </div>\n        </Fragment>\n    );\n});\n\nexport default DerivPassword;\n","import UnlinkAccountModal from './unlink-account-modal';\n\nexport default UnlinkAccountModal;\n","import { Button, Modal, Text, Icon } from '@deriv/components';\nimport { Localize, useTranslations } from '@deriv-com/translations';\n\ntype TUnlinkAccountModalProps = {\n    onClose: () => void;\n    is_open: boolean;\n    identifier_title: string;\n    onClickSendEmail: () => void;\n};\n\n/**\n * Modal displayed when user clicks on the 'Change email' button in the account settings page.\n * @name UnlinkAccountModal\n * @param {Function} onClose - function to close the modal\n * @param {boolean} is_open - state to toggle the modal\n * @param {string} identifier_title - title of the identifier (e.g. Google, Facebook)\n * @param {Function} onClickSendEmail - function to send email to user\n * @returns {React.ReactNode} - returns jsx component\n */\nconst UnlinkAccountModal = ({ onClose, is_open, identifier_title, onClickSendEmail }: TUnlinkAccountModalProps) => {\n    const onClickUnlinkButton = () => {\n        onClose();\n        onClickSendEmail();\n    };\n    const { localize } = useTranslations();\n\n    return (\n        <Modal className={'unlink-account__modal'} is_open={is_open} has_close_icon toggleModal={onClose} width='440px'>\n            <Modal.Body>\n                <div onClick={onClose} className='unlink-account__modal-close'>\n                    <Icon icon='IcCross' />\n                </div>\n                <div className='unlink-account__modal-icon'>\n                    <Icon icon='IcEmailChanged' size={128} />\n                </div>\n                <div className='unlink-account__modal-content'>\n                    <Text className='unlink-account__modal-title' weight='bold' size='s'>\n                        <Localize i18n_default_text='Change your login email' />\n                    </Text>\n                    <Text className='unlink-account__modal-description' size='xs'>\n                        <Localize\n                            i18n_default_text=\"To change your email address, you'll first need to unlink your email address from your {{identifier_title}} account.\"\n                            values={{ identifier_title }}\n                        />\n                    </Text>\n                </div>\n            </Modal.Body>\n            <Modal.Footer className='unlink-account__footer'>\n                <Button onClick={onClose} has_effect text={localize('Cancel')} secondary large />\n                <Button onClick={onClickUnlinkButton} has_effect primary large>\n                    <Localize i18n_default_text='Unlink from {{identifier_title}}' values={{ identifier_title }} />\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default UnlinkAccountModal;\n","import { Fragment, useState } from 'react';\nimport { Text } from '@deriv/components';\nimport { useVerifyEmail } from '@deriv/api';\nimport { toTitleCase } from '@deriv/shared';\nimport { observer, useStore } from '@deriv/stores';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport SentEmailModal from '../../../Components/sent-email-modal';\nimport UnlinkAccountModal from '../../../Components/unlink-account-modal';\nimport EmailPasswordSection from './email-password-section';\n\ntype TVerifyEmailPayload = Parameters<ReturnType<typeof useVerifyEmail>['mutate']>[0];\n\n/**\n * Display the user's email address and a button to change it.\n * @name DerivEmail\n * @returns { ReactNode }\n */\nconst DerivEmail = observer(() => {\n    const {\n        common: { is_from_derivgo },\n        client: { social_identity_provider, is_social_signup, email },\n    } = useStore();\n    const { mutate } = useVerifyEmail();\n    const { localize } = useTranslations();\n    const [is_unlink_account_modal_open, setIsUnlinkAccountModalOpen] = useState(false);\n    const [is_send_email_modal_open, setIsSendEmailModalOpen] = useState(false);\n\n    const payload: TVerifyEmailPayload = { verify_email: email, type: 'request_email' };\n\n    const onClickChangeEmail = () => {\n        if (is_social_signup) {\n            setIsUnlinkAccountModalOpen(true);\n        } else {\n            mutate(payload);\n            setIsSendEmailModalOpen(true);\n        }\n    };\n\n    const onClickSendEmail = () => {\n        mutate(payload);\n        setIsUnlinkAccountModalOpen(false);\n        setIsSendEmailModalOpen(true);\n    };\n\n    return (\n        <Fragment>\n            <div className='account__passwords-wrapper'>\n                <EmailPasswordSection\n                    title={localize('Email address')}\n                    title_icon='deriv_email'\n                    description={\n                        <Localize\n                            i18n_default_text='This is the email address associated with your Deriv account. <0>{{ email }}</0>'\n                            components={[<Text key={0} as='span' weight='bold' size='xs' />]}\n                            values={{ email }}\n                        />\n                    }\n                    should_display_button={!is_from_derivgo}\n                    onClick={onClickChangeEmail}\n                    button_text={localize('Change email')}\n                />\n                <UnlinkAccountModal\n                    is_open={is_unlink_account_modal_open}\n                    onClose={() => setIsUnlinkAccountModalOpen(false)}\n                    identifier_title={toTitleCase(social_identity_provider)}\n                    onClickSendEmail={onClickSendEmail}\n                />\n                <SentEmailModal\n                    is_open={is_send_email_modal_open}\n                    onClose={() => setIsSendEmailModalOpen(false)}\n                    identifier_title={'Change_Email'}\n                    onClickSendEmail={() => mutate({ verify_email: email, type: 'request_email' })}\n                    has_live_chat={true}\n                    is_modal_when_mobile={true}\n                />\n            </div>\n        </Fragment>\n    );\n});\n\nexport default DerivEmail;\n","import { Fragment, useState } from 'react';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport SentEmailModal from '../../../Components/sent-email-modal';\nimport { Text } from '@deriv/components';\nimport { useMutation } from '@deriv/api';\nimport { observer, useStore } from '@deriv/stores';\nimport { Divider } from '@deriv-com/ui';\nimport { CFD_PLATFORMS } from '@deriv/shared';\nimport EmailPasswordSection from './email-password-section';\n\nconst DerivMt5Password = observer(() => {\n    const { localize } = useTranslations();\n    const [is_sent_email_modal_open, setIsSentEmailModalOpen] = useState(false);\n    const { mutate } = useMutation('verify_email');\n    const {\n        client: { email },\n    } = useStore();\n\n    const onClickSendEmail = () => {\n        mutate({\n            payload: {\n                verify_email: email,\n                type: 'trading_platform_mt5_password_reset',\n\n                url_parameters: {\n                    redirect_to: 3,\n                },\n            },\n        });\n\n        setIsSentEmailModalOpen(true);\n    };\n\n    return (\n        <Fragment>\n            <div className='account__passwords-wrapper'>\n                <Divider className='account__divider' />\n                <EmailPasswordSection\n                    title={localize('Deriv MT5 password')}\n                    title_icon='deriv_mt5_password'\n                    description={\n                        <Localize\n                            i18n_default_text='Use your <0>Deriv MT5 password</0> to log in to your Deriv MT5 accounts on the desktop, web and mobile apps.'\n                            components={[<Text as='span' weight='bold' key={0} />]}\n                        />\n                    }\n                    onClick={onClickSendEmail}\n                    button_text={localize('Change password')}\n                />\n                <SentEmailModal\n                    is_open={is_sent_email_modal_open}\n                    onClose={() => setIsSentEmailModalOpen(false)}\n                    identifier_title={CFD_PLATFORMS.MT5}\n                    onClickSendEmail={onClickSendEmail}\n                    is_modal_when_mobile={true}\n                />\n            </div>\n        </Fragment>\n    );\n});\n\nexport default DerivMt5Password;\n","import { Fragment, useState } from 'react';\nimport { Localize, useTranslations } from '@deriv-com/translations';\nimport SentEmailModal from '../../../Components/sent-email-modal';\nimport { Text } from '@deriv/components';\nimport { useMutation } from '@deriv/api';\nimport { observer, useStore } from '@deriv/stores';\nimport { CFD_PLATFORMS } from '@deriv/shared';\nimport { Divider } from '@deriv-com/ui';\nimport EmailPasswordSection from './email-password-section';\n\nconst DerivXPassword = observer(() => {\n    const { localize } = useTranslations();\n    const [is_sent_email_modal_open, setIsSentEmailModalOpen] = useState(false);\n    const { mutate } = useMutation('verify_email');\n    const {\n        client: { email },\n    } = useStore();\n\n    const onClickSendEmail = () => {\n        mutate({\n            payload: {\n                verify_email: email,\n                type: 'trading_platform_dxtrade_password_reset',\n\n                url_parameters: {\n                    redirect_to: 3,\n                },\n            },\n        });\n\n        setIsSentEmailModalOpen(true);\n    };\n\n    return (\n        <Fragment>\n            <div className='account__passwords-wrapper'>\n                <Divider className='account__divider' />\n                <EmailPasswordSection\n                    title={localize('Deriv X password')}\n                    title_icon='deriv_x_password'\n                    description={\n                        <Localize\n                            i18n_default_text='Use your <0>Deriv X password</0> to log in to your Deriv X accounts on the web and mobile apps.'\n                            components={[<Text as='span' weight='bold' key={0} />]}\n                        />\n                    }\n                    onClick={onClickSendEmail}\n                    button_text={localize('Change password')}\n                />\n                <SentEmailModal\n                    is_open={is_sent_email_modal_open}\n                    onClose={() => setIsSentEmailModalOpen(false)}\n                    identifier_title={CFD_PLATFORMS.DXTRADE}\n                    onClickSendEmail={onClickSendEmail}\n                    is_modal_when_mobile={true}\n                />\n            </div>\n        </Fragment>\n    );\n});\n\nexport default DerivXPassword;\n","import Passwords from './passwords';\n\nexport default Passwords;\n","import { useState, useEffect } from 'react';\nimport { Loading } from '@deriv/components';\nimport { observer, useStore } from '@deriv/stores';\nimport DerivPassword from './deriv-password';\nimport DerivEmail from './deriv-email';\nimport DerivMt5Password from './deriv-mt5-password';\nimport DerivXPassword from './deriv-x-password';\n\n/**\n *  Displays the Email, Password, section under Account settings.\n * @name Passwords\n * @returns {ReactNode}\n */\nconst Passwords = observer(() => {\n    const { client, common } = useStore();\n    const {\n        is_populating_mt5_account_list,\n        is_populating_dxtrade_account_list,\n        is_social_signup,\n        mt5_login_list,\n        is_mt5_password_not_set,\n        dxtrade_accounts_list,\n        is_dxtrade_password_not_set,\n    } = client;\n    const { is_from_derivgo } = common;\n\n    const [is_loading, setIsLoading] = useState(true);\n    const has_mt5_accounts = mt5_login_list?.length > 0 || !is_mt5_password_not_set;\n    const has_dxtrade_accounts = dxtrade_accounts_list?.length > 0 || !is_dxtrade_password_not_set;\n\n    useEffect(() => {\n        if (\n            is_populating_mt5_account_list === false &&\n            is_populating_dxtrade_account_list === false &&\n            is_social_signup !== undefined\n        ) {\n            setIsLoading(false);\n        }\n    }, [is_populating_mt5_account_list, is_populating_dxtrade_account_list, is_social_signup]);\n\n    if (is_loading) {\n        return <Loading is_fullscreen={false} />;\n    }\n\n    return (\n        <div className='account__passwords'>\n            <DerivEmail />\n            <DerivPassword />\n            {!is_from_derivgo && has_mt5_accounts && <DerivMt5Password />}\n            {!is_from_derivgo && has_dxtrade_accounts && <DerivXPassword />}\n        </div>\n    );\n});\n\nexport default Passwords;\n"],"names":["_ref","identifier_title","is_modal_when_mobile","is_open","has_live_chat","onClickSendEmail","onClose","isDesktop","useDevice","localize","useTranslations","live_chat","_jsx","Localize","i18n_default_text","components","className","onClick","onLiveChatClick","Chat","open","children","Popover","classNameBubble","alignment","message","zIndex","sent_email_template","SendEmailTemplate","subtitle","getSubtitle","CFD_PLATFORMS","DXTRADE","values","platform_name_dxtrade","getPlatformSettings","name","MT5","title","lbl_no_receive","txt_resend","txt_resend_in","key","icon","content","map","item","_jsxs","Icon","size","Text","as","Modal","has_close_icon","should_header_stick_body","toggleModal","width","Div100vhContainer","is_disabled","height_offset","Body","MobileDialog","portal_element_id","wrapper_classname","visible","has_content_scroll","observer","traders_hub","is_eu_user","financial_restricted_countries","useStore","brand_website_name","getBrandWebsiteName","platform_name_dbot","platform_name_go","platform_name_smarttrader","platform_name_trader","platform_name_ctrader","p","color","o","height","d","margin","r","i","style","backgroundColor","displayIcon","deriv_email","LegacyEmailIcon","iconSize","deriv_password","BrandDerivLogoCoralIcon","deriv_mt5_password","PartnersProductBrandLightDerivMt5LogoIcon","deriv_x_password","AccountsDerivXIcon","weight","title_icon","description","should_display_button","button_text","button_icon","Fragment","EmailPasswordTitle","Button","type","has_effect","is_loading","text","large","secondary","client","social_identity_provider","is_social_signup","email","mutate","useVerifyEmail","is_sent_email_modal_open","setIsSentEmailModalOpen","useState","verify_email","capitalized_identifier","toTitleCase","Divider","EmailPasswordSection","PlatformDescription","getButtonIcon","apple","SocialAppleBlackIcon","google","SocialGoogleBrandIcon","facebook","SocialFacebookBrandIcon","SentEmailModal","Footer","onClickUnlinkButton","primary","common","is_from_derivgo","is_unlink_account_modal_open","setIsUnlinkAccountModalOpen","is_send_email_modal_open","setIsSendEmailModalOpen","payload","onClickChangeEmail","UnlinkAccountModal","useMutation","url_parameters","redirect_to","is_populating_mt5_account_list","is_populating_dxtrade_account_list","mt5_login_list","is_mt5_password_not_set","dxtrade_accounts_list","is_dxtrade_password_not_set","setIsLoading","has_mt5_accounts","length","has_dxtrade_accounts","useEffect","undefined","Loading","is_fullscreen","DerivEmail","DerivPassword","DerivMt5Password","DerivXPassword"],"sourceRoot":""}